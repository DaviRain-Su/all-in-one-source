export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nodejs该教程最近升级到了第二版，跟进了Rust 2018，适合前端人员学习。反过来，懂Rust的，是不是也可以借此教程了解下Node呢？rust-for-node-developershttps://github.com/Mercateo/rust-for-node-developers" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为Node开发者准备的Rust教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#torrents #actix基于Rust, ripgrep, Actix, Inferno, 和 Typescript实现。torrents.csvhttps://gitlab.com/dessalines/torrents.csv" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "torrents.csv: bt种子存储服务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新版本支持Rust 2018。（可以看到社区的crate陆续在升级到Rust 2018了）该库提供了一个过程宏，可以方便开发者为自己的结构体支持按字段初始化的builder方法。typed-builderhttps://github.com/idanarye/rust-typed-builder" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "typed-builder 0.2发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#zeromq #tokio作者刚发布了0.1版本\nRead More\ntmp\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TMQ: ZeroMQ的Tokio绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#stm32本篇博文介绍了如何基于STM32平台，使用Rust让LED灯闪烁。（顺便求一本二手的《嵌入式系统：硬件、软件及软硬件协同》，谁有闲置可以联系我。）Read Morehttps://jonathanklimt.de/electrics/programming/rust-STM32F103-blink/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」让LED开始闪烁" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#iot #epaper该文简单记录了作者用Rust实现电子纸名片的相关内容，并且还有源码。帅！\nRead More\nlinux-conf-au-2019-epaper-badge\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」用Rust实现电子纸名片" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#flutter让Dark和Rust一起玩耍。flutter-rshttps://github.com/gliheng/flutter-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "flutter-rs: Flutter桌面运行器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gameRead Morehttps://agmprojects.com/blog/packaging-a-game-for-windows-mac-and-linux-with-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust进行跨平台游戏打包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustweeklyRust Weekly除了每周的博客和新闻和日报有所重复之外，也有另外的看点值得关注。\nCrate of the Week： 推荐每周的明星crate\nCall for Participation： 推荐一些可以开源做贡献的issues\nUpdates from Rust Core： 关于Rust Core的一些更新动态\nApproved RFCs： 本周审核通过的一些RFC列表\nRead Morehttps://this-week-in-rust.org/blog/2019/02/05/this-week-in-rust-272/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Weekly 看点介绍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustcrustc引入mir已经有近三个年头了，虽然对Rust代码有了很好的优化工作，但实际上还有很多优化工作没有完成。在即将举办的2019 All Hands会议上，mir的优化将成为一个重要议题。Read Morehttps://kazlauskas.me/entries/the-road-to-bestest-optimiser.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustc：向更好的优化器迈进" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#apache #datafusion #arrowDatafusion是一个Rust-Native的查询引擎，现在被用于Apache Arrow中。Read Morehttp://arrow.apache.org/blog/2019/02/04/datafusion-donation/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Datafusion捐赠给了Apache Arrow" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#swift5之前该功能只支持Debug，现在支持Release。这篇文章中阐述了此功能对Swift内存安全和性能策略的重要性。这其中inout功能明显受到Rust中可变借用的启发。这是Swift引入所有权机制的基础，在Swift的所有权宣言文档中看到，Swift的共享值概念和Rust里的不可变借用是相似的。想到现在Swift又被苹果申请了专利，后续会对Rust有什么影响？还未可知。\nRead More\n所有权宣言\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Swift 5 Release版支持独占访问内存检查" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#filesystem该库作者是Google员工，他利用Google 20%的自由时间来实现该项目。这是一个FUSE（用户态）文件系统，最初用Go实现，但是性能上无法满足，作者又学习了一年Rust之后，将其用Rust重新实现。当然还有一部分Go代码。而且作者说，在用Rust实现的过程中，发现了之前Go实现代码中的一堆并发错误。新的Rust版本比Go版本至少在最初的测试上是更快一些。\nRead More\nsandboxfs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sandboxfs 0.1.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jobsNEAR是一个智能合约和区块链平台，要求至少有Rust和Tokio的经验。可能无法Remote。Read Morehttps://nearprotocol.com/careers/?gh_jid=4205573002" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「招聘」NEAR寻找Rust P2P网络工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#kv_storepickledb-rshttps://github.com/seladb/pickledb-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pickledb-rs: 轻量级简单KV存储 0.3发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cross_compile支持的是Raspberry Pi Zero。作者认为Rust非常适合该版本的树莓派。所以制作了这个docker镜像。rust_armv6https://hub.docker.com/r/mdirkse/rust_armv6" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」可用于Rust和树莓派交叉编译的Docker镜像" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#alloc #profile该项目号称是对qadapt（另一个类似的工具，提供了debug_assert!宏）的重新设计。\nRead More\nqadapt\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-06 12:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "alloc-counter: 一个内存分配分析工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust日报祝大家新的一年诸事六六六" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#trpl #rustbook真是有心人trpl-redirecthttps://github.com/srishanbhattarai/trpl-redirect" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "浏览器插件：用于自动定向Rust Book的过期链接" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#blogos社区朋友 @洛佳 出品\nRead More\n合集地址\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Blog OS系列文章中文翻译」使用Rust创造操作系统（一）：独立式可执行程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#flamegraph本次视频，依然是5个多小时。Read Morehttps://www.youtube.com/watch?v=Qy1tQesXc7k" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」将火焰图移植到Rust Part 2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#hack作者在文章中分享了他总结的Rust的一些奇技淫巧。值得看看。\nRead More\nReddit 相关讨论\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「私人分享」Rust奇技淫巧" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#calculus #math新库HorseShoehttps://github.com/YakoYakoYokuYoku/HorseShoe" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "HorseShoe：Rust实现的积分库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#haskell #webReddit 讨论贴https://www.reddit.com/r/rust/comments/an11l9/webdevelopement_rust_vs_haskell/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」Web开发: Rust vs Haskell" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm日报之前介绍过第一篇文章：WebAssembly算不上一个栈虚拟机 Part Ihttp://troubles.md/posts/wasm-is-not-a-stack-machine/下面是后两篇。\nPart 2\nPart 2\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」WebAssembly的麻烦" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#neovimRead Morehttps://medium.com/@srishanbhattarai/a-detailed-guide-to-writing-your-first-neovim-plugin-in-rust-a81604c606b1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust写一个Neovim插件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#AoCThe Advent of Code是Eric Wastl组织每年在圣诞节举办的一项编程竞赛。作者在这篇文章里，介绍了自己通过AoC来学习Rust的过程。Read Morehttps://www.forrestthewoods.com/blog/learning-rust-via-advent-of-code/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "通过Advent of Code学习Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Voikkovoikko-rshttps://github.com/ronjakoi/voikko-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Voikko库的Rust绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#asyncOsaka.rs相当于面向嵌入式设备的Tokio。作者在博文中介绍了Osaka的来龙去脉。\nRead More\nosaka\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」osaka.rs: 构建嵌入式异步生态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nphysicsRead Morehttps://www.patreon.com/posts/24466961" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nphysics 0.10发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sentry #error_reportsentry-processhttps://gitlab.com/dsferruzza/sentry-process" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sentry-process: 用于给Sentry报告失败的进程或脚本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gfx #game基于gfx-hal实现的WebGPU实现。wgpuhttps://github.com/gfx-rs/wgpu\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-05 13:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gfx-rs出品的WebGPU实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job #discordDiscord游戏商店大量使用了Rust，它们现在开始招Rust工程师，来做一个顶级保密的新项目。没有看到支持远程。招聘页面https://discordapp.com/jobs/4200751002" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-03 11:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Discord 招聘Rust工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #ci将在下周柏林举行的Rust All Hands会议上讨论更换到哪个CI平台上面。文章里还罗列了Rust基础设施团队在Travis CI碰到的诸多问题，感兴趣可以看看。Read Morehttps://internals.rust-lang.org/t/which-ci-platform-should-rust-use/9322" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-03 11:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust基础设施团队正在考虑停止使用Travis CI" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargoCargo负责人nrc发文\n2019年：交叉编译，包括wasm和embeddded / 改进cargo，让插件更易编写\n2020：将Cargo嵌入到构建系统和IDE中。\n2021：为最终用户定制工作流程。\nRead Morehttps://www.ncameron.org/blog/cargos-next-few-years/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-03 11:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Cargo的长期计划" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#concurrency无畏（fearless）并发难道已经过时了？现在是要流行无悔（regretless）并发了吗？作者认为，无畏并发并不意味着「没有后悔」的时候。作者在本文中主要探讨了event-loop并发建模的诸多好处，并且如何利用Rust多线程来进行event-loop建模。Read Morehttps://medium.com/@polyglot_factotum/rust-regret-less-concurrency-2238b9e53333" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-03 11:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust「无悔」并发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#hex该库使用了SIMD加速，使用时注意当前平台是否支持相关指令。faster-hexhttps://github.com/nervosnetwork/faster-hex\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-03 11:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "faster-hex： 快速16进制编码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job要求全栈Web工程师，懂Rust。主要工作应该是后端API设计。可远程\n公司招聘页面\nReddit讨论页\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「远程工作」丹麦Impero的一家正规公司招全栈Web Rust工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#redux #no_std且支持no_stdredux-rshttps://github.com/redux-rs/redux-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现Redux" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#fluentProjectFluent是一个本地化（L18N）框架，fluent-rs是Rust实现。\nRead More\nfluent-rs\nFluent Project Wiki介绍\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Fluent-rs 0.5发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mailRead Morehttps://blog.1aim.com/post/003-mail-2-crate/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」用Rust实现邮件收发 Part 2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#derive_more现在支持no_std环境derive_morehttps://github.com/JelteF/derive_more" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "derive_more  发布0.14版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#holtek #usb #monitorsHoltek CO₂ USB显示器的驱动程序co2monhttps://github.com/lnicola/co2mon" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」Rust实现的显示器驱动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#snapshot一个Rust的快照测试库，给第一次跑测试的结果生成一个快照，后面就可以用这个快照来保证代码不会被破坏。instahttps://github.com/mitsuhiko/insta" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "insta: snapshot测试库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#androidRead Morehttps://brunodmt.github.io/rust/2018/11/03/android-virtual-input-with-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用rust和uinput创建Android虚拟输入设备" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aws #severlessRead Morehttps://versbinarii.gitlab.io/blog/posts/serverless-app-deployment-aws/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用AWS和Rust进行Serverless App开发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#log可以自动生成log输出， 记录函数调用，可方便调试代码。log-derivehttps://github.com/elichai/log-derive" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "log-derive: 方便加log的宏工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#waylandWayland是一个协议定义了如何与内核通讯、如何与Client通讯等，Linux桌面X Client/X server的替代者wayland-rshttps://github.com/Smithay/wayland-rs/releases/tag/v0.22.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wayland-rs: 发布0.22版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm本文作者指出了当前WebAssembly设计的缺陷，表面是一个栈虚拟机，但实际上在编译层面是一个性能不算好的（liveless，对变量没有活跃期分析，而导致重复计算）寄存器式虚拟机，只是在最后才表现的像一个栈虚拟机。这个缺陷是来自于之前的设计规范是基于进一步简化asm.js而导致的历史原因。所以现在出现wasmtime这样的流式WebAssembly编译器来解决这种问题。作者在后续还会写几篇关于WebAssembly问题的文章。Read Morehttp://troubles.md/posts/wasm-is-not-a-stack-machine/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」WebAssembly算不上一个栈虚拟机 Part I" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#format这是一个GitHub Action，支持对多种语言的软件的代码进行自动格式化。支持Rustfmt和Clippy。actionshttps://github.com/bltavares/actions" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GitHub Actions: 自动format代码格式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #code_organize我个人是一个代码组织的实践就是：组件化。这也是Rust所倡导的。在单个组件之内，进行模块化，分清层次结构。讨论中，也有喜欢扁平化的结构，这样方便测试，直到找到足够的理由再分拆单个组件包。大家有什么分享的？Reddit 讨论贴https://www.reddit.com/r/rust/comments/alsph9/rusts_modules_and_project_organization_best/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」你认为Rust代码组织有哪些最佳实践或陷阱？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust我也同意，Rust的代码可读性很好，读代码比写代码更容易。并且还可以总结出一些高效阅读代码的技巧，这完全得益于Rust的高度一致性。讨论中提到了Cpp、Python、JS等其他语言的可读性探讨。这种争论应该还算可以接受，感兴趣可以关注下。Reddit 讨论贴https://www.reddit.com/r/rust/comments/aloxsz/reading_rust_should_be_easier_than_writing_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」读Rust代码比写Rust代码更容易" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#node #ffi本文探讨了如何在Node和Rust之间传递数组、结构体等数据，以及如何使用回调。对于学习FFI也是一个好的案例。Read Morehttps://versbinarii.gitlab.io/blog/posts/node-rust-ffi-exchanging-data/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "FFI：在Node和Rust之间交换数据" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#haskellslice-group-byhttps://github.com/Kerollmops/slice-group-by" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust实现Haskell中的group_by" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#uuidshorter-uuid-rshttps://github.com/seigert/shorter-uuid-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "更短的UUID实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#number包含了大数和散列操作。rust-numexthttps://github.com/cryptape/rust-numext\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-01 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-numext: 扩展Rust的内建数字类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "想要的朋友，可以联系我。感兴趣可发我邮件，地址: 247026628 at qq.com。注明你想要哪种周边，目前还清楚价格，只是收集意愿，达到一定数量才会开启订制。等年后，再宣布具体的款式和价格，图案都会订制成Rust相关，但质量会和它一样的。一： 棒球帽二： 书签" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Rust周边」订制活动预报" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#iOS该文章介绍了如何使用Rust开发iOS应用，里面也有一份Rust on Android的文章链接。Read Morehttps://medium.com/visly/rust-on-ios-39f799b3c1dd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何用Rust开发iOS应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #wasm之前介绍过，基于Rust实现的2D回合制游戏zemeroth，现在支持wasm\nitch.io在线玩\nzemeroth\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tactical： wasm游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#log #dbg #debugRead Morehttps://github.com/rust-lang-nursery/log/pull/317" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RFC：为log增加dbg!风格的宏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#linux #webserver通过cargo-deb，将你的web项目生成.deb文件，并配合systemd和配置文件，就可以把tide、actix-web或rocket等项目，变成像nginx那样的“Linux App”。就可以通过系统命令来启动你的服务。Read Morehttps://gill.net.in/posts/creating-web-server-deb-binary-with-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用systemd、配置文件和.deb二进制构建Linux Web服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#openid #oauth2该文作者介绍了OOProxy库，支持OpenID和OAuth2。Read Morehttps://medium.com/hal24k-techblog/announcing-ooproxy-b041bab2bc85" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "OOProxy: OpenID代理库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#dnsdomainhttps://github.com/NLnetLabs/domain\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-31 12:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Domain: 一个DNS库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#niko #rustNiko介绍了他的新库：salsa。该库是将rustc中的增量式重新编译技术提出来变成一个通用的框架。Salsa现在已经被用在了一些项目中，比如rust-analyzer。但rustc本身并没有使用该库。Niko还录制了两个使用Salsa的视频教程。Read Morehttp://smallcultfollowing.com/babysteps/blog/2019/01/29/salsa-incremental-recompilation/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-30 12:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Salsa: 增量式重新编译" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#swift该文作者阐述了对Apple为Swift语言申请专利的担忧。该专利覆盖了Swift语言的整体理念。比如：该语言在某些领域提供C语言兼容性的功能，以提高用该语言编写的软件的固有安全性。新语言包括默认安全注意事项，例如边界和溢出检查。大家如何看待？不知道会对Rust带来何种影响。\nRead More\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-30 12:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Apple为Swift语言申请了专利" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#crossbeam文章从介绍Crossbeam开始，先后罗列了从Crossbeam库从2015走到2018期间经历的变化，并展望了接下来重点要完成的工作：\nAtomicReference\nConcurrentHashMap\n增加这两个并发数据结构的支持。另外还有一些优先级较低的零碎工作。Read Morehttps://stjepang.github.io/2019/01/29/lock-free-rust-crossbeam-in-2019.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-30 12:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Crossbeam 2019: 无锁Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mail作者将通过三篇文章来讲解如何用Rust编写邮件发送的代码。Read Morehttps://blog.1aim.com/post/002-mail-1-intro/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-30 12:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」Rust如何发送邮件 1/3" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game作者用Rust参加了一次游戏比赛。\n比赛官网globalgamejam.org\n代码：ggj19\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-30 12:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust参加游戏比赛" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wmi #windowswmihttps://ohadravid.github.io/wmi-rs/docs/wmi/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-30 12:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wmi-rs: Windows WMI API的Rust绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm #2019 #roadmap当前，Roadmap已经提交PR，但未合并。可以先关注。总的来说，目标就是从「可用」到「稳定」：\n通过模块化的工具来继续培养rust wasm的生态系统\n为Rust生成的wasm带来多线程支持\n在工具链中集成最佳的调试工具\n打磨工具链和发布流程，直到wasm-pack发布1.0版\nRead Morehttps://github.com/fitzgen/rfcs-1/blob/2019-roadmap/text/000-2019-roadmap.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rustwasm 2019 Roadmap" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#benchmark该作者制作了一个Ruby脚本，包括了多种语言的基准测试（C，C ++，Rust，Go，Java和C＃，但可以添加更多），重新标准化了平均值。得出的结论是：Rust在基准测试游戏中的表现优于C++ 3％，比C慢4％。Read Morehttps://www.reddit.com/r/rust/comments/akluxx/rust_now_on_average_outperforms_c_in_the/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "另一个性能测试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#blogos这是继上篇内存分页介绍之后，进一步介绍操作系统内核如何访问物理页的技术，通过这种技术可以实现虚拟地址到物理地址的转化，以及如何在页表内创建映射。Read Morehttps://os.phil-opp.com/advanced-paging/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Blog OS系列： 高级分页" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#match该文作者在研究生物信息学(bioinformatics)算法的过程中，发现将Rust的match改成表查找，算法的性能得到了很大的提升。参见https://github.com/luizirber/nthash/pull/2将下面的match代码：修改为：并且使用了lazy_static。作者好奇，为什么编译器没有为match表达式生成最佳代码。于是他开始了一系列的测试和挖掘，从生成的汇编到LLVM都进行了一番考究。Read Morehttps://kevinlynagh.com/notes/match-vs-lookup/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「长文」Rust性能：match vs 表查找" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sgx #openssl\nmesalink\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "MesaLink 0.8.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gnome重构后的项目叫Shortwave\nShortwave\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GNome中的流媒体广播应用Gradio将用Rust重构" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cpp这篇文章和Rust没关系，但是可以看看CPP的现状。长文，但是作者总结了两个观点：\n要么，你什么都不要做。也就是说，你可以继续使用Cpp，但不要用它的任何新功能。继续用C++98。但这不是一个长期的解决方案。\n要么，参与到Cpp的变革中。来参见CppCon，来参与Cpp委员会的讨论和议程，发出你的声音。\n其实还有第三个选择：看看Rust。（作者并没有说）Read Morehttp://www.elbeno.com/blog/?p=1598" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "现代C++和游戏开发的一些思考" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#closure作者总结了Rust闭包中的一些规则，可以看看。Read Morehttps://medium.com/@earthengine/rust-closures-secret-life-70d2394c5827" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust闭包的秘密" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli #websocketwebsocathttps://github.com/vi/websocat" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "websocat: 命令行webscoket客户端工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#flamegraphs上次介绍过油管开直播视频讲如何移植火焰图工具那位作者的库\ninferno\nflamegraphs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "inferno: 火焰图工具移植为Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#web这个GitHub项目汇集了Rust各种web框架的相关资料，包括Rust实现的前端WASM框架、Websocket、Template等项目。还包括了很多博客、项目demo等学习资源。相当全面了。rust-web-framework-comparisonhttps://github.com/flosse/rust-web-framework-comparison\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-29 13:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust web框架比拼" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#benchmark在以下几个算法测试项目中，Rust都战胜了其他语言，排行上升到了第一\nN-Body\nspectral-norm\nreverse-complement\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust在基准测试排行榜中上升到了第一" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded #keyboard #futures作者在实现一个模块化机械键盘的项目，在这个过程中，实现了一个可用于嵌入式的Future exector。为什么要自己实现？因为发现现在的嵌入式生态并不能满足他的需求。\n项目Read More\nstm32f103xx-futures\n博文\nembedded-executor\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」构建支持嵌入式系统的Future Executor" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#stm32 #embededRead Morehttps://nercury.github.io/rust/embedded/experiments/2019/01/27/rust-embedded-02-measuring-the-clock.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」实验：STM32 MCU 性能如何？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#signal #windowswintrap-rshttps://github.com/elizagamedev/wintrap-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wintrap-rs: Windows的异步进程信号处理库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Natural #yew #wasm基于Rust和Wasm实现。可以检测语言属于哪国语言。whatlang-rs在线demohttps://github.com/greyblake/whatlang-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "whatlang-rs: Rust实现的自然语言检测库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cpp有人好奇，Cpp的异步故事是怎么样的呢？于是就有了这个讨论贴。CPP的Coroutine TS将在Cpp 20中，会在下个月进行最终的投票。但也有人认为这个API不是很好。详情看帖子吧。Read Morehttps://www.reddit.com/r/rust/comments/ajwoiw/how_is_the_async_story_in_rust_compared_to_c/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」C++ vs Rust异步故事" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ui #Piston是属于Piston项目中的跨平台UI Weight库rust-pushrodhttps://www.github.com/KenSuenobu/rust-pushrod/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pushrod： Rust的UI库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#grpc #tikvTiKV负责人siddontang写的一篇文章。TiKV团队之前自己实现了一个grpc库，但问题是该库。不是纯Rust实现，在生产环境中遇到了一些panic，所以想彻底拥抱Rust社区，使用纯Rust的库。但是又不想发明轮子。所以从grpc-rust和tower-grpc中选择了tower-grpc。tower-grpc并不稳定，但是它的好处也是比较明显的。比如作者是非常活跃且知名的，基于tokio等。Read Morehttps://medium.com/@siddontang/use-tower-grpc-for-tikv-6109cf8c61" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在TiKV中使用tower-grpc" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm #webgl作者在油管做了一系列的直播，这个视频是这些直播的合集，所以比较长，大约3小时多。\nRead More\n相关代码： pure3d\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」直播合集：构建WebAssembly/WebGL渲染器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jobs有人在GitHub上专门建立了一个帐号，建立了四个仓库：C/Cpp/Rust/Swift，用于收集世界各地用这四个语言的系统工程师招聘职位信息。是一个新库，暂时没有任何信息，但可以关注下，没准火了呢？systems-programming-jobshttps://github.com/systems-programming-jobs\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-28 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "系统工程师工作GitHub仓库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sql目前支持Oracle, MySQL, PostgreSQL, SqlServer, sqlite等关系数据库。作者 来自于国内Rust社区成员 @ng作者说：n自然是numbers of的意思，目标是尽量覆盖所有数据库，主要目标是在查询上面，nosql后面再扩展吧。n-sqlhttps://github.com/mokeyish/n-sql" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-26 13:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "n-sql: Sql解析/优化/生成器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jobPrevoty是一家网络安全公司，提供运行时监控和保护程序。Prevoty正在寻找一位才华横溢（Talented）的高级软件工程师加入他们的团队。位位于洛杉矶。有竞争力的福利包括股权，综合健康福利，401K薪水。Read Morehttps://www.prevoty.com/about/careers?gh_jid=4032159002" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-26 13:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Job」Prevoty寻找高级C/CPP/Rust工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#manga #cartoon作者是来自国内Rust社区的 @绅士喵manga-rshttps://github.com/Hentioe/manga-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-26 13:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小工具」将漫画导出为PDF/EPub/mobi" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tokio #tls #asyncio本文是该系列的第六篇文章。Read Morehttps://ayende.com/blog/185825-A/using-tls-in-rust-getting-async-i-o-with-tokio-second-try" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-26 13:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」在Rust中使用TLS 之 用Tokio处理异步IO 第二次尝试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#haskell论文《A Play on Regular Expressions》中使用Haskell实现了连续八个强大的正则表达式引擎，同时使用来自集合理论的数学结构的GADT表示来实现从解析结果中提取数据，称为半环。作者昨天用Haskell实现了前两个引擎，今天将第一个版本移植到Rust。\nReddit 讨论\n代码（包括论文地址）\n---\b" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-26 13:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小项目」将论文中的Haskell示例移植为Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cpp #undergrads这个项目去年2月份介绍过，今天看到它上了GitHub趋势榜。Rust-for-undergradshttps://github.com/rustindia/Rust-for-undergrads\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-26 13:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust-for-undergrads： 一个鼓励大学生将C/C++问题重新用Rust实现的项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmwasmer-runtime库提供了易于使用的安全API，用于帮助开发者在自己的库中调用WebAssembly。Read Morehttps://medium.com/wasmer/executing-webassembly-in-your-rust-application-d5cd32e8ce46" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Rust应用中嵌入Webassembly" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sourcegraph #rls #rust_anagler代码搜索和智能托管服务Sourcegraph宣布移除对Rust的支持，原因是RLS现在还不够完善。因为性能的关系，Sourcegraph需要等待RLS的初始化时间（编译整个项目，需要几分钟）得到改善，或者就是可以希望Rust-analyzer能替换掉RLS（可能需要等几年），然后才考虑支持Rust。Sourcegraph对初始化时间非常敏感。Read Morehttps://github.com/sourcegraph/sourcegraph/issues/7" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sourcegraph移除了对Rust的支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aws #lambda使用亚马逊Lambda服务的可以看看。Read More　　　　　　　　　　　　　　　　　　https://medium.com/@itsHabib/going-serverless-with-rust-and-api-gateway-aa5d1502c32e" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust和API网关实现Severless" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#json #warmywarmy是一个Rust编写的可实现热加载/重载的库： warmyhttps://github.com/phaazon/warmy支持同步和异步加载介绍http://phaazon.net/blog/asynchronous_warmy_prequelRead Morehttps://phaazon.net/blog/warmy-universal-json" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "warmy 0.11.1中支持通用JSON" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#debug #lldb #gdb #dwarf #future内容比较系统，囊括了GDB/LLDB/DWARF/trait对象/Future等相关的Debug内容。Read Morehttps://www.youtube.com/watch?v=elBxMRSNYr4&list=PL85XCvVPmGQhOL-J2Ng7qlPvDVOwYpGTN" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「油管视频」讨论Rust的Debug" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gothan #nodejs使用的是Gotham框架。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust替换Nodejs，换来20倍性能的提升" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macro #plugindtolnay的新库，大佬这么高产，一天一个库。inventoryhttps://github.com/dtolnay/inventory\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-25 11:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "inventory: 提供分布式插件注册表机制" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "读者答疑精选：对书中值语义、引用语义、栈拷贝、按位复制等概念的澄清https://zhuanlan.zhihu.com/p/55572688随书源码仓库新增了「精选」Label，涉及比较重要的勘误内容，大家看书的时候可以了解了解。Issueshttps://github.com/ZhangHanDong/tao-of-rust-codes/issues?q=is%3Aopen+is%3Aissue+label%3A%E7%B2%BE%E9%80%89" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "《Rust编程之道》相关内容两则" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#traitobject #serdeDtolnay大佬这么高产，又开了一个新库，是将trait对象无痛地序列化和反序列化。typetaghttps://github.com/dtolnay/typetag" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "typetag: 序列化/反序列化trait对象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#benchmarksRust 1.32中完全移除了jemalloc，所以有人想看看，1.32到底性能如何？这次性能测试是基于Rust vs Cpp Benchmarks Game来做的。https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/rust-gpp.html结果：目测1.32略胜一筹？Read Morehttps://www.reddit.com/r/rust/comments/aj2pwx/comparison_of_rust_131_vs_132_in_the_benchmarks/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.31 vs Rust 1.32 基准性能测试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#asyncRead Morehttps://www.youtube.com/watch?v=j0SIcN-Y-LA&feature=youtu.be&list=PLEx5khR4g7PIzxn476GK3Mkk19csZZjeH" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「演讲视频」Goto 2018大会视频：2018年的Rust异步编程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mozilla官方博客文章，总结了Rust中内存安全特性，也是对Rust的一次官方宣传吧。Read Morehttps://hacks.mozilla.org/2019/01/fearless-security-memory-safety/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官宣」无畏安全之内存安全" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#actixActix的作者fafhrd91就是在Azure IoT团队中。Read Morehttps://www.reddit.com/r/rust/comments/aj3fi7/azure_iot_device_streams_built_with_actix/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「宣传向」微软的 Azure IoT Hub设备流服务使用Actix实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#shell #climnemonic(助记符)是一个小的Cli应用，目的是帮助开发者记忆那些难记的shell命令。mnemonichttps://github.com/codesections/mnemonic" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "mnemonic: 帮助你记忆各种终端命令的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ggez #gameggez是一个轻量级游戏框架。作者在博文中阐述了他当下的状态：因为身体原因，辞去了之前的工作，迫于生活ggez无法高效地持续开发，目前他在寻求一份合适的工作和捐赠。（生活不只梦和远方，还有眼前的苟且）无论如何，ggez 0.5版本发布了，并且计划在增加Webassmbly和移动端支持之后，再发布1.0。Read Morehttps://wiki.alopex.li/TheStateOfGGEZ2019" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ggez 2019状态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#locklessRead More(包括源码)https://github.com/krl/appendix/blob/master/description/writing.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust对磁盘的kv存储进行无锁读取" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#test这个库有点意思。readme-doctest-pochttps://github.com/abonander/readme-doctest-poc" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "自动测试项目Readme中的代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#vmLittle Computer 3或LC-3是一种计算机教育编程语言，一种汇编语言，是一种低级编程语言。它具有相对简单的指令集，但可用于编写中等复杂的汇编程序，并且是C编译器理论上可行的目标。该语言不如x86程序集复杂，但具有许多类似于更复杂语言的功能。这些功能使其对于开始教学非常有用，因此它最常用于向计算机科学和计算机工程专业的学生讲授编程和计算机体系结构的基础知识。想写自己VM的可以跟着学习。相关系列文章：Write your Own Virtual Machinehttps://justinmeiners.github.io/lc3-vm/index.html#1:12Read Morehttps://github.com/KuldeepSinh/lc3_vm" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现LC3虚拟机" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#deref #derivederefablehttps://github.com/1aim/derefable\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-24 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "derefable: 自动实现Deref/DerefMut" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quic #http3cloudflare公司开源了他们用Rust实现的QUIC协议库，可以和C/C++及其他语言方便集成。可以用它方便构建QUIC Server。但目前还不是很成熟，可以先关注。\nRead More\nquiche\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "请享受QUIC和Rust吧！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#awesome #requestforimplSerde作者dtolnay在GitHub上发起了一个列表，旨在让人们提交那些「本应该存在但还不存在」的库，请求实现它。“实现请求”列表适用于那些已经进行了明确、清晰、成熟的大部分设计工作的想法，它应该准备好可以让参与者直接开始编写代码。request-for-implementationhttps://github.com/dtolnay/request-for-implementation" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "“实现请求”列表" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#poloniusNiko在这篇博文里探讨了Polonius目前的不足。为了解决高阶子类型和trait匹配的问题，需要寻求更丰富的约束概念（存在量词等）。 这篇太学术。不过，Polonius是Niko受面向逻辑编程语言prolog的启发而实现，这里面的术语Hereditary Harrop就是来自于它。感兴趣的可以深入了解下。\nwiki/Harrop_formula\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Niko: Polonius与Hereditary Harrop谓词" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#proc_macro/0.4/proc_macro2https://docs.rs/proc-macro2/0.4/proc_macro2/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「宏」proc_macro2库的文档已经更新" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#serde #typescript #wasm利用wasm-bindgen和serde序列化库，让Rust和Webassembly的开发体验更上一层。考虑到WebAssembly运行时错误的调试难度，这一点尤为重要！Read Morehttp://timryan.org/2019/01/22/exporting-serde-types-to-typescript.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "将Serde类型导出为TypeScript的类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ryu #floatpointdtolnay的新库。是对一种快速将浮点数转换为十进制字符串的算法的纯Rust实现。算法相关论文：\nRyū: fast float-to-string conversion\nryu\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ryu: 快速浮点数到字符串的转换" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#podcast #newrustacean该音频中讨论了Rust 1.32的新语法dbg!，以及const_fn相关的一些内容。Read Morehttps://newrustacean.com/show_notes/news/rust_1_32/index.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Newrustacean Podcast: 谈谈D(大)b(表)g(哥)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nfloating_bar\n相关博文\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "floating_bar: 支持有效处理有理数而不损失精度" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "据作者说这个实现比其他语言的慢2倍Read Morehttps://gist.github.com/tov/af73f345710e937ec39a4dbaca4504fe" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用于计算x^x的n阶导数的Rust代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust_analyzerRust Analyzer是给IDE使用的Rust实验性模块化编译器前端。Read Morehttps://github.com/rust-analyzer/rust-analyzer/blob/e0d8c86563b72e5414cf10fe16da5e88201447e2/guide.md\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-23 13:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-analyzer指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#http3 #quicQuinn是QUIC协议（传说中的HTTP3， IETF标准化的下一代TCP替换协议）的纯Rust实现，并且兼容Tokio API。并且已经与另一个Rust的QUIC实现quicr合并。Quinn 0.2.0是最新QUIC草案（草案17）中最符合要求的实现之一。Quinn项目正在努力实现模块化开发，比如拆解出独立协议逻辑的quinn-proto库和可以利用tokio API的quinn库。quinnhttps://github.com/djc/quinn/releases/tag/0.2.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "quinn 发布 0.2版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pingcap #nrc作为在「Rust内部」工作了五年的人，现在跳到「Rust外部」来使用它，并且面向的是分布式数据库这样一个新兴的领域，nrc感到很兴奋。并且他将继续在新西兰远程工作。（我很希望一睹nrc的真容，因为很多年前nrc给Rust社区做贡献的时候，就只看到他的大猩猩头像，很好奇他长啥样）Read Morehttps://www.ncameron.org/blog/starting-at-pingcap/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nrc博客宣布加入PingCAP" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#datafusion #sql #spark #clusterDataFusion是一个在Rust中实现的内存查询引擎，它的目标是构建分布式计算平台。目前使用Apache Arrow作为内存模型。但目前它只是一个概念证明，还不适合实际应用。 目前支持针对CSV文件运行简单的SQL查询。DataFusion也支持Parquet。 Rust Parquet项目最近被捐赠给Apache Arrow，作者希望在DataFusion中进行持续的集成工作。作者最近提议将DataFusion捐赠给Apache Arrow项目，以成为Arrow中的默认Rust-native查询引擎。Read Morehttps://andygrove.io/2019/01/datafusion-0.6.0/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "DataFusion 0.6发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#arraystring谨慎使用，该库使用了很多unsafe代码。不过适合学习。arraystringhttps://github.com/paulocsanz/arraystring" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "arraystring： 基于栈的通用字符串" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tokio #tls #asyncio本文是该系列的第五篇文章。\nRead More\nusing-tls-with-rust系列\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」在Rust中使用TLS 之 用Tokio处理异步IO" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#errorhandlecoercible_errorshttps://github.com/pchampin/coercible_errors" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "coercible_errors: 又一个错误处理的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#hack #unsafe #macro #enumRead Morehttps://guiand.xyz/blog-posts/compile-time-unions.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Hack技」基于类型反射来构造编译时可确定variant的枚举类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli #mandelbrot该库实现了分形算法，并将其生成图片，方便查看。该库比较适合新人学习Rust时模仿和借鉴。mandelbrot-viewerhttps://github.com/agherzan/mandelbrot-viewer\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-22 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Cli」分形查看器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#js #wasm作者构建了三个crate，希望为开发者创造一套用于处理JavaScript的通用Rust库。\nRESS，用于词法扫描，标记化词条\nRESSA，用于语法分析，解析语法树\nRESW，用于编写上层代码\n作者提供了一份简单的book来说明这三个crate的用法。rusty-ecma-bookhttps://freemasen.github.io/rusty-ecma-book/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust构建JavaScript开发工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#webORM：\nRust：Diesel，（如果用acitx-web，推荐 https://github.com/mehcode/actix-diesel 这个库，抽象的非常干净漂亮）\nPython: SQLAlchemy\nI18N:\nRust: ? （原帖中说Rust没有等价的库，但实际上有，rocket-i18n，也有rust-unic和tr 这样的国际化库）\nPython: Flask-Babel\n登录/邮件/表单处理/密码验证等组件：\nRust: ? （这个确实没有什么通用的组件，但这其实不算啥重要的，actix-web写登录和发邮件都挺方便，也有很多库可以帮助处理密码验证，至于表单处理，rocket和actix-web都支持提取器非常方便，但可能也有瑕疵，比如actix-web的Form提取器不支持数组参数之类 ）\nPython: Flask-Login/Flask-mail\n（总的来说，和flask生态相比，目前actix-web和rocket只差在通用的业务组件上面）具体可以看讨论Reddit 讨论https://www.reddit.com/r/rust/comments/ai3p1z/the_rust_web_ecosystem_vs_the_flask_ecosystem/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust web生态 vs Python Flask Web 生态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#oauth2一个OAuth2 Server库，支持actix、rocket等框架。oxide-authhttps://github.com/HeroicKatora/oxide-auth" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "oxide-auth: 0.4发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#awaitissues里有很多关于await语法的讨论，那么决定最终该如何决出？可以关注此贴。Read Morehttps://www.reddit.com/r/rust/comments/ai5l5l/how_will_the_await_syntax_finally_be_decided/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "关于await语法讨论最终决定的讨论" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#arc类似于Arc的库arbalesthttps://github.com/nox/arbalest" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "arbalest 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gui #ubuntu基于Rust和Qt。Read Morehttps://timsueberkrueb.io/posts/2019/01/18/rust-ubuntu-touch-app-dev/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust创建Ubuntu Touch应用程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://medium.com/@zwegrzyniak/attempting-a-bare-bones-static-file-server-in-rust-1-32-d784545b64b0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "基于Rust 1.32实现静态文件服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#devops可以在脱机超过定义的时间段时以邮件方式进行报告。lanmonhttps://crates.io/crates/lanmon" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Lanmon：用于监视IP网络上响应ICMP Ping的设备" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#webglRead Morehttp://www.chinedufn.com/3d-webgl-basic-water-tutorial/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust+WebGL 基础指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#closureRead Morehttps://krishnasannasi.github.io/rust/syntactic/sugar/2019/01/17/Closures-Magic-Functions.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "闭包: 充满魔法的函数" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#niko #nllPolonius是Niko一直在研究的新的借用检查器库，还实验性地被集成到了Rust中，但它目前还不完整。该文主要介绍了Polonius对「核心借用检查」分析中忽略的检查：不考虑生命周期之间的关系。如感兴趣可以查看原文了解。\npolonius\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "NLL之后： Polonius 和 区间错误" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttp://sanxiyn.blogspot.com/2019/01/proposed-rust-community-norm-for-unsafe.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「社区提案」Unsafe Rust社区代码规范" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nRead More\nfrunk\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用frunk HLists来探索Rust中面向列存储布局" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#scalaRead Morehttp://blog.madhukaraphatak.com/rust-scala-part-2/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-21 15:37" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」Scala开发者的Rust之旅 Part 2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "由于 chaos 大大年前有事，Rust每日新闻暂停，年后继续。年后，社区会有更多新的内容形式出来。敬请期待。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-20 13:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Linger" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "征求各位关于：\n社区计划的想法\nLanguage features\n文档上的改进\n生态系统需要\n工具加强\n还有一些你希望在2019 Rust上看到的东西\n原文地址：A call for Rust 2019 Roadmap blog postshttps://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html一些关于Rust 2019 Roadmap的文章可以在这个上面找到：Read Morehttps://readrust.net/rust-2019/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-12 20:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 官博发文征求Rust 2019 Roadmap" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Linger" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Reflecting on Rust and WebAssembly in 2018https://rustwasm.github.io/2018/12/06/reflecting-on-rust-and-wasm-in-2018.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-12 20:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustWasm 也发文征求2019 Roadmap" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Linger" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/nikosEfthias/paypal在Reddit上的讨论地址：Read Morehttps://www.reddit.com/r/rust/comments/af5k82/i_have_just_released_a_paypal_api_wrapper_library/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/nikosEfthias/paypal" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-12 20:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个PayPal API wrapper library" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Linger" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "回复中大概举了这些项目：\nnative-windows-gui\nazul\ncharlesmine-rs\nRead Morehttps://www.reddit.com/r/rust/comments/af43dy/rust_windows_gui/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-12 20:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Reddit 上关于 Windows GUI的讨论" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Linger" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "gfx-rs的硬件抽象层https://github.com/gfx-rs/gfx" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/gfx-rs/gfx" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-12 20:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gfx-hal" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Linger" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/nickbabcock/dness" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/nickbabcock/dness" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-12 20:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dness:动态DNS客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是来自于《Rust编程之道》读者问题之一，觉得有必要分享一下。因为从这个问题中，挖掘出了新的知识点，可以作为本书的补充。具体链接： 函数指针类型的一点建议 · Issue #42 https://github.com/ZhangHanDong/tao-of-rust-codes/issues/42这篇文章可以算是我和读者朋友的共同创作。Read Morehttps://zhuanlan.zhihu.com/p/54485063" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-10 12:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "《Rust编程之道》读者答疑精选：函数项类型和函数指针类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "安利文，大家看看说的对不对\n入门从未如此简单。Rust 2018 edition发布，降低学习曲线。\nRust的用户群在增长，并且有迹象显示雇主们开始对Rust感兴趣，职位也有增长的趋势\nRust的低开销很适合嵌入式编程。\nRust成为编写WebAssembly的首选语言。异步网络开发支持也即将登场。\nRust适合构建分布式在线服务。\nRust适合创建功能强大的跨平台命令行工具。\n新的开发人员工具，以及更好的IDE支持。\n2019将更好。Read Morehttps://www.techrepublic.com/article/rust-programming-language-seven-reasons-why-you-should-learn-it-in-2019/附带另一篇博文：对Rust的思考https://rcoh.me/posts/thoughts-on-rust-a-few-thousand-lines-in/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-10 12:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "2019年你应该学习Rust的七大理由" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#js #interpreterRead Morehttps://jason-williams.co.uk/building-a-js-interpreter-in-rust-part-2/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-10 12:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "构建JS解释器Part 2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gtk_rsgtk faqhttps://gtk-rs.org/docs-src/faq" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-10 12:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Gtk-rs 现在有 F.A.Q了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#unsafeRopey库作者写了这篇文章，因为他在库里使用了很多Unsafe Rust代码，并且在Reddit讨论的帮助下，大大减少了unsafe代码的使用。所以他写了一些想法，希望能促成Rust社区Unsafe代码规范的建立。Ropey是一个utf8 文本缓冲区库，旨在成为文本编辑器的后备文本缓冲区。\nRead More\nReddit讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-10 12:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论文」Rust社区Unsafe代码规范" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#AoCRead Morehttps://3plic8.com/rust/2019/01/02/advent-of-rust-1.html\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-10 12:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列博文」从Advent of Code挑战中学到的Rust代码技巧" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wallpaper20M 高清大图https://pan.baidu.com/s/1myuhb-_QpJDs0WLKvaUuJw" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "做了一个趣图： Rust满足你所有愿望" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #wasm本文作者使用了Rust和WASM实现了一个在线游戏（Adventures of Pascal Penguin，去年我好像介绍过这个），本文记录了他的心得。游戏还挺好玩。\nRead More\nPlay Online\n源码\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」使用Rust进行游戏开发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust2019本文中提到的几个观点：\nRFC开放式引导设计，同样会导致社区紧张局势以及官僚主义的问题。\nRust注重多样性，但也会成为尝试和迎合某些人的一些借口。\n如果填充语言的功能越来越多，只是为了确保很多人喜欢这种语言，可能会适得其反。比如Ok-unwrap和throw功能。\n如果我们所做的只是模仿现有语言，那么创建一种新的编程语言是否有意义呢？\n「对初学者友好」这个目标也有点脱离初衷。Bjarne Stroustrup曾经说过，一个好的编程语言不仅需要初学者友好，也需要对专家友好;它必须是两者。\n本文作者认为更重要的事：\n更好的教育\n更加成熟\n不要牺牲长期可维护性、一致性和可教育性\n（个人比较认同本文作者的看法，也感觉官方核心团队领导Niko的看法也差不多）Read Morehttps://h2co3.github.io/rust2019/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 2019: Rust最不需要做的事" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tlsRead Morehttps://ayende.com/blog/185698-A/using-tls-with-rust-part-i" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」在Rust里使用TLS Part I" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#podcastRead Morehttps://newrustacean.com/show_notes/news/rust_1_31/part_1/index.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Podcast: Rust 1.31 Part I" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "来自freecodecamp的安利文Read Morehttps://medium.freecodecamp.org/which-programming-language-should-you-learn-next-487d077baa32" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」为什么说你的下一个语言应该学Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#array如果每个库的Readme都能像这样出一份设计和使用笔记就好了Read Morehttps://github.com/fizyk20/generic-array/blob/master/DESIGN.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "generic-array库的设计和使用笔记" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargoRead Morehttps://www.reddit.com/r/rust/comments/adsh4o/cargocache_011_released_manage_your_cargo/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-cache 0.1.1发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#webgl #wasm以生成一池塘清水为示例webgl-water-tutorialhttps://github.com/chinedufn/webgl-water-tutorial" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust+WebGL+WebAssembly源码级指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tree #cli可以交互式地查看目录树，搜索文件等broothttps://github.com/Canop/broot" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "broot: 交互式树视图工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jobRedox背后的公司System76，招内核工程师，需要懂Rust和C。也招Elixir，做全栈Web开发。Read Morehttps://system76.com/careers\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-09 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Job」System76公司招聘内核工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Steve今天在他的博客上宣布离开Mozzila。Steve说自己喜欢Rust，认为它是这个世界需要的语言，他愿意花自己的精力去推广。但可能在Mozilla工作这么多年，积累了很多委屈，让他越来越沮丧。而且最近，他发现自己在Rust团队的工资是最低的，当他试图表达自己的委屈时，却受到了纪律处分。所以，造成了这次离职。Steve在Mozilla工作了大概6年，为Rust的推广做了很多工作，祝愿他一切顺利。Read Morehttps://words.steveklabnik.com/thank-u-next另外PingCAP公司宣布Rust核心团队成员nrc加入了PingCAP。现在PingCAP已经聚集了至少三位来自Rust团队的大将了。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-08 13:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust核心团队人员动态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust2019没事，Rust核心团队Leader Niko还在坐阵，不用担心PingCAP挖Rust团队墙角:)Niko写了这篇文章，表达他对Rust 2019的愿景。在2018年，他感受到了Rust的重大变化，Rust各种会议不断增长，并且多了很多赞助商。而且在他小孩的生日会上还遇到了一些专业的Rust开发者。这让他很欣喜。但是也感觉到，Rust从1.0发布这三年来，以惊人的速度发展着，这也是官方所希望看到的。但是现在更重要的是，如何更好地扩展它，并且有效地保证它的可持续发展。最近无船同志那篇《组织债务》的文章，很好地体现了Rust团队内部的问题，这一点Niko同志也很认同。虽然他目前还没有整理出一个具体对未来的规划，但脑海里还是迸出了一些要点：可持续的过程：\n工作组。继续以工作组为核心组织单位，并希望它可以更好地指导人们专注于一个特定的领域。\n明确阶段。在Rust功能稳定之前，都会经历一些官方或半官方的阶段，接下来将会使这些阶段在流程中更加明确。\n限制。 通常，Rust团队会接受RFC，但不知道让谁该实现它，事实上，还需要这样一个团队来领导，确保RFC落地。另外，需要限制工作容量，除非知道团队中谁来实现RFC（或指导实现），否则就停止这个想法。\n加强协作。\n定期评估优先级。\n可持续的技术：\n清理技术债务\n进一步让Rust编译器变得更加平易近人、可维护\n持续缩短编译时间\n可持续的财务\n拓展更多的赞助商和赞助途径\n这是一件需要谨慎的事，避免决策受到金钱和政治的支配\nRust团队并不急于求成，而应该一步一个脚印\n希望看到大部分贡献者全职或者兼职为Rust贡献\n这些都是Niko还比较零散的想法，后续具体再关注Rust的RoadmapRead Morehttp://smallcultfollowing.com/babysteps/blog/2019/01/07/rust-in-2019-focus-on-sustainability/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-08 13:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Niko: Rust 2019 专注于可持续发展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "可通过Zoom客户端参加，会议免费Read Morehttps://github.com/rustwasm/team/issues/244" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-08 13:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方WASM工作组」2019年第一次在线会议邀请你参与" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#oxidization将代码库转换为Rust的过程在Rust社区中称为“氧化（Oxidizing）”，这个仓库罗列了社区中优秀的「氧化」项目awesome-oxidization/https://github.com/rain-1/awesome-oxidization/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-08 13:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "awesome-oxidization: 优秀的「氧化」项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#unsafe #linkedlist #js文章略长。结论：\n\nRust给了作者很多惊喜。Rust清晰，富有表现力，虽然代码比js多，但没有想象的长。\n\n\nUnsafe Rust没有想象中的可怕。\n\n\nRead More\n\n\njs实现\n\n\nRust实现\n\nRust给了作者很多惊喜。Rust清晰，富有表现力，虽然代码比js多，但没有想象的长。Unsafe Rust没有想象中的可怕。Read Morehttps://www.codesections.com/blog/javascript-vs-rust-linked-list/js实现https://gist.github.com/codesections/117a984f733d8d1ee4c3612e0307ab10Rust实现https://gist.github.com/codesections/bef7f95973ea5bb2d0046ab99270928b" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-08 13:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」比较Rust和JavaScript的简单链表开发体验" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#parser对于匹配正则表达式很有效很灵活。看上去很有特色。weighted-regexp-rshttps://github.com/jameysharp/weighted-regexp-rs\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-08 13:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "weighted-regexp-rs: 又一个编写解析器的新库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#githubGitHub最近30天按PR排序，Rust排名第13 ​​​​" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-07 11:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust上升GitHub语言排行榜第13位" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustsimRustsim组织是一个GitHub组织，聚焦于提供各种数值模拟的库。包括\nalga， 抽象代数库\nnalgebra， 线性代数库\nncollide， 2D和3D的碰撞检测库\nnphysics， 2D和3D的物理模拟库\nrustsim.orghttps://rustsim.org/版本升级：\nnphysics2d and nphysics3d v0.19\nncollide2d and ncollide3d v0.18:\nnalgebra v0.17\n本次月报里还阐述了他们的2019目标。总结来说：Read Morehttps://www.rustsim.org/blog/2019/01/01/this-month-in-rustsim/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-07 11:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustsim最新月报" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust本专题集合了Rust生态中令人兴奋（据专题作者描述）的工具和动态。Read Morehttps://fosdem.org/2019/schedule/track/rust/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-07 11:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust devroom ： Rust生态专题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#githubGitHub最近30天按PR排序，Rust排名第13 ​​​​" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-07 11:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust上升GitHub语言排行榜第13位" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustsimRustsim组织是一个GitHub组织，聚焦于提供各种数值模拟的库。包括\nalga， 抽象代数库\nnalgebra， 线性代数库\nncollide， 2D和3D的碰撞检测库\nnphysics， 2D和3D的物理模拟库\nrustsim.orghttps://rustsim.org/版本升级：\nnphysics2d and nphysics3d v0.19\nncollide2d and ncollide3d v0.18:\nnalgebra v0.17\n本次月报里还阐述了他们的2019目标。总结来说：Read Morehttps://www.rustsim.org/blog/2019/01/01/this-month-in-rustsim/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-07 11:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustsim最新月报" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust本专题集合了Rust生态中令人兴奋（据专题作者描述）的工具和动态。Read Morehttps://fosdem.org/2019/schedule/track/rust/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-07 11:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust devroom ： Rust生态专题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」《Rust编程之道》签名版明天发货" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#2D上次有人问怎么画Bézier曲线来着？这系列文章作者就是探讨这个。Read Morehttps://raphlinus.github.io/curves/graphics/2019/01/04/followups.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "跟进2D图形提案" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cheatsheet内容比较丰富，但是这个页面感觉不太友好，谁能截个大图分享一下。Read Morehttps://www.breakdown-notes.com/make" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust CheatSheet" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nom #assembler基于nom实现，可当学习之用。hackermanhttps://github.com/onatm/hackerman" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "hackerman: 用Rust编写的16位Hack机器语言的汇编程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#test新发布的框架datatesthttps://github.com/commure/datatest" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "datatest: 数据驱动的测试框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#shellumeboshihttps://github.com/masahiko-ofgp/umeboshi" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "umeboshi: Rust实现的交互式shell" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#unicode #unic #i18nrust-unic/https://github.com/open-i18n/rust-unic/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-unic: Unicode和I18n库发布0.8版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#google #energy_efficiency_langRead Morehttps://sites.google.com/view/energy-efficiency-languages/results\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-05 12:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Google出品的最节能的语言数据统计" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pythonpyoxidizerhttps://github.com/indygreg/pyoxidizer" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pyoxidizer: Rust编写的Python应用分发工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#errorhandleRead Morehttps://people.gnome.org/%7Efederico/blog/propagating-errors.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」对Rust中错误传播的思考" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#2019 #ffi目前构建和安装共享库比较困难，尤其是在多个平台上。Cargo的能力目前还待扩展，Rust的ABI也未稳定，所以需要使用兼容C-ABI来和其他语言沟通。但是现在如果你的库想提供一个C绑定接口，目前还没有一个完美的解决方案。作者罗列了现存的问题，并且他计划在2019年尝试提供一些解决方案。Read Morehttps://blogs.gentoo.org/lu_zero/2018/12/30/making-and-using-c-compatible-libraries-in-rust-present-and-future/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」2019期望：使用Rust制作和使用C兼容的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rope #textRopey是一个文本rope数据结构的实现，旨在成为文本编辑器等应用程序的后备文本缓冲区。Rope一个二叉查找树。优势：\nRope不需要连续的内存空间，不像数组\nRope在字符串中进行插入和删除更快O（logn）。而在字符串数组中需要O（n）。\n在进行数据copy时。Rope不需要额外的O（n）内存空间。\n缺点\n需要更多的内存空间，需要维护父节点。\n增加代码的复杂度。\nropeyhttps://github.com/cessen/ropey" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ropey发布1.0版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job很多岗位，包括Rust实习生。在美国的朋友有福了。Read Morehttps://careers.mozilla.org/position/gh/1480831/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Mozilla招人了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#no_std支持no_std环境。与regex库的区别是：\nregex是通用的正则表达式引擎，对编译时间、搜索和内存使用有一个均匀的平衡，还提供了方便的API。\nregex-automata，则提供了更加底层的接口，可能对于用户来说不太方便，但它提供对内存使用和搜索时间更明确的控制。\nregex-automatahttps://github.com/BurntSushi/regex-automata" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "regex-automata: 使用DFA的正则表达式库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Smithay旨在提供构建模块，以在Rust中创建Wayland合成器。基于wayland-rs实现。wayland-rs采用纯Rust实现，是Wayland协议的Rust实现，弃用了之前的C绑定。Wayland是一个协议定义了如何与内核通讯、如何与Client通讯等，Linux桌面X Client/X server的替代者。Read Morehttps://smithay.github.io/smithay-v-0-2.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Smithay发布0.2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game提供Server和Client，方便用户创建简单的2D和3D游戏原型。项目刚发布，完成率还有点低，可以关注下。Victoremhttps://github.com/VictoremWinbringer/Victorem" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Victorem： 一个基于UDP的简单游戏框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#paper #verification论文的四个作者均来自于瑞士苏黎世联邦理工学院计算机科学系。文中声称利用了一种新的验证技术，利用Rust类型系统来简化Rust程序的规范和验证。Read Morehttps://www.research-collection.ethz.ch/handle/20.500.11850/311092" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「学术论文」利用Rust类型进行模块化规范和验证" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#text声称，在不特别关心unicode的情况下，比lines()的执行速度要快得多。bytelineshttps://github.com/whitfin/bytelines" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "bytelines: 可以高效按字节切片读取输入行" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mpd #vedioMPD(Media Present Description)可以非常简洁——只需要短短的几行表述就可以构建一个很大的媒体列表。作者一般从SoundCloud下载音乐进行播放，但是过程很麻烦：必须浏览SoundCloud，下载一个看起来很有趣的曲目，将其上传到音乐服务器，让MPD将其编入索引，然后播放。所以作者用Rust制作了SoundClound音乐索引，文章记录了他的做法。\nRead More\n源码：soundcloud-fs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「流媒体技术」构建MPD索引" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#no_std支持no_std环境。strength_reducehttps://github.com/ejmahler/strength_reduce\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-04 13:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "strength_reduce: 快速整数除法和模数运算" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我在刚学Rust的时候，这俩类型搞的我很懵。今天做这俩图，方便帮助初学者理解。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-03 12:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "趣图分享" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#asyncare we async yet?https://areweasyncyet.rs/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-03 12:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「社区」关注Async动态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tree基于generational-arena，避免了ABA问题。\nvec_tree\ngenerational-arena\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-03 12:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "vec_tree: 提供了安全的树结构" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#russian_ai_cup_2018 #wasm俄罗斯AI杯 - 由Mail.Ru Group和Codeforces组织的年度IT导向竞赛计划。今年的比赛叫做CodeBall。参与者编写代码使他们的机器人将球击入对手的网中。用Rust和WASM编写AI策略。\nRead More\nQuick Start\n在线试玩\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-03 12:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "2018俄罗斯AI杯挑战赛" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#image比较有意思的小项目，用image库合并两张图片，上面是随机图片，下面是展示2019年的十二个月份，再加上点文字。ImagesConnectorhttps://github.com/oversoul/ImagesConnector" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-03 12:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小项目」用Rust和Image库创建月历" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macro作者以扩展askama模板为例，介绍了过程宏的使用。Read Morehttps://naftuli.wtf/2019/01/02/rust-derive-macros/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-03 12:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」使用过程宏派生trait" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tao随书源码的issues就是勘误地址https://github.com/ZhangHanDong/tao-of-rust-codes/issues目前已经发现了一些问题，在电子版发行之前这些问题都会修复。大家拿到纸版书之后及时阅读，欢迎反馈问题。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-02 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "《Rust编程之道》随书勘误说明" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#meshlite #3d #mesh状态：WIPmeshlitehttps://github.com/huxingyi/meshlite" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-02 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「图形处理」meshlite: 3D网格生成和处理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#holochain #blockchainHolochain是一个采用DHT(分布式哈希表)技术的创新项目，借助BitTorrent 的并行性，为分布式应用（DAPP）提供动力，它是分布式应用程序的数据完整性引擎。它可以将具有用户自主权的分布式 Web 直接构建到其架构和协议中。Holochain和区块链是针对截然不同的应用场景而构建的。对于维持绝对的全球共识的系统来说，区块链相对有优势。在需要弱共识（大多数情况下）的情况下，Holochain 比区块链要好得多：它更快，更高效，更具可扩展性，适应性强和可扩展性。分布式账本技术（DLT）可互换的分支分别是有向无环图（DAG）、Swirlds的哈希图Hashgraph、Holoochain 的分布式散列表（DHT）、区块链，四者是并列关系。Holochain用Rust重新实现了之前Go写的核心框架。目前正在准备完善的P2P网络。\nHolochain深度介绍\nholochain-rust\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-02 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「区块链」 Holochain: 进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded #RaspberryPi3 #book目标受众是对此硬件不熟悉的业余操作系统开发人员。它将为您提供有关如何执行常见操作系统任务的示例，例如写入串行控制台，从中读取击键或使用各种外围设备（如硬件支持的随机数生成器）。但是，它不是如何编写完整操作系统的教程。我不会涉及高级内存管理和虚拟文件系统等主题，或者如何实现多任务处理。Read Morehttps://github.com/rust-embedded/rust-raspi3-tutorial" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-02 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」树莓派3裸机编程指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#arduino #uno #macosRead Morehttps://treesandrobots.com/2018/12/rustduino-pt-1-setting-up-development-environment.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-02 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」设置Arduino UNO版和Mac的开发环境" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#swift同时喜欢Swift的可以关注下Read Morehttps://blog.waffles.space/2018/12/31/swift-experience-report/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-02 13:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "经验报告：从Rustacean的角度来看Swift" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从今天开始，「Rust每日新闻」改名为「Rust日报」" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "让我们持续关注Rust，共同成长。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」2019年新年快乐" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#discord获取用户隐私数据，并且包含进程记录器、受政府监控等。并呼吁Rust团队不要使用它。间谍软件等级：非常高Discord是间谍软件，因为它收集通过其通信平台的所有信息。由于Discord是一个集中式通信平台，所有通信都必须通过Discord的官方服务器，其中可能会记录所有这些信息。绝大多数所述信息已被确认记录，例如用户之间的所有通信。 Discord也被证实可以使用其他间谍软件功能，例如各种形式的遥测。Read Morehttps://spyware.neocities.org/articles/discord.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「社区」有人发文声称Discord是间谍软件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#github #action作者（mgattozzi）最近尝试了GitHub Action的测试版。本文实现了一个类似于Rust项目机器人（比如Rust源码仓库中的机器人bors）的容器来介绍GitHub Action的用法。\ngithub-rs\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」GitHub Actions第一印象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust这哥们怎么挖出了2015年的issues了。。。Placement New功能是RFC 1228和RFC 809这两个RFC提供的功能设想，目的是想给Rust开发者提供一个粒度更细的堆内存分配方法。现在Rust中内存分配是被隐藏于Box之下，内部使用的box关键字并不是公开的API。曾经在Rust 1.0发布之后，有人提出RFC1228和RFC809试图让Rust提供显式的更精细的内存分配方法。并且曾经一度提供了相关的unstable features。但是，最终，RFC1228和809均被废除，之前引入的unstable feautures也被完全移除。相关讨论可以从这个相关issues。里看到。https://github.com/rust-lang/rust/issues/27779不过这哥们的文章可以看看，了解下到底什么是Placement New。这个概念是来自于C++的Placement New。Read Morehttp://blakesmith.me/2018/12/31/what-is-placement-new-in-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「挖坟贴」什么是Placement New" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#python作者用Rust重写了一个Python项目，性能提升了9倍，内存占用少了一半。本文记录了他重写过程中的心得。Read Morehttps://alantrick.ca/writings/programming/python_to_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」Rust重写Python项目心得" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#PythagoreanRead Morehttps://atilanevesoncode.wordpress.com/2018/12/31/comparing-pythagorean-triples-in-c-d-and-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」Cpp、Rust和D分别实现Pythagorean三元组的性能比较" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm基于wasm-bindgen实现console_loghttps://github.com/iamcodemaker/console_log" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "console_log: 支持在浏览器控制台中打印Rust的日志信息" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#podcastRead Morehttps://newrustacean.com/show_notes/interview/integer32/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Podcast: 采访Integer32" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rocksdbrust-rocksdbhttps://github.com/rust-rocksdb/rust-rocksdb" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-rocksdb: rocksdb的Rust绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#n64 #emulator目前完成度很低，还不能玩任何游戏。r64emuhttps://github.com/rasky/r64emu\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-01-01 19:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "r64emu： Rust实现的任天堂N64模拟器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pcie #drivers来自refreshing memories大会的演讲，编写用户态驱动程序。之前我介绍过的ixy-rs项目。\nRead More\nixy-languages\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-31 09:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」如何在Rust，go，C＃，Swift，Haskell和OCaml中编写PCIe驱动程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmRust的前端框架Seed发布0.2版本seedhttps://github.com/David-OConnor/seed" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-31 09:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Seed发布0.2版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm以一个简单的计数示例来展示用Rust实现react/redux风格的编程，实现虚拟dom。virtual-dom-rs-counterhttps://github.com/richardanaya/virtual-dom-rs-counter" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-31 09:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust+WASM实现react/redux风格的编程案例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#graphql新版本中增加了graphql_client_web，可以支持在浏览器中通过wasm调用Graphql API。Read Morehttps://dev.to/tomhoule/graphqlclient-06-to-the-browser-and-beyond-3cb8" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-31 09:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "graphql_client发布0.6版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#C该作者将名叫dwmstatus的C库用Rust重新实现，并在Reddit中分享了他的心得：\n\n能够访问比C中更高级别的抽象使我的生活变得轻松。特别是，原始的C代码分配了许多静态大小的缓冲区，这些缓冲区足够大以容纳必要的字符串。在Rust中不需要这样的东西。错误处理也更清晰，更明确。\n\n\nRust的强类型系统显示了在C代码中集中在一起的错误路径。例如，在原始C代码中，解析文件内容的失败将与未能读取文件的情况混为一谈。两种情况都以相同的方式处理，但Rust让我明确地处理它们。我更喜欢这种方式。这将使将来分离这些分支变得更容易。\n\n\n编译时间可以忽略，原始C代码在几分之一秒内编译，而生锈代码最多只需3-4秒即可在更改一个文件后重新编译。\n\n\n二进制大小要大得多 ： C二进制文件是42 KB，而Rust发布二进制文件是2.9 MB。\n\n\n关于最后两点，我有一些问题。我是否正确地认为将Rust二进制文件与C二进制文件的编译时间和大小进行比较并不完全公平？\n\n\nC二进制文件依赖于大量的libc和系统调用，这些调用更容易与Linux上的C代码接口。在Rust中，您需要导入并链接所有这些绑定。此外，大多数二进制大小（80-90％）和额外的crate都是通过解析时区名称和格式化日期时间字符串的要求引入的。 C代码依赖于系统/ libc调用来完成已经编译并出现在设备上的东西。我也可以使用不安全的系统调用，但是我选择使用更加生动的Rust解决方案，使用Rust chrono和chrono-tz crates来使代码在将来更容易移植并减少不安全的代码。\n\n\nReddit 讨论贴\n\n\nrwmstatus\n\n能够访问比C中更高级别的抽象使我的生活变得轻松。特别是，原始的C代码分配了许多静态大小的缓冲区，这些缓冲区足够大以容纳必要的字符串。在Rust中不需要这样的东西。错误处理也更清晰，更明确。Rust的强类型系统显示了在C代码中集中在一起的错误路径。例如，在原始C代码中，解析文件内容的失败将与未能读取文件的情况混为一谈。两种情况都以相同的方式处理，但Rust让我明确地处理它们。我更喜欢这种方式。这将使将来分离这些分支变得更容易。编译时间可以忽略，原始C代码在几分之一秒内编译，而生锈代码最多只需3-4秒即可在更改一个文件后重新编译。二进制大小要大得多 ： C二进制文件是42 KB，而Rust发布二进制文件是2.9 MB。关于最后两点，我有一些问题。我是否正确地认为将Rust二进制文件与C二进制文件的编译时间和大小进行比较并不完全公平？C二进制文件依赖于大量的libc和系统调用，这些调用更容易与Linux上的C代码接口。在Rust中，您需要导入并链接所有这些绑定。此外，大多数二进制大小（80-90％）和额外的crate都是通过解析时区名称和格式化日期时间字符串的要求引入的。 C代码依赖于系统/ libc调用来完成已经编译并出现在设备上的东西。我也可以使用不安全的系统调用，但是我选择使用更加生动的Rust解决方案，使用Rust chrono和chrono-tz crates来使代码在将来更容易移植并减少不安全的代码。Reddit 讨论贴https://www.reddit.com/r/rust/comments/aanedt/porting_c_code_to_rust_notes_questions_and/rwmstatushttps://github.com/Wojtek242/rwmstatus" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-31 09:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从C迁移到Rust的心得" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#techempower #benchmarksRead Morehttps://www.techempower.com/benchmarks/每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-31 09:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Techempower基准测试第17回合发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 17:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Rust每日新闻」2018年度盘点" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "因为「Rust每日新闻」这个名字太长了，尽量缩短一些，也符合Rust的调性。今年我坚持每天不间断地了解、梳理、总结我所看到的Rust社区中的信息，并通过此频道分享给大家，于我个人而言，是完成了一次自我挑战。所带来的收获有很多，这个只有我自己才能体会。同时，希望大家也能在2019年跟我一样，每天能坚持自己感兴趣的事。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 17:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」2019年起「Rust每日新闻」将改名为「Rust日报」" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 2018 关键字：生产（Production）盘点：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 17:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "官方大事记" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n国内PingCAP公司基于Rust实现的开源分布式事务键值数据库TiKV，进入了云原生计算基金会（CNCF）Sandbox， 用于早期和持续发展的云原生项目。\nRust编写的现代嵌入式数据库sled已发布到0.16版。\nRust编写的图数据库indradb，已发布到0.21版。\n\nAmethyst游戏引擎基金会成立。\nSpecs倡导的ECS模式，在Rust社区颇受欢迎。并且Specs也有了继承者nitric，会为开发者提供更好的体验。\n曾开发 《战神：奥林匹斯之链》 和《 战神：斯巴达之魂》 的业界大厂 Ready at Dawn Studios 全面拥抱Rust。其CTO亲自动手实现了一个用于测试2D渲染的Playground库modulator_play。\n前EA首席设计官成立的新独立游戏工作室Embark宣布使用Rust为主要语言。\n各种轻量级游戏框架或库出现：比如轻量级2D游戏框架ggez、纯Rust实现的2D和3D物理引擎nphysics、2D和3D的碰撞检测库ncollide等\nRust和WASM结合应用于游戏也有不少例子，最有意思的是这个开源的基于浏览器的流沙游戏：MaxBittker/sandspiel\n\ngfx-rs/gfx ，高性能无绑定的图形库，支持：Vulkan/ DirectX 12 /Metal /OpenGL 2.1+/ES2+等。到年底也发布了gfx-hal库，是对硬件的直接抽象层。\nMaikKlein/rlsl，是支持Rust编译到SPIR-V的库，SPIR-V是一种用于GPU通用计算和图形学的中间语言。\nGUI框架Azul：面向IMGUI的免费功能性GUI框架，支持用Rust编写桌面软件，基于Mozilla WebRender渲染引擎。\n\nyew: 最早的基于Rust和WASM的前端框架，灵感来自于Elm和ReactJS，支持创建多线程前端App。\nseed: Rust+WebAssembly 前端框架，基于wasm-bindgen和js-sys创建。创建应用时需要依赖web-sys。\nRuukh是一个前端Web框架，受到VueJS和ReactJS的启发，基于Rust和WASM。\n「Rust前端框架」Draco：利用Rust和Wasm编写前端代码。灵感来自于React和Elm。使用了虚拟Dom。\n「Web框架」Rocket v0.4发布，预计下个版本，将可以应用于Rust稳定版本。\n目前社区流行的Web框架：actix-web和rocket。Tower作者和Hyper作者正在联合实现Warp框架，而Rust官方在完善Tide框架，在Tide框架标准完善之后，社区的其他框架应该会统一配合官方来完成变更，比如支持统一的中间件协议、async/await语法支持等。\n目前最成熟的ORM框架还是Diesel。\nGraphql框架比较成熟的是juniper。\n全文搜索工具tantivy-search/tantivy，对标Apache Lucene。\n\nJuice是一个开放的机器学习框架，之前的名字叫leaf，用于构建经典，深度或混合机器学习应用程序。 它受到TensorFlow，Torch，Caffe，Rust和众多研究论文背后的杰出人士的启发，并为深度学习带来了模块化，性能和便携性。\n第三方服务Machine Box将最先进的机器学习功能置于Docker容器中，因此像您这样的开发人员可以很快地将自然语言处理，面部检测，对象识别等功能轻松纳入您自己的应用程序中。提供了Rust SDK。\nRust极有可能成为构建世界级机器学习工具的语言，但它目前缺少一些重要的数学基础设施BFGS，在今年有人专门建立了一个开源项目paulkernfeld/bfgs来填补此空白。\n\n亚马逊AWS开源Firecracker。Firecracker是一种开源虚拟化技术，专门用于创建和管理安全，多租户容器和基于功能的服务，提供无服务器操作模型。 Firecracker在轻量级虚拟机中运行工作负载，称为microVM，它将硬件虚拟化技术提供的安全性和隔离性与容器的速度和灵活性相结合。\nASW Lambda Serverless全面支持Rust。\n红帽开源Stratis。Stratis为桌面Linux用户提供了一系列强大的高级存储功能，并且易于使用，基于Rust实现，Stratis也是是卷管理文件系统（VMF），比如ZFS和Btrfs。它始于存储“池”的核心思想，这与VMF和LVM等独立卷管理思想一致。\nDropbox开源了Rust实现的新的并发矢量化压缩算法DivANS，可以编译成WASM以在浏览器和服务器上进行高密度压缩。\n\n网络实时入侵检测(IDS)、嵌入式入侵防御(IPS)和网络安全监控(NSM)的引擎" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 17:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "社区大事记" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust社区欣欣向荣，以上盘点也只是冰山一角，最好还是能亲自加入社区体验和成长。现在正是开始学习Rust的时候。Rust作为一种通用型语言，不管你的方向是前端、还是后端，亦或是编写嵌入式应用、还是写操作系统、网络服务等，都可以使用Rust。如果你是学生，可以尝试开始学习Rust，提升自己的竞争力。如果你是在职人员，也不妨学习一下Rust，因为它是新时代的语言。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 17:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "小结" }, "type": "text" }], "type": "title" } },]
