export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Unsized Rvalues 是RFC 1909中定义的特性，该特性允许本地变量、函数参数和一些表达式具有unsized类型。具体实现是将临时值存储在可变大小的栈空间中。利用内部实现的alloca_unsized_indirect函数在栈上动态分配内存。实现该特性的动机在于，在某些地方可以直接传递unsize类型，而不需要使用trait Object，比如Box来包装它。可能有些人会理解错，以为它是取代trait Object功能的，其实非也。比如可以实现 VLA（variable-length array）数组foo函数中头两行x定义，会返回[u8]类型，它们将在运行时对长度进行求值。第三行，和之前一样，在编译时求值，最后一行出错是因为不支持CTFE可以看rust源码中test/run-pass/unsized-locals/下的相关示例，但估计还得等几个小时才能尝试原文https://github.com/rust-lang/rust/pull/51131"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-20 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Unsized Rvalues 特性已经被merge到master"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ndarray-csvhttps://github.com/paulkernfeld/ndarray-csv"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-20 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ndarray-csv 轻松将CSV读入二维数组里"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo-debstatushttps://github.com/kpcyrd/cargo-debstatus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-20 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-debstatus可以遍历debian包中所有依赖项"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者把他实现游戏过程中的得失记录了下来原文https://wiki.alopex.li/LD42Postmortem源码 https://github.com/icefoxen/ld42/游戏下载  https://ldjam.com/events/ludum-dare/42/running-in-to-space"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-20 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用gezz实现游戏Ludum Dare"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"已经更新到了 part 9原文https://blog.subnetzero.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-20 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust编写语言vm系列文章"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gfx-hal是gfx-rs中包含的组件，gix的硬件抽象层原文https://falseidolfactory.com/2018/08/16/gfx-hal-part-0-drawing-a-triangle.html\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-20 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gfx-hal指南系列文章00： 小乌龟作画"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PPThttps://mgattozzi.com/classes/run-await-with-me"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-19 11:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【RustConf 2018】 跟着Mgattozzi学Rust异步编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"nbd( Network Block Device )是一种起源于linux的轻量级块访问协议，可以让你将任何存储方式作为操作系统的块设备来使用。它主要分成两部分，server端和client端。client端位于linux内核。server端需要由你实现。当我们对/dev/nbdx设备发起io操作时，会由内核中的nbd client封装成nbd请求通过tcp网络发送给对应的nbd server，server端解析请求，做出处理后，返回结果到nbd client端。原文https://www.reddit.com/r/rust/comments/98gns7/network_block_device_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-19 11:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的NBD"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://dorianpula.ca/2018/08/15/writing-integration-tests-in-rust-releasing-rookeries-v0-11-0/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-19 11:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust编写集成测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文作者在Rust嵌入式工作组的成果上完成了自己的第一个嵌入式驱动开发，他表示：对于驱动程序编写者来说，有一个明确的期望和一个明确的标准来确定应该如何完成，非常exciting。原文https://www.joshmcguigan.com/blog/tsl256x-light-intensity-sensor-driver/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-19 11:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【嵌入式】Rust实现TSL256X光强度传感器驱动器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文阐述了C语言中的未定义行为及其危害，对于了解什么是未定义行为有帮助原文https://raphlinus.github.io/programming/rust/2018/08/17/undefined-behavior.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"未定义行为之下，一切皆有可能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/17/toykio.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"toykio 集成futures 0.3的示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在标准库VecDeque中有一个Bug可以引起缓存区溢出漏洞。但是在1.22版本中已被修复，然而Rust官方并没有提交VEC报告。该文作者在跟进此事。原文https://medium.com/@shnatsel/how-rusts-standard-library-was-vulnerable-for-years-and-nobody-noticed-aebf0503c3d6"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"这哥们在Rust标准库中发现一个存在多年但无人注意的安全漏洞"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://github.com/tsoernes/machine_learning_basics_rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的几个机器学习基础算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用  Warp, Juniper 和 MongoDB实现Graphql Server"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讨论在Rust中如何编写函数式代码函数式Rusthttps://www.infoq.com/presentations/functional-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"视频： 函数式Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"内存安全的Linux发行版，计划用Rust和Go重写整个用户空间程序原文https://github.com/mesalock-linux/mesalock-distro"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"美国百度X-Lab的新项目「消息来自于RustConf」"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"turtle（小海龟画图）指南PPThttps://slides.com/sunjay/tour-of-turtle#/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustConf 主题之一： 从零开始写一个Crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"sdsethttps://github.com/Kerollmops/sdset\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-18 21:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sdset:将集合论应用于切片排序和去重的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"昨天晚上刚发现"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust GitHub star数超过了3万"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"通过小道消息得知，Leetcode工程师正在开发Rust支持。到时候我会第一时间通知大家。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Leetcode目前正在开发Rust支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该职位使用Rust语言构建分布式系统。OneSignal的成绩：平台上注册了超过470,000名开发人员，营销人员和管理员，使用OneSignal拥有超过200,000个应用程序和网站。该公司会在RustConf现场进行招聘，如果你在RustConf现场，恰巧这份工作适合你，那就是缘分到了。原文https://onesignal.com/blog/onesignal-is-hiring-a-distributed-systems-architect/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OneSignal 招聘分布式系统架构师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个Rust实现的实验性的RPKI 依赖方（relying party ）软件。由NLnet Labs出品，接下来的几个月，将开发一个旨在使BGP路由更安全的RPKI工具集。它将由三部分组成：证书颁发机构包，发布服务器和依赖方软件。选择使用现代系统编程语言Rust进行开发。为了抵御日趋频繁和严重的互联网路由劫持事故，RPKI（互联网码号资源公钥基础设施）应运而生。它通过签发和认证一种特定格式的x.509数字证书和数字签名，帮助路由器检验BGP消息的真实性，从而增强BGP协议的安全，帮助避免互联网路由劫持。本期我们将详细介绍RPKI的原理和发展现状。RPKI的基本思想是构建一个PKI（公钥基础设施）来完成对IP地址前缀和AS号的所有权和使用权的认证。RPKI包括证书认证体系和依赖方两大组件。感觉Rust在互联网核心基础设施的应用越来越多，未来的互联网将由Rust来守护了！原文https://medium.com/nlnetlabs/introducing-the-routinator-3000-2a234d455b2b"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"介绍 routinator 3000"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://thinkof.name/2018/08/14/early-access-release.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust开发的游戏UniverCity已经登录steam预售"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"日程http://rustconf.com/schedule.html假装在现场（图1的袜子，喜欢的可以联系我，一起搞几双)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustConf 2018 已经开幕"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-17 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"\n\n\n\n\n\n\n\n"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此次预览版是alpha预览版，主要目的是用来测试和反馈，仅适用于Nightly Rust。与上次预览版相比，有以下改进：\ncargo fix是cargo内置的了\n模块系统的更改已经分解为了几个独立的小特性，用于跟踪和反馈\nNLL已经默认可用，测试的时候注意，如果代码被NLL拒绝，但是旧的借用检查器可以通过，这种情况下NLL会报告错误。如果发现错误警告有问题，可以提交反馈。\nIn-band生命周期分为两部分： impl头生命周期参数省略完整功能仍然存在，但是其他内容都已经从Rust 2018 features gates中移除，原因是反馈不一。\n这个里程碑的意义：至此Rust 2018已经进入了最终的Release周期，结束是9.13号。在这个周期内，需要针对剩余的功能达成最终稳定的决策，仍然未完全确定的最后一个主要特征是模块系统的改进，尤其是精确path的那部分。在这个周期结束后，会生成1.30 beta版本。到时候会再次高调发布。在这之后，还需要三个月的最终测试、反馈和润色。直到12月6号向全世界发布Rust 2018.原文https://internals.rust-lang.org/t/announcing-rust-2018-preview-2/8218"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-16 11:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 预览版2发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Zeit新的平台叫Now云平台，专注于 Serverless Docker 部署好像是免费可用原文https://zeit.co/blog/serverless-docker示例代码  https://github.com/zeit/now-examples/tree/master/rust-http-microservice"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-16 11:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Zeit新的Serverless Docker beta平台上使用Rust + Hyper"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"elbahttp://dcao.gitlab.io/post/elba/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-16 11:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"elba：Rust实现的Idris语言包管理器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者用用3D光线跟踪的案例来学习WebAssembly，想看看它在计算密集型应用中的表现。结果很吃惊：\nWebAssembly: 22.0fps\nJavaScript: 2.5fps\nWebAssembly性能是JS的9倍。作者使用Rust工具链： wasm-bindgen和wasm-pack，在Firefox Quantum 61.0.2浏览器进行测试。原文http://matt-harrison.com/raytracing-webassembly-vs-javascript/源码 https://github.com/mtharrison/wasm-raytracer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-16 11:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"光线跟踪： WebAssembly vs Javascript"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是PL Enthusiast发表的一篇文章。之前马里兰大学开设了一门课程CMSC 330，这门课程中包含了Rust的基础教学。PL Enthusiast由马里兰大学计算机科学教授Michael Hicks在College Park组织。在CMSC 330课程中，课程的最后1/4，讲软件安全性的时候，同时讲Rust语言。教授如是说：我相信，如果我们要解决我们的安全问题，那么我们必须从一开始就牢记安全性。要做到这一点，所有程序员都需要了解安全性，而不仅仅是少数专家。各种语言（错误）功能和编程（反）模式都可以启用和阻止安全漏洞。因此，在编程（语言）课程中引入这些概念是有意义的，尤其是所有学生必须参加的课程。这篇文章分为三个部分：\n对安全性编程的需求\n如何在330中介绍这个主题\n对Rust的介绍。\n感兴趣的可以看详细的文章内容原文http://www.cs.umd.edu/class/spring2018/cmsc330/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-16 11:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"软件的安全是编程语言的问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"功能相当于Vim/Vi，但是对Vim做了简化，并捆绑了现代编辑器的功能。目前刚发布0.5版本这个工具这么酷，为什么我刚知道？amp.rshttps://amp.rs/amphttps://github.com/jmacdonald/amp\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-16 11:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amp：面向终端的文本编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当前 0.99.2版本，将作为Rustfmt 1.0 RC版本，将在9.13号进入stable Rust原文https://www.ncameron.org/blog/rustfmt-1-rc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustfmt 1.0 发布预告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"上周 Tower Web才发布了0.1，其中使用了注释魔法来替代Rust的属性功能。比如上面的 /// @get(\"/\")。 然后serde、syn、quote的作者dtolnay看不下去了，就给提交了一个PR，将文档注释魔法改成了 属性的写法于是Tower Web的作者就赶紧发布了0.2版本，就当0.1从来没有存在过一样。文章作者还解释了他之前为什么要用文档注释魔法来替代属性。原文https://medium.com/@carllerche/tower-web-0-2-now-100-comment-attribute-free-3ed0633e47e5PRhttps://github.com/carllerche/tower-web/pull/59/files"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tower Web 0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要发布了 0.3和0.1的兼容层，现在可以在Tokio的executor上运行0.3 futures和async函数了原文https://rust-lang-nursery.github.io/futures-rs/blog/2018/08/15/futures-0.3.0-alpha.3.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Futrues 0.3 - alpha 3发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"简要：\n正在为wasm添加SIMD 128位矢量类型的支持\n让Firefox的debbuger工具可以使用DWARF调试信息对Rust+Wasm的内联栈帧进行调试，WebAssembly官方成立了调试小组\nwasm-bindgen 0.2.16发布\n首次发布wasm-bindgen-futures，支持在Rust Futures和JavaScript Promises之间无缝切换。\n在wasm book中增加了两章：「你应该知道的工具」以及「你应该知道的crate」\nrustwasm组收到了新的RFC： 通过wasm-bindgen实现Rust的trait和Javascript的类继承的无缝切换。此功能在stdweb中已经被实现。\n原文https://rustwasm.github.io/2018/08/14/this-week-in-rust-wasm-006.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 和Wasm 本周报告第6期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/977g2t/my_ludum_dare_42_jam_entry_is_pure_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于ggez框架和ECS架构实现的游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"WebAssembly对JavaScript和Web开发的未来意味着什么？为什么需要WebAssembly？\n将许多其他应用程序能做的事带到浏览器上，比如运行大型游戏、渲染等需要大量计算的事情\nWeb才是未来，真正的通用平台\nWebAssembly提供了速度、可移植性和灵活性。 wasm文件大小比js更小，速度更快，更可靠的性能保证\nWebAssembly提供了可移植性。不仅仅是Web可用，其他平台也可用，包括iOS和Android、区块链等。\nWebAssembly提供了巨大的灵活性。JS将不再是浏览器支持的唯一语言，在遇到瓶颈的时候，开发者可以选择任意喜欢的其他语言（包括js本身）来优化现有js系统的性能，并且是无缝对接。目前C、C++、Rust、Kotlin和.NET均先后增加支持\nWebAssembly如何工作？\n需要一个将代码编译为WASM的工具。C/C++通过LLVM和Emscripten，而Rust编译器可以直接编译wasm。\n将编译出来的wasm通过js加载，可以和js无缝互通\n未来？\n正在开发新的特性\n比如支持dom、线程和垃圾回收\n支持调试工具\n虽然js无法直接编译为wasm，但是有工具可以将js转换为wasm的文本格式，然后再转为wasm\n原文https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebAssembly： How and Why"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最流行的一个是Z-Machine，该网站就是Z-Machine的Rust和WASM实现原文源码https://sterlingdemille.com/encrusted/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-15 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和WASM实现的交互式文本游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"也就是说，let _ = Something::new() 这样的声明，下划线并不会获得所有权该文章对这种情况做了说明，并指出一种可能造成bug的情况。原文https://medium.com/codechain/rust-underscore-does-not-bind-fec6a18115a8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-14 11:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust下划线通配符并不会绑定任何值"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要是通过该示例来了解Rust中的trait，该文章中用到了迭代器、闭包原文https://www.joshmcguigan.com/blog/fizzbuzz-tour-of-traits-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-14 11:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust编写Fizzbuzz示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Never类型就是(!)，将Nerver引入match匹配，比如有可能解决穷举匹配的问题原文http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-14 11:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Niko的博文：关于将Never Type引入match匹配的想法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文对比了C++和Rust的对象，不过这里指的对象（Object）是广义上的，并不是特指OOP中的对象。该文中举的这个例子值得注意：变量x在move以后，打印出来的地址，在Debug模式下是不同的，但是在release模式下是相同的原文https://vorner.github.io/2018/08/12/Object-models-and-identities.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-14 11:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对象模型和标识"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文演示了如何通过Clippy的cast_lossless警告发现隐藏的Bug原文https://benjamincongdon.me/blog/2018/08/06/Clippys-cast_lossless-Lint-Warning/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-14 11:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Clippy发现Rust代码中隐藏的问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"语法图，也叫做铁路图（railroad diagram)，是一种表示形式语法的方式，规则如下:\n从左边界开始，沿着轨道到右边界。\n沿途，你在圆框中遇到的是字面量，在方块中遇到的是规则或描述。\n任何沿着轨道能走通的序列都是合法的。\n任何不能沿着轨道走通的序列都是非法的。\n末端只有一个竖条的铁路图，表示允许在任意一对符号中插入空白。而在末端有两个竖条的铁路图则不允许。\n看铁路图比直接看macro_rules!定义要简单的多，没那么烧脑\nDemo\nCode\n图为 nom中name!的语法图"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-13 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为macro_rules! 宏生成语法图(syntax diagrams)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文作者介绍了一些小技巧：\n使用cargo check。如果只是想验证语法、类型检查等，那么可以直接使用这个命令，它只会调用编译器前端。比cargo build快2倍，比cargo build —release快6倍。\n使用sccache，该工具是Mozilla出品的Rust兼容的编译缓存服务，一般可以获得2倍速度提升。使用cargo install sccache安装sccache，并且在.bashrc中添加环境变量export RUSTC_WRAPPER=sccache\n避免LTO。 LTO是链接时优化的缩写。LTO将付出更高的编译时间代价。\n控制crate依赖。\n原文https://vfoley.xyz/rust-compile-speed-tips/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-13 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何缓解Rust编译时间长的痛苦"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"什么是BFGS？Rust极有可能成为构建世界级机器学习工具的语言，但它目前缺少一些重要的数学基础设施。 BFGS是这些缺失的部分之一。在许多流行的机器学习算法中，目标是找到最小化算法预测和训练数据之间误差的参数。这可以表述为找到最小化损失函数的输入。线性回归，逻辑回归，神经网络和一些不同的贝叶斯技术，都可以表示为最小化问题。并没有一个通用的最佳的「最小化」功能，但是Python和R中都使用了BFGS算法。BFGS代表Broyden-Fletcher-Goldfarb-Shanno，它是1970年各自独立发布该算法的四位研究人员的名字。bfgs代码https://github.com/paulkernfeld/bfgs如果你有能力有兴趣，可以来这里帮忙改进Rust代码友情提示：参看原文需要机器学习基础原文https://paulkernfeld.com/2018/08/06/rust-needs-bfgs.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-13 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust需要BFGS"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n嵌入式工作组转移到了新的仓库：rust-embedded/wg， rust-embedded是新创建的组织\n嵌入式工作组现在拥有18个人，6个小分队，分别专注于Cortex-M、HAL、MS430、RISCV、Resources和Tools领域。\n也罗列了embedded-hal生态系统一些可用的库\n更多详细看文章原文https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-9/8185"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-13 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式工作组报告第9期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://philbooth.me/blog/refactoring-with-rust-macros\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-13 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust宏来重构代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"包括：\nPassword / passphrase authentication\nHOTP/TOTP 动态令牌\n随机key生成\nlibreauthhttps://github.com/breard-r/libreauth"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-12 10:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的用户验证算法集合库libreauth"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"提到Rust：在未来第三个季度Rust进入前20的可能性比较小，第二季度Rust一直保持在第23位。但是语言排名位置越高，越代表其增长就越来越困难。然而，有趣的是，Rust的出现越来越频繁。长远来看，如果来自中国的开源项目，如PingCAP的TiDB，使用该语言产生了什么好处，将会很有趣。PingCAP CTO回应：使用Rust语言，性能和安全性和开发效率完美平衡，但Rust的生态还需要进一步完善。原文https://redmonk.com/sogrady/2018/08/10/language-rankings-6-18/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-12 10:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"最新RedMonk 2018语言排名"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://neosmart.net/blog/2018/prettysize-for-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-12 10:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PrettySize-rs 旨在提供人类可读的接口来处理文件大小"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"sniffgluehttps://github.com/kpcyrd/sniffglue"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-12 10:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"安全的多线程数据包嗅探器 sniffglue"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"CRDT，Conflict-free Replicated Data Type的缩写，基于这样的数据类型，Xi可以在多个设备上同时编辑文本，合并编辑、离线编辑，并汇聚到包含所有更改一致的文档。这些数据结构和操作中的许多已经在Xi中存在了一段时间，但它们最近经过大量改进和扩展，作为通过CRDT合并操作添加多设备同步支持的项目的一部分。这样做是为了在Fuchsia操作系统上使用，它使用Ledger在设备之间同步文档。原文https://github.com/google/xi-editor/blob/e8065a3993b80af0aadbca0e50602125d60e4e38/doc/crdt-details.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-12 10:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Xi编辑器的文本引擎CRDT介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cloakhttps://github.com/evansmurithi/cloak\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-12 10:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的动态令牌库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在上一篇文章里，使用Rust实现类似于Go的管道模式。但是在Go中，需要使用Context（上下文）来防止内存泄漏。Go语言，表面看起来好像比Rust更简单。但是面对当前的问题，Rust解决的方式更简单。由于Rust的语言特性，比如迭代器、Drop、所有权等，所以我们基本不需要写多余的代码来处理资源泄漏的问题。（虽然Rust是保证内存安全，但实际上资源泄漏不在这个内存安全的范围内，纵然如此，使用Rust也很难资源泄漏，除非是通过精心构造循环引用）所以在Rust中不需要Context这种东西。本文主要是依赖第二篇的例子来说明，用Rust编写并发代码时候，处理垃圾，防止资源泄漏有多简单。比如在for循环中，达到条件break出来之后，将channel的reciver直接丢弃即可，Rust中的所有权机制会帮助你处理。原文https://medium.com/@polyglot_factotum/rust-concurrency-patterns-no-context-no-cancel-no-leak-b6c1ec2dafa5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust并发模式导读：No context, no cancel, no leaks"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gfx-rs是一个Rust项目，旨在使图形编程更易于访问和移植，专注于公开类似Vulkan的通用API。它是一个具有多个后端的单个Rust API，可实现它：Direct3D 12/11，Metal，Vulkan甚至OpenGLValve 是最先采用 MoltenVK（利用 Metal 实现的 Vulkan API 子集） 的公司之一，该公司一直在为 Dota 2 的 macOS 版本测试 MoltenVK。MoltenVK 将可以允许开发者能够为苹果平台构建 Vulkan 应用程序，终于可以利用一套代码库横跨 Windows、Linux、Android、macOS 和 iOS 等平台。最近Valve通过MoltenVK宣布了对Dota2 MacOS 官方Metal API的支持，所以这篇文章是对gfx-portability的测试记录。原文https://gfx-rs.github.io/2018/08/10/dota2-macos-performance.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MacOS上dota2的可移植基准测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://github.com/rust-lang-nursery/wg-net/issues/44"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方网络工作组开始征集Web项目示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"thumbcloudhttps://github.com/flofriday/thumbcloud"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的本地文件共享服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"性能测试胜于Lucene\n原文\n基准测试\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tantivy 0.7发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"xorihttps://github.com/endgameinc/xori"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的自动化静态分析、反汇编库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"还没有参加填写调查报告的，尽快去参与啦原文https://blog.rust-lang.org/2018/08/08/survey.html\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-11 10:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust官方启动了全球性的调查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tower-web 是一个异步HTTP Web框架，基于Tokio、hyper和Tower，适用于Stable Rust。看上面这个例子，tower-web为了支持Stable Rust，在impl_web!宏里通过解析文档注释 @get(\"/\")来告诉框架 GET / 路由匹配到hello_world上面。 如果Rust的自定义属性宏稳定了，会切换到属性宏之上。tower-web遵循 约定优于配置的理念（来源于Rails框架）。该文章只是一个简单的介绍，并没有提到Tower Web的中间件功能，可以翻看tower-web的源码来查看：Tower Web实现中间件的思路，提供了一个Middleware trait，可以通过实现该trait来定义自己的中间件。如果对Rails框架有了解的话，可以看得出来，该中间件协议有点像 Rack， 通过wrap方法包装自定义的行为，插入到Tower Web 的 Service 栈中。注意： 在未来的一个月内， tower-web会成为 Wrap异步框架的一部分。\n原文\ntower-web\nwrap\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"新的Web开发框架：tower-web"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"网络工作组在重启之后，建立了三个重要工作领域：\n异步基础。将async/await逐渐稳定，并构建相关文档。\n嵌入式网络基础。目标是支持Rust物联网的开发。 为no_std异步IO和硬件访问构建可重用组件，建立从硬件到应用的异步IoT 技术栈原型。\n网络基础。目标是改进Rust的Web编程。强化Web组件，即评估Web编程基础组件（http、url等），编写相关文档、改造API等。构建Rise，一个模块化框架，是为了工作组全面了解Web开发生态而创建。偏重于异步Web编程。以后可以基于Rise来构建自己的Web框架。\n原文https://rust-lang-nursery.github.io/wg-net/2018/08/09/going-live.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 网络工作组的愿景"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GPGPU（General Purpose GPU），通用计算图形处理器。专注于利用GPU加速图像处理的技术。目前广泛使用的GPGPU平台主要有OpenCL和CUDA，Rust目前对OpenCL的支持和C一样好，本文作者考察了两个Rust实现的OpenCL绑定库rust-opencl和ocl，发现ocl好一些，对底层的控制更加自由。但是目前市场上CUDA使用率比较高，因为CUDA为GPGPU提供了更简单的方法。然而经过作者考察以后发现，Rust对CUDA支持的比较粗糙，使用起来极不方便，一点都不理想。Rust中的CUDA并没有为生产做好准备，还需要做很多工作来赶上C中的CUDA。作者认为 GPGPU是Rust系统级高性能语言的重要用例。它与许多领域相关，包括机器学习，加密，加密货币，图像处理，物理模拟和科学计算。所以他打算改善这一情况，准备和Rust编译器团队进行合作，对rustc和LLVM进行改造。很期待！原文https://bheisler.github.io/post/state-of-gpgpu-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的GPGPU支持状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Discord游戏商店大量使用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比如可以将类似于 _ZN5space3fooEii这样的值，解析为Rust的对应结构。cpp_demanglehttps://github.com/gimli-rs/cpp_demangle"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个可以将C++ mangled 符号名解析为Rust值的包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust社区最近批准了一个自定义测试框架的eRPC，为自定义框架提供了一系列目标和可能的方向。本文阐述了相关原理\n原文\neRPC \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"自定义测试框架的探索"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文是对Go 管道模式的实现，但不是模仿Go，而是构建Rusty的管道管道介绍：管道是一系列联通的阶段（stage），在每一段中：\n通过 流入channel接收上游数据\n运行一些函数处理数据，产生新的值\n通过流出channel将数据发送给下游\n每一个阶段都有任意个流入channel或流出channel，其中，第一个阶段只有流入channel，最后一个阶段只有流出channel。第一个阶段有时候被称为源或者生产者，最后一个被称为槽或者消费者。（想象一下，古人取水通过竹节一段一段连通而成的运水管道）本文用Rust实现的管道，包含三个阶段：\ngenerate 生成数字\nsquare  使用worker对数字求平方\nmerge，对结果进行合并\n本文使用以下特性来实现Rusty的管道：\nthread\nIterator trait\nfor循环\nmpsc::Receiver\nDrop trait\n实现了三个函数：generate、square和merge。\ngenerate函数中， 生成一个子线程，通过gen_chan的Sender来发送生成的数字\nsquare函数，同样生成一个子线程，并且构建了新的channel，将接收到的数字通过迭代进行计算，将计算结果发送给merge channel\nmerge函数，同样生成一个子线程，并且构建了新的channel，将接收到的square计算结果发送给主线程\n想想 并发模式第一篇文章\n原文\n源码\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-10 11:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust并发模式文章导读：天生管道流"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"数据处理往往是Python的强项，但是该文作者会告诉你，Rust可以做的更好。该文着重讲nalgebra，一个矩阵和向量的科学计算库。该系列文章之后还会介绍ndarray，相当于python中的numpy。nalgebra允许开发者对矩阵（QR，SVD ......）进行多次分解，找到行列式和特征值，并进行大量的计算机图形操作（旋转，投影......等）原文https://misoraclette.github.io/2018/08/04/data_manipulation.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-09 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"系列文章：用Rust进行数据处理 Part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有朋友说新闻里发的并发模式三篇文章难以理解，所以我在这里帮忙做一个导读，今天是第一篇：通过共享Sender进行通信。在阅读本文前，最好能对Rust的Channel有比较详细的了解。\nRust和Go都奉行「通过通信来共享」的原则，但要注意Rust和Go中Channel的不同。\nRust中的mpsc，指的是多生产者，单消费者FIFO队列。\nRust的通道两端只能有同时由一个线程「拥有」，但是Sender端是可以通过clone来共享给多个线程，这就是所谓的mpsc。\n而Go的表现则是一个mpmc，多生产者多消费者。\nRust channel默认支持异步channel，可以使用SyncChannle支持同步channel。\n文章中用于说明Rust channel用法的示例主要采用下面并发架构：\n主线程从生产者（producer）那里接受消息\n根据producer的消息，将任务分配给工作池\n将工作的结果聚合给消费者\n最终将结果返回给主线程\n因此需要下面几个并发组件：\nproducer， 生产要一些「工作任务」\n主线程，指派工作任务\n一组 worker执行任务\nConsumer， 接收工作任务结果\n一切完成以后回到主线程\n具体的实现流程：\n创建和分享channel。 首先需要在主线程建立两个channel： 用于接收consumer结果，以及用于从producer接收任务。\n创建了一个loop循环，使用mpsc_select，提供了Select，可以同时处理 consumer结果和producer任务的句柄。也可以使用第三方库  crossbeam-channel\n如果只有一个输出端（recevier），如何通过channel给 worker分配任务？答案是建立一个新的channle（如第一条所说），并将sender放到一个VecDeque双端队列里面，循环使用。\n将所有工作汇总到给消费者，完成后回到主线程\n此外，还有围绕该示例的一些重要问题思考，可以参考完整源码去阅读。\n原文\n源码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-09 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust并发模式文章导读：通过共享Sender通信"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"请大家到 调查问卷 填写中文版问卷。https://wj.qq.com/s/2312110/5dff顺便可以将问卷转发给你们知道的使用Rust或对其有兴趣的人/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-09 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2018年Rust社区调查开始了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n支持了futures-rs 异步接口\n允许异步链接\n注意：此次异步支持当前还是实验性的release noteshttps://github.com/mitsuhiko/redis-rs/releases/tag/0.9.0\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-09 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"redis-rs 发布0.9"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ralfj比较高产，他负责Unsafe下内存模型相关的工作，目的是用miri来检测unsafe中的UB行为。该模型用于定义在unsafe内存模型中允许哪种别名。建立合理的别名规则，才能基于miri来检查unsafe下的UB行为。该模型的核心思想是： 对于一个内存位置，逐步建立可跟踪的引用，形成一个栈结构。比如有一个&mut i32，可以对其重新借用获得一个新引用。这个新引用是必须用于此位置的引用，建立在旧引用之上。当新引用过期的时候，旧引用会被激活，就好像是栈结构push和pop。\n更多详细\n关于别名规则issues\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-08 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"栈式借用：一种Rust别名模型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可修改的ArcArcCellhttps://github.com/k3d3/crossbeam-arccell"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-08 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crossbeam新出的库ArcCell"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nrust-concurrency-patterns-communicate-by-sharing-your-sender\nrust-concurrency-patterns-natural-born-pipelines\nrust-concurrency-patterns-no-context-no-cancel-no-leak\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-08 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust并发模式系列文章"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文章里Niko列出了一些issues列表原文https://internals.rust-lang.org/t/help-us-get-non-lexical-lifetimes-nll-over-the-finish-line/7807/4"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-08 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"NLL  现在需要你来帮助测试正确性 以备 RC"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个系列文章（如果作者足够坚持的话）的第00篇。教你使用Rust构建一个语言的VM。原文https://blog.subnetzero.io/post/building-language-vm-part-00/一共出到了第四篇：原文https://blog.subnetzero.io/事实上，也可以看看比较成熟的相关项目源码，比如 inko， inko就是用Rust实现了一个VM，一门面向对象语言，还支持类Erlang轻量级进程来处理并发。https://inko-lang.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-08 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"所以，你想创建一个语言虚拟机吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"第一篇文章之前介绍过： https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6PRRR是指Postgresql、Rust、Rocket、React 进行全栈Web开发原文https://medium.com/@ccrsh/introducing-prrrstack-pt-2-24704b5763b2\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-08 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PRRR全栈开发 系列文章Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"发布了新的指南，以及巨量新特性该引擎特色：\n\n使用gfx-rs渲染OpenGL图形，支持2D和3D，不久会支持Vulkan和Metal\n\n\n使用严格的Entity Component System (ECS)架构来组织游戏逻辑。可能是世界上最快的ECS，无运行时反射，可以毫不费力地处理数百万个组件\n\n\n跨平台，当前支持Windows/Linux/Mac，马上会支持iOS和Android\n\n\n原文\n\n\n官网\n\n使用gfx-rs渲染OpenGL图形，支持2D和3D，不久会支持Vulkan和Metal使用严格的Entity Component System (ECS)架构来组织游戏逻辑。可能是世界上最快的ECS，无运行时反射，可以毫不费力地处理数百万个组件跨平台，当前支持Windows/Linux/Mac，马上会支持iOS和Android原文https://www.amethyst.rs/blog/release-0-8/官网https://www.amethyst.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"数据驱动游戏引擎Amethyst 发布0.8"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://packages.debian.org/sid/ripgrep"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ripgrep已经登录debian平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"卖个萌"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在Diesel自定义Bool 类型，并通过Serde序列化和反序列化作者遇到一个需求：数据库中有一个字段published，表示发布状态，最早的时候该字段为bool类型，只有true和false两种状态。现在他想扩展发布状态为三种情况： 已发布、未发布和待定。有三种方案可以解决：作者选了第3种方式，因为待定状态其实并不需要持久化到数据库，放到内存中就可以。所以Rust中就可以使用enum来表示了使用 #[sql_type = \"Bool\"] 告诉diesel期待的数据类型，再为PublishState实现了ToSql,就可以将PublishState序列化为Bool类型.然后还得实现FromSql将该数据库的值反序列化为PublishState，反序列化只需要已发布和未发布两种状态即可原文https://noyez.gitlab.io/post/2018-08-05-a-small-custom-bool-type-in-diesel/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Diesel使用案例：自定义类型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Haiku操作系统非Lunix内核，而是BeOS的延续，发展将近20年了，没想到还活着（逃）竟然对Rust支持不错，通过HaikuPorts可以直接获取Rust 1.27未来Haiku核心成员还将打算使用Rust实现操作系统的一些API题外话：Haiku操作系统的日志号称是充满了诗意，大量日志信息使用俳句的形式：Sites you are seekingFrom your path they are fleeingTheir winter has come.译文：君所觅之站正循君之所迹离失恐已入休眠之季原文https://www.haiku-os.org/blog/nielx/2018-07-05_the_state_of_rust_on_haiku/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust在Haiku操作系统的状态介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://medium.com/@erik.tate/rust-modules-in-less-than-5-minutes-9bff7f617798"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust模块5分钟指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://routley.io/tech/2018/07/08/learning-rust-02.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"学习Rust系列：实现一个ls工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://medium.com/@wizofe/cross-compiling-rust-for-arm-e-g-raspberry-pi-using-any-os-11711ebfc52b"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用任意OS为ARM交叉编译的方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以关注一下这个仓库，目前只是个模板async-awaithttps://github.com/mgattozzi/async-await\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-07 10:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"magattozzi正在为RustConf 2018 准备async-await培训的PPT"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文记录了作者从发现问题，解决问题，到给Rust提PR的全过程，非常推荐大家仔细阅读一遍。原文https://blog.dend.ro/rust-and-the-case-of-the-redundant-comparison"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「推荐细读」给Rust提交PR全记录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该视频是GUADEC 2018（可能是什么大会）上面第一个主题分享，主要内容是介绍了如何将遗留的C语言的系统用Rust进行重构。视频中给出了一些模式和技巧，比如如何给C语言暴露Rust迭代器等，推荐仔细看看。原文https://www.reddit.com/r/rust/comments/94rp03/guadec_2018_federico_mena_quintero_patterns_of/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「推荐仔细品味」「油管」从C到Rust的一些模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"通过利用Unicode语言复数规则和Unicode CLDR中的多个规则来确定数字输入的CLDR复数类别。该库对于Rust实现i18n和l10n至关重要。复数的翻译是一个开发全球化应用程序时常见的问题。复数是用来表示一个“不是一”的数。比如说在英文中的 hour 跟 hours，单数跟复数会是不一样的单词。单复数的变化型态在每个语言里面都不一样，最普遍的复数型态用来表示二或更大的数字。在某些语言中，也有用来表示分数、零、负数或者二。Unicode Common Locale Data Repository (CLDR) 包含大量语言专属的资料，其中也包含所有语言的复数表现形态。CLDR 使用方便记忆的短标签给不同的复数类别，这些标签会被用在大多数的全球化 APIs:\nZero：表示零。\none (singular) ：表示一 ( 单数 )\ntwo (dual) ：表示两个\nfew (paucal)：表示少数\nmany：用来表示多数或者分数\nother：必备，如果该语言只有一种表示方式的话还是一样会使用到\n原文https://blog.mozilla.org/l10n/2018/08/03/intl_pluralrules-a-rust-crate-for-handling-plural-forms-with-cldr-plural-rules/如何在OpenFaaS上面运行RustOpenFaaS是函数即服务的开源实现（Function as a Service），可以自行部署。原文https://booyaa.wtf/2018/run-rust-in-openfaas/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"intl_pluralrules：一个用CLDR复数规则处理复数的Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://whitfin.io/analyzing-your-buckets-with-s3-meta/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编写的用来分析S3 Bucket信息的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自Rust社区的jamesmunns承诺2018年剩下的日子里每两周为Rust嵌入式Book写一章内容，预计9章原文https://jamesmunns.com/blog/working-on-the-book/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「通告」嵌入式工程师jamesmunns准备为Rust嵌入式Book贡献内容"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rs-eshttps://github.com/benashford/rs-es"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ElasticSearch Rest API的Rust客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Weld是一种用于提高数据密集型应用程序性能的语言和运行时。 它通过使用公共中间表示在库中表达核心计算，并为每个框架优化库和函数。weldhttps://github.com/weld-project/weld"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Weld：为数据分析准备的高性能运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gabirahttps://github.com/ersenal/gabira\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-06 12:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用于测试HTTP server的库gabira"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"顺便为「Rust学习曲线高」的说法正名"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-05 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"分享《Rust编程之道》中对Rust初学者的建议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Gutenberg是一个强力的静态博客引擎，灵感来自于Hugo，你可以有它构建下列种类的静态站点：\n博客\nLanding Page\n知识库\nGitbook\n文档站点\n上面所有组合\n原文https://www.vincentprouillet.com/blog/releasing-gutenberg-0-4-0/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-05 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gutenberg 0.4版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"kuppalistahttps://github.com/resilar/kuppalista"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-05 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust+WebSocket+JavaScript写的购物页面Demo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这IDE功能越来越丰富了呢原文https://blog.jetbrains.com/clion/2018/08/intellij-rust-update-2018_2/\n\n( 每日新闻备份地址 )\n\n\nTelgram Channel ： https://t.me/rust_daily_news \n\n( 每日新闻备份地址 )https://github.com/RustStudy/rust_daily_news"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://t.me/rust_daily_news"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-05 09:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Clion IDE Rust插件改进"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"TLDR：GAT是指Generic Associated Types ，是Rust将来的类型系统扩展，但是还未实现，它提供了一种可以使用高阶类型的方法。一个比较场景的例子是流式迭代器。Rust标准库中的迭代器API不允许生成从迭代器本身借用的元素。比如std::io::Lines，其实现迭代器只能读一行数据分配一个新的String，而不能重用内部缓存区。而流式迭代器可以允许通过引用迭代，而不是值，这样就可以实现重用。想要支持这种StreamingIterator，就必须实现一种更高级别的类型多态性，所以GAT 将会把Rust类型系统扩展到支持特点形式的高级多态性，称为关联类型构造函数。 相关RFC 1598这篇文章提出了三种无GAT下实现StreamingIterator的办法。原文https://lukaskalbertodt.github.io/2018/08/03/solving-the-generalized-streaming-iterator-problem-without-gats.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-04 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"无GAT解决流迭代器问题的三种办法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文作者针对其提交的Rust PR＃52942和＃52997分享了改善Rust的一些心得体会原文https://llogiq.github.io/2018/08/04/improve.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-04 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"参与改善Rust的心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看上去嵌入式工作组和CLI工作组进展比较丰富原文https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-08-04/8123"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-04 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 Edition 周末报告 第四期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nLLVM后端\n实现了call abi\n内建  riscv32imac-unknown-none target\nPRhttps://github.com/rust-lang/rust/pull/52787"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-04 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustc现在已经支持RISC-V"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可用于测试验证有关分配模式的假设，并可能用于生产负载以监控内存泄漏。stats_allochttps://github.com/neoeinstein/stats_alloc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-04 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于Rust全局分配器的中间件stats_alloc"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该项目作者是Asquera的员工，Asquera是德国一家技术公司，该公司招Rust工程师呢，可Remote所以如果有兴趣有意愿做remote的童鞋，可以参与一下贡献issueshttps://github.com/spacekookie/cargo-ws-release/issues\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-04 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"妹纸邀请你来做贡献"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"$ rustup update stable特性：\n\n＃[global_allocator] 现在稳定，允许Rust程序将其分配器设置为系统内存分配器，以及通过实现GlobalAlloc特性来定义新的内存分配器。\n\n\n改进了格式化（format!）的错误信息提示\n\n\nNonZero数字类型稳定。允许进行大小优化，例如，Option 大两个字节，但Option 只有一个字节大。\n\n\n不再允许使用build.rs在发布crate的时候修改src目录\n\n\n曾经的关键字pure，sizeof，alignof和offsetof是未保留的，现在可以用作标识符\n\n\nmacro_rules! 的生命周期匹配标记稳定\n\n＃[global_allocator] 现在稳定，允许Rust程序将其分配器设置为系统内存分配器，以及通过实现GlobalAlloc特性来定义新的内存分配器。改进了格式化（format!）的错误信息提示NonZero数字类型稳定。允许进行大小优化，例如，Option 大两个字节，但Option 只有一个字节大。不再允许使用build.rs在发布crate的时候修改src目录曾经的关键字pure，sizeof，alignof和offsetof是未保留的，现在可以用作标识符macro_rules! 的生命周期匹配标记稳定原文https://blog.rust-lang.org/2018/08/02/Rust-1.28.html更多详细内容https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1280-2018-08-02"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-03 10:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.28 稳定版发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/940jtb/cargolight_a_cargo_subcommand_that_finds_shadowed/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-03 10:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-light 可以在命令行高亮打印代码中的shadow 变量"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"过程概要：原文https://blog.jonharrington.org/rust-and-swig/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-03 10:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用swig创建Rust绑定的一个教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"矢量化SIMD指令的一次尝试。最快的椭圆曲线运算公式由Hisil，Wong，Carter和Dawson在其2008年的Twisted Edwards Curves Revisited论文中发表。 他们的论文还描述了其公式的并行版本，旨在在四个独立处理器上执行四个指令流。原文https://medium.com/@hdevalence/accelerating-edwards-curve-arithmetic-with-parallel-formulas-ac12cf5015be"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-03 10:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用并行公式加速Edwards曲线算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"（名字太长差评）原文https://www.reddit.com/r/rust/comments/93x0jj/yukikaze_a_way_to_async_http_client/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-03 10:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步HTTP客户端 Yukikaze"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"sequoiahttps://sequoia-pgp.org/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-03 10:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个新的OpenPGP Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://mp.weixin.qq.com/s/IqJLvHcnCIB5UVpox3ZyXg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-02 09:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"三十分钟成为 Contributor | 为 TiKV 添加 built-in 函数"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Hyper作者和Tokio作者联合发布的特点：wraphttp://seanmonstar.com/post/176530511587/warp"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-02 09:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wrap：新的web框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基本上里面的内容「每日新闻」近日都发布过了原文https://rustwasm.github.io/2018/08/01/this-week-in-rust-wasm-005.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-02 09:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust and WebAssembly 周报 005"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Vagga是一个容器化工具，受vagrant和docker的启发，专用于开发环境值得一试，特点：\n在Linux容器中运行程序（不像Vagrant那样完全虚拟化）\n完全用户空间容器，不需要像Docker那样的提升权限\n作为当前shell的子进程运行容器，没有 attach/detach 地狱\n镜像会自动重建和版本化\nVagga有管理进程树的工具（所以可以用一个命令运行redis-python-nginx服务器）\n与Vagrant-LXC和Docker的兼容性\n原文https://medium.com/@paulcolomiets/announcing-vagga-0-8-1-5e1fd44ee6favaggahttps://github.com/tailhook/vagga"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-02 09:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Vagga 0.8.1发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo-generate这个库使用的cargo-generate命令太长，建议改成cargo-gen，现已修改原文https://github.com/ashleygwilliams/cargo-generate/issues/53#event-1763365106\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-02 09:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"第一次给官方提的建议被采纳了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"现在来帮忙测试原文https://internals.rust-lang.org/t/help-test-the-1-28-0-prerelease/8097"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.28于周四发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.youtube.com/watch?v=rdmpOktHLmM"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「油管」Niko和Aaturon分享了Rust项目的开源经验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://matthias-endler.de/2018/fastcat/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用splice实现更快的cat"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该工具等价于serde + debug原文https://rreverser.com/derive-serdebug/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"serdebug 介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://github.com/Keats/rust-cli-template"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"快速生成跨平台CLI App项目模板"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-board-support-crate/betafpv-f3https://github.com/JoshMcguigan/betafpv-f3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"BetaFPV F3 飞控 电路板支持API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"font-kithttps://github.com/pcwalton/font-kit\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-08-01 10:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的跨平台字体加载库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文http://rust-lang-nursery.github.io/futures-rs/blog/2018/07/30/futures-0.3.0-alpha.2.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Futures 0.3.0-alpha.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"另一种说法叫：链式调用原文https://leotindall.com/tutorial/building-readable-tests-with-fluent-testing-apis/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"利用流式API（fluent API）构建可读的测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者用Rust实现了一个微容器rabbitc，文章是相关内容原文https://rabbitstack.github.io/operating%20systems/containers/linux-container-internals-part-ii/rabbitchttps://github.com/rabbitstack/rabbitc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"系列文章： Linux容器内部 Part2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"简要：\nlibm，MUSL数学库的no_std端口已完成首次发布，现在可以被需要支持数学函数的嵌入式或wasm来使用\n如果需要cargo-generate生成嵌入式模板项目，可以提交反馈\n基于embedded-hal的生态系统又发布了很多包\n原文https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-8/8089"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式工作组报告第8期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该作者用Rust和WASM实现了一个前端开发框架smithy，并且用smithy实现了一个TODO List demo原文https://medium.com/@robert.balicki_2494/writing-a-front-end-webassembly-framework-in-rust-lessons-learned-7cc48ed27d96smithyhttps://github.com/rbalicki2/smithyDemohttps://todolist.robertbalicki.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中编写前端WASM框架的教训和经验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.fpcomplete.com/blog/2018/07/streaming-utf8-haskell-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"比较Haskell 和 Rust的UTF-8流数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前招聘的是合约工，也许可以远程。通过Slack可以和公司的技术VP直接沟通总预算是2000美刀，看工作任务应该不太复杂原文https://www.reddit.com/r/rust/comments/938uez/hiring_backend_rust_dev_mit_venture_backed_startup/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust招聘： MIT风险投资支持的某创业公司招Rust开发「外包向」"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://blockchain.works-hub.com/jobs/backend-web-developer-in-san-francisco-united-states-ace1e?utm_source=reddit&utm_medium=post&utm_campaign=kenny"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"三藩市区块链团队招Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是RustCrypto组织下面的一个开源库，该组织应该是致力于用Rust和密码学相关的库吧stream-ciphershttps://github.com/RustCrypto/stream-ciphers\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-31 11:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个实现分组加密算法的库stream-ciphers"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/92wp36/test_driven_development_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-30 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「油管」Rust里的测试驱动开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"hellohttps://github.com/hello-rust/hello"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-30 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个CLI工具，可以帮助你快速提交文章到reddit、hackernews等站点"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Prometheus是一款开源的业务监控和时序数据库，可以看作是Google内部监控系统Borgmon的一个（非官方）实现。可以用它实现分布式在线服务监控。prometheus.iohttps://prometheus.io/rust-prometheushttps://github.com/pingcap/rust-prometheus\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-30 10:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Prometheus的Rust客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"nphysics是纯Rust实现的2D和3D物理引擎原文http://nphysics.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nphysics官方导读上线"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章以构建一个推荐好书的应用为示例：根据个人的阅读历史，为其推荐下一步的内容阅读建议基于sbr包里的推荐拟合模型原文https://maciejkula.github.io/2018/07/27/recommending-books-with-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust构建推荐系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"现在收集反馈原文https://www.reddit.com/r/rust/comments/92kozl/feedback_needed_upcoming_failure_012_release/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Failure 0.1.2 即将release"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/92nekl/rust_as_tt_sees_it_audio_and_slides_from_david/演讲pdfhttps://github.com/dtolnay/talks"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"硅谷Rust Meetup会议记录：声明宏中TT-muncher的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要用于创建Python项目原文https://github.com/Keats/kickstart"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的脚手架项目命令行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"fui可以为命令行应用增加表单界面fuihttps://github.com/xliiv/fui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fui 0.9发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"CBOR可以理解为二进制JSON格式这哥们说：我真的必须把它交给Rust WASM团队，只是扔给前端几个Rust crate说明不了什么问题言外之意就是必须用实际的应用来展示Rust和wasm-bingen的强大原文https://www.reddit.com/r/rust/comments/92gir9/i_really_have_to_give_it_to_the_rust_wasm_team/CBOR的更多介绍可以看这个幻灯片https://www.slideshare.net/ChristophEngelbert/cbor-the-better-json"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于Rust和wasm-bindgen实现的在线CBOR 解析工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于这篇论文实现https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/parsec-paper-letter.pdfGitHubhttps://github.com/d-plaindoux/parsec.rust\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-29 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust实现解析器组合子"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"12月6日发布的Rust 1.31.0将是“Rust 2018”的第一个版本。通过在Cargo.tom中增加edition = '2018'，将会开启一些在新的功能。edition 的意义在于Rust自身的进化，例如try是Rust 2018中的关键字，无法在Rust 2015中去修改它，这是为了不去破坏社区生态。如果开发者选择了edition='2018'，就代表了接受Rust的这种内部的变化，接受新的关键字try。edition升级的只是表面语法功能，Rust的核心概念是不会改变的。官方通过cargo fix工具帮助开发者升级到2018 editionRust编译器可以方便地管理版本的兼容性：\nRust 2015和Rust 2018是彼此兼容的\nRust编译器知道如何编译这两个版本，就像javac知道如何编译Java9和Java10，gcc和clang知道如何处理C++14和C++17一样。\n你可以在Rust 2018版本中依赖Rust 2015的库，反之亦然。\nRust 2015版本并未冻结。\n目前Rust 2018预览版已经登陆Nightly版本\nRust大版本，每三年发布一次，下一次是Rust 2021。文章中还提到了Rust 2.0“2.0”的概念在开发人员的脑子里极度泛滥成灾。 2.0应该是重大的突破性变化，当是时候扔掉所有东西重新开始的时候，才会考虑2.0。 因此，我们会非常谨慎地发布Rust 2.0。原文https://blog.rust-lang.org/2018/07/27/what-is-rust-2018.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方核心团队：Rust 2018是什么"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文从多个角度观察了Rust的流行度：\nGitHub增长趋势：\n\n使用GitHub Octoverse中用到的Rust语言pull请求数判断，Rust排名第15，2018年PR数是52936。第一名的是JavaScript，PR数是1736476\n按活跃的项目来算，Rust一共有2604个活跃项目，排名第15\n\n\n「重磅」Rust的商业用户增长飞快\n\nAmazon，Rust作为构建工具\nAtlassian，在后端使用Rust\nDropbox，前后端都用了Rust\nFacebook，源码管理工具\nGoogle， Fuchsia项目的一部分\nMicroSoft，新的Azure IoT 网络上的一部分\nnpm，在某些核心服务上使用了Rust\nRed Hat，用Rust创建了一些新的存储系统\nReddit，用Rust处理评论\nTwitter， 构建团队使用Rust\n可以在Rust之友网页上看到更多公司身影，包括百度、三星、mozilla、Chef等。\n\n\n游戏行业\n\nChucklefish，在新的游戏上使用Rust\nElectronic，在SEED中使用Rust\nFrostbite， 在后端处理中使用Rust\nReady at Dawn Studios，所有游戏将使用Rust （开发了《战神：奥林匹斯之链》 和《 战神：斯巴达之魂》的那家）\nUnity，在数据工程中使用Rust\n其他的独立开发者\n\n\n工作：\n\n招聘职位越来越多\nRust岗位目前覆盖云计算、区块链、安全、科学/医疗保健职位等领域\n\n\n社区治理：\n\n在过去，语言仅仅是用于商业开发，但是Rust社区改变了这种状况，Rust社区是语言的一部分，它提供了新用户、新项目的基调。\n全世界的Rust meetup已经有130+\nRust官方twitter 粉丝超过了31k，GitHub star也接近30k\nRust团队规模增长了一倍\n\n\n\n使用GitHub Octoverse中用到的Rust语言pull请求数判断，Rust排名第15，2018年PR数是52936。第一名的是JavaScript，PR数是1736476\n按活跃的项目来算，Rust一共有2604个活跃项目，排名第15\n\nAmazon，Rust作为构建工具\nAtlassian，在后端使用Rust\nDropbox，前后端都用了Rust\nFacebook，源码管理工具\nGoogle， Fuchsia项目的一部分\nMicroSoft，新的Azure IoT 网络上的一部分\nnpm，在某些核心服务上使用了Rust\nRed Hat，用Rust创建了一些新的存储系统\nReddit，用Rust处理评论\nTwitter， 构建团队使用Rust\n可以在Rust之友网页上看到更多公司身影，包括百度、三星、mozilla、Chef等。\n\nChucklefish，在新的游戏上使用Rust\nElectronic，在SEED中使用Rust\nFrostbite， 在后端处理中使用Rust\nReady at Dawn Studios，所有游戏将使用Rust （开发了《战神：奥林匹斯之链》 和《 战神：斯巴达之魂》的那家）\nUnity，在数据工程中使用Rust\n其他的独立开发者\n\n招聘职位越来越多\nRust岗位目前覆盖云计算、区块链、安全、科学/医疗保健职位等领域\n\n在过去，语言仅仅是用于商业开发，但是Rust社区改变了这种状况，Rust社区是语言的一部分，它提供了新用户、新项目的基调。\n全世界的Rust meetup已经有130+\nRust官方twitter 粉丝超过了31k，GitHub star也接近30k\nRust团队规模增长了一倍\n以上只是Rust社区数据一瞥，Rust未来会如何？我肯定会一直关注并看好。原文http://www.jonathanturner.org/2018/07/snapshot-of-rust-popularity.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「2018年7月」Rust流行快照"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Date  Beta channel        Stable channel  Status2018-08-02  1.29         1.28       Nightly = “Edition Preview 2”2018-09-13  1.30         1.29       Beta = “Edition RC 1”2018-10-25  1.31         1.30       Beta = “Edition RC 2”2018-12-06  1.32         1.31       Stable = “Edition release”原文https://internals.rust-lang.org/t/rust-2018-release-schedule-and-extended-beta/8076"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust发布计划"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/92abkg/rust_and_opengl_from_scratch_a_blog_post_series/原文http://nercury.github.io/rust/opengl/tutorial/2018/02/08/opengl-in-rust-from-scratch-00-setup.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[教程] 如何使用Rust构建OpenGL渲染器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"苹果上是有点麻烦，这篇文章真及时原文http://timryan.org/2018/07/27/cross-compiling-linux-binaries-from-macos.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"macOS上交叉编译Linux二进制文件案例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"inband生命周期是Rust2018即将稳定的特性，它消除了在每个范围内声明生命周期的要求。原文https://mark-simulacrum.github.io/2018/07/19/inband-lifetimes.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过librustc_mir探索inband生命周期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PCG是Procedural Content Generation，一般用于游戏中自动生成内容。原文https://www.jamestease.co.uk/blether/procedural-generation-with-binary-space-partitions-and-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现PCG技术系列博客Part 3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-07-27/8078\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-28 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 edition 周末报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"js-sys是配合wasm-bindgen 使用的库，它绑定了ECMAScript标准中存在的JavaScript所有全局API，方便调用当然js-sys还没有覆盖100%的JS API，还需要你的帮忙：issues-275https://github.com/rustwasm/wasm-bindgen/issues/275这是个体力活原文https://rustwasm.github.io/2018/07/26/announcing-the-js-sys-crate.html另外wasm-bindgen也包括了Web API的绑定，对应于web-sys库https://github.com/rustwasm/wasm-bindgen/blob/master/crates/web-sys/README.mdweb-sys库也需要帮助"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"js-sys发布 0.2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"实现了一个虚拟dom，可以根据服务端的HTML字符串渲染到浏览器的dom，完全同构，纯Rust+Wasmpercyhttps://github.com/chinedufn/percy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust+WebAssembly构建同构的Web App"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者在Ledger加密狗上尝试使用Rust，并且最终使用Rust替代了所有的C SDK依赖。原文https://medium.com/@roosmaa/bringing-rust-to-ledger-hardware-wallet-ccf1356a7de1源码https://github.com/roosmaa/bolos-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"硬件钱包也开始用Rust了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者的目标是让Toshi成为ElasticSearchtoshihttps://github.com/hntd187/toshi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Toshi，基于Tantivy的全文搜索引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这篇文章里，Aturon解释了为什么Cargo在解决依赖关系时通常会选择最新版本。Aturon认为「依赖地狱」出现的原因是以下四点目标没有做好：\n重复性。在不同的机器上进行构建都会得到相同的结果\n控制。用户可以控制何时以及如何升级依赖\n兼容性。\n可维护性。\n因此，包管理的作用就是提供机制、默认值和最佳实践，以便促使生态系统在这些目标之间达成平衡。目前并没有出现一个最佳的解决办法。最大版本解析的基本原理：\n大多数包管理器都使用最大（最新）版本，只有vgo使用了最小版本\n选择最大版本，需要lockfile文件的帮助来实现重现机制，而最小版本则不需要\n选择最大版本，是促进生态系统一致性的协议：版本之间彼此测试兼容性要以最新版本为准；而选择最小版本，则不会达到生态系统一致的目的。\n选择最大版本，有利于下游用户获得最新的错误修正，也可以促使生态系统中的库倾向于维护最新版本。\nCargo团队认为，选最大版本是对整个生态系统有好处的。主要的成本在于lockfile的复杂性。\n文章里也有关于工具链的更多讨论：原文http://aturon.github.io/2018/07/25/cargo-version-selection/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo中的版本选择"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从Rust内存管理机制获得灵感，通过Ada扩展提供指针类型来改进安全的自动内存管理PDFhttps://www.adacore.com/uploads/techPapers/Safe-Dynamic-Memory-Management-in-Ada-and-SPARK.pdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ada和Spark中的安全动态内存管理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个小型构建脚本（包括对代码的解释），可以为i86 32和64位计算机以及带有Travis-CI的Raspberry Pi（ARM）自动编译和创建Rust二进制文件。原文https://medium.com/@tyrf/multi-target-rust-builds-with-auto-deployment-in-travis-ci-ab5214fb73ba"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Travis-CI中使用自动部署构建多目标Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以到这个帖子里写下具体的代码片段原文https://internals.rust-lang.org/t/examples-where-2018-feature-caused-confusion/8067\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-27 09:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"有没有让你困扰的Rust 2018特性？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\n零成本类型安全的测量单位库，包含了长度、质量、时间、米、公尺等各种单位，还可以创建自己的单位（只要符合国际标准） uom\n\n\nFacebook开源的 Mercurial源码控制系统的下一代服务器 mononoke\n\n\n又快又安全的AV1编码 rav1e\n\n\n支持在AWS lambda上运行Rust rust-aws-lambda\n\n\nHaml模板语言的Rust实现 haml-rs\n\n零成本类型安全的测量单位库，包含了长度、质量、时间、米、公尺等各种单位，还可以创建自己的单位（只要符合国际标准） uomhttps://github.com/iliekturtles/uomFacebook开源的 Mercurial源码控制系统的下一代服务器 mononokehttps://github.com/facebookexperimental/mononoke又快又安全的AV1编码 rav1ehttps://github.com/xiph/rav1e支持在AWS lambda上运行Rust rust-aws-lambdahttps://github.com/srijs/rust-aws-lambdaHaml模板语言的Rust实现 haml-rshttps://github.com/jhartwell/haml-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-26 09:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日上榜项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RUSTSEC-2018-0003：  如果在Iterator::next中迭代器给SmallVec :: insert_many传播了恐慌，则在unwind的时候运行析构函数，导致双重释放。在smallvec 0.6.3中得到修复。rustsec.orghttps://rustsec.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-26 09:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust安全公告数据库： Restsec"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者（steveklabnik）针对这种言论给出了反击理由原文https://words.steveklabnik.com/is-webassembly-the-return-of-java-applets-flash\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-26 09:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebAssembly是Java Applets和Flash的回归吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://boats.gitlab.io/blog/post/my-experience-with-rust-2018/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-25 10:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 预览版体验记"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近回归Rust核心团队的ralfj来帮助你破除这种传言。ralfj正在为mir的内存模型而努力，这篇文章是他对指针模型和思考。主要涉及两个问题：\n指针是什么\n内存中的字节是什么\n因为他需要在mir中实现，如果指针和字节仅仅是数字，那么可能无法满足他的需求。结论：原文https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-25 10:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ralfj： 指针真的很简单只是整数而已吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://internals.rust-lang.org/t/help-test-out-the-2018-module-system-changes/8047"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-25 10:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"来帮忙测试Rust 2018中的模块系统变化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nDemo\n代码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-25 10:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust+Wasm实现的svg编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"也许早就有这功能了，只是我刚发现，介绍给大家今天给我推荐了7个Rust项目GitHub Discoverhttps://github.com/discover"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-25 10:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub现在可以根据兴趣来推荐仓库了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nvim和neovim的LSP支持项目 LanguageClient-neovim\nPhysically Based Rendering,PBRT(光线跟踪：基于物理的渲染) 这本书中代码的Rust实现  rs_pbrt\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-25 10:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日上榜新项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"曾开发 《战神：奥林匹斯之链》 和《 战神：斯巴达之魂》 的业界大厂 Ready at Dawn Studios 日前表示，将放弃C/C++开发，全面拥抱Rust。其CTO表示：将使用Rust添加或替换掉核心技术模块，最初会使用C-API来和遗留代码集成，直到最终不再有遗留代码。老实说，我不再认为有任何理由使用C++"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【重磅】开发《战神》的游戏大厂宣布将全面拥抱Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"之前都去忙 Futures 0.3 alpha  了，接下来重启网络工作组完成其余的基础工作：\n集成Futures到现有的库中\n制定、记录和改进网络服务生态系统：\n\n协议支持同步和异步（http、http/2、grpc、thrift等）\n为现有的中间件建立接口（rabbitmq、kafka、rdis等，以及其他存储中间件）\nWeb框架\n完善异步编程指南\n\n\n\n协议支持同步和异步（http、http/2、grpc、thrift等）\n为现有的中间件建立接口（rabbitmq、kafka、rdis等，以及其他存储中间件）\nWeb框架\n完善异步编程指南\n原文https://internals.rust-lang.org/t/rebooting-the-network-services-working-group/8036"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」网络工作组重启"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文作者分析了在多线程并发程序中发生panic的问题所在，并探讨了解决方法原文https://vorner.github.io/2018/07/22/dont_panic.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Don't Panic"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是一个高性能的WASM代码生成器Cranelifthttps://github.com/CraneStation/cranelift"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"之前的Cretonne项目改名为Cranelift"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者记录了他的Yew和Rust三天之旅原文http://bluejekyll.github.io/blog/rust/2018/07/22/static-web-app-rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust开发静态Web 应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://matklad.github.io/2018/06/18/exceptions-in-structured-concurrency.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"结构化并发中的错误处理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo-audit可以对项目中的crate进行安全审计，发现是否存在有包含安全漏洞的包rustsec是一个crates.io生态系统中的安全漏洞数据库这次版本更新有重大革新原文https://www.reddit.com/r/rust/comments/919c8k/announcing_cargoaudit_03_and_rustsec_07_audit/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-audit 0.3 和 rustsec 0.7 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文作者拿Rust和OCmal进行相互调用，并且给出了性能报告ocaml-rust-ffihttps://blog.s-m.ac/ocaml-rust-ffi/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-24 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和OCmal一起玩耍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo fix原文https://github.com/rust-lang/cargo/pull/5723"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-23 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustfix现在已经被合并到了cargo中成为其子命令"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"重新实现了std中的collections模块定义的Box/ Vec/ HashTable/ BTree/ Heap/ RawVec特点是，如果不能分配内存则会报错libreal.rshttps://github.com/strake/libreal.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-23 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个新的集合库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有助于Rust的学习原文https://hackernoon.com/you-too-can-read-disassembly-d47a3be74010"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-23 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"教你如何阅读反汇编"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个解析gcode程序的小项目，主要用于嵌入式应用程序（CNC机器或3D打印机）。原文https://www.reddit.com/r/rust/comments/90x6k0/announcing_gcode_v030/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-23 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gcode v0.3发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文探索组件模式以及如何在Rust中实现它，从组件trait的基本概念开始，然后基于组件的并行操作，通过消息传递来通信。并且包含一个完整的示例。大型应用程序通常由许多有状态进程组成，这些进程必须以特定的顺序启动和停止。 组件模型使这些关系显式和声明性，而不是隐式代码。组件trait：原文https://vadosware.io/post/a-pattern-for-component-based-program-architecture-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-23 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于组件的Rust程序架构模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在使用FFI的时候比较有用原文https://crates.io/crates/null-terminatedRust实现的解析器词法分析器生成器plex提供两个宏：lexer!和parser!\nlexer! 可以创建基于DFA的词法分析器，工作方式像lex\nparser! 可以创建一个LALR(1)的解析器，工作方式像yacc\nplexhttps://github.com/goffrie/plex\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-23 10:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个专门用来处理以null结尾数组的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章包括：\n如何使用Rust 2018 edition\n如何报告问题\n测试哪些内容\n使用Rustfix排除现有的crate\n使用新的features，比如新的模块系统\n原文https://www.ncameron.org/blog/how-to-help-test-the-2018-edition/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-22 10:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：如何帮助测试Rust 2018 edition"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Content-O-Tron是官方内容团队负责的一个社区计划该计划准备寻找那些使用Rust并且经常写博客的人，帮助推动编写Rust相关博客和帮助传播、解决问题原文http://blog.community.rs/content-team/2018/07/16/hello-content-o-tron.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-22 10:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：你好Content-O-Tron"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个帖子评论很多，可以看看个人观点： Rust用户倒是可以从C/C++那里学到很多教训，反而对Rust的设计理解更深原文https://www.reddit.com/r/rust/comments/90mj0d/what_could_rust_users_learn_from_c_or_c/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-22 10:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"讨论： Rust用户可以从C/C++学到什么？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-3/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-22 10:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编写GPU加速路径跟踪 Part3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"taizenhttps://github.com/NerdyPepper/taizen基于Cursivehttps://github.com/gyscos/Cursive\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-22 10:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Taizen: 在命令行浏览维基百科"},"type":"text"}],"type":"title"}},]
