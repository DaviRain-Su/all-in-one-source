export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Servo是一个用Rust语言开发，可以在Spidermonkey VM中运行JS或WASM代码。该篇文章是关于Servo编程的，介绍了如何与Servo集成。Medium文章，https://medium.com/programming-servo/programming-servo-my-own-private-runtime-8a5ba74c63c8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://medium.com/programming-servo/programming-servo-my-own-private-runtime-8a5ba74c63c8"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Servo编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Anagrams，使用Kotlin + Rust实现Anagrams原生移动应用。Gitlab，https://gitlab.com/dpezely/native-android-kotlin-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gitlab.com/dpezely/native-android-kotlin-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Anagrams"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Intermodal，BitTorrent元信息实用程序，其二进制文件称为imdl。目前，它可以创建，验证和显示种子的内容。Github，https://github.com/casey/intermodal"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/casey/intermodal"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Intermodal"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Malluscript是一种脚本语言，不是严格类型安全的，仅使用两种数据类型：字符串和整数，当前处于开发阶段。Github，https://github.com/Sreyas-Sreelal/malluscript--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Sreyas-Sreelal/malluscript"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Malluscript，Rust实现的脚本语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://yaah.dev/try-blocks"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 18:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"分析rust的三種回傳包裝"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人在boats最近的blog發現他不建議大家用他建議除了作為返回值以外不要使用Ok-Wrapping可以讓程式碼更清楚更容易看懂Read morehttps://boats.gitlab.io/blog/post/why-ok-wrapping/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 18:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ok(match thing { ... }) 不好嗎？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這幾天大家瘋狂的在討論Ok-Wrapping本文只是希望以一些分析性的方式來說明為什麼我個人不喜歡Ok-wrapping的一些原因。Read morehttps://vorner.github.io/2020/04/09/wrapping-mental-models.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 18:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ok-Wrapping的心理模型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://github.com/victoredwardocallaghan/techair\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-11 18:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust編寫的GPLv2安全氣囊控制軟件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个比较长的博客，主要是用一个例子驱动的方法来解释Rust中的Futures，探索为什么他们被设计成这样，以及他们如何工作，此外还介绍在编程中处理并发性时的一些替代方案。原文地址：https://cfsamson.github.io/books-futures-explained/introduction.html，同时国内的大佬 白振轩的个人博客已经做了翻译，请看：https://stevenbai.top/rust/futures_explained_in_200_lines_of_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-10 09:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"200行代码讲透 Rust Futures"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前些天，我们日报小组介绍了 Krustlet，这是 Rust 中一个基于 WebAssembly 的 Kubelet 实现。 我们选择使用Rust的原因有两个：1、Rust对WebAssembly编译提供了一些最好的支持（稍后会详细介绍），1、我们想证明 Rust 的优势可以应用于 Kubernetes 生态系统。 这篇文章旨在表明我们学到了什么以及为什么我们认为 Rust 是编写 Kubernetes 重点应用程序的绝佳选择（有时更好）【来自（DeisLabs）的博客】。原文请看：https://deislabs.io/posts/kubernetes-a-rusty-friendship/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-10 09:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 是 k8s 的不错选择"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"proc-macro-error 的目标是使过程宏中的错误报告变得轻松便捷。使用实例速览：仓库地址：https://gitlab.com/CreepySkeleton/proc-macro-error"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-10 09:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"proc-macro-error"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"和一般浏览器的「保存为网页」不一样，该工具可以把所以的css、js、image等元素都保存到独立的html页面里，即便是离线，它也可以按当前浏览器呈现的状态来保存网页。（类似于Chrome的mth格式文件）https://github.com/Y2Z/monolith"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Y2Z/monolith"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-09 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"monolith：将完整的网页保存为一个独立html页面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://www.notion.so/A-book-about-Rust-a51507cd17bb4c379d705a4f282425d6"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.notion.so/A-book-about-Rust-a51507cd17bb4c379d705a4f282425d6"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-09 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Steve 在写新的一本 Rust Book"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者使用的是 SiFive FE310 RISC-V微控制器的HiFive1开发板https://k155la3.blog/tags/riscv/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://k155la3.blog/tags/riscv/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-09 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"系列文章：通过构建 Risc-V 机器人来学习嵌入式 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/Hexilee/async-postgres"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Hexilee/async-postgres"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-09 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-postgres：运行时独立的异步 PostgreSQL 客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"http://sled.rs/errors"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://sled.rs/errors"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-09 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【博客】Rust 项目中的错误处理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此更改对Rust的任何用户都不会产生可见的影响，但将大大改善贡献者的体验。https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-08 08:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软和GitHub都要求我们尝试GitHub Actions"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"长期以来，对rust-lang/rust的贡献一直是作者的愿望。 通过努力终于提交了9个补丁, 有兴趣的可以看看这9个补丁, 讲的很详细.https://blog.yoshuawuyts.com/nine-patches/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.yoshuawuyts.com/nine-patches/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-08 08:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"9个补丁"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://cfsamson.github.io/books-futures-explained/introduction.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://cfsamson.github.io/books-futures-explained/introduction.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-08 08:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对Rust中的Futures感兴趣吗?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"BobQ"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"项目目的\n学习\n实现类似Kinesis一样的流服务\n单一可执行文件\n轻松托管，执行和运营\n已经发布的博文：\nBuilding a Distributed Log from Scratch, Part 1: Storage Mechanics\nBuilding a Distributed Log from Scratch, Part 2: Data Replication\nBuilding a Distributed Log from Scratch, Part 3: Scaling Message Delivery\nBuilding a Distributed Log from Scratch, Part 4: Trade-Offs and Lessons Learned\nBuilding a Distributed Log from Scratch, Part 5: Sketching a New System\nThe Log: What every software engineer should know about real-time data's unifying abstraction\nHow Kafka's Storage Internals Work\nKrustlet: Running WebAssembly Workloads in Kubernetes (written in Rust)https://deislabs.io/posts/introducing-krustlet/取名Krustlet就是指Kubernetes-rust-kubelet的意思。项目的目的：\n在Kubernetes上部署WebAssembly变得简单轻松。\n就是想向技术社区证明和展示如何在Kubernetes上用不同的编程语言实现架构层的想法和设计。\n因为很多Kubernetes的应用都是用GO语言编写的，我们现在用Rust语言来实现Krustlet。\n描述Service workers网页服务后台脚本进程在整个Servo浏览器大架构里的地位，这些后台脚本都是用Rust语言来实现的并行Web引擎。https://medium.com/programming-servo/programming-servo-workers-at-your-service-db71e5943511"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-07 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【Rust日报】2020-04-06 Voik - 一个试验性的分布式流平台/Krustlet/Servo Service Workers"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"上周六，小编发日报时疏忽大意。感谢今天张汉东老师的指正！中文社区有人传：steve宣布解散文档团队。其实这个事，就好比：「你心血来潮建个xxx主题的群，结果进来的都是凑热闹的，作为群主的你，号召了好几次，大家都为xxx主题行动起来，结果响应的人寥寥无几，那么作为群主的你，只能宣告，“我们这个群已经名存实亡”了。作为群主的你，还是继续默默自己一个人去为xxx主题努力着。steve 就很像这个群主。」他在文章结尾说了：As such, this blog post isn't really announcing the end of the docs team as much as it is describing what is already true today.I will still be doing my work on core, and the book. And I plan on submitting some more docs PRs in the future.原博客文章，https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-04 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Steve 并没有宣布要解散文档团队"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Stjepan Glavina是Rust流行库Crossbeam的作者，最近一年专注于async-std的开发。博客文章，https://stjepang.github.io/2020/04/03/why-im-building-a-new-async-runtime.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://stjepang.github.io/2020/04/03/why-im-building-a-new-async-runtime.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-04 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Stjepan：为什么我要建立一个新的异步运行时？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Fondant，基于宏的CLI实用程序配置管理库。\n支持json，yaml和toml\n支持自定义配置路径\n支持自定义配置文件名\nGithub，https://github.com/nerdypepper/fondant"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/nerdypepper/fondant"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-04 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fondant"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Kubie，是kubectx和kubens的强劲替代方案，其中功能包括：Shell隔离模式等。介绍文章，https://blog.sbstp.ca/introducing-kubie/Github，https://github.com/sbstp/kubie--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/sbstp/kubie"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-04 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Kubie简介"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是一個參考Elm製作的gui https://elm-lang.org/畫面預覽https://gfycat.com/littlesanehalicore-rust-guiRead morehttps://github.com/hecrj/iced"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 22:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"iced: 新的跨平台gui"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://github.com/richardanaya/watson"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 22:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"watson: no_std + alloc的最小的wasm解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有點lex, yacc的感覺Read morehttps://christianpoveda.github.io/blog/parsing/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 22:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"寫一個Lambda演算解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"prodash 是一個tui庫可以平行繪製控制項Read morehttps://docs.rs/prodash/3.5.0/prodash/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 22:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"prodash 3.5發佈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这门语言刚起步，代码采用 Rust 提倡的多crate结构，逻辑看上去很清晰，对编程语言感兴趣的可以看看。特点：\n\n提前编译-Mun提前编译（AOT），而不是即时解释或编译（JIT）。 通过在AOT编译期间检测代码中的错误，可以消除整个运行时错误类别。 这使开发人员可以在自己的IDE舒适的范围内，而不必在IDE和目标应用程序之间切换以调试运行时错误。\n\n\n静态类型-Mun在编译时而不是在运行时解析类型，从而在编写代码和打开强大的重构工具之门时立即得到反馈。\n\n\n一流的热重载（hot-reloading ）Mun的每个方面在设计时都考虑了热重载。\n\n\n性能-AOT编译与静态类型结合可确保将Mun编译为可以在任何目标平台上本地执行的机器代码。\n\n\nLLVM用于编译和优化，以确保最佳性能。 热重载确实会引入一点运行时开销，但是可以在生产版本中禁用它，以确保最佳的运行时性能。\n\n\n交叉编译-Mun编译器能够从任何受支持的编译器平台编译到所有受支持的目标平台。\n\n\n强大IDE集成  (目前尚未实现) -Mun语言和编译器框架旨在支持源代码查询，从而实现了强大的IDE集成，例如代码完成和重构工具。\n\n提前编译-Mun提前编译（AOT），而不是即时解释或编译（JIT）。 通过在AOT编译期间检测代码中的错误，可以消除整个运行时错误类别。 这使开发人员可以在自己的IDE舒适的范围内，而不必在IDE和目标应用程序之间切换以调试运行时错误。静态类型-Mun在编译时而不是在运行时解析类型，从而在编写代码和打开强大的重构工具之门时立即得到反馈。一流的热重载（hot-reloading ）Mun的每个方面在设计时都考虑了热重载。性能-AOT编译与静态类型结合可确保将Mun编译为可以在任何目标平台上本地执行的机器代码。LLVM用于编译和优化，以确保最佳性能。 热重载确实会引入一点运行时开销，但是可以在生产版本中禁用它，以确保最佳的运行时性能。交叉编译-Mun编译器能够从任何受支持的编译器平台编译到所有受支持的目标平台。强大IDE集成  (目前尚未实现) -Mun语言和编译器框架旨在支持源代码查询，从而实现了强大的IDE集成，例如代码完成和重构工具。示例：消息来源：@Chaos 张老师，Mun 源码仓库： https://github.com/mun-lang/mun ，书籍 ： https://github.com/mun-lang/book"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 13:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mun-lang一门基于 Rust 的新生编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果你用 Rust 语言或 Go 语言编写过代码，就会发现它们之间有些相似之处和不同之处。这两种语言的设计目标有重叠的部分，但也有很多差异。正如我们知道的，该如何选择语言取决于要解决的问题。很幸运，我们找到了一位对这两种语言都有着丰富经验的工程师 — Damien Stanton，并与他进行了一次交流。更多请看原文，地址：https://dmv.myhatchpad.com/insight/choosing-between-rust-or-go/，消息来源：微信公号-高可用架构。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 13:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"新项目用 Rust 还是 Go ？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当你开始 Rust 的学习之旅后，很可能遇到需要使用字符串的场景，但是编译器却无法让你的代码通过编译，因为有一部分代码，看起来像字符串，事实上却又不是。看下这个文章或许能给你解惑：https://zhuanlan.zhihu.com/p/123278299，内容来源：知乎-Praying。原文地址：https://link.zhihu.com/?target=https%3A//blog.thoughtram.io/string-vs-str-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-03 13:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【译文】Rust中的String和&str"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://cfp.rustconf.com/events/rustconf-2020此外 OxidizeConf 也因为新冠病毒推迟活动了，OxidizeConf  是嵌入式和IoT 主题的 Rust Conf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://cfp.rustconf.com/events/rustconf-2020"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"今年RustConf 根据covid-19的情况，有可能开线上Conf"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://github.com/rust-lang/rfcs/pull/2893"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/rfcs/pull/2893"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Add a trustme keyword to define unsafe code blocks #2893"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Upwork是全球最大的、最优秀的、最规范的综合类人力外包服务平台.详情：https://youtu.be/h3yFOf6hIjQ"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://youtu.be/h3yFOf6hIjQ"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"自由职业者平台 Upwork 通过一则广告宣布 支持 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"分享者： 布莱恩·坎特里（Bryan Cantrill） - 氧化物（Oxide）计算机公司 2020年2月26日活动：斯坦福研讨会 (Stanford Seminar )尽管我们的软件系统变得越来越有弹性，但可用于运行该软件的物理基础（即计算机！）仍然停留在PC架构的旧时代。 超大型基础设施提供商早就意识到了这一点，制造出适合用途的机器，但这些进步却被大众市场所拒绝。在本次演讲中，讨论对新型机架式服务器端机器的愿景，以及开放固件、RISC-V和Rust等技术进步将如何在实现这一愿景中发挥核心作用。详情：https://youtu.be/vvZA9n3e5pc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://youtu.be/vvZA9n3e5pc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【演讲】新机器的灵魂:重新思考计算机"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"MATRIX Creator是一款专为人工智能而生的功能齐全的开发板，包括传感器、无线通信和FPGA。MATRIX Creator的使命是为世界各地的每一个学生、研究人员、创客、喜欢小发明和开发人员提供一个完整的、经济的、用户友好的工具，用于简单到复杂的物联网(IoT)应用程序的创建。组成：\n处理器：Atmel Cortex-M3 ATSAM3S2\nFPGA（可编程逻辑门）：Xilinx Spartan 6 XC6SLX4\n麦克风阵列：8 MEMS MP34DB02 音频传感器数字麦克风\nIMU：ST LSM9DS1 3D 加速度, 3D 陀螺仪e, 3d 地磁计\n温度 /湿度：ST HTS221 电容式温度和相对湿度传感器\n海拔传感器：NXP MPL3115A2 高精度压力传感器\nzigbee：芯科 EM358X - 2.4 GHz IEEE 802.15.4\nZ-Wave：Sigma Designs ZM5202 - 868/908/921 MHz\n红外接收器：Vishay TSOP573 - carrier 38.0 kHz\n红外发射:2 Vishay LEDs (front and bottom), 930nm, 100mA, 120° viewing angle\n紫外线传感器:Vishay VEML6070 UV light sensor\nNFC:NXP PN512 NFC 读卡器\nEverloop:35 RGBW LEDS\nNFC通过移动设备或物理嵌入标签的安全交互。麦克风阵列驱动基于声音的行为与波束形成和回声消除从8个麦克风传感器对温度、压力、紫外线、运动和方位等实时信息做出测量。斯巴达克-6 现场可编程逻辑门用于机器学习、密码学、独立内存或软cpu的可重构计算能力。性能可以通过您自己的FPGA定制或下载我们的更新来定制和改进。无线个域网在你的家庭和企业中，与各种无线设备进行通信。z - wave控制2100多个z波段智能家居设备。详情：https://github.com/matrix-io/matrix-rhal"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/matrix-io/matrix-rhal"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MATRIX Creator 开发板的 Rust 硬件抽象层"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"介绍：\nhttps://r2.rs/ \nhttps://github.com/gopakumarce/R2\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"R2: Rust 实现的路由器数据包转发引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"HTML5 + WASM游戏引擎，适用于用Web-sys 和 Rust编写游戏。高度基于 specs 这个库来实现。游戏开发爱好者可以关注下。详情：https://github.com/PsichiX/Oxygengine"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/PsichiX/Oxygengine"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Oxygen ：Rust实现的HTML5 Core的游戏引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SmallVec 和 ArrayVec 100% 安全的替代品详情：https://github.com/Lokathor/tinyvec"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Lokathor/tinyvec"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-04-01 22:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TinyVec"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #workshopB站视频回放地址：\nhttps://www.bilibili.com/video/BV1ti4y1b7xy/\n三份 PPT 下载地址：\nhttps://c-t.work/s/74b9dcf657be4d\nhttps://cowtransfer.com/s/c98f417a076d48  密码shanghaitech\nhttps://c-t.work/s/37a60fd0da9041  密码shanghaitech\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-30 13:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"上海科技大学GeekPie社团 WorkShop#7「关于Rust你需要了解的…」"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #paper\n上科大宋老师： https://arxiv.org/abs/1804.10806\nCyber Security Lab , NTU ： https://arxiv.org/abs/1804.07608\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-30 13:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"两篇关于「K-Rust ： Rust 可执行形式语义」的论文"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #wasm推荐阅读，使用no_std的 crate 开发webAssembly，通过开发web模拟器来实现嵌入式图形库举例说明。Read Morehttps://rahul-thakoor.github.io/using-no-standard-library-crates-with-webassembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-30 13:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用no_std crate开发webAssembly"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #androidRead Morehttps://krupitskas.github.io/posts/quest-dev-part-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-30 13:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在Android设备上运行rust应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #ci #cd@svartalf开发了一个网站，列举了rust项目常用的一些GitHub Action。https://twitter.com/svartalfRepohttps://actions-rs.github.io/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-30 13:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 项目常用的 GitHub Actions"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"活动链接：https://mp.weixin.qq.com/s/ljKJAuHk7cCpnJ4cgbHOuQ"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mp.weixin.qq.com/s/ljKJAuHk7cCpnJ4cgbHOuQ"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-28 15:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"今晚，上海科大Rust线上活动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在本文中，我们将探讨协作式多任务处理以及Rust的async/await功能。这篇博客文章链接：https://os.phil-opp.com/async-await/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://os.phil-opp.com/async-await/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-28 15:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编写操作系统系列：async/await"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"nalgebra，Rust线性代数库，包含变换和静态或动态大小的矩阵。WASM中使用效果良好。Doc.rs链接：https://docs.rs/nalgebra/0.20.0/nalgebra/Github链接：https://github.com/rustsim/nalgebra"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rustsim/nalgebra"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-28 15:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nalgebra，Rust线性代数库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust文档团队不再存在。博客文章链接：https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/03/27/goodbye-docs-team.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-28 15:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust文档团队，再见"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天還有做了Asset browserRead morehttps://bit.ly/2WNp6r5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"有人用rust做了一個wasm遊戲引擎 Oxygengine"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以簡單驗證指令回傳值的庫Read morehttps://bit.ly/3dB8dWg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust: assert_cmd"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"編譯器對您的程式碼做了什麼？編譯器是如何做到的？這其中包含了一大堆問題\n如何平衡編譯器速度，編譯器記憶體使用、速度、大小、穩定性/正確性等問題？\n編譯過程的包含哪些階段？如何將它們組合在一起？\n泛型在編譯過程中會發生什麼？\n在編譯過程中執行會何種優化？\n增量編譯如何運作？\nrustc是否支持並行編譯？\n如果您了解編譯器並希望加入rustc-dev-guide我們歡迎您的貢獻，並期待您的參與！Read morehttps://bit.ly/2UGVQ2h\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustc-dev-guide簡介"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在线分析大型 Rust 应用程序很困难，目前常见的分析器无法胜任该工作。来自 PingCAP 官博的分享，介绍了他们在工程上是如何使用 go 工具分析 Rust 程序性能瓶颈的。详情请看原文：https://pingcap.com/blog/quickly-find-rust-program-bottlenecks-online-using-a-go-tool/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PingCAP：使用 Go 工具快速在线查找 Rust 程序瓶颈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"mp4ameta 是受 id3(https://crates.io/crates/id3) 和 metaflac(https://crates.io/crates/metaflac) 项目启发，用于解析 MPEG-4 音频元数据（m4a和m4b）的库。仓库地址：https://bitbucket.org/Saecki/rust-mp4ameta"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/id3"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"audio 的 mp4 元数据解释器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"随着 WebAssembly 越来越火热，medium 上的一位博主开始撰写系列博文，使用 Rust 实现 WebAssembly 解释器，原文请看：https://medium.com/@richardanaya/lets-write-a-web-assembly-interpreter-part-1-287298201d75reddit 上参与讨论：https://www.reddit.com/r/rust/comments/foqoxd/lets_write_a_web_assembly_interpreter_part_1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"系列博文：实现一个WebAssembly解释器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"h2 是基于 tokio 的 HTTP/2.0 客户端和服务器实现。github 地址：https://github.com/hyperium/h2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-27 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"h2 v0.2.1 版本更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"测试驱动的 Rust 学习项目，适合有其他语言编程经验的 Rust 新手. 在这个项目中，你可以通过一系列测试驱动的练习以及阅读材料来学习如何构建一个 JIRA，并在此过程中学习 Rust.详情：https://github.com/LukeMathWalker/build-your-own-jira-with-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/LukeMathWalker/build-your-own-jira-with-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-26 00:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过开发一个 JIRA 来学习 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://www.publish0x.com/rhyzom/rust-a-systems-programming-language-for-tomorrows-networked-xzexrk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.publish0x.com/rhyzom/rust-a-systems-programming-language-for-tomorrows-networked-xzexrk"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-26 00:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【博客】Rust：未来网络世界的系统级编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Agnostik 可以作为应用和执行器在处理异步事物时的中间层. 它可以让你在切换执行器时更轻松并且不用改动太多代码.详情：https://github.com/bastion-rs/agnostik"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/bastion-rs/agnostik"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-26 00:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Agnostik: Executor Agnostic Runtime"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://github.com/mcorbin/meuse"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mcorbin/meuse"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-26 00:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MEUSE: 私有的 Cargo crate 注册表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://github.com/rust-lang/regex/issues/656"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/regex/issues/656"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-26 00:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"regex crate 的发展计划"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Arduino是一个基于易用硬件和软件的原型平台（开源）。它由可编程的电路板（称为微控制器）和称为Arduino IDE（集成开发环境）的现成软件组成，用于将计算机代码写入并上传到物理板。Arduino Due是基于Atmel SAM3X8E ARM Cortex-M3 CPU的微控制器板。它是第一款基于32位ARM内核微控制器的Arduino板。几天前，作者在Arduino Due上进行了嵌入式开发的实验。相当不错的开发体验并且易于设置，但是Internet上的许多信息已经过时了。作者总结了 Hello World 入门例子, 推荐给大家. https://github.com/sdroege/arduino-due-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/sdroege/arduino-due-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-24 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Arduino Due上使用 Rust 编写的小示例应用程序, 适用于嵌入式开发的同学"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者很努力的录制了大量Rust基础学习教程, 拼命代码例子进行讲解, 也可以练习听力, 推荐给大家: https://egghead.io/lessons/rust-integer-types-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://egghead.io/lessons/rust-integer-types-in-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-24 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对于国内程序员来说, 即能练习英文又能学习Rust, 是不是很Cool."},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章链接: http://brooker.co.za/blog/2020/03/22/rust.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://brooker.co.za/blog/2020/03/22/rust.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-24 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"AWS的程序员: 马克·布鲁克, 写了一篇关于他最近2年使用Rust的一些心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"BobQ"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"geo, geo-types, 和 geojson 新版本发布，现在已经更新到crates.io.https://docs.rs/geo有不少non-breaking的更新，添加了不少新的功能特征：\n增加了大量的一级文档，同时加了很多扩展型的例子，特别是很多crate库中geo生态中\n相互操作性的例子文档。\n更多的LineString iterators，允许Points 和 Coordinates做mutable iteration操作。\n一些新的算法，特别是在Chamberlain-Duquette领域\ngeojson 和 geo 类型的 From  和 TryFrom实现。\ngeojson 类型除了增加了quick_collection\n功能之外，允许任意合法的GeoJSON类型转换成geo-types的Geometrycollection。\n这曾经是很多程序员的痛点，因为在很多地方都要搞boilerplate，现在牺牲一点点性能就可以获得极大的便利性。\n现在RDP and Visvalingam-Whyatt simplification算法都可以直接返回简化了点地理几何索引indices。\n这个对很多FEI用户非常有用，因为不同的几何坐标系类型之间彼此常常是不能直接MAP在一起的，往往需要重建自己的\n简单几何坐标类型，重新编译本地的原生类型。如果你现在拿到这些索引，哈，简单多了！\n这些新版库还包含了很大一部分各种各样的小改进，大部分都是文档类的，但愿任意被新用户轻松掌握；geo生态已经有了很多专业领域的crates了（比如coordinate projection 和 transformation, shapefiles, gpx, polylines等等）要把这些专业领域的库都能很好的掌握的揉和起来应用不简单，这些新的功能更新就是要让应用更加简单方便容易。https://github.com/Riey/cargo-feature只需要敲入下面的代码：不需要再像下面这样手工输入：或https://rust-analyzer.github.io/thisweek/2020/03/23/changelog-17.htmlhttps://rust-analyzer.github.io/manual.htmlhttps://stephanheijl.com/rustls_sni.htmlNew version of unsafe Qt bindings for Rust is releasedhttps://rust-qt.github.io/blog/qt_crates_release_0_5/I've written a Python VM in Rust and open for any feedbackhttps://github.com/FKLC/PyVM"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-24 05:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【Rust日报】2020-03-23 geo, geo-types, 和 geo-json 新版本发布！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #cratetide-validator 是一个tide的数据校验中间件，刚开发出来没多久，作者希望能得到code review。Repohttps://github.com/bnjjj/tide-validator"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-22 20:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tide-validator - tide 框架数据校验中间件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这片文章介绍了用可视化方式展示rust借用、生命周期、Clone等，文章中介绍了一些符号的作用，如果以后我们在尝试理解生命周期并给别人讲述时，都使用这套规则，那么理解成本将会降低很多。https://rufflewind.com/2017-02-15/rust-move-copy-borrowJeff Walker在这一片文章Rust Lifetime Visualization Ideas中表示这种图形虽然美观且易懂，但是并不适合在编辑器里展示，因为它占用的空间太大了，并且在现实编码情况下，这种展示方式可能变得相当复杂。https://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/文章中介绍了Paul Daniel Faria为Atom编辑器开发了一个rust lifetime可视化插件原型，可以通过选中变量，查看它的生命周期范围并高亮展示，但是这种展示方式并不清晰，要通过开发者自己去识别，脑力成本有点高。所以开发一款美观、直观、且使用的Rust lifetime可视化插件确实是个难活。作者通过对vscode代码截图，然后用图片编辑工具添加了他认为比较好的展示方式，最后总结了一款Rust lifetime可视化插件应该具备哪些要素，并鼓励开发者参考他的想法尝试开发。Graphical depiction of ownership and borrowing in Rusthttps://rufflewind.com/2017-02-15/rust-move-copy-borrowRust Lifetime Visualization Ideashttps://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/Rust lifetime plugin for atomhttps://github.com/Nashenas88/borrow_visualizer_prototype"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-22 20:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust lifetime 可视化插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在最近的nightly版本中，你可以在使用no_std时使用async/await了。\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-22 20:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 no_std 中使用async/await"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"absolution，用于在令牌树上进行操作的过程宏工具。Githubhttps://github.com/Manishearth/absolution"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用absolution，摆脱syn"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust是否可以实现内存安全的承诺？论文https://arxiv.org/abs/2003.03296"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一篇分析Rust内存安全的论文"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文档的目的是进行安全的应用程序开发建议，同时利用Rust语言提供的各种可能性。指南https://anssi-fr.github.io/rust-guide/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust安全指南文档"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"除了top外，一些可能会使用的基于终端的系统监视工具，包括ytop，bottom，zenith。文章https://www.wezm.net/v2/posts/2020/rust-top-alternatives/--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的top工具比较"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是针对那些希望快速在Option值上找到相应函数名称的人。例如，对于Rust，在特定情况下使用哪一个？是or_else，unwrap_or还是unwrap_or_else？速查表https://notes.iveselov.info/cheatsheet-rust-option-vs-haskell-maybe"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一份Rust中Option和Haskell中Maybe的速查表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ttf-parser，一个高级，安全，零分配的TrueType字体解析器。现在v0.5，支持可变字体和C API。Githubhttps://github.com/RazrFalcon/ttf-parser"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ttf-parser v0.5"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个Electron+Rust的模板项目。Githubhttps://github.com/usagi/template-rust-backend-with-electron-frontend"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Electron+Rust模版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust社区很多更新内容，可以查看详细信息。https://this-week-in-rust.org/blog/2020/03/17/this-week-in-rust-330/BTW：TWiR正在寻找新的维护者。--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-21 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TWiR 330"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该扩展可以让你直接在地址栏即时搜索 Rust 文档，crates.io 上相关的库，Rust 内建方法甚至 Rust 官方书籍等等。使用方法相当简单，在浏览器地址栏输入 rs，然后按空格，这个插件就会被启用，接着你就可以搜索🔍你需要的内容了！目前支持 Chrome、Firefox 浏览器，安装地址：https://rust-search-extension.now.sh/。该项目源码 GitHub 地址：https://github.com/folyd/rust-search-extension。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-19 23:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"超棒的 Rust 浏览器搜索扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Parity 在 rust-libp2p 中所做的出色工作的基础上，已经开始进行全职的 Rust-IPFS 实现工作。 Equilbrium 在协议实验室的支持下带头推动了新的社区和实现，并且正在寻找更多的 Rust 开发人员来帮助构建 InterPlanetary File System 的 Rust 实现。查看原文：https://blog.ipfs.io/2020-03-18-announcing-rust-ipfs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-19 23:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust-IPFS 正在寻找 Rust 开发者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"【来自 Rust 官博的消息】原定于 3 月 16 日至 20 日在希腊塞萨洛尼基举行的 Rust All Hands 活动在 1 月被取消。“All Hands” 是本年度大家最喜欢的活动之一，对于我们今年无法举办该活动，我们感到非常失望。为了保持透明并记录未来事件，我们对发生的事情，所学到的知识以及所有人的未来进行了回顾。阅读更多请看：https://blog.rust-lang.org/inside-rust/2020/03/18/all-hands-retrospective.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-19 23:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"All Hands 回顾"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ripgrep是一种面向行的搜索工具，这个版本是 ripgrep 的一个重要版本，其中包含许多错误修复，一些重要的性能改进和一些次要的新功能。仓库地址：https://github.com/BurntSushi/ripgrep"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-19 23:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ripgrep 12 更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\n网络工程师：https://jobs.apple.com/en-us/details/200144575/software-engineer\n\n\n存储工程师：https://jobs.apple.com/en-us/details/200117537/software-engineer\n\n网络工程师：https://jobs.apple.com/en-us/details/200144575/software-engineer存储工程师：https://jobs.apple.com/en-us/details/200117537/software-engineer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://jobs.apple.com/en-us/details/200117537/software-engineer"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 22:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"苹果招募 Rust 程序员"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"地址：https://rust-search-extension.now.sh/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-search-extension.now.sh/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 22:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Search Extension : 最好用的 Rust 搜索插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"例如 winapi 只有两个目标平台：x86_64-pc-windows-msvc 和  i686-pc-windows-msvc ，那就可以这样配置：详情：https://blog.rust-lang.org/2020/03/15/docs-rs-opt-into-fewer-targets.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2020/03/15/docs-rs-opt-into-fewer-targets.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 22:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"doc.rs 现在允许选择 build 目标平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"为 async std 开发的数据并行库，使用方式如下：详情：https://blog.yoshuawuyts.com/parallel-stream/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.yoshuawuyts.com/parallel-stream/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 22:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"parallel_stream：数据并行库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Dropbox是最实用且免费的文件同步、备份、共享云存储软件, 同步引擎是桌面电脑上 Dropbox 文件夹背后的魔法，也是 Dropbox 最古老、最重要的代码之一。用Rust来对它进行重写, 足以展现出Rust强大的能力.这篇文本https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine 详细说明了重写Dropbox同步引擎的过程, 值得大家阅读."},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 00:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust重写 Dropbox 同步引擎核心功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust中的引用允许你使用值但不获取其所有权, 理解引用对于Rust使用者来说非常重要. 这里有一篇文章, 对引用解释的比较通俗易懂. 推荐给大家. https://blog.thoughtram.io/references-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.thoughtram.io/references-in-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 00:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的引用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"joshsulin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在过去的几周中，密切监视着'新型冠状病毒肺炎'的情况，并就此情况进行了一些内部讨论。 衷心告知，我们决定取消Rust LATAM 2020。详细通知https://rustlatam.org/index.html#cancel-en\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rustlatam.org/index.html#cancel-en"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-18 00:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"社区决定取消Rust LATAM 2020"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"BobQ"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\nAWS 在其博客中介绍了该团队最新的开源项目 Bottlerocket。\n据介绍，Bottlerocket 是一种新的基于 Linux 的开源操作系统，\n用于在虚拟机或裸机主机上运行容器，主要采用 Rust 代码编写，\n并且仅包含运行容器的基本软件。\nBottlerocket 支持 Docker 镜像和其他开放容器倡议\n（Open Container Initiative，OCI）支持的平台。\n同时，Bottlerocket 依赖于镜像模型，而不是程序包更新系统。\nhttps://aws.amazon.com/cn/blogs/aws/bottlerocket-open-source-os-for-container-hosting/\n\n\nsheeit：一个速度飞快的网页版电子表格引擎，支持上千个用户同时编辑上百万个表格单元。\nhttps://github.com/wilfredwee/sheeit\nsheeit依靠四大核心技术支持：\n\n支持上千个并发读（和很多写）操作\n所有类型的数据操作都非常快\n计算公式只有在必要的时候才被激活校验\n各种公式计算高速并行同时进行\n\n\n\nasync-graphql v1.0.0 已发布，支持所有GraphQL特性，欢迎试用。\nhttps://github.com/sunli829/async-graphql\n\n\nripgrep v12.0.0 正式发布 ripgrep是一个按照正则表达式模式搜索当前目录的行搜索工具\nv12.0.0主要是修复bug和提高搜索性能，并增加了一点小的新功能。\nhttps://github.com/BurntSushi/ripgrep/releases/tag/12.0.0\n\n\n最新GitHub最活跃10大编程语言排名Rust名列第4！\nhttps://learnworthy.net/10-most-active-programming-languages-in-github/\n1. JavaScript  \n2. Python\n3. Java\n4. Rust\n5. PHP\n6. C#\n7. C++\n8. TypeScript \n9. Ruby\n10. Shell\n11. C\n\n\n\n2020 Rust Conference开始征集发言，教程和论文\nhttps://blog.rust-lang.org/2020/03/10/rustconf-cfp.html\nRustConf2020将于2020年8月20-21日举办，有意发言或发表论文的请尽快申请。\n论文征集开放截止日期是2020年4月5日星期一。\nRustConf2020论文征集网站\n\n\nRust游戏编程月报2020年2月期\nhttps://rust-gamedev.github.io/posts/newsletter-007/\n\n\n五年了，我还在学Rust编程！？！！？！\nWHAT！？！？(歪帽黑人脑袋顶上好多问好和感叹号) ，Rust语言很强大，也很有趣，不断完善，各种异步函数。。。\n哈哈哈～～～五年了，我还在学RUST！\n https://llogiq.github.io/2020/03/07/learning.html\n\nAWS 在其博客中介绍了该团队最新的开源项目 Bottlerocket。据介绍，Bottlerocket 是一种新的基于 Linux 的开源操作系统，用于在虚拟机或裸机主机上运行容器，主要采用 Rust 代码编写，并且仅包含运行容器的基本软件。Bottlerocket 支持 Docker 镜像和其他开放容器倡议（Open Container Initiative，OCI）支持的平台。同时，Bottlerocket 依赖于镜像模型，而不是程序包更新系统。https://aws.amazon.com/cn/blogs/aws/bottlerocket-open-source-os-for-container-hosting/sheeit：一个速度飞快的网页版电子表格引擎，支持上千个用户同时编辑上百万个表格单元。https://github.com/wilfredwee/sheeitsheeit依靠四大核心技术支持：\n支持上千个并发读（和很多写）操作\n所有类型的数据操作都非常快\n计算公式只有在必要的时候才被激活校验\n各种公式计算高速并行同时进行\nasync-graphql v1.0.0 已发布，支持所有GraphQL特性，欢迎试用。https://github.com/sunli829/async-graphqlripgrep v12.0.0 正式发布 ripgrep是一个按照正则表达式模式搜索当前目录的行搜索工具v12.0.0主要是修复bug和提高搜索性能，并增加了一点小"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://llogiq.github.io/2020/03/07/learning.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-16 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【Rust日报】2020-03-16 Rust动态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章从 Copy-On-Write 的概念入手，探讨了 C++ 中的 COW，和 Rust 中的 COW 的设计。然后做了简单的性能评测，以及解释了 Rust 中的睿智设计。推荐阅读。https://oribenshir.github.io/afternoon_rusting/blog/copy-on-write"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-16 11:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"是优化？不是优化？关于对 COW 的深入思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者最近在设计 redox 上的包格式。它应该具有如下优点：详细请阅读原文。https://www.redox-os.org/news/pkgar-introduction/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-16 11:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pkgar - Redox 上的包管理工具（以及包格式）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"静态 Vec 的意思就是非动态分配内存的 Vec。使用了预先分配的一定容量的内存。它使用 const generics，基于一个 array 实现。https://github.com/slightlyoutofphase/staticvec"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-16 11:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"staticvec - 静态 Vec"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Llogiq 大佬新出的文章。摸索出了一种小技巧，可以不使用 Box 指针来实现同样的动态分派。值得学习。https://llogiq.github.io/2020/03/14/ootb.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-16 11:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Out of the Box Dynamic Dispatch"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"相对于std::borrow::Cow，beef::Cow在内存上更紧凑。Githubhttps://github.com/maciejhirsz/beef/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-14 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"更紧凑的Cow"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"3月20日，星期五，欧洲中部时间17：00，有个嵌入式 Rust 开发的远程会议，大约 3-4 小时。活动将通过 Zoom 举办，欢迎来自世界各地的演讲者和参会者。网站https://oxidizeconf.com/oxidize-1k/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-14 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Oxidize 1K：嵌入式 Rust 开发的远程会议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust CLI 工作组宣布发布Confy 0.4。crates.io链接https://crates.io/crates/confyGithubhttps://github.com/rust-cli/confy--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-14 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Confy 0.4"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"增加了 Subslice patterns新巨集 matches!其它功能詳見Read morehttp://bit.ly/2Wbae5w"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-13 18:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.42.0 發佈了！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Withoutboats是Rust lang小組的成員。從2018年初開始，他們開始研究Rust的異步等待。本文講解了異步語法應該要解決的太多問題要保持異步和同步代碼為盡可能\"類似\"且好用。Read morehttp://bit.ly/2wPQWb8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-13 18:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Async Interview: Withoutboats"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者通過實作 async/await 與使用 tokio改善了UI效能Read morehttp://bit.ly/2IFqCDc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-13 18:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust:改善 spotify-tui 透過使用 async"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章一開始講解了wasm的優缺點像是是32位開頭而不是64位指標與介面類型之類的一些基本內容仍然是WIP狀態下面介紹各種名詞\nwasm –“機器碼”。設計用於可移植，快速且易於執行的bytecode。\nwasi –“系統調用”。用於執行基本系統任務（主要是I/O）的API。\n編譯器- rustc, clang, emscripten等\nwasmer – wasmer.io上的人製作的直譯器/JIT\nwasmtime –直譯器/JIT 不同的人做的\nwapm –與npm類似的軟件包管理器\nWASI – WebAssembly系統接口，一種POSIX-y API，\n為非Web平台上的wasm程式提供系統介面。\nCranelift –用Rust編寫的編譯器和JIT後端。在概念上類似LLVM。\n詳細請看文章Read morehttp://bit.ly/38NGnme\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-13 18:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust: 實際使用Wasm"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sessions 库可以为自定义会话后端系统提供基础的内存和文件系统支持。特性如下：\n\nAsync/await\n\n\nEasy custom Store\n\n\nStores the values in a Map<String, Value> based on serde_json\n\nAsync/awaitEasy custom StoreStores the values in a Map<String, Value> based on serde_json使用示例：GitHub 地址：https://github.com/trek-rs/sessions"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-12 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Web 框架常备的 Sessions 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"😊给 Gopher 的一段 Rust 简单介绍，相信你会喜欢上 Rust 的！视频地址请戳：https://youtu.be/eQjPvsmfItsReddit 上参与讨论：https://www.reddit.com/r/golang/comments/fgy1fo/a_short_introduction_to_rust_for_programmers/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-12 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust for gopher"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 的复杂结构的初始化是比较头疼的问题。 目前有几种流行的解决方法，例如 pub fn new（）约定和 builder模式。在这篇博文中，我们将对它们进行比较，并介绍一种新的模式 - Init Struct Pattern。查看博客原文：https://xaeroxe.github.io/init-struct-pattern/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-12 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Rust 复杂结构体初始化的讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"navi 是用 Rust 编写的命令行的交互式备忘单工具，它可以浏览备忘单并执行命令，并且可以提示你输入参数值。GitHub 仓库地址：https://github.com/denisidoro/naviReddit 上参与讨论：https://www.reddit.com/r/rust/comments/fgzifj/an_interactive_cheatsheet_tool_for_the/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-12 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"navi"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者从事于用 Rust 促进 .NET 开发的工作，现在他们的项目有点快成形的意思了但还有很多问题，所以他决定和社区的人介绍一下他们的工作并交流一下.项目现在还没取好名字，也暂不开源，主要两部分组成：\n将 rustc 中的 LLVM bitcode 转化为 .NET 程序集（assembly）的编译器\n为其他 .NET 程序集聚合 Rust bindings 的工具，这样就可以用 Rust 代码来调用 .NET 库了.\n这样一来 Rust 代码就可以调用\t.NET 代码了，反过来也一样.下面是一个 Rust 函数，它将一串数字的字符串字面量转化为一个 .NET 字符，然后再对其调用 System.Int32.TryParse()详情：https://ericsink.com/entries/dotnet_rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://ericsink.com/entries/dotnet_rust.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【博客】我对 Rust 和 .NET 的探索"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://github.com/etsy/Evokit"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/etsy/Evokit"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Evokit ：用于搜索的神经网络进化机器学习系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个操作系统几乎所有新部件都是用 Rust来构建的.详情：https://github.com/bottlerocket-os/bottlerocket"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/bottlerocket-os/bottlerocket"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bottlerocket ： 基于 Linux 的操作系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情：https://www.youtube.com/watch?v=QAz-maaH0KM"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.youtube.com/watch?v=QAz-maaH0KM"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【视频】Rust NYC: Jon Gjengset - 让 unsafe 代码变得简单易懂"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"你有什么关于 Rust 想要分享的吗? 想要谈谈 Rust 的\t学习和使用 Rust 的经验吗？或者想深入讲解 Rust 的一个方面? 亦或是有其他的想法？我们都欢迎你的提议！RustConf 2020 CFP 官网现已上线并接受提议.https://cfp.rustconf.com/events/rustconf-2020详情：https://cfp.rustconf.com/events/rustconf-2020\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://cfp.rustconf.com/events/rustconf-2020"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2020 RustConf CFP (Call For Proposals) 正式启动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章浅显易懂，有一些有价值的思考，推荐阅读：https://xaeroxe.github.io/init-struct-pattern/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对 Rust build pattern 的新思考 - Init Struct Pattern"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust warp web框架写的后端。NATS[https://nats.io/]NATS.io is a simple, secure and high performance open source messaging system for cloud native applications, IoT messaging, and microservices architectures.https://github.com/sphqxe/NATS-WebUI"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 写的 NATS 监控 web app"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以直接使用 cargo publish 上传。构建私源( a private ‘single source of truth’ )的几个优点，他写了：\nCan be managed, secured and controlled in a systematic way\nIs available to teams and individuals within the organization anywhere in the world via a ‘web-scale’ cloud infrastructure\nCan be distributed on a commercial/licensed basis if necessary on the same basis\nSupports assets all common languages and formats (Rust and Cargo being just one of dozens of supported formats)\nhttps://blog.cloudsmith.io/2020/03/09/announcing-native-cargo-uploads-in-cloudsmith/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cloudsmith 支持直接上传 Cargo 包到他们的云平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"推荐阅读。附带赠送一个小小的性能评测。https://treit.github.io/programming,/rust,/c%23/2020/03/06/StartingRust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"A C# programmer 尝试 Rust - Part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"俄罗斯方块啦，网页上运行的。https://github.com/ha-shine/wasm-tetris"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-03-11 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasm-tetris - Rust 写的 Tetris 克隆"},"type":"text"}],"type":"title"}},]
