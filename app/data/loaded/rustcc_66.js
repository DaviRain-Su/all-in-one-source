export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rust compiler book planhttps://internals.rust-lang.org/t/so-you-want-to-hack-on-the-rust-compiler-a-plan-for-a-book/6497" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "官方讨论贴： 关于编写rust compiler book的讨论" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "nrc实现的\"概念验证（Proof-of-Concept）\"的Graphql Servera proof of concept graphql server framework for rusthttps://www.ncameron.org/blog/a-proof-of-concept-graphql-server-framework-for-rust/nrc写道 ：该框架为Rust Server提供了一个无缝的GraphQL接口。 它类型安全，符号直观，可定制。 它有可能会非常快。 我相信它是GraphQL开发的最佳体验之一，也是最快的实现之一（部分原因在于我认为Rust和GraphQL非常合适）。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现的Graphql Server" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "how to use rust non lexical lifetimes on nightly https://santiagopastorino.com/how-to-use-rust-non-lexical-lifetimes-on-nightly/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何在夜版Rust上使用NLL" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "地址https://internals.rust-lang.org/t/pre-rfc-catching-functions/6505\n增加throw关键字，等价于return error\n增加catch，用于捕获Error\n增加返回catch语法，-> i32 catch Error，等价于Result<i32, Error>\n目测是为了增强错误处理的语义" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Catch 功能Pre-RFC发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个版本的特点是重新设计的AST比以前更加一致和易于理解，并且支持遍历和构建语法树更舒适的习惯用法。另外，与之前的版本不同，该版本着重于解析源代码的字符串作为输入，这个版本是围绕解析由2.0过程宏使用的Rust编译器的token表示而构建的。详细https://www.reddit.com/r/rust/comments/7oznfm/announcing_syn_012_complete_redesign_for_all_your/syn https://github.com/dtolnay/syn" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "syn发布了0.12，重新设计了AST" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "cargo bloathttps://github.com/RazrFalcon/cargo-bloat" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新的cargo工具 :cargo-bloat" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "基于Rust和OpenCVrustfacehttps://github.com/atomashpolskiy/rustface#----rustface" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "基于Rust实现的人脸识别" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "TLS bulk performance: rustls versus OpenSSLhttps://jbp.io/2018/01/07/rustls-vs-openssl-performance-1.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TLS性能: rustls vs OpenSSL" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Introduction to Functional Programming in Rusthttps://www.youtube.com/watch?v=PbLY-cVRiog" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-09 10:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「油管」介绍Rust中的函数式编程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 2018https://www.ncameron.org/blog/rust-2018/nrc写道：2017年Rust发展的太快，虽然推动了Rust的发展，但与此同时也欠下了一些技术债，2018年应该把节奏放缓，把技术债还清。具体的动作包括：不能让那些特性继续飞了，2018年应该把它们尽快实施，nrc给出了一个列表：\nconst exprs\nmodules and crates\nmacros\ndefault generics\nergonomics initiative things\nimpl Trait\nspecialisation\n对于已经实现的很多功能，要尽快把它们稳定（stable）下来。\n进一步完善async/await相关的语言特性和库，让Rust成为异步开发的首选。\nunsafe guidelines ，确立unsafe的指导规范，借此来促进编译器的优化，降低编程中的不确定性。\n大力支持Webassembly。\ncompiler performance， 提升编译器性能。\nerror handling，错误处理还有很多需要完善的地方，比如main函数中使用“?”，稳定catch块等。并钦点了failure库。\nIDE支持。进一步完善RLS、改进编译器集成等。\n一些重要的工具应该1.0，比如Rustfml和Clippy。\nCargo主要有四点需要完善：\n1.  建立系统集成\n2. 改进crates.io\n3. Xargo集成\n4. rustup集成\n增强rustdoc功能，比如更智能的源码探索\n2017年是为初级程序员提供了丰富资源，2018年会发力为中级程序员提供更多的学习资源。发布更多的文档或讲座。\n更进一步优化Rust官方团队结构和团队成员。\n打磨RFC流程。\n进一步寻找更适合的交流工具。\n当然，2018年Rust也会加入新的元素：\nnew epoch\ni18n\ncargo和rustup的整合\n提供更强大的测试框架\n目标瞻望：让Rust成为一门更靠谱的语言。\n更加成熟可靠\n向后兼容和稳定性\n社区良好运作\n平衡好夜版和稳定版\n我当然是支持的！" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-08 10:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "官方思考：Rust 2018要还清技术债" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Alex" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Improving how we improve Rust in 2018http://www.jonathanturner.org/2018/01/rust2018-and-data.html简要:是想在2018年增加一些可选的统计功能，目的是为了进一步对Rust进行「可用性研究」。统计数据涉及以下几个方面：\n出现了哪些错误信息及其频率？\n用Rust工作多长时间？\n构建时间多长？增量编译有多大帮助？\n大概多少语言特性被使用？\n这项统计功能应该是可选的，不会涉及开发者的隐私。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-07 09:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "官方思考：2018年如何改进Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Alex" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust Belt Rust 2017油管视频合集https://www.youtube.com/playlist?list=PLgC1L0fKd7Ul71lD_cImGuMxsZ6J8fa06" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-07 09:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Belt Rust 2017油管视频合集" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Alex" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "2017 Rust journeyhttps://codeburst.io/my-journey-with-rust-in-2017-the-good-the-bad-the-weird-f07aa918f4f8作者是一名C++程序员，2017年开始创业，备受C++折磨后转投Rust，然后又受Rust折磨之后，终于认识到：In a way, Rust let’s me fear less (pun intended)。这是双关语：\nRust让他不再害怕：C++那种依赖地狱、并发不安全、内存不安全等。\nRust让他不再害怕：在经过Rust折磨以后，他更相信Rust是对的选择，并且摆正了正确使用Rust的姿势。\n该文值得一看。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-07 09:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "社区开发者：我的2017Rust之旅" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Alex" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rust web scraphttps://medium.com/@kadek/web-scraping-in-rust-881b534a60f7用到了三个库：reqwest、scraper和select.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-07 09:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "博文：用Rust写爬虫" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Alex" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Nphysicshttps://github.com/sebcrozet/nphysics未来计划https://www.patreon.com/posts/whats-next-on-0-16264116" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-07 09:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "发现：Rust写的物理游戏引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "点此阅读原文http://smallcultfollowing.com/babysteps/blog/2018/01/05/lessons-from-the-impl-period/Rust团队在2017年最后一个季度“冻结”了新RFC的提交，开始专注于实现已经过审的RFC，这个时期称为impl period。简述：\nimpl period 工作成果还行\n需要拓展和调整编译器团队\n需要进一步丰富编译器的文档\n需要进一步发展如何分工协作的技巧和策略\n需要进一步寻找更好的聊天工具，IRC不好、Gitter也不好\n给我的感觉是：这个impl period是不是团队协作的问题比较严重？（逃" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-06 09:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Niko总结了Rust团队在impl period得到的经验和教训" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Shadertoy本地浏览器，用于转码着色器（GLSL-> SPIR V-> METAL）并呈现它们，现在只用于Mac / Metal。项目地址https://github.com/repi/shadertoy-browsershadertoy是一个在浏览器中教学3D图形学的在线社区和通过WebGL创建分享shader程序的工具https://www.shadertoy.com/howto" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-06 09:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust编写的Shadertoy本地浏览器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "项目地址https://github.com/pingcap/raft-rsTiKV是以Raft 为基础去构建一个大规模的分布式数据库。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-06 09:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从TiKV中抽取出来的分布式一致性算法raft包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "如何用Rust编写VST插件http://vaporsoft.net/creating-an-audio-plugin-with-rust-vst/VST介绍https://baike.baidu.com/item/VST" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-06 09:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "好玩的来了：用Rust编写VST插件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "也许论坛可以用这个来换掉目前的UUIDA tiny, secure, URL-friendly, unique string ID generator for Rusthttps://github.com/nikolay-govorov/nanoid" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-06 09:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "A tiny, secure, URL-friendly, unique string ID generator for Rus" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "可以直接更新了点此查看原文https://blog.rust-lang.org/2018/01/04/Rust-1.23.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-05 09:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.23稳定版发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "此版本是Graydon在2006-2009年个人版Rust的存档，感兴趣的可以去瞧瞧。rust prehistoryhttps://github.com/graydon/rust-prehistory" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-05 09:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "考古：Rust创始人Graydon个人编写的Rust版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在iOS上运行#ionic 4组件，使用cordova通过Rust编译器运行Asmjs。GitHub地址https://github.com/Peekmo/Fraw" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-05 09:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "小项目fraw：" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "重构前：重构后：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-05 09:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "噢妹纸in：基于NLL重构代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "从今天开始直到1月底，Rust官方希望社区能够在2017年撰写反思Rust的博客，并同时瞻望2018年Rust的目标和方向。可以有多种形式：\n个人或公司博客文章\nMedium文章\nGitHub文章\n或者您喜欢的任何其他在线写作平台\n寻找以下主题的帖子：\n社区计划的想法\n语言功能\n文档改进\n生态系统需求\n工具增强\n或者在2018年与你希望的任何其他的Rust相关：D\n点此查看原文链接https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-04 09:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust官方呼吁社区博客贴" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "看样子上一条新闻应该是：新官上任三把火。据说Ashley Williams是stevel的女朋友，现在以社区团队leader的身份加入了官方核心团队。点此查看原文链接https://internals.rust-lang.org/t/announcement-ashley-williams-joins-the-core-team-and-taking-lead-of-the-community-team/6453" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-04 09:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「八卦」Ashley Williams加入了Rust核心团队" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "点此查看详细https://startupsventurecapital.com/rust-ide-repl-in-vim-11daa921a2c4" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-04 09:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "基于Vim打造拥有REPL功能的Rust IDE" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我们常说，Rust的哲学是显式大于隐式，这篇文章对Rust的显式做了比较深刻的思考，值得阅读。点此查看详细https://boats.gitlab.io/blog/post/2017-12-27-things-explicit-is-not/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-04 09:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "反思Rust的显式（Explicit）哲学" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "论坛和Sapper框架已在Reddit宣传，来点赞。forustmhttps://www.reddit.com/r/rust/comments/7nn2nm/a_rust_forum_site_project_now_here_forustm/?ref=share&ref_source=linksapperhttps://www.reddit.com/r/rust/comments/7nn3mc/sapper_web_framework_has_a_new_english_tutorial/?ref=share&ref_source=link" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-03 09:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Reddit" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "终于1.0了 Diesel Taghttps://github.com/diesel-rs/diesel/releases/tag/v1.0.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-03 09:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Diesel" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "意在为内联汇编定义一个稳定的语法，以便在各种后端和体系结构之间移植。 Inline Assembly Pre RFChttps://internals.rust-lang.org/t/pre-rfc-inline-assembly/6443" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-03 09:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "[内联汇编] Pre RFC发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Github Page页面上线。 Learning Rusthttps://learning-rust.github.io/docs/a1.why_rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-03 09:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Learning Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "18分钟Rust介绍视频（油管）：构建一个浏览器引擎。 Intro to Rust-lang (Building a Browser Engine: Boxes and the Layout Tree)https://www.youtube.com/watch?v=GuzZqrlc52s&feature=youtu.be" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-03 09:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust视频" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "全新的以太坊EVM用Rust实现。 Sputnikvmhttps://github.com/ethereumproject/sputnikvm另外还有很多项目用了Rust，包括通过shell运行以太坊的脚本 :emerald-clihttps://github.com/ethereumproject/emerald-cli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-03 09:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "以太坊全面拥抱Rust：" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-02 08:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust nightly可以升级了。2018-01-01  @rustlang nightly is up 🎉 rust github compare" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-02 08:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "处理Rust异步流的小技巧： Rust Stream Terminate" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-02 08:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个NES模拟器（Rust + WebAssembly +  stdweb crate ），可以用浏览器玩NES游戏了。注意要使用Firefox最新版打开，Chrome暂时不支持：http://koute.github.io/pinky-web/" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-02 08:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "另一个Rust + WebAssembly的项目： Hassel Wasm DBG" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-01 09:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "1.  图腾欣赏：" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-01 09:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "2. 使用WebAssembly 实现的 A *寻路 demo wasm-astar" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-01-01 09:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "3. 新书预发布 Rust Programming Language, The (Manga Guide)  ，地址" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "好文章，详细。传送门https://aimlesslygoingforward.com/blog/2017/12/25/dose-response-ported-to-webassembly/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2017-12-28 09:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } },]
