export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前已统计的：参与地址：点这里https://www.reddit.com/r/rust/comments/o3xlvx/which_one_do_you_think_is_the_largest_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"你认为这个世界上最大的 Rust 项目是哪一个呢？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是对 FaceBook（以下简称 FB）基础设施团队软件工程师 Neil Mitchell 锈儿的采访。他在这个团队工作期间一直使用 Rust 作为主要开发语言之一，让我们听听他的经历。Q：锈儿你好，请简单介绍一下自己。A：我是 Neil，本是个 Haskell 程序员，最近搞了不少 Rust。我正在读 Haskell 的 PhD，让 Haskell 程序更短、更快、更安全。我 18 个月前加入 FB，从事开发人员工具的工作，其中涉及向更多 Rust 的过渡。Q：为什么你和你在 FB 的团队会选择使用 Rust 而不是其他语言？A：我坚信应该让编译器检查代码，那么多的程序员，那么多的代码，没有谁能记住能使代码安全的所有细微属性，但编译器可以强行执行某些规则。Rust 编译器确保可变性被驯服，并发是安全的而且内存不会泄露。这种安全性使我们能够在学习时积极重构，结合高级抽象，形成强大的语言。Q：你在 FB 做过哪些项目用了 Rust？A：嗯，两个 Rust 的开源项目：\nGazebo 是个小实用函数库，没啥惊天动地的功能，但这些 “小助手” ，经过不断完善、文档化、测试，可以证明是真正的推动力。比如，有个拆分字符串的函数，注释劣质版本的 clone，具有生命周期的 Any trait。\nStarlark 是 Starlark 配置语言的 Rust 实现。该项目为 Starlark 语言提供了解析器、实现、linter、IDE 工具和调试器。 Starlark 语言是 Python 的确定性版本，通常用于配置。  有关 Starlark 工作原理的更多信息，请查看我们的 Facebook 开发人员页面上的博客：The Rust Starlark library。\nQ：你如何感觉 Rust 在 FB 的发展轨迹？A：我觉得 Rust 拥有能够在 FB 发展为主要语言的所有属性。它是更全的 C++，更快的 Python。与该领域的大多数替代方案相比，它提供了令人信服的优势。Q：FB 为 Rust 增加了什么价值？A：FB 拥有大量的程序员，写的人越多，获得的附带好处就越多。此外，FB 经常发布开源库，包括之前提到的 Rust 库。Q：你认为 2021 年 Rust 作为语言会如何发展？A：Rust 用户将持续增长，IDE 中使用 Rust Analyzer 的体验会快速提高。我认为 Rust 发展的这段时期将被描述为 async 稳定之后的时代——在语言方面投入了大量出色的工作以使 async 工作。现在的问题是通过 library 端传播这些更改——有很多库依然依赖于旧版本，比如 tokio，这需要向前推进以便大家都能受益。Q：一些使用过 Rust 的人已经真正的喜欢上它。你觉得是为啥，以及你最爱的 Rust 特性是什么？A：我喜欢的特性多了，但最喜欢构造函数。在 Java 这样的语言中，构造函数有一堆特殊规则，必须调用超类构造函数，必须返回类的实例——这是限制性的，很烦。在 Rust 中，构造函数并不特殊——但按照惯例，它通常是一个名为 new 的静态方法。但既然是约定俗成的东西，感觉就像是一个构造函数，但所有规则都可以微调，而且简单很多。这不是什么大事，但是我最喜欢的功能，因为它是 Rust 的缩影——大量经过深思熟虑的简化，共同产生了巨大的影响。Q：人们可以在哪里学习更多 Rust，他们如何开始为它做贡献？A：有很多学习 Rust 的资源，我特别喜欢  Learning Rust With Entirely Too Many Linked Lists，我是真不推荐任何书籍，因为 Rust 有点抗拒通过阅读学习——你必须写代码。花点时间配置编辑器和 IDE，因为从 Rust 开始的大部分工作是学习与编译器和借用检查器对话。如果要贡献，开始写一写代码，然后一切随心。https://rust-unofficial.github.io/too-many-lists/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"遇见锈儿：来自 FaceBook 的 Neil Mitchell"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"针对 Error output for mismatched types with a 1-ary tuple could hint to add a missing comma · Issue #86100 · rust-lang/rust 的 PR。https://github.com/rust-lang/rust/issues/86100该代码将产生如下错误信息：修改为：地址：Suggest a trailing comma if a 1-tuple is expected and a parenthesized expression is found by FabianWolff · Pull Request #86116 · rust-lang/rusthttps://github.com/rust-lang/rust/pull/86116"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PR：添加尾随逗号以创建一元组的建议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"尽可能多地重新实现了 HTTPie 的优秀设计。GitHub 地址：ducaale/xh: Friendly and fast tool for sending HTTP requestshttps://github.com/ducaale/xh"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"xh：友好快速的 HTTP 请求工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Walleye 是一种使用经典 alpha-beta 风格 AI 编写的与 UCI 兼容的引擎。 支持从任意 FEN 字符串加载棋盘位置、Unicode 漂亮地打印到控制台和帮助调试的 UCI 通信日志。注意，这是引擎，如果要玩儿的话要加 GUI，比如已经做过测试的 Cute Chess。https://cutechess.com/GitHub 地址：MitchelPaulin/Walleye: A chess engine written from scratch in Rust ♞https://github.com/MitchelPaulin/Walleye注：FEN 是 Forsyth-Edwards Notation 的简称，用来描述棋盘位置，详见维基百科。https://www.chessprogramming.org/Forsyth-Edwards_Notation"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Walleye：国际象棋引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"地址：Hands-On Systems Programming with Rusthttps://learning.oreilly.com/library/view/hands-on-systems-programming/9781098109424/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"新书：使用 Rust 进行系统编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"谷歌财政支持 Miguel Ojeda，让他全职从事 Rust for Linux 和其他安全工作，在 Linux 内核中添加对 Rust 语言的支持，主要动机是提高内核的内存安全性。同时，Miguel 最近发布了关于 Linux 内核中 Rust 支持的RFC。https://lkml.org/lkml/2021/4/14/1023相关链接，https://www.memorysafety.org/blog/supporting-miguel-ojeda-rust-in-linux/Rust for Linux项目GitHub链接，https://github.com/Rust-for-Linux/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Rust-for-Linux/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 02:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"谷歌推进Linux内核中支持Rust语言的工作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cuda-oxide 是 CUDA 的安全包装器，使用它可以执行和协调 CUDA 内核。CUDA是Compute Unified Device Architecture的缩写，是Nvidia开发的一项技术，可加速GPU计算流程。https://en.wikipedia.org/wiki/CUDACrate 链接，https://crates.io/crates/cuda-oxideGithub 链接，https://github.com/Protryon/cuda-oxide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Protryon/cuda-oxide"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 02:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cuda-oxide"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Robyn，Rust实现的异步 Python 后端框架。项目链接，https://sansyrox.github.io/robynhttps://sansyrox.github.io/robyn/#/Github 链接，https://github.com/sansyrox/robyn"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/sansyrox/robyn"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 02:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Robyn"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Veloren v0.10发布博客链接，https://veloren.net/devblog-124/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://veloren.net/devblog-124/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 02:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Veloren 发布v0.10"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Outer Wonders 是一款可爱又异想天开的益智游戏，在这款益智游戏中探索基于像素艺术异想天开的大自然，将扮演 Bibi，一只喜欢滚动的可爱圆猴。可以玩的演示有 7 个谜题，总共需要 15-30 分钟。介绍如何构建的系列文章：\nWindows 链接\nLinux 链接\n项目链接，https://utopixel.itch.io/outer-wondershttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://utopixel.itch.io/outer-wonders"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-20 02:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"益智游戏 Outer Wonders"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"WebAssembly运行时Wasmer 2.0发布了：运行时速度快了50+%，热启动速度快了70+%，还有诸如引用类型、SIMD等更多新功能发布！wasmer-2.0 发布：https://wasmer.io/posts/wasmer-2.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://wasmer.io/posts/wasmer-2.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-17 20:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wasmer 2.0 发布！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用iced构建一个Rust跨平台GUI项目，作者是我，因为有些地方比较仓促，可能有不少错别字，可以的话帮我提一下issue。其实写到现在，前五章的内容都比较简单，如果目的主要是想要学一下iced怎么用，我的建议是看看官方的例子比较好。本教程的受众偏向Rust新手，已经看过Rust的大部分概念，急需一个实战项目练手的小伙伴。目前正在筹备的新章节是Canvas绘制图表，可能干货上比前几章多点。后续还有多语言支持，多主题支持，以及如何自己构建一个iced的控件，感兴趣的一定不要错过。0-5章: https://localnative.app/docs/tutorial0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://localnative.app/docs/tutorial0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-17 20:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【教程】用Rust动手实现一个桌面跨平台GUI项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"假设手动管理内存就像是在挥舞着一把枪，而借用检查器（borrow checker）就是一种自动安全装置，它可以防止你在不小心地指向自己的时候扣动扳机。但是，它是粗粒度（coarse-grained）的，我们可以认为它在某些方面过于谨慎; 在它的帮助下你可以在你脚下粗略的打出矩形弹痕包裹住你的脚，但并不能打出完美契合你脚形状的弹痕。如果你真的认为你可以把这个矩形框修剪的更合适，并在此过程中避免射击到自己(例如，“此函数返回的值必须在连续调用此函数不超过15次的情况下仍然存活”) ，unsafe 将允许你做出尝试，但由于借用检查器的内置规则不够细粒，它无法帮助到你。然而，如果你不小心把手放在了前面，但却没有声明，借用检查器（borrow checker）仍然会阻止你（译者注：这句意思是，unsafe下你做一些蠢事，借用检查器还是会制裁你）。– infogulch 发表于 Hacker Newshttps://news.ycombinator.com/item?id=27468885Read More：https://this-week-in-rust.org/blog/2021/06/16/this-week-in-rust-395/中文: https://blog.budshome.com/budshome/rust-guan-fang-zhou-bao-395-qi-(2021-06-16)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.budshome.com/budshome/rust-guan-fang-zhou-bao-395-qi-(2021-06-16)"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-17 20:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"本周引语"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Speeding Up the Webcola Graph Viz Library with Rust + WebAssemblyhttps://www.reddit.com/r/rust/comments/o0i4x2/speeding_up_the_webcola_graph_viz_library_with/摘要：作者最近从事的项目希望在web页面上展示Spotify上不同音乐家之间的联系。Spotify提供了可以获取数据的官方API，作者获取某个用户最喜欢的若干个音乐家，然后把他们之间的关系在浏览器上展示出来。受HTTP服务器性能调优的启发，借助一系列profile和分析工具，使用Rust+WebAssembly的方式优化了Webcola的调用，使得单机性能从<10 FPS 提升到超过60 FPS。详细博文可以参见：https://cprimozic.net/blog/speeding-up-webcola-with-webassembly/https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-16 07:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust+WebAssembly 加速Webcola图可视化工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ripgrep 13.0 releasedhttps://www.reddit.com/r/rust/comments/nzujak/ripgrep_130_released/ripgrep 13 是一个新的主要版本，本次更新包含bug修复，性能优化，和几个小的突破性的改进，并且修复了windows平台下的一个安全漏洞。详细的版本说明可以参见：https://github.com/BurntSushi/ripgrep/releases/tag/13.0.0ripgrep 是一个面向文本行的搜索工具，可以根据正则表达式递归搜索当前的目录。ripgrep在功能上类似其他流行的搜索工具，如 The Silver Searcher，ack 和 grep 等。ripgrep支持Windows，macOS，和Linux，并且对于每次发行版都提供构建好的二进制程序以供下载。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/BurntSushi/ripgrep/releases/tag/13.0.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-16 07:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ripgrep 发布 v13.0.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust's advantages in 1-3 Slides on Management Levelhttps://www.reddit.com/r/rust/comments/o0a61h/rusts_advantages_in_13_slides_on_management_level/%5DRust在技术/项目管理上有什么优势吗？足以支撑你说服自己和其他人在公司内部开始尝试使用Rust？作者提到了两点：\n理由：\"70%的安全问题都和内存安全有关\"\n证据：\n\nMicrosoft: 70 percent of all security bugs are memory safety issues\nGoogle: chromium memory-safety problem\n\n\n\nMicrosoft: 70 percent of all security bugs are memory safety issues\nGoogle: chromium memory-safety problem\n\n理由：软件设计、研发到生产过程中的维护复杂度会逐步上升\n证据：Relative cost to fix, based on time of detection\n或者你有其他任何观点和证据来说服别人使用rust吗？Rust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-16 07:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"讨论：Rust语言在项目管理上的优势"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 的类型,除了可以用来检查属性外,还可以做一些更有意思的事情. 本文会涉及到很多动态类型.原文链接https://www.jakobmeier.ch/blogging/Untapped-Rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-14 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中类型的未开发的潜力"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是作者学习 Rust 的过程和笔记, 这一篇是 rustlings 的第一部分练习,对于想学习Rust 的同学也是一种帮助.原文链接https://blog.frankel.ch/start-rust/3/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-14 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustlings exercises - part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 <<Rust of Rust>> 作者使用 Rust 来实现无锁算法的无等待模拟 的第二部分.油管视频https://youtu.be/tNzCj8691LE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-14 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"无锁算法的无等待模拟 Rust实现(part 2)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一系列 Rust 构建应用的油管视频, 这是第一期, 配置.油管视频https://www.youtube.com/watch?v=Wmq3etdwCbM--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-14 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust构建应用: part 1 配置"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本月我们对 cross chain bridges 感兴趣。 随着以太坊最近满负荷运转，其他区块链项目正在关注从现在到功能性以太坊2 之间的机会之窗，以吸走该链的一些活动。 似乎急于在以太坊和其他所有链之间建立桥梁，更不用说在非以太坊链之间建立桥梁了。 看起来我们在通往区块链互联网的道路上进展顺利，所以现在是对通向 Rust 链的桥梁进行调查的好时机。这些 bridge 现在大多支持移动可替代的代币，有些计划支持 NFT； 与 IBC 和 XCMP 等通用跨链通信协议形成对比。Read Morehttps://rustinblockchain.org/newsletters/bridges/RSShttps://rustinblockchain.org/index.xml"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-13 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust in Blockchain news letter 24 期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://docs.microsoft.com/zh-cn/windows/dev-environment/rust/rss-reader-rust-for-windows?WT.mc_id=twitter-0000-windowsdocs在Windows上通过Rust进行开发https://docs.microsoft.com/zh-cn/windows/dev-environment/rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-13 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【教程】使用 Rust for Windows 实现的 RSS 阅读器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该库为 macOS 上的 AppKit 和 iOS/tvOS 上的 UIKit（alpha 质量，请参阅 repo）提供安全的 Rust 绑定。 如果之前使用 Swift 或 Objective-C 为该框架进行过编程，cocao 会尝试提供一种熟悉的开发体验。由于所有权模型，这在 Rust 中很棘手，但一些创造性的编码和假设可以让我们走得很远。crates.io 上存在 0.2.0 部分是为了使项目能够看到更广泛的使用，这可以为开发提供信息。 也就是说，这个库目前处于早期阶段，可能有错误——你使用它的风险由你自己承担。 但是，只要开发者遵守规则（关于内存/所有权），对于某些应用程序来说就可以了，核心存储库有丰富的示例可以帮助开发者入门。Repohttps://crates.io/crates/cacao"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-13 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cacao 0.2.0 发布，使用 Rust 构建 native 的 MacOS 应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个网站可以实现各大云计算公司的计算实例价格对比，涵盖了全球主要云计算公司，可通过设置 CPU、内存以及区域进行过滤筛选传送门https://cloudoptimizer.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-13 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cloudoptimizer.io"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Redox OS 得核心贡献者 jD91mZM2 在 2021 年 3 月去世了，年仅 18 岁。他参与了 2018 年、2019 年和 2020 年的 Redox OS Summer of Code。他在 Redox OS 的各个方面的开发中发挥了重要作用，从内核到 relibc，再到移植程序。 jD91mZM2 在 https://www.redox-os.org/news/ 上发表的许多新闻帖子中用他自己的话详细介绍了他的工作。文章作者收到一位撰稿人的信息，表示 jD91mZM2 已经很长一段时间了，并且没有回复邮件，作者联系了另一位撰稿人找到了 jD91mZM2 本人，确定了姓名、性别、生日后，作者震惊的看到了 jD91mZM2 的讣告，原来他在3月份已经去世了，再经过长时间的思考后，作者写下了这篇文章，关于开源与心理健康，导致ZS的因素等等。Read Morehttps://www.redox-os.org/news/open-source-mental-health/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-13 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"开源与心理健康"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我很高兴地宣布 rg3d 0.20 已经发布。此版本包含许多新功能和改进。最大功能的是 WebAssembly 支持、初始 2D 支持和多层地形。让我们从引擎开始，与 0.19 相比，有 182 个新提交，以下是最有趣的变化：...文章链接，https://rg3d.rs/general/2021/06/11/rg3d-0.20-progress.htmlGithub 链接，https://github.com/rg3dengine/rg3d"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rg3d.rs/general/2021/06/11/rg3d-0.20-progress.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-12 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"发布rg3d 0.20，一个功能丰富且易于使用的游戏引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"你好，绣儿们 !我很高兴地宣布0.0.1版的“xuantie”，rust支持玄铁处理器核心。该crate允许 Rust 编程语言访问玄铁 9 系列 RISC-V 内核的专用功能...文章链接，https://www.reddit.com/r/rust/comments/nxidvb/announce_the_xuantie_crate_version_001_low_level/Github 链接，https://github.com/luojia65/xuantie"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/nxidvb/announce_the_xuantie_crate_version_001_low_level/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-12 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"发布xuantie crate 0.0.1版本，支持玄铁RISC-V处理器的low level access"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我创建了一个新的 GTK 图像查看器，因为 GNOME 中的那个缺少基本的图像编辑功能，这在浏览和编辑照片时很有用。除此之外，还有一些我想实现的功能。文章链接，https://www.reddit.com/r/rust/comments/nxj7zy/image_roll_my_new_simple_and_fast_gtk_image/Github 链接，https://github.com/weclaw1/image-roll/releases"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/nxj7zy/image_roll_my_new_simple_and_fast_gtk_image/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-12 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Image Roll - 我新搞的简单快速的 GTK 图像查看器，带有基本的图像处理工具。用 Rust 编写。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Peter Shirley 尝试实时实现“在周末做一个光线追踪”。这是一个个人实验，目的是了解更多关于 rust-gpu、光线追踪以及实时光线追踪的局限性。Github 链接，https://github.com/mitchmindtree/nannou-rustgpu-raytracerhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mitchmindtree/nannou-rustgpu-raytracer"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-12 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用nannou和rust-gpu进行实时光线追踪"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"张汉东老师组织的三个 Rust Friday 线上沙龙，也就是三个周五晚上的时间，学习了Linux基金会的免费Web Assembly课程，感觉收获颇丰。课程的难度适中，重点在于比较系统。很多细节其实是需要自己去学习和了解的，但是课程为你布置好了体系结构。一些关键的概念都讲到了。最有意思的是作者针对Web Assembly现状，提出的wa PC协议和wasmcloud项目，都很有创新精神。并且wasmcloud提供的开发体验非常棒。没有了解过的朋友，且对webassembly感兴趣可以看看，大概五六个小时就完成了，推荐你看之前的回放。第三期的录播视频：https://rust-lang.feishu.cn/minutes/obcneig8s8116w66tvz611cm课程地址：https://www.edx.org/course/webassembly-actors-from-cloud-to-edge"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.edx.org/course/webassembly-actors-from-cloud-to-edge"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-11 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linux 基金会的免费 Web Assembly 课程学习视频"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个支持库允许Rust语言访问玄铁处理器的专有功能，包括特殊的页表、寄存器和专有指令，调试模块的支持也在编写之中。支持库适用于玄铁9系列RISC-V处理核，它能很好地支持裸机引导程序、调试器软件和机器监视环境的开发工作，也可用于研发新型操作系统内核。同时，Rust芯片支持库对裸机环境的开发有一定的帮助。例如，它可以用于开发适配RustSBI的引导程序环境，以制作基于玄铁C906处理核的全志D1芯片引导程序。支持库已经发布到crates平台，它详细的文档托管在docs.rs网站上；使用木兰宽松许可协议第2版开源，允许商业使用。发布地址：https://crates.io/crates/xuantie文档：https://docs.rs/xuantie/0.0.1仓库：https://github.com/luojia65/xuantie"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/luojia65/xuantie"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-11 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"玄铁处理核 Rust 语言支持库现已发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://security.googleblog.com/2021/06/rustc-interop-in-android-platform.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-11 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Android 平台中的 Rust/C++ 互操作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/awslabs/aws-sdk-rust/releases/tag/v0.0.7-alpha"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-11 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"AWS 添加了 9 项关于rust sdk的新服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/DevinR528/cargo-sort"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-11 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-sort，可以对工作区中的每个 Cargo.toml 文件内容进行排序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"iterate 是一个新发布的迭代器库，其作者 Lucretiel 是 1Password 的工程师。当调用 iterate 时，将会创建一个新的迭代器，并惰性迭代所提供的参数。除支持迭代单个条目外，iterate 同样支持对子迭代器的迭代。这一切都尽可能以近乎零成本的方式完成。文档: https://docs.rs/iterate/1.0.0/crates.io: https://crates.io/crates/iterategithub: https://github.com/Lucretiel/iterate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Lucretiel/iterate"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 23:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"iterate 新鲜出炉"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Learning to Fly: Let's simulate evolution in Rust! 发布了第 4 部分，讲述构建 feed-forward 神经网络中的用户接口问题。阅读原文: https://pwy.io/en/posts/learning-to-fly-pt4/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://pwy.io/en/posts/learning-to-fly-pt4/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 23:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 创建一个模拟器（第 4 弹 - 用户接口）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天没有等到新一期的 Rust 周报，但 OSDev 和 GameDev 这两个社区带来了各自的五月小结。对操作系统和游戏开发感兴趣的朋友可以关注下。This Month in Rust OSDev (May 2021): https://rust-osdev.com/this-month/2021-05/This Month in Rust GameDev #22 - May 2021: https://gamedev.rs/news/022/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gamedev.rs/news/022/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 23:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Month in Rust (May 2021)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"TensorBase 是第一个在真正的 RISC-V 芯片上运行的 SQL 数据库ReadMore:SQL on RISC-V Chip in Rust (tensorbase.io)https://tensorbase.io/2021/06/08/sql_on_riscv_in_rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust - RISC-V 芯片上的 SQL"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rocket 0.5 接近 releaseReadMore:Rocket 0.5 nearing release - Help Appreciated : rust (reddit.com)https://www.reddit.com/r/rust/comments/nvmu2j/rocket_05_nearing_release_help_appreciated/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rocket 0.5 接近 release"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"内存安全的 Rust，虽然基本不会出现内存泄漏，但如何合理分配内存，是每个复杂应用都要面临的问题。往往随着业务的不同，相同的代码可能会产生不同的内存占用，因此，有不小的概率会出现内存使用过多、内存逐渐增长不释放的问题。在本文中，作者在实践过程中，遇到的关于内存占用过高的问题，对于这些内存问题，在本文中，会做出简单的分类以及我们在生产环境下进行排查定位的方法。ReadMore:https://mp.weixin.qq.com/s/YYmQxwkqNAZ5i7MC-GIrFw"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mp.weixin.qq.com/s/YYmQxwkqNAZ5i7MC-GIrFw"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在生产环境排查 Rust 内存占用过高问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用rustup self update更新 rustup,然后使用rustup update更新 toolchainReadMore:Announcing Rustup 1.24.3 | Rust Blog (rust-lang.org)https://blog.rust-lang.org/2021/06/08/Rustup-1.24.3.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-10 01:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustup 1.24.3 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Object Orientated programming is a methodology or paradigm to design a program using classes and objects. OOPs provides the following concepts: –There is a big debate about how many of these concepts a language needs to implement to be considered object-oriented.Today we gonna see how Rust implements these concepts to be an object-oriented language. In this blog, we are comparing Java And Rust’s way of implementing these concepts.面向对象编程(OOP)是一种使用类和对象来设计程序的方法论/范式。面向对象提供一下概念：\n类和对象\n继承\n封装\n多态\n抽象\n关于这些概念有哪些才是 \"面向对象\" 语言需要实现的，还有很大争议。今天我们来看一下 rust 如何实现这些概念，来成为一个面向对象的语言的。这边博客中，我们会对比 Java 和 Rust 它们之间实现这些概念的方式。原文https://blog.knoldus.com/object-oriented-programming-concepts-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-08 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中的 面向对象编程概念"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主讲人：lyzh题目：利用Rust构造riscv asm分析工程内容：时间: 2021/06/8 20:30-21:30形式: 在线 腾讯会议AppMikeTang 邀请您参加腾讯会议会议主题：Rust唠嗑室重复周期：每两周(周二)点击链接入会，或添加至会议列表：https://meeting.tencent.com/s/07ZoRT6XmwuW会议 ID：818 1829 3138无直播了，没赶上的看录播吧~~ B站搜Up主 MikeTang84，等你。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-08 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust唠嗑室》第26期 - 利用Rust构造riscv asm分析工程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章的目标是那些从 垃圾回收语言 转到 Rust 的人, 例如 python 或者 javascript.作者深入浅出的解释了程序的内存以及 Rust 中的所有权的概念.原文链接https://deavid.wordpress.com/2021/06/06/rust-what-made-it-click-for-me-ownership-memory-internals/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-07 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"是什么让 Rust 撩动了我: Ownership & memory internals"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者从4 年前开始使用 Rust,自此以后就爱上了 enum, 相信很多小伙伴有同样的想法.原文链接https://dwbrite.com/blog/post/rust%20enums%20by%20example"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-07 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么我喜欢 Rust 的 enum"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tantivy 是 Rust 写的全文搜索引擎库. 现在tantivy 由 quickwit-inc 开发托管.github 地址https://github.com/quickwit-inc/tantivy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-07 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tantivy: v0.15 发布了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"youki 是一个 runtime-spec 的 Rust 实现, 参考的是 runc.github地址https://github.com/containers/youki"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-07 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"youki: Rust 编写的容器 runtime"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"trillium 是一个 toolkit,可以让你快速的创建 Rust 的异步应用. 可以运行在tokio, async-std, 或者smol上. 用起来就像下面一样简单.原文链接https://trillium.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-07 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"trillium.rs: Rust 异步 app 组件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"messages 是一个异步的 actor 框架, 受 actix 启发.github地址https://github.com/popzxc/messages-rs--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-07 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"messages: 异步 actor 框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"大名鼎鼎的 The Algorithms 的 Rust 版本，使用 Rust 实现所有算法。https://the-algorithms.com/GitHub 地址：TheAlgorithms/Rust: All Algorithms implemented in Rusthttps://github.com/TheAlgorithms/Rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-06 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TheAlgorithms: Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n高效且最小的协作代码编辑器、自托管、无需数据库\n使用 wrap web服务框架和 operational-transform 库\n使用 wasm-bindgen 将文本操作逻辑编译为在浏览器运行的 WebAssembly 代码\n客户端通过 WebSocket 与存储内存数据结构的中央 server 通信\nGitHub 地址：ekzhang/rustpad: Efficient and minimal collaborative code editor, self-hosted, no database requiredhttps://github.com/ekzhang/rustpad"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-06 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustpad：开源协作文本编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GitHub 地址：mgeisler/textwrap: An efficient and powerful Rust library for word wrapping text.https://github.com/mgeisler/textwrap"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-06 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"textwrap：一个用于包装和缩进文本的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GitHub 地址：fosskers/linya: Simple concurrent progress bars.https://github.com/fosskers/linya"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-06 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"linya：轻量并发进度条"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GitHub 地址：nathom/youchoose: A lightweight terminal menu for Rusthttps://github.com/nathom/youchoose"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-06 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"youchoose：一个简单易用的 Rust 命令行菜单"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"仅使用 tokio 实现的简单聊天服务器：YouTube 链接：(19) Creating a Chat Server with async Rust and Tokio - YouTubehttps://www.youtube.com/watch?v=4DqP57BHaXI"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-06 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Tokio 创建简单聊天服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"2021.06.04 晚上20:00 ～ 22:00，RustFriday 飞书群线上沙龙 第十期讨论主题：回放地址：https://rust-lang.feishu.cn/minutes/obcn9px11as3unk4913ra9x9"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-05 20:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【精彩回放】RustFriday 飞书群线上沙龙 第十期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Thruster，一个旨在让开发者在项目和团队之间保持高效一致的快速、直观的 Rust Web 框架。v1.1.2版本的一些亮点：\n完全重建的路由树和解析器；\n完全重建的内部“中间件”系统，获取中间件功能列表并使用闭包将它们组合起来；\n更容易使用的中间件宏；\n升级依赖库；\n在生产中使用 Thruster 的一些有趣指标：\n在过去的四个月里，它处理了 240 万个请求；\n实例中没有（0%） 与框架相关的致命错误；\n实例中95%的平均响应时间远低于 25 毫秒；\n每个实例的平均 RAM 为 14.75MB；\n版本详情参见Release，https://github.com/thruster-rs/Thruster/blob/master/RELEASE.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/thruster-rs/Thruster/blob/master/RELEASE.md"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-05 20:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Thruster发布v1.1.2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Crusty，一个快速，可扩展，礼貌性的通用网络爬虫（Broad Web Crawler）。Crusty 旨在：\n\n提供一种研究 www 和通用网络爬虫领域的方法；\n\n\n为可扩展性、可配置性和自定义数据收集提供程序接口；\n\n\n快速，在稳定、可预测的单节点性能、不错的硬件饱和度方面；\n\n\n易于扩展；\n\n\n礼貌性，可能是通用网络爬虫中最重要的部分；\n\n\n可监控，日志、自定义指标、实时 Grafana 仪表板；\n\n\n易于交互，仅使用一个命令构建和运行，可重现的 docker 构建；\n\n提供一种研究 www 和通用网络爬虫领域的方法；为可扩展性、可配置性和自定义数据收集提供程序接口；快速，在稳定、可预测的单节点性能、不错的硬件饱和度方面；易于扩展；礼貌性，可能是通用网络爬虫中最重要的部分；可监控，日志、自定义指标、实时 Grafana 仪表板；易于交互，仅使用一个命令构建和运行，可重现的 docker 构建；Github 链接，https://github.com/let4be/crusty"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/let4be/crusty"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-05 20:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crusty"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"init-array，一个按项（item-wise）初始化数组的crate。示例：Github链接，https://github.com/Sp00ph/init_arrayhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Sp00ph/init_array"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-05 20:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"init-array"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Firebird是一个跨平台的关系数据库系统，目前能够运行在Windows、linux和各种Unix操作系统上，提供了大部分SQL-99标准的功能。它既能作为多用户环境下的数据库服务器运行，也提供嵌入式数据库的实现。Luis Fernando Batels给出了rust基于rsfbclient使用Firebird的介绍，并对rust给予好评。\n链接: https://itnext.io/firebird-rust-92e9043261cc\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-04 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在 Rust 语言中使用 Firebird 数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"其中包括：\n\n支持特征函数和相关常量转到其实现；\n\n\n支持整个范围的格式化；\n\n\n为所有工作区创建任务（仅限 VS Code）；\n\n\n添加折叠范围；\n\n\n添加对独立 Rust 文件的支持等诸多改动。\n\n\n链接: https://rust-analyzer.github.io/thisweek/2021/05/31/changelog-79.html\n\n支持特征函数和相关常量转到其实现；支持整个范围的格式化；为所有工作区创建任务（仅限 VS Code）；添加折叠范围；添加对独立 Rust 文件的支持等诸多改动。链接: https://rust-analyzer.github.io/thisweek/2021/05/31/changelog-79.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-04 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"vscode rust-analyzer更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于Rust+WASM构建的ewebrt信令服务器，结合chrome浏览器构建简单视频聊天应用程序\n链接: https://charles-schleich.medium.com/webrtc-video-chat-tutorial-using-rust-wasm-fa340f7aeef9\nRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-04 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust+WASM 的 WebRTC 视频聊天教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustSBI是RISC-V平台下的引导程序实现，它完全由Rust编写，并已经被录入RISC-V SBI国际标准。6月3日，RustSBI已经在GitHub上成立了组织，并提交了它对多个RISC-V平台的支持示例软件包。RISC-V处理器架构中，存在着定义于操作系统之下的环境，它被称作SBI标准。这个环境除了引导系统启动，还将常驻后台，在内核运行时提供处理器功能。RustSBI就是这样的一种环境，它是一个扩展性较好的库，允许开发者自由地添加需要的功能模块，以支持芯片研发企业、应用厂商和板卡厂商提供自己芯片的SBI支持环境。根据它的GitHub主页介绍，RustSBI项目组已经根据Mulan-PSL v2协议开源了它对K210和QEMU平台的支持，更多平台如FU540、C906等的支持也在筹划中。RustSBI组织以模块化开发、较好的支持嵌入式Rust生态，期望以这一形式，使厂商无需担忧是否合并到主分支，并鼓励开发者尝试多种多样的设计，来丰富引导程序方面的RISC-V生态环境。“未来的RISC-V引导程序可能包含很多种可能性，这包括已经用在无盘工作站、安全网络等引导程序中的下载和验证机制，也可用于DIY爱好者的主板诊断。甚至用它做调试器也是可以的，它事实上提供了完全可定制的硬件兼容层，”RustSBI的维护者洛佳这样告诉《Rust日报》，“实践证明，它可以完成硬件到硬件的兼容性，从而延长硬件的生命周期，降低管理和迭代更新成本。”“RustSBI已经能引导启动rCore等类Unix系统，”维护者继续说，“它是开源开放的，我们期待它被更进一步的被科研、教学和生产界广泛使用。”RustSBI组织首页：https://github.com/rustsbi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rustsbi"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-03 19:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustSBI组织宣布成立"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者在Windows平台写非安全Rust代码的时候遇到一个奔溃：因为这是一个与unsafe的Rust代码相关的分段故障崩溃，很难从控制台消息中得到任何线索，作者便使用了其它工具进行调试，并且记录在了这篇Blog中。这篇blog的作者是大家最近比较热门的用Rust写的跨平台远程桌面开源软件 RustDesk 的作者。Read More: https://dev.to/rustdesk/debugging-a-crash-in-unsafe-rust-with-windbg-2b39"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dev.to/rustdesk/debugging-a-crash-in-unsafe-rust-with-windbg-2b39"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-03 19:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Windbg调试非安全Rust代码导致的崩溃"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用法：同时还支持颜色等功能：GitHub: https://github.com/zhiburt/tabled"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/zhiburt/tabled"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-03 19:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tabled  一个易于使用的库，用于打印出漂亮的，由Rust结构体和枚举体所表示的表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我最近获得了博士学位。在之前的模拟器开发中，我用4种不同的编程语言开发了5个不同的版本。最后选择的版本是完全用安全的Rust语言实现的。它之所以能成为我的选择，其中一部分原因是因为Rust对“安全”有很强的保证。也因此我能够使用Rust将通常的运行时错误转化为编译时错误。在以前使用的开发语言中，这些错误通常需要几天或几周的调试才能得到相对简单的修复。[…] 所以再次感谢你!– Cem Karan 发表于 rust-internalshttps://internals.rust-lang.org/t/ot-thank-you-to-everyone-that-has-made-rust-possible/14777Read More：https://this-week-in-rust.org/blog/2021/06/02/this-week-in-rust-393/中文: https://blog.budshome.com/budshome/rust-guan-fang-zhou-bao-393-qi-(2021-06-02)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.budshome.com/budshome/rust-guan-fang-zhou-bao-393-qi-(2021-06-02)"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-03 19:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"本周引语"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Demystifying Mutability and References in Rusthttps://dev.to/arunanshub/demystifying-mutability-and-references-in-rust-cafun-sandwiching：Given a value, you cannot use a mutable reference between an immutable reference's declaration \"zone\" and immutable reference's usage \"zone\". Also, you cannot use mutable or immutable reference between a mutable's declaration zone and mutable's usage zone.翻译过来就是：这就是Rust的借用检查规则：在任意给定时间，要么只能有一个可变引用，要么只能有多个不可变引用。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-01 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"揭秘Rust中的可变性和引用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Iterative methods in Rust, or: A rusty conjugate gradient - Daniel Vainsencherhttps://daniel-vainsencher.github.io/book/iterative_methods_part_1.html\nrepo: iterative_methods_rs\ncrate: iterative_methods\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-01 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中使用迭代算法：共轭梯度"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Learn Rust the Dangerous Wayhttps://cliffle.com/p/dangerust/LRtDW is a series of articles putting Rust features in context for low-level C programmers who maybe don’t have a formal CS background"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-01 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"给C程序员的Rust入门系列文章"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"We are glad to announce the first release of our caching library for the Actix actor frameworkhttps://www.reddit.com/r/rust/comments/np15ar/we_are_glad_to_announce_the_first_release_of_our/A high-performance caching framework suitable for single-machine and for distributed applications in Rust\nrepo: hit-box/hitbox\ncrate: hitbox\n:  (github.com)\nRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-06-01 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Hitbox：异步分布式缓存框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tightness 并不是指内存的紧凑, 而是设计数据结构时一些理念. 在这里是指 类型定义中不变量与其方法的比例.想提高代码阅读性的同学可以看看.原文链接https://www.ecorax.net/tightness/tightness github地址https://github.com/PabloMansanet/tightness"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-31 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust tightness 驱动开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GCC-RS 项目 可以总结为, 使用 C++ 重写 Rust 编译器.作者认为 这么做价值并不明显, 而且有很多更为简单的替代方案.原文链接https://shnatsel.medium.com/the-simpler-alternative-to-gcc-rs-90da2b3685d3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-31 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GCC-RS 其他更简单的替换方案"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"BLEZ 提供了 异步的 低功耗蓝牙(BLE) API.github 地址https://github.com/surban/blez"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-31 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"BLEZ: Rust 异步蓝牙 API 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Rust 新手视频的一期: 关于int 类型的.油管视频https://youtu.be/2c5n1blY2eQ--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-31 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 新手视频: Integers"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天我很高兴地宣布 Tower-http，它是使用 Tower 的服务特性构建的特定于 HTTP 的中间件和实用程序的集合。Tower 本身包含所有协议无关的中间件。例如，它的超时中间件与任何服务实现兼容，无论它使用哪种协议。使用来自 Tower-http 的东西构建一个小服务器看起来像这样：文章链接，https://tokio.rs/blog/2021-05-announcing-tower-httpGithub 链接，https://github.com/tower-rs/tower-http"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://tokio.rs/blog/2021-05-announcing-tower-http"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-29 23:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tower-http发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GnuPG 是 OpenPGP 标准的一个众所周知的实现，它在各种社区和项目中使用了多年。它也被称为“ GPG”，它是命令行工具的名称，可让您更轻松地与其他应用程序集成。它经过多年的实战测试，拥有丰富的前端应用程序和库。文章链接，https://orhun.dev/blog/introducing-gpg-tui/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://orhun.dev/blog/introducing-gpg-tui/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-29 23:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"介绍gpg-tui，这是GnuPG的终端用户界面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"知名公链波卡 (Polkadot) 5 月 24 号某个节点发生了一次比较大的线上事故(Out Of Memory)，做梦也没想到是因为我上次优化 Rust 标准库 binary search 导致的。我上次的 PR 跑了将近一周时间的 crater 测试，也没有发现对线上 5 万多个 crate 有什么大影响。Rust 1.52 发布之后，没想到依然有人中招了，而且还是价值几十亿美金的项目。@brson 特意发了 issue 说到这件事，但是 Rust 社区的人都认为这件事跟我这个 PR 没有关系，因为 binary search 碰到多个重复的元素的时候确实是返回任意一个，文档上也说得很清楚了（所以这种情况下不会保证两个版本返回的位置一致，这也是 Polkadot 出现线上事故的原因)。不管怎样，这件事给我的触动还是蛮大的。软件开发是复杂的，其本质原因在于现实生活就是复杂的。软件工程师只能尽可能规避发生这种情况的风险，但是没有办法做到万无一失吧。就像这位工程师说的我这是中了 Hyrum 定律（Google 一个叫 Hyrum 的工程师提的定律，可以理解为 API 领域的墨菲定律）。\n\nPolkadot 的事故后复盘：https://polkadot.network/a-polkadot-postmortem-24-05-2021/\n\n\n@brson 的 issue: https://github.com/rust-lang/rust/issues/85773\n\n\n我的 PR：https://github.com/rust-lang/rust/pull/74024\n\n\n关于 PR 的文章：https://zhuanlan.zhihu.com/p/371460665\n\n\nHyrum 定律：https://www.hyrumslaw.com/\n\nPolkadot 的事故后复盘：https://polkadot.network/a-polkadot-postmortem-24-05-2021/@brson 的 issue: https://github.com/rust-lang/rust/issues/85773我的 PR：https://github.com/rust-lang/rust/pull/74024关于 PR 的文章：https://zhuanlan.zhihu.com/p/371460665Hyrum 定律：https://www.hyrumslaw.com/https://github.com/folyd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.hyrumslaw.com/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-28 21:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我的 Rust binary search PR 导致 Polkadot 线上事故的缘由"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"TaKO8Ki 维护了一个简单的 awesome 列表，旨在发掘用 Rust 重写的经典项目或者替代品。如果你想要尽可能多地使用 Rust 编写的工具，不妨关注一下。GitHub: https://github.com/TaKO8Ki/awesome-rewrite-it-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/TaKO8Ki/awesome-rewrite-it-in-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-27 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 重写的经典项目替换品"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"得益于 LLVM 6502 Codegen 的工作，mrk 为 6502 微处理器编译了他的第一个 Rust 程序，并在 Atari 上进行了测试。Post: http://forum.6502.org/viewtopic.php?p=84048#p84048"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://forum.6502.org/viewtopic.php?p=84048#p84048"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-27 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"8 位 6502 处理器上的第一份 Rust 代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Google 刚刚面向市场推出了全新的微内核操作系统 Fuchsia OS 。Fuchsia 中包含了大量的 Rust 代码，尽管其微内核 Zircon 是采用 C++ 编写的，但大量典型的、在过去被视为内核级别的代码采用 Rust 进行实现。代码量概览如下，Rust 占比约为 22% ，而 C++ 为 18% 。Reddit: https://www.reddit.com/r/rust/comments/nldg5c/fuchsia_os_partially_written_in_rust_has_shipped/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/nldg5c/fuchsia_os_partially_written_in_rust_has_shipped/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-27 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fuchsia OS 中大量采用 Rust 编写代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 392: https://this-week-in-rust.org/blog/2021/05/26/this-week-in-rust-392/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/05/26/this-week-in-rust-392/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-27 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 392"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"futingfei"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"让我们枯燥地拿下第五个最受欢迎吧！https://stackoverflow.az1.qualtrics.com/jfe/form/SV_7arimtzVFf8ipfM?utm_source=twitter&utm_medium=social&utm_campaign=dev-survey-2021&utm_content=post-1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://stackoverflow.az1.qualtrics.com/jfe/form/SV_7arimtzVFf8ipfM?utm_source=twitter&utm_medium=social&utm_campaign=dev-survey-2021&utm_content=post-1"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-26 18:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Stack Overflow 2021 开发者问卷调查开启"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"futingfei"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对 pro macros 尤其有用https://github.com/LukasKalbertodt/litrs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/LukasKalbertodt/litrs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-26 18:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"litrs: 提供对Rust 字面量解析和检查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"futingfei"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用 Rust 这样的静态类型语言去写 REST API 会是什么样的体验呢？作者在此文中对比 Python web 框架 Django 和 Rust web 框架 Rocket实现同样的功能会有什么样的差异。https://meesha.blog/2021/coming-to-rust-from-django.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://meesha.blog/2021/coming-to-rust-from-django.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-26 18:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【博客】从 Django 到 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"futingfei"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/facundoolano/rpg-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/facundoolano/rpg-cli"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-26 18:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rpg-cli : 命令行 rpg 游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"futingfei"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/wojciechkepka/epick"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/wojciechkepka/epick"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-26 18:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"epick: 基于 egui 的取色器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天 @吴翱翔 在飞书直播为我们展示了如何基于 tokio 来实现简单的聊天服务器，实现的功能有：\n通过 websocket 协议来传输文本式的指令\n通过 tokio::sync::boardcast 来实现多生产者多消费者消息队列，以使单个用户发送的消息可以传播给当前在线的用户\n在应用层面通过心跳超时检测来回收资源。Up 主特别指出不使用 TCP 的 close 来检测断连的原因：因为在当前版本 TCP 连接中断并不会发送消息给正在等待信号的消息循环，使得这部分的资源会被一直占用且无法回收，造成资源的浪费以及被 DDoS 攻击轰炸的风险。\nUp主在直播后的总结：关于聊天应用还有 阅后即焚、敏感文字识别、消息撤回、私密聊天等等功能可以做的，我这也只是抛砖引玉，只完成了一个公共聊天室的简单功能。重点还是要理解协程之间消息队列、生产着消费者模型这些，但也看到了Rust快速快发后端应用的潜力源码: https://github.com/pymongo/chat_server"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-25 23:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"20分钟用 Rust 写一个 MVP 聊天服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"其中，关于 Rust 他如此评价[^1]：Rust 在一个特定的领域真正改进了 C++，它使绕过编译器的检查变得更加困难。当然，它以一种近乎完美的方式解决了内存分配问题。[^1]： 消息来源： https://zhuanlan.zhihu.com/p/374942737"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-25 23:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Python 之父 Guido 对其它编程语言的看法，"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 <<Crust of Rust>> 作者的最新的一期视频, 这一期视频中, 作者使用 Rust 实现了并发算法论文  <<A Practical Wait-Free Simulation for Lock-Free Data Structures>>.油管视频https://youtu.be/Bw8-vvtA-E8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-24 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"无锁算法的无等待模拟 Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rustc_codegen_gcc 是一个 Rust 编译器可以加载的共享库, 用于替换 LLVM 来进行代码生成. 他使用 gcc 来生成代码.原文链接https://blog.antoyo.xyz/rustc_codegen_gcc-run-core-tests"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-24 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustc_codegen_gcc 现在可以通过 libcore 的大多数测试用例了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gdbstub 是一个 Rust 实现的, 易于集成的 GDB Remote Serial Protocol实现. 完全无标准库依赖. 可以非常容易的集成到各种 debug 的场景中.github 地址https://github.com/daniel5151/gdbstub"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-24 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gdbstub: 一个 Rust 实现的 GDB Remote Serial Protocol"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"typed-sql 是一个 Zero-cost ORM, 而且编译飞快. 目前是 beta 版本.github 地址https://github.com/matthunz/typed-sql--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-24 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"typed-sql: Zero-cost ORM"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 在 Facebook 一共经历过 3 个阶段：\n2016-2017：早期源码控制中的使用，创建了 eden 项目 以增加项目代码的最大提交率。\n2017-2019：接受采纳阶段，不少 Python 和 JS 的后端程序员由于性能和编译时错误检测开始使用 Rust。\n2019-2020：专门支持阶段，2019 年 Rust 的开发人数呈指数增长，一个显著的例子是 Rust 作为 Diem 区块链（FaceBook 的电子钱包 Novi 是 Diem 组织的一员）的主语言。于是一个小的 Rust 开发小组被创建，专门致力于工具和集成方面的挑战。\n未来，短期内主要会聚焦以下四个领域：\n从语言和工具链的角度支持内部用户。\n在 FaceBook 以外的社区中做出积极贡献。\nRust 与 C++ 简单安全的互操作性。\n积极支持和参与 Rust 基金会。\n原文链接：A brief history of Rust at Facebook - Facebook Engineeringhttps://engineering.fb.com/2021/04/29/developer-tools/rust/?utm_campaign=Learning%20Posts&utm_content=166528802&utm_medium=social&utm_source=twitter&hss_channel=tw-1359556530618646530在 Rust 分析器的基础上增加了额外的功能，包括：\n内嵌提示\n可运行命令\n拓展宏递归\nItem 上下移动\n代码跳转\n打开 Cargo.toml\n父模块\n行合并\n插件链接：simrat39/rust-tools.nvim: Tools for better development in rust using neovim's builtin lsphttps://github.com/simrat39/rust-tools.nvim原文链接：rg3d game engine now supports multi-layer terrains! : rusthttps://www.reddit.com/r/rust/comments/nim68k/rg3d_game_engine_now_supports_multilayer_terrains/\n5 月 25 日 欧洲中部夏令时间 19:00（北京时间 26 日凌晨 1 点），Rust and Tell 线上 Meetup：Berline.rs\n5 月 27 日 北美东部夏令时间 19:00-21:00（北京时间 28 日早晨 7:00-9:00），线上 Meetup：Rust MTL: Building a Scrabble AI with the fst crate | Meetup\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-23 19:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在使应用程序运行在边缘计算或 Serverless 的技术，Rust 上的 WebAssembly 是光明的未来。这个Github仓库是学习Rust WebAssembly生态系统的知识库。Github 链接，https://github.com/thangchung/webassembly-tour"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/thangchung/webassembly-tour"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-22 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebAssembly 资源库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Lettre，是 Rust 开发的用于构建和发送电子邮件，其重写了电子邮件生成器，并支持异步和rustls。更多信息请查看博文链接，https://lettre.rs/post/lettre-0-10-0-rc-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://lettre.rs/post/lettre-0-10-0-rc-1/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-22 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lettre 0.10.0-rc.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"著名游戏《Flappy Bird》，用 Rust 编写并编译为 WebAssembly。 游戏有两个版本，经典版本和空气动力学版本。游戏介绍链接，https://senges.ch/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://senges.ch/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-22 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 和 WASM 在浏览器中进行Neuro Evolution"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"《Rust Web Development》现在可以预先购买了，阅读完书籍后，应该能够使用 Rust 构建第一个可用于生产环境的 Web 服务，并能够对其进行监视和部署。购买链接https://www.manning.com/books/rust-web-development?utm_source=gruberbastian&utm_medium=affiliate&utm_campaign=book_gruber_rust_5_21_21&a_aid=gruberbastian&a_bid=cef708fdhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-22 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Web Development 书籍发售"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Cosmian是一个加密数据服务提供商。借助其高级加密技术的Cosmian软件解决方案，在计算过程中不再共享或以明文形式显示敏感数据。目前Cosmian与KU Leuven的COSIC和Nigel Smart（Cosmian的科学顾问委员会的成员）正在合作开发一种编译器其目的是为了让开发人员编写基于Rust的sMPC算法。\nhttps://bnjjj.medium.com/why-and-how-we-wrote-a-compiler-in-rust-blog-post-series-1-x-the-context-e2f83b10edb9\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-21 21:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cosmian--为什么用rust并且怎么用rust写编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Parcel团队在过去的几个月中，一直在努力用Rust重写JavaScript编译器"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-21 21:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"parceljs--让我们用rust重写js编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Parcel的新JavaScript转换器是在Rust的SWC编译器上编写的。SWC提供JavaScript解析和代码生成，以及用于构建超快速AST转换的功能。Rust为JavaScript2-beta-3提供了可预测的性能，即时的启动时间以及对硬件级别进行优化的能力。\nhttps://v2.parceljs.org/blog/beta3/\nRustcc论坛: 支持rsshttps://rustcc.cn/微信公众号：Rust语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-21 21:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust编写的JavaScript编译器快10倍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linux 的 1Password 后端是由Rust编写。文章讲述了 1Password 团队使用 Rust 开发 1Password 的心路历程及幕后花絮。ReadMore:https://dteare.medium.com/behind-the-scenes-of-1password-for-linux-d59b19143a23"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dteare.medium.com/behind-the-scenes-of-1password-for-linux-d59b19143a23"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 23:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linux 1Password的幕后花絮"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nhashmap 和 hash 算法\n枚举作为 key\n静态字符串作为 key\n混合静态+动态 key\n展望未来\n结论\n笔记\nReadMore:https://blog.yoshuawuyts.com/optimizing-hashmaps-even-more/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.yoshuawuyts.com/optimizing-hashmaps-even-more/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 23:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"进一步优化 Hashmaps"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Yew是一个使用WebAssembly创建多线程前端Web应用程序的框架。ReadMore:https://github.com/yewstack/yew"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/yewstack/yew"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 23:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Yew 0.18 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n解析宏时正确支持文本作用域\n解决多段宏路径和文件包含的文件内的宏调用 include!\n支持文件级别#![macro_use]和cfg属性\n查找impl类型别名的所有可能块。以前，出于性能原因，仅当对应类型的别名数量不超过10时才对它们进行处理。现在，可以正确解析大量使用类型别名的crates，例如nalgebra或winapi\nReadMore:https://intellij-rust.github.io/2021/05/18/changelog-147.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://intellij-rust.github.io/2021/05/18/changelog-147.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 23:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"INTELLIJ RUST 更新日志"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"sok 可以根据Stack Exchange数据集生成完整的知识图谱,不仅仅可以用于计算机科学和编程,任何知识内容都可以用 sok 展示出来,sok 可以探索将不同的主题和概念联系在一起。ReadMore:https://github.com/eastrd/sok"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/eastrd/sok"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 23:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sok - 后端由rust编写的知识图谱"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"题外话： 之前看到知乎上有人说 Rust 2021 年光 CVE 就有近百个。那咱们今天就捡个热乎的 CVE  看看到底是咋回事。2021-05-18 ，openSUSE 邮件列表里收到一份安全报告，主题如下：\n[oss-security] please: CVE-2021-31153,CVE-2021-31154,CVE-2021-31155: local root exploit and further\n缘由：please 是一个 Rust 实现的替代 sudo 的工具，该库作者向SUSE 团队提出setuid-root 的代码安全审核。然后就被发现存在很多安全问题，并且包含一个比较严重的本地root漏洞，允许执行命令。https://gitlab.com/edneville/please.git报告摘录如下：\n可以进行任意文件存在测试，并且可以以root用户身份打开任意文件\n通过search_path（）函数进行任意文件存在性测试\n通过-d开关进行任意文件存在性测试\n使用不可信的umask创建令牌目录“ / var / run / pleaser / token”\n允许通过pleaseedit编辑任何文件，允许任意文件覆盖和所有权更改\n结论：setuid 二进制文件是在非 root 用户 shell 程序中运行的 root 权限二进制文件https://marc.info/?l=oss-security&m=162133298513412&w=2https://bugzilla.suse.com/show_bug.cgi?id=1183669"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 23:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【Rust 安全案例】Rust 也能写出漏洞，但都是逻辑漏洞"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"c5soft"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 21:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Changelog"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"c5soft"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\n🛠 Fixes\n\nFix missing redirects. [@siku2, #1640]\nRemove Drop bound from Task trait. [@siku2, #1627]\nEnable std feature for indexmap. [@jstarry, #1709]\n\n\n\n⚡️ Features\n\nImplicit optional attributes. [@siku2, #1637]\nAdded callback_future_once in yewtil.(#1712). [@fraillt, #1696]\nAdded relevant examples section to the docs. [@oOBoomberOo, #1695]\nAdded missing KeyboardService re-export. [@SOF3, #1694]\nRename internal Agent structs to match Component. [@jstarry, #1688]\nAdd discussion link to issue selector. [@jstarry, #1674]\nUpdate link to Material Design Components. [@TapioT, #1662]\nExtract Classes to a separate macro. [@cecton, #1601]\nImprove the \"keyed_list\" example. [@titaneric, #1650]\nAdd documentation for component children. [@K4rakara, #1616]\nAdd a macro for building properties outside of html!. [@siku2, #1599]\n\n\n\nFix missing redirects. [@siku2, #1640]\nRemove Drop bound from Task trait. [@siku2, #1627]\nEnable std feature for indexmap. [@jstarry, #1709]\n\nImplicit optional attributes. [@siku2, #1637]\nAdded callback_future_once in yewtil.(#1712). [@fraillt, #1696]\nAdded relevant examples section to the docs. [@oOBoomberOo, #1695]\nAdded missing KeyboardService re-export. [@SOF3, #1694]\nRename internal Agent structs to match Component. [@jstarry, #1688]\nAdd discussion link to issue selector. [@jstarry, #1674]\nUpdate link to Material Design Components. [@TapioT, #1662]\nExtract Classes to a separate macro. [@cecton, #1601]\nImprove the \"keyed_list\" example. [@titaneric, #1650]\nAdd documentation for component children. [@K4rakara, #1616]\nAdd a macro for building properties outside of html!. [@siku2, #1599]\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 21:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"✨ 0.18.0 (2021-05-15)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"c5soft"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\n🛠 Fixes\n\nFixed a \"call stack exceeded\" panic that occurred if a Component was updated many times [[@jstarry], #1624]\n\n\n\nFixed a \"call stack exceeded\" panic that occurred if a Component was updated many times [[@jstarry], #1624]\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 21:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"✨ 0.17.4 (2020-10-18)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"c5soft"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\n⚡️ Features\n\nAdded prompt function to DialogService. [[@teymour-aldridge], #1350]\nImplement From<&[T]> where T: AsRef<str> for Classes. [[@alexschrod], #1448]\nAdded batch_callback_once to ComponentLink. [[@ctron], #1463]\n\n\n\n🛠 Fixes\n\nProperties with default type params can now have Properties trait derived. [[@siku2], #1408]\nhtml!: Improved compile error messages for invalid list fragments. [[@siku2], #1445]\nBatch component updates are processed more efficiently. [[@bakape], #1470]\n\n\n\nAdded prompt function to DialogService. [[@teymour-aldridge], #1350]\nImplement From<&[T]> where T: AsRef<str> for Classes. [[@alexschrod], #1448]\nAdded batch_callback_once to ComponentLink. [[@ctron], #1463]\n\nProperties with default type params can now have Properties trait derived. [[@siku2], #1408]\nhtml!: Improved compile error messages for invalid list fragments. [[@siku2], #1445]\nBatch component updates are processed more efficiently. [[@bakape], #1470]\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 21:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"✨ 0.17.3 (2020-08-16)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"c5soft"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n\n⚡️ Features\n\nKey now implements Deref<Target = str>. [[@faulesocke], #1370]\n\n\n\n🛠 Fixes\n\nUncontrolled input values are no cleared when component renders. [[@jstarry], #1374]\nRevert lazy rendering behavior introduced in 0.17.0. Yew will render the component between each update. [[@jstarry], #1373]\n\n\n\nKey now implements Deref<Target = str>. [[@faulesocke], #1370]\n\nUncontrolled input values are no cleared when component renders. [[@jstarry], #1374]\nRevert lazy rendering behavior introduced in 0.17.0. Yew will render the component between each update. [[@jstarry], #1373]\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-19 21:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"✨ 0.17.2 (2020-07-04)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库为 ffmpeg 的 bindding库，利用 Rust 语言的设计，帮你构建健壮的多媒体应用。GitHub：https://github.com/larksuite/rsmpeg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-18 23:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"飞书团队开源 rsmpeg"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Raft协议是一种分布式一致性协议。riteraft 是基于 tikv/raft-rs 封装的一层框架曾，比起 raft-rs 更易用。GitHub：https://github.com/ritedb/riteraft"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-18 23:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"riteraft 喜提 github trending rust 热榜席位"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"要求： Rust/ Graphql/ TypescriptThe role can optionally be temporarily remote due to the ongoing COVID-19 situation, with the goal of you joining us in Gothenburg, Sweden. We can help with your move and immigration.https://technocreatives.homerun.co/senior-rust-full-stack-developer/en"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-05-18 23:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 远程工作，并且有瑞典移民的机会"},"type":"text"}],"type":"title"}},]
