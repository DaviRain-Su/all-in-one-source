export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本 RFC 在 Linux 内核中添加了对 Rust 的支持。旨在将 Rust 作为第二种语言以支持驱动程序和类似 “叶子” 模块的开发。目前没有关于重写内核核心或主要内核子系统的计划。如果有兴趣参与这项工作，可以加入邮件列表，rust-for-linux@vger.kernel.org 。mailto:rust-for-linux@vger.kernel.org[RFC] Rust support: https://lkml.org/lkml/2021/4/14/1023Github: https://github.com/Rust-for-Linuxhttps://github.com/Rust-for-Linux/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://lkml.org/lkml/2021/4/14/1023"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-15 21:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[RFC] 为 Linux Kernel 提供 Rust 支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"上一篇文章中，Google 宣布 Android 现在支持使用 Rust 编程语言来开发 OS 。而这篇文章则使用几个简单的示例讨论这项工作的一些技术方面。另外值得一提的是，Google 已经加入上面提到的 Rust for Linux 组织。Rust in the Linux kernel: https://security.googleblog.com/2021/04/rust-in-linux-kernel.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://security.googleblog.com/2021/04/rust-in-linux-kernel.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-15 21:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Google ❤ Kernel ❤ Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dipa 可以轻松高效地对大型 Rust 数据结构进行增量编码。增量编码技术可以用于确定在数据结构的两个实例之间发生了什么变化，利用此项技术，可以有效减少传输相似数据所耗费的流量和带宽。crates.io: https://crates.io/crates/dipaGithub: https://github.com/chinedufn/dipaThe dipa Book: https://chinedufn.github.io/dipa"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://chinedufn.github.io/dipa"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-15 21:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dipa - 轻松为 Rust 数据结构添加增量编码支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"static_init 支持安全的可变静态量和非常量静态量初始化，与 lazy_static 或 parking_lot::RwLock 相比，具有 200 倍的速度提升。crates.io: https://crates.io/crates/static_initGitlab: https://gitlab.com/okannen/static_init"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gitlab.com/okannen/static_init"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-15 21:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"static_init v1.0 发布 - 更快的静态变量"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章简要解释了什么是 *-sys crate ，以及如何利用构建脚本以一次性完成 *-sys crate 的创建。Making a *-sys crate: https://kornel.ski/rust-sys-crate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://kornel.ski/rust-sys-crate"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-15 21:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[文章] Making a *-sys crate - 编写 *-sys crate 帮助 Rust 程序使用 C 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 386: https://this-week-in-rust.org/blog/2021/04/14/this-week-in-rust-386/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/04/14/this-week-in-rust-386/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-15 21:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 386"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"包括：\n移除旧版 Cranelift 后端\n原子性操作\n针对 windows 的跨平台编译\n...\nhttps://bjorn3.github.io/2021/04/13/progress-report-april-2021.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://bjorn3.github.io/2021/04/13/progress-report-april-2021.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustc_codegen_cranelift 进展报告（2021 四月）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"enso 是一种可视化编程语言，同时也支持支持 Java、Python、R、JavaScript。使用 Rust 和 Java 编写.https://github.com/enso-org/enso"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/enso-org/enso"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"enso 编程语言发布 2.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"shadertoy  的 Rust 实现，基于 wgpuhttps://www.shadertoy.com/https://github.com/adamnemecek/shadertoy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/adamnemecek/shadertoy"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 版着色器：shadertoy"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://gamedev.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gamedev.rs/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-gamedev.github.io 更名为 gamedev.rs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://kerkour.com/blog/rust-in-production-2021/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://kerkour.com/blog/rust-in-production-2021/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"四十二个在生产环境中使用 Rust 的公司"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://www.techrepublic.com/article/rust-not-firefox-is-mozillas-greatest-industry-contribution/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.techrepublic.com/article/rust-not-firefox-is-mozillas-greatest-industry-contribution/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【文章】Mozilla 最大的行业贡献不是 Firefox 而是 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"angelilu"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://gregoryszorc.com/blog/2021/04/13/rust-is-for-professionals/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gregoryszorc.com/blog/2021/04/13/rust-is-for-professionals/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-14 23:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【文章】Rust 为专业程序员而生"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Phala 团队诚聘区块链（Substrate）工程师：中级 25k 起 高级 / Lead 级 35k 起 可缴纳五险一金，另根据项目进展有额外奖金/代币激励注：是起薪，上不封顶，以面试的沟通结果为准Base：北京、远程基本要求：详情请见 论坛帖子https://rustcc.cn/article?id=abe89b18-52da-48d0-88b1-26286faca288"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-13 21:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Phala 团队诚聘区块链（Substrate）工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"小编最近在学习 Rust 中内存序，还在处于理清概念的阶段，积累了一些资料分享一下：youtube - Crust of Rust: Atomics and Memory Orderinghttps://www.youtube.com/watch?v=rMGWeSjctlY&t=6503sExplaining Atomics in Rusthttps://cfsamsonbooks.gitbook.io/explaining-atomics-in-rust/Atomics - The Rustonomicon std::sync::atomic::Orderinghttps://doc.rust-lang.org/nomicon/atomics.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-13 21:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Rust 中内存序（Memory Order）的资料"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"过去 18 个月中,安卓团队开始将 Rust 引入到安卓开源项目中, 很快, 一些早期的适配项目就会面世.原文链接https://www.tectalk.co/google-android-team-embraces-rust-for-android-os-development/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"谷歌安卓团队拥抱 安卓上的 Rust 开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者花了很多时间调研和使用各种游戏引擎, 有很多代码在很多地方重复使用, 所以,作者将这些代码抽象出来, 加以良好的文旦个测试来保证可以被重复使用. 感兴趣的同学可以看看.\ngame_clock\ngame_engine_core\ngame_state_machine\nplanck_ecs_bundle\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Collection of game engine crates"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Robot Rumble 是一个小游戏,双方编写 robots 在一个区域中战斗. 这里是这个游戏的逻辑层实现,主要是由 Rust 实现.github地址https://github.com/robot-rumble/logic/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Robot Rumble 逻辑层后端代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"swc 是一个 Rust 编写的 typescript/javascript 编译器, 可以生成兼容老旧浏览器的 javascript 代码.单核比 babel 快 20倍, 4 核比 babel 快 70 倍.目前 v1.2.52 已经发布.原文链接https://swc.rs/blog/2021/04/11/swc-1.2.52/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 20:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"swc v1.2.52 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讓你使用macro或是YAML產生自己的資料夾與資料可以簡單用一個腳本檔產生出一些測試範例資料read mehttps://github.com/KSXGitHub/build-fs-tree"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 01:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"build-fs-tree"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要是修正bugread mehttps://swc.rs/blog/2021/04/11/swc-1.2.52/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 01:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SWC 超快速的javascript / typescript編譯器 1.2.52釋出"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"類似zsh的命令列程式asciinemahttps://asciinema.org/a/406461read mehttps://github.com/denisidoro/navi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 01:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"navi 輔助你打出正確指令"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有趣的玩具read mehttps://github.com/hidva/KuiBaDB"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 01:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"KuiBaDB: 一個超微小相容PostgreSQL介面實作品"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"輔助你在nix上開發rust程式read mehttps://github.com/srid/rust-nix-template"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-12 01:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-nix-template"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 基金会将于4月12日公布 Shane Miller（肖恩·米勒，亚马逊 AWS 高级工程经理），当选为新创建的 Rust 基金会的首任主席。Miller，领导 AWS Rust 平台团队并担任软件工程师已有近30年的时间。 在 AWS，Miller一直是开源战略计划以及软件工程和交付方面的领导者。 Miller 的 Rust 平台团队包括 Rust 语言和编译器的维护开发人员，及 Tokio 运行时（ Rust 开发可靠异步应用）的开发者。 在 Miller 的领导下，AWS Rust 团队正在针对工程师构建和运营设计优化工具，以充分利用 Rust 的性能和安全性。Rust 基金会将 AWS，Google，华为和 Microsoft 以及 Rust 的初始赞助商 Mozilla 召集在一起，共同指导 Rust 的开发。详细链接，https://www.zdnet.com/article/awss-shane-miller-to-head-the-newly-created-rust-foundation/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.zdnet.com/article/awss-shane-miller-to-head-the-newly-created-rust-foundation/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-10 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"AWS Shane Miller 当选新 Rust 基金会首任主席"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rustc_codegen_cranelift，或者简称为cg_clif，是 Rust 编译器的一个新的实验性代码生成后端。现有的后端是 LLVM，它非常擅长生成快速，高度优化的代码，但并不擅长快速编译代码。 使用 Cranelift 项目的 cg_clif 将提供一个快速的后端，大大缩短了编译时间，但执行的优化很少。 这非常适合调试版本，希望 cg_clif 最终将成为调试模式下的默认后端。Rust PR 链接，https://github.com/rust-lang/rust/pull/81746rustc_codegen_cranelift 介绍链接，https://blog.rust-lang.org/inside-rust/2020/11/15/Using-rustc_codegen_cranelift.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/11/15/Using-rustc_codegen_cranelift.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-10 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustup nightly 将添加 rustc_codegen_cranelift"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"simd-adler32，使用 AVX2 以〜40GiB/s 的速度计算 Adler-32 校验和。\n没有依赖；\n支持 no_std；\n当 std 启用时，运行时 CPU 功能检测；\n目前仅 x86 和 x86_64，支持尽可能多的目标上实现快速性能；\n当 simd 不可用时，默认为标量实现\nGithub链接，https://github.com/mcountryman/simd-adler32"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mcountryman/simd-adler32"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-10 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"simd-adler32"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"自动化生成..Default::default()初始化。只需使用＃[autodefault]属性标记函数："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-10 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"autodefault"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Orion 是高级的纯函数式 Lisp 方言。示例：Github 链接，https://github.com/wafelack/orion"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/wafelack/orion"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-10 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Orion，Rust实现Lisp"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tokio 今天发布了新的 RFC，提出了新的支持 io-uring 异步运行时的计划。Tokio目前的Linux实现使用非阻塞的系统调用和epoll进行事件通知。使用epoll，调整后的TCP代理将在用户态之外花费70％至80％的CPU周期，包括执行syscall和在内核和用户态之间复制数据的周期。2019年，Linux增加了一个新的API，即io-uring，它通过消除大多数syscall和提前映射用于字节缓冲区的内存区域来减少开销。比较io-uring与epoll的benchmark会发现提升还是很显著的；一个TCP echo客户端和服务器显示出高达60%的改进。虽然还没有测试过，但使用io-uring代替Tokio的线程池策略将会显著的改善 IO 操作。由于io-uring与epoll有很大的不同，Tokio必须提供一套新的API来充分利用减少的开销。然而，Tokio的稳定性保证意味着Tokio API最早要到2024年才能改变。此外，io-uring API还在不断发展，计划在不久的将来推出新功能。与其等待io-uring的成熟和Tokio 2.0的发布，tokio 将发布一个独立的 crate，专门用于暴露io-uring的API。这个新的 crate 将能够在不违反 Tokio 稳定性保证的情况下，快速迭代突破性的变化。只部署在 Linux kernels 5.10 或更高版本上的应用程序，当充分利用 io-uring 的优势提供可衡量的好处时，可以选择使用这个 crate。预期的用例包括 TCP 代理、HTTP 文件服务器和数据库。链接：https://github.com/tokio-rs/tokio-uring/pull/1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tokio-rs/tokio-uring/pull/1"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tokio-uring - tokio 基于 io-uring 版的异步运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 标准库提供了大量的 Trait，每个 Trait 的功能是什么？怎样区分功能有点类似的 Trait 的使用场景？这篇博客非常详细的介绍了标准库中各种内置 Trait，非常值得阅读。链接：https://github.com/pretzelhammer/rust-blog/blob/master/posts/tour-of-rusts-standard-library-traits.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/pretzelhammer/rust-blog/blob/master/posts/tour-of-rusts-standard-library-traits.md"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 标准库的 trait 引导大全"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Starlark 是 Google 开发的类似于 Python3 的一门编程语言，主要用在 Google 自己的构建工具 Bazel 和 Facebook 的构建工具 Buck 中。Starlark 目前有三种实现，一种是 Go，一种是 Java，另外一种就是现在这个项目，使用 Rust 实现。Rust 的初版是 Google 实现的，现在给了 Facebook。Rust 实现包括了完整的 parser，evaluator，linter 和 debugger。对编程语言感兴趣的朋友可以看看。链接：https://developers.facebook.com/blog/post/2021/04/08/rust-starlark-library/Github: https://github.com/facebookexperimental/starlark-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/facebookexperimental/starlark-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Starlark -- Facebook 用 Rust 重新实现了 Starlark 这门编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有了他就可以避免写那些繁琐冗长的 Java JNI 函数名了！例子：链接：https://github.com/giovanniberti/robustahttps://github.com/folyd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/giovanniberti/robusta"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"robusta - 一个方便生成 JNI 交互代码的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust刚刚稳定了一些常量泛型相关的功能，最近出了不少使用这些功能来构建的项目。gamma就是这样一个项目，使用了常量泛型来构造一个神经网络，用以展示Rust中常量泛型相关的功能如何在实际项目中使用。Github: https://github.com/c0dearm/gamma"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/c0dearm/gamma"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-08 17:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"利用Rust常量泛型构造神经网络"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustType提供一个用于加载、查询和栅格化TrueType字体的API。它还为硬件字体渲染提供了一个动态GPU字形缓存的实现。如果你用过Rust生态中的一些GUI框架，很有可能内部就使用了这个crate，比如conrod和nannou。但是这个crate在crate.io上已经超过11个月没有更新了，今天reddit上有人发帖发现该crate在crate.io上寻找新的维护者，也因此呼吁广大该crate的受益者，去帮助该crate做贡献。crate.io: https://crates.io/crates/rusttype"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/rusttype"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-08 17:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rusttype crate 正在寻找新的维护人员"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者已经为这款游戏投入了好几个月的时间，经历了多次修改原型，现在正式向公众宣布这款游戏!游戏是使用Bevy游戏引擎制作的。官网: https://minewars.cc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://minewars.cc/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-08 17:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MineWars 一个用bevy构建的多人实时策略游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者使用actix和feed-rs开发了自己的RSS浏览器。它很简单，作家将尽量保持这种方式，但仍然会添加一些功能。Live: https://mevlyshkin.xyz/rssRepo: https://git.sr.ht/~leinnan/rust_blog"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://git.sr.ht/~leinnan/rust_blog"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-08 17:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 activex 和 feed-rs 开发的 RSS 浏览器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"2021.04.09 晚上20:00 ～ 22:00讨论主题：  Rust 语言中级中间语言 MIR 的功用参考资料：Rust 中文社群 飞书群 邀请你加入：对话群： https://applink.feishu.cn/TeLAcbDR话题群：https://applink.feishu.cn/TeLD868w"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-08 17:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustFriday 飞书群线上沙龙 第三周"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此版本更新较多, 包括：渲染时使用PBR着色器、GLTF 加载器改进、ECS core 重写等https://bevyengine.org/news/bevy-0-5/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://bevyengine.org/news/bevy-0-5/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-07 16:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bevy 0.5 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://www.fpcomplete.com/blog/philosophies-rust-haskell/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.fpcomplete.com/blog/philosophies-rust-haskell/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-07 16:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【博客】Rust 和 Haskell 的哲学"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"为了减少安卓操作系统的内存安全问题，安卓开源项目(AOSP)  现在宣布支持 Rust 对安卓操作系统的开发。详细介绍见：https://security.googleblog.com/2021/04/rust-in-android-platform.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://security.googleblog.com/2021/04/rust-in-android-platform.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-07 16:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"安卓开源项目(AOSP) 引入 Rust 编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Miri 是一个实验性的 Rust MIR 解释器。它可以运行 Rust 二进制文件，对其进行测试，可以检查出某些未定义的行为 ref。支持 doctests 之后，cargo miri test 执行的测试与 cargo test 执行的测试就保持一致了。https://github.com/rust-lang/miri/pull/1757"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/miri/pull/1757"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-07 16:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Miri 现支持运行 doctests"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Amadeus 是一组开箱即用、低层可重用构建件，来构造 Rust 分布式计算和大数据生态。它宣称符合以下原则：\n无畏：无数据竞争，无 unsafe 代码，无损失数据克隆\n无感分布式：分布式运行时和在本地运行时一样简便和高性能\n数据递进类型化： 当调度计划已知时可以最大化性能，其他情况则可以保持灵活性\n简洁：尽可能地保持接口和实现简单可靠\n可靠：尽可能减少不可处理的错误，并且只会抛出内部不可处理的错误\ngithubhttps://github.com/constellation-rs/amadeus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-06 23:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amadeus - Rust 大数据处理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"张老师最近开始了 「线上学习室」 的直播，今天的主题是了解 RISC-V 的历史以及基础架构~录播https://rust-lang.feishu.cn/minutes/obcn38cpfp76729u8by1hls2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-06 23:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「线上学习室」学习 Linux和RISC-V基金会共同发起的 RISC-V 课程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这个教程里,作者会使用 libp2p 来构建一个简单的 peer-to-peer 菜谱应用.在这个菜谱应用会有以下基本功能:原文链接https://blog.logrocket.com/libp2p-tutorial-build-a-peer-to-peer-app-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-05 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"libp2p 教程: 使用 Rust 构建一个点对点应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"和 SSD 不同, 机械硬盘用并发的方式并不会显著提高 I/O 性能,相反, 会造成读取更慢的情况. 机械硬盘由于工作原理的不同,我们可以使用另外一种优化方式: 请求排序. 作者通过这种方式, 将 fclones 库打造成了已知的最快的重复文件查找器.想了解更多的同学可以看看.原文链接https://pkolaczk.github.io/disk-access-ordering/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-05 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"排序读请求来加速硬盘 I/O"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Crust of Rust 最新一期, Atomics and Memory Ordering.想深入了解 atomic 以及 内存模型的同学可以看看.油管地址https://www.youtube.com/watch?v=rMGWeSjctlY"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-05 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crust of Rust: Atomics and Memory Ordering"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Himalaya 是一个Rust 编写的命令行客户端.github 地址https://github.com/soywod/himalaya--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-05 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Himalaya: 极简命令行邮件客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustRust Magazine 是一本 Rust 月刊杂志，到目前已经更新到3月刊了。为了方便更多读者，本期月刊添加了 RSS 订阅支持，链接如下：https://rustmagazine.github.io/rust_magazine_2021/rss.xml3月刊杂志https://rustmagazine.github.io/rust_magazine_2021/chapter_3/toc.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-04 22:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Magazine 支持RSS订阅"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust使用Bevy引加载《我的世界》GreenField 地图并渲染在全屏上，仅用了200M多的内存，加载时间不超过半秒。https://t.co/xvf1qenmRcReadMorehttps://twitter.com/zzxneo/status/1378581236038402049"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-04 22:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"BevyEngine 加载《我的世界》地图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust经过两个月@mithridates 终于做完了 Easy Rust Book 的视频教程，总共 186 个视频，大概 23 小时左右的总时长。https://twitter.com/mithridatesRead Morehttps://www.youtube.com/watch?v=-lYeJeQ11OI&list=PLfllocyHVgsRwLkTAhG0E-2QxCf-ozBkk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-04 22:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Easy Rust book 视频教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个可配置的，精简的，快速的TUI文件浏览器，从nnn和fzf得到的想法。尽管xplr努力做到快速和极简，但它的专业之处在于它的可配置性。一旦您阅读了文档，您应该能够通过修改单个配置文件来配置键绑定、不同的运行模式以及它的外观。Github 链接，https://github.com/sayanarijit/xplr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/sayanarijit/xplr"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-03 22:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"xplr:另一个TUI文件浏览器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用于边缘设备和云服务之间的端到端加密、相互认证通信的Rust和Elixir库。物联网中的机器通过与云服务和其他联网机器交换信息来进行操作。安全的、私有的和可信的连接应用程序必须保护这些消息不被窃听、篡改和伪造。Github 链接，https://github.com/ockam-network/ockam/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ockam-network/ockam/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-03 22:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ockam：用于端到端加密、相互身份验证通信的Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我刚刚发布了http-server crate的新版本。几个月前，我想开发一个轻量级、快速和易于使用的HTTP服务器解决方案。文章链接，https://www.reddit.com/r/rust/comments/miw671/release_v010_for_http_server_crate_a_simple_and/Github 链接，https://github.com/EstebanBorai/http-serverToxiproxy服务器的一个Rust版本，它是一个TCP代理，用于模拟网络和系统的混乱和弹性测试。Github 链接，https://github.com/oguzbilgener/noxioushttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/oguzbilgener/noxious"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-03 22:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"http-server v0.1.0版本创建了一个简单的、可配置的命令行HTTP服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Easy Rust 的作者用简单的英语词汇录制了一系列 Rust 教程的视频，发布在了 YouTube。每集 5 到 10 分钟，总共 186 集，23 个小时。链接：https://www.youtube.com/playlist?list=PLfllocyHVgsRwLkTAhG0E-2QxCf-ozBkk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.youtube.com/playlist?list=PLfllocyHVgsRwLkTAhG0E-2QxCf-ozBkk"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-02 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Easy Rust - learn to program in Rust with simple English"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://crates.io/crates/typedmap"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/typedmap"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-02 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TypedMap - 一个可以存储不同类型的 HashMap"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n支持使用 // 前缀搜索 rustc 编译器的源码。\n支持直接搜索 Rust 版本号，跳转到该版本的 release 界面。\n新的源码跳转模式：在关键字前添加 src: 或 s:，搜索结果会跳转到源码页面。\n新的 :blog 命令。\n更多请查看 Changelog 页面：https://rust.extension.sh/changelog/https://github.com/folyd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust.extension.sh/changelog/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-04-02 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Search Extension v1.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Deno筹集了490万美元的种子资本。投资者是来自Four Rivers Ventures的Dan Scholnick、Rauch Capital的Guillermo、Long Journey Ventures的Lee Jacobs、Mozilla Corporation、Shasta Ventures以及我们的长期合作者Ben Noordhuis。这笔投资意味着Deno将有一支全职专家工程师队伍，致力于改进Deno。将确保问题得到解决，错误得到修复，及时发布；将确保Deno是一个别人可以信赖的平台。ReadMore:https://deno.com/blog/the-deno-company"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://deno.com/blog/the-deno-company"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-31 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Deno 公司成立!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Salvo is a simple Rust web framework\n基于最新的hyper，tokio。\n支持Websocket。\n从多个物理目录中提供一个静态虚拟目录。\n中间件支持在句柄之前或之后执行。\n简单的路由选择，支持路径参数和regex\n支持路径参数和regex。\n树状路由系统。\nReadMore:https://github.com/salvo-rs/salvo/\n目标是比Servo更轻量级\n支持Maple和Yew的服务器端Rendering和静态站点生成用例\n功能将与web_sys非常相似\n允许在Elements和Nodes之间进行投射\nReadMore:https://github.com/philip-peterson/rust-rdom"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/philip-peterson/rust-rdom"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-31 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Salvo - 一个新的 Rust web 框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"搜索引擎研发工程师:岗位职责:任职要求:知乎搜索开源项目： https://github.com/zhihu/rucene坐标: 北京联系邮箱:zl 【at】 zhihu 点 com原文链接https://rustcc.cn/article?id=edd95b2c-70e6-465d-9471-689a7f1081b0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-29 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"知乎招聘 Rust 工程师 | 搜索引擎研发工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Cool bear系列的最新文章. 可以让你深入的了解 Rust 中的 async.原文链接https://fasterthanli.me/articles/pin-and-suffering"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-29 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pin and suffering"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"2021 年了, 去哪里学习 Rust 呢?本文总结列出了一系列的 Rust 学习资料. 想学习的 Rust 的小伙伴可以看看.原文链接https://loige.co/where-to-go-to-learn-rust-in-2021/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-29 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2021年去哪里学习 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文详细的介绍了 Rust 模块系统. 从为什么需要模块系统? 到如何使用的非常详细. 希望对模块系统深入掌握的同学可以看看.原文链接https://aloso.github.io/2021/03/28/module-system.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-29 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rusts Module System Explained"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"youki 是 一个 Rust 写的 oci-runtime, 目前还是实验性阶段, 你可以使用 docker 来把玩一下.github 地址https://github.com/utam0k/youki--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-29 21:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"youki: 一个 Rust 写的 oci-runtime"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"maple，一个 WASM 中的响应式 DOM 库，发布 v0.4.0 版本。maple 的  Hello World 项目，在文件 src/main.rs 中，添加如下示例代码：运行此 web 应用，通过推荐的编译工具 Trunk，https://trunkrs.dev/，即可在浏览器中看到结果。Changelog 链接：https://github.com/lukechu10/maple/blob/master/CHANGELOG.md#-040-2021-03-25"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lukechu10/maple/blob/master/CHANGELOG.md#-040-2021-03-25"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-28 00:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"maple v0.4.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个非常简单的链接器，旨在更好地了解链接器内部。仅执行一个链接任务：将可重定位目标文件组合为单个可重定位目标文件。 以下是所有的条件：\n仅适用于 64 位 Linux；\n仅在链接两个目标文件的极其简单的情况下进行了测试，更简单的文件应该可以工作，但是任何非重要的代码都可能会出现在 ELF 文件规范的未实现部分中；\n总是将结果写到 output.o；\n错误无法正常处理；\nGithub 链接：https://github.com/andrewhalle/byo-linker"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/andrewhalle/byo-linker"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-28 00:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"byo-linker，构建自己的链接器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rs-pbrt 发布 v 0.9.0，这是其在 2021 年发布的第一个版本。源代码当前没有太大变化， 渲染器大致具有完整的功能，并且与第 3 版书中的 C ++ 代码兼容。 PBRT 书的第 4 版即将问世，并且已经在网上提供了与之匹配的 C ++ 代码。基于物理的渲染（Physically Based Rendering）描述了现代逼真的渲染系统背后的数学理论及其实际实现。PBR 书中的思想和软件向读者展示了如何设计和使用功能齐全的渲染系统，能够创建令人惊叹的图像。该书第 3 版的全部内容均可在线免费获得。Physically Based Rendering 链接：http://www.pbr-book.org/Github 链接：https://github.com/wahn/rs_pbrt博客版本链接：https://www.rs-pbrt.org/blog/v0-9-0-release-notes/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.rs-pbrt.org/blog/v0-9-0-release-notes/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-28 00:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rs-pbrt v0.9.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该版本主要是带来了 ：\n对于 dev dependencies： 当包（package）作为常规依赖项和开发依赖项共享时，仅当当前构建包含开发依赖项时，才启用开发依赖项features\nHost Dependencies ：当包作为 常规依赖 和 构建依赖或proc-macro共享时，用于常规依赖的features 将独立于构建依赖或proc-macro。\nTarget Dependencies: 当包在构建图中多次出现，并且其中一个实例是特定于目标的依赖项时，仅当当前正在构建目标时，才启用特定于目标的依赖项的features。\n不过这样可能会导致编译时间加长（因为可能多次编译同一个crate），更详细内容可以看 Cargo Guide 的 \"Feature Resolver\" 小节。这样设置就可以启用新的行为链接： https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-26 12:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.51 稳定版发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者总结了 Rust Iterator 相关的几条技巧，感觉还不错。链接：https://robinmoussu.gitlab.io/blog/post/2021-03-25_rust_iterators_tips_and_tricks/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://robinmoussu.gitlab.io/blog/post/2021-03-25_rust_iterators_tips_and_tricks/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-26 12:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust Iterator 的一些技巧"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者使用 Rust 实现了一个 MVP 版的基于堆栈的字节码虚拟机（VM)。这个 VM 可以运行简单的图灵完备的指令集。核心代码只有 250 行，并且有大量注释。链接：https://github.com/mkhan45/tinyvmhttps://github.com/folyd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mkhan45/tinyvm"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-26 12:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tinyvm - Rust 实现的 MVP 版堆栈字节码虚拟机"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"linux-next的rust-next分支被合并了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"简单示例：\n功能丰富: Unbounded, bounded 和 rendezvous 队列\n快速: 通常比 std::sync::mpsc 更快，某些情况比 crossbeam-channel 更快\n安全: 代码库中没有使用任何的 unsafe ！\n灵活: Sender 和 Receiver 同时支持 Send + Sync + Clone\n熟悉: 几乎和 std::sync::mpsc的用法一致\n更多功能: 比如 MPMC 支持和发送 timeouts/deadlines\n简单: 足够小的依赖, 足够小的代码, 足够少的编译时间\n异步:  async支持\n人体工程学: 强大的类似select的接口\nGithub主页上还有benchmark：Github: https://github.com/zesterer/flume"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/zesterer/flume"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Flume 一个安全快速的多生产者多消费者通道实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前两天日报报道的颜文字生成工具的托盘应用程序，目前仅支持Windows平台的托盘，计划是跨平台的托盘应用程序，有对Rust语言GUI开发感兴趣的可以关注一下代码实现。Github ：https://github.com/Olaren15/uwu-tray"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Olaren15/uwu-tray"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"uwu-tray 颜文字跨平台托盘应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"task-stream是一个全局任务spawner，可以在no_std中运行。它提供了用于异步任务的spawner，以及异步延迟函数。它是为库作者设计的。 在第三方库中，可以生成子任务，而无需关心执行程序主程序使用的子任务。基本用法：更多示例请查看以下链接内容：crates.io ：https://crates.io/crates/task-stream"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/task-stream"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"task-stream 一个能运行在no_std的全局异步任务spawner"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n优雅的关闭服务\n取消耗时太长的操作\n在撤销授权时停止运行中的操作\n示例：Read More： https://crates.io/crates/permit"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/permit"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"permit 一个用于取消操作的结构体。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该程序使用Rust编写，编译到WebAssembly，运行在浏览器上。比较有意思的点是编译的WebAssembley是支持SIMD的，作者在blog里有相关介绍。在线地址: https://notes.ameo.design/fm.htmlRead More: https://cprimozic.net/blog/fm-synth-rust-wasm-simd/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://cprimozic.net/blog/fm-synth-rust-wasm-simd/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"功能齐全的FM合成器运行在浏览器上!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"与相关替代品的建议比较：\nclap - 最受欢迎同时功能最全的\ngumdrop - 一个简单的使用过程宏的解析器\nstructopt - 上面两个的缝合体\nargh - 类似于 gumdrop\nGithub：https://github.com/RazrFalcon/pico-args"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/RazrFalcon/pico-args"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pico-args 一个非常简单的命令行参数解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"383。Read More：https://this-week-in-rust.org/blog/2021/03/24/this-week-in-rust-383/感谢张汉东老师（@AlexZhang）和坏姐姐（@huangjj27）提供的讯息"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/03/24/this-week-in-rust-383/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-25 22:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 383"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/irevenko/ferris-fetch"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/irevenko/ferris-fetch"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-24 23:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ferris-fetch:  获取 Rust 以及系统信息"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比如将：转化为https://github.com/Daniel-Liu-c0deb0t/uwu"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Daniel-Liu-c0deb0t/uwu"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-24 23:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"uwu ：颜文字生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linux 一直是 C 语言的天下，但是 Rust 作为一种系统级编程语言，正在慢慢地为 Linux 提供支持。Rust 与 Linux 会有哪些结合点？本文是作者和 Linus Torvalds 以及 Greg Kroah-Hartman的谈话。https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-24 23:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linus Torvalds : Rust 将会在 Linux 的哪些方面发挥作用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Tetris for the NES 版本的 俄罗斯方块 是作者最喜欢的版本之一, 但是他缺少一个功能, 就是快速降落(Hard drop). 所以作者直接逆向工程给他加上了这个功能.原文链接https://www.gridbugs.org/reverse-engineering-nes-tetris-to-add-hard-drop/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-22 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"逆向工程: 给俄罗斯方块加上快速降落功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 中有 零大小类型的概念, 简称 ZST (Zero-Sized Types). 这些类型不会在他们的布局上包含任何的信息. 但是这并不意味着他们不重要,本文将深入解释 ZST 的设计理念和应用. 感兴趣的小伙伴可以看一下.原文链接https://www.hardmo.de/article/2021-03-14-zst-proof-types.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-22 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的 零大小类型(ZST) 的神奇应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 脚趾头 的知乎投稿. 作者之前使用 Rust 实现了 lens, 本文主要说明如何来把玩这个库 len-rs.原文链接https://zhuanlan.zhihu.com/p/358678675"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-22 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lens-rs 指路"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Rust 构建 OpenStreetMap 应用 的最新章节, 结合之前的内容, 本章结束会完成一个基本的应用.原文链接https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-vi-8cfc8c3f7798--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-22 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 构建 OpenStreetMap 应用: Part VI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Let's Encrypt 是個很常用的免費ssl證書服務作者結合了tide與Let's Encrypt做了一個自動取得證書給tide使用的範例read mehttps://github.com/http-rs/tide-acme"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-21 20:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tide-acme：通過Let's Encrypt自動獲得HTTPS證書"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"0.10 : 48.8 sec0.11 : 29.6 sec~40% 的效能改善使用Tokio v1 runtime使用更快的消息通道實作清除API中的一些雜項read mehttps://github.com/actix/actix/blob/master/actix/CHANGES.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-21 20:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Actix Actor Framework v0.11 出來了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"就是一個速度更快的git輔助程式read mehttps://github.com/Byron/gitoxide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-21 20:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gitoxide比之前快了50% 可以編輯git-config 並讀取 commit-graphs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讓你可以自己寫程式控制 Roomba系列機器吸塵器read mehttps://github.com/Sollimann/CleanIt"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-21 20:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CleanIt：Rust-lang中用於Roomba系列機器吸塵器的開源機器人軟件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這是一個ECS框架 速度比上一版增加快了2倍read mehttps://crates.io/crates/shipyard"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-21 20:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Shipyard 0.5了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从去年夏天开始，Linux内核社区一直在讨论使用Rust编程语言来编写新的内核设备驱动程序的可能性。最初的Rust支持现在已经出现在Linux-Next树中。这并不能保证Rust会在主线内核中得到支持甚至被允许，但是这确实意味着现在很有可能Rust最终会被成功地编译一个Linux内核。文章链接，https://linuxreviews.org/The_Rust_Programming_Language_Is_Now_One_Step_Closer_To_Entering_The_Mainline_Linux_Kernel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://linuxreviews.org/The_Rust_Programming_Language_Is_Now_One_Step_Closer_To_Entering_The_Mainline_Linux_Kernel"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-20 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编程语言现在离进入主流Linux内核又近了一步"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个游戏是基于rg3d游戏引擎用Rust编写的。它仍处于早期发展阶段，但有许多进展。大家好!我已经在这个项目上工作了将近3个月，它有一些不错的进展，我想与社区分享。游戏是关于特遣部队的特工被派到空间站去调查为什么与空间站失去联系。文章链接，https://www.reddit.com/r/rust/comments/m8suco/station_iapetus_the_game_written_in_rust_based_on/Github 链接，https://github.com/mrDIMAS/StationIapetus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mrDIMAS/StationIapetus"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-20 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Station Iapetus"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一款开源多人RPG游戏，今天发布了!会在3月20日格林威治时间18:00发布在公共服务器上!《Veloren》是一款多人体素RPG游戏。它的灵感来自《魔方世界》、《塞尔达传说:荒野之息》、《矮人要塞》和《我的世界》等游戏。Veloren是完全开源的，使用GPL 3授权。它使用原始图形，音乐和其他资产社区创建的资产。它的开发社区和用户社区都是受贡献者驱动的:开发者、玩家、艺术家和音乐家一起开发游戏。文章链接，https://veloren.net/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://veloren.net/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-20 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Veloren 0.9"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个可以替代谷歌翻译的自由/开源软件(Rust编写!)我刚刚完成了libretranslate-rs，这是libretranslate的一个API，可以替代像谷歌Translate这样的服务。我发现结果不完全一样，但肯定非常相似。文章链接，https://www.reddit.com/r/rust/comments/m8shr4/libretranslaters_a_foss_alternative_to_google/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/m8shr4/libretranslaters_a_foss_alternative_to_google/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-20 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"libretranslate-rs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rustacean = 锈儿？官方将Rust的使用者、开发者称之为：rustacean。而在中文技术博客，专栏中，经常会看到Rust相关文章内容，多数机器翻译的时候会把Rust翻译为“锈”，“铁锈”。在广大网友的脑补下，大家给Rust的开发者起了个中文名字：锈儿，别名：锈er。在读“锈儿”的时候，是不是有点像：锈er的发音呢。不得不说：Rust开发者真是脑洞大开。以后，我们在打招呼时可以说：锈儿，你来了😄。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-19 17:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"近期，Rust官方博客推出了一篇文章，《Building a shared vision for Async Rust》：构建Async Rust的共同愿景。Rust Async基金会工作组认为,Rust可以成为构建分布式系统（从嵌入式设备到基础云服务）的最受欢迎选择之一。不管他们用它做什么，我们都希望所有的开发者都喜欢使用Async-Rust。为了实现这一点，我们需要将Async Rust从现在的“MVP”状态转移出去，尽可能让每个人都能使用。文章地址：https://blog.rust-lang.org/2021/03/18/async-vision-doc.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2021/03/18/async-vision-doc.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-19 17:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"构建Async Rust的共同愿景"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由华为、openEuler 、Netwarps、开源中国和Rust中文社区联合主办，包括六大议题 ：\nNetwarps: 从libp2p-rs到IPFS\n华为： Rust科学计算多维数组运算库的分析与实践\nNetwarps: 深度剖析Rust异步编程/无栈协程\nPingCAP: Rust FFI 跨语言代码复用的方法和实践\n华为： Rust语言在系统开发（虚拟化平台StratoVirt）的实践与应用\n华为： 基于TVM Rust Runtime和WASM沙箱运行AI模型\n报名：https://www.oschina.net/m/event/2321485"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-19 17:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"本月3月27深圳Rust Meetup 等你来"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nrusty-editor:https://github.com/mrDIMAS/rusty-editor\nrg3d:https://github.com/mrDIMAS/rg3d\nStation Iapetus:https://github.com/mrDIMAS/StationIapetus\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-19 17:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rg3d引擎的场景编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linux 开发分支 linux-next 上，已有初步 Rust 支持，注意这是 linux-next 的草案，目前暂时是准系统。 它不代表最终内容。更多请看：https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/rust?id=c77c8025525c36c9d2b9d82e4539403701276a1d"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/commit/rust?id=c77c8025525c36c9d2b9d82e4539403701276a1d"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 与 linux-next 草案"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者相信知识和文档是使嵌入式 Rust 开发更容易的必要部分。所以他们创建了 knurling-books 和 knurling-sessions。knurling-books 传授嵌入式系统和 Rust 的一般概念的书面指南。而 knurling-sessions 是每季度一次的嵌入式项目，探索使用一般可用硬件的特定项目，使用微控制器、传感器和执行器构建完整的系统和组件。更多请看：https://knurling.ferrous-systems.com/sessions/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://knurling.ferrous-systems.com/sessions/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"knurling-sessions"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 Jonathan Turner and Steve Francia的 blog，虽然其他人可能认为 Rust 和 Go 是有竞争力的编程语言，但 Rust 和 Go 团队都不这么认为。恰恰相反，我们的团队非常尊重其他人正在做的事情，并将这些语言视为对整个软件开发行业现代化状态的共同愿景的赞美。注 Steve Francia【@spf13】 是隔壁 go 社区大佬，更多请看：https://thenewstack.io/rust-vs-go-why-theyre-better-together/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://thenewstack.io/rust-vs-go-why-theyre-better-together/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust vs. Go》:为什么它们一起会更好"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Rust 中发送电子邮件可以通过两种方式实现：使用 SMTP 服务器或使用带有 API 的第三方服务，如 AWS SES 或 Sendgrid。详细实现请看：https://kerkour.com/blog/rust-send-email/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://kerkour.com/blog/rust-send-email/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何使用 Rust 发邮件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用 rust 实现的GraphQL API网关。\n为什么要用Rust来实现？\n​       Rust是我最喜欢的编程语言。它既安全又快速，很适合开发API网关。ReadMore:https://github.com/async-graphql/graphgate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/async-graphql/graphgate"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GraphGate 0.3.2 发布."},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tugger-apple-codesign是一个用纯Rust实现苹果平台上代码签名相关功能的箱子(不使用或其他苹果专有工具)。ReadMore:https://github.com/indygreg/PyOxidizer/tree/main/tugger-apple-codesign"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/indygreg/PyOxidizer/tree/main/tugger-apple-codesign"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"纯Rust的苹果代码签名"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"为类似函数的程序宏提供初步支持。现在，插件可以扩展这种程序性宏调用；因此，它们自动获得声明性宏已经具备的一些功能：高亮显示、名称解析、有限的代码完成、意图等。ReadMore:https://intellij-rust.github.io/2021/03/16/changelog-143.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://intellij-rust.github.io/2021/03/16/changelog-143.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-18 09:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"INTELLIJ RUST CHANGELOG #143"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主讲人：Andy内容：软件选型方法跟大家聊聊软件选型的方法，内容：本次演示使用Rust作示例。腾讯会议： https://meeting.tencent.com/s/07ZoRT6XmwuW会议 ID：818 1829 3138"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-16 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust唠嗑室》第20期 - 软件选型方法，以Rust为例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"开发基于Substrate的无许可区块链，工作内容完全开源在 githubhttps://github.com/uinb任职要求：\n熟悉Rust，至少1年Rust使用经验（必要的）\n熟悉区块链及相关技术基本原理\n掌握计算机初等数学\n对数据结构非常熟悉\n代码风格良好，设计考究，代码洁癖症患者优先\n具备一定的金融知识\n13薪，25k起（外加其它大饼），咖啡无限量供应，无996，几乎不加班，如遇加班（小概率事件）强制调休 发在boss上的，自荐的大佬可以发邮件到hello@uinb.tech"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-16 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"成都招聘 区块链开发工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"语言设计领域的一个争议点是 有色函数, 即将函数分为异步函数和非异步函数。这个术语来源于2015年一篇名为《What Color is Your Function?》的文章, 它用颜色来比喻JavaScript和其他带有显式异步函数的语言中的同步和异步函数之间常常令人痛苦的不匹配.Rust 中,也有很多人讨论这个问题, 比如前几天有一片文章 Rust’s async isn’t f#@king colored!.这里作者将通过原始的定义和实践,来表达自己的观点: Rust 是有颜色的.原文链接https://morestina.net/blog/1686/rust-async-is-colored"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-15 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的异步是有颜色, 但没什么大不了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是作者 pg-pretty项目项目的一系列文章第一篇.作者不能忍受非格式化的代码, 对于大型项目来说, 统一风格可以消除很多理解障碍. 但是作者没有找到一个很好的 Postgres SQL 风格打印器, 所以打算自己动手写一个.原文链接https://blog.urth.org/2021/03/14/writing-a-postgres-sql-pretty-printer-in-rust-part-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-15 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 写一个 Postgres SQL 打印器: Part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Crust of Rust 系列视频的最新一期: The Drop Check, 相信很多小伙伴对 Drop check 都很感兴趣, 可以翻墙看一下.油管视频https://youtu.be/Das3XSWo1GU"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-15 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crust of Rust: The Drop Check"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文链接https://jam1.re/blog/monomorphized-specialization-and-other-unwritten-blog-posts"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-15 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Post-Monomorphization Dead Code Elimination"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该 crate 可以检测 markup 文件中的实效链接, 完全 Rust 实现.github 地址https://github.com/becheran/mlc--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-15 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mlc: Markup Link Checker"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustWebGPU 是一项用在 Web 环境的图形和计算的标准。Mozilla Gfx 团队积极参与设计和规范过程，在Gecko中实现了 WebGPU，核心功能和 Shader Translation 都是 Rust 实现的。自从在上次 Mozilla Hacks Blog 更新以来，它们取得了很多进展，让我们一起来看一下。包括：\nAPI Tracing\nRust Serialization\nAPI Coverage\nValidation\nShading Language\n推荐阅读：Mozilla Hacks Bloghttps://hacks.mozilla.org/2020/04/experimental-webgpu-in-firefox/Mozilla Gfx Team Bloghttps://mozillagfx.wordpress.com/2021/03/10/webgpu-progress/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-14 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebGPU 进程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustRust Action 可以在出发执行后，将 Rust check 的 warning 转为 code review 的 comments。ReadMorehttps://twitter.com/greyblake/status/1370117541436219393?s=20"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-14 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub Action 将 Rust warning 转为 review comments"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@greyblake 通过一段 shell 脚本和 Tmux 实现了一个基于终端的 Rust Playground。https://twitter.com/greyblakeRead Morehttps://www.greyblake.com/blog/2021-03-12-rust-playground-at-your-fingertips/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-14 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"指尖上的 Rust Playground"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustgamedev会议在 Rust Gamedev Discover server 进行，也可以在 Twitch 上观看录播内容。https://discord.com/invite/yNtPTb2Read Morehttps://twitter.com/rust_gamedev/status/1370723043715256326?s=20"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-14 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"第三次 Rust  GameDev 会议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 和 C 的编程风格差异很大，但两者开发的程序在运行速度和内存使用情况上大致相同。语言在理论上可以实现什么，但在实践中如何使用它们之间有很大的区别。作者总结了Rust 和 C 各自在哪些地方会更快。简而言之\nRust 可以在必要时以足够底层的方式对其进行优化，使其达到与 C 一样的性能；\nRust 拥有更高层次的抽象，便捷的内存管理和丰富的第三方库；\nRust 最大的潜力在于无畏并发（fearless concurrency）能力。\n文章链接：https://kornel.ski/rust-c-speed"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://kornel.ski/rust-c-speed"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-13 21:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 和 C 速度比较"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"简单，性能和开发者的生产力，使得 Go 成为创建面向用户应用服务的理想语言。更好的控制粒度使得 Rust 成为底层操作的理想语言。这并不意味着非得二选一，反而两者一起使用时会具有很高的灵活性和性能。本文讨论了 Rust 和 Go 的优缺点，以及如何互相补充支持。文章链接，https://thenewstack.io/rust-vs-go-why-theyre-better-together/?s=09"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://thenewstack.io/rust-vs-go-why-theyre-better-together/?s=09"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-13 21:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么 Rust 和 Go 一起更好？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Kamu 是一种 Web 3.0 技术 Open Data Fabric 的参考实现，该技术为分布式结构化数据供应链提供动力，可为数据科学，智能合约，Web 和应用程序提供及时，高质量和可验证的数据。Github 链接，https://github.com/kamu-data/kamu-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/kamu-data/kamu-cli"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-13 21:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Kamu"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"MiniWASM，一个最小的使用Rust的 WebAssembly 应用模版。旨在展示仅需少量代码即可使 Rust WebAssembly 工作运行，同时提供了有用的工具，比如集成了 console.log。Github 链接，https://github.com/thedjinn/MiniWASMhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/thedjinn/MiniWASM"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-03-13 21:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MiniWASM"},"type":"text"}],"type":"title"}},]
