export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這篇文章是討論這個方法的好處，反對方的主要論點是，await不能作為後綴宏實現，雖然這在當前條件下沒錯，但作為前綴關鍵字實現時不是這樣。你可能會覺得奇怪，我一下說前綴一下說後綴，等等說明。讓我們回想一下為什麼我們需要首先討論await語法。主要原因是，我們希望能連鎖呼叫await函數，更重要的是，能連接 ? 問號運算字。這不是我們第一次遇到這個問題。而且我不確定await語法是否是我們最後一次遇到此問題。? 問號運算字的連鎖呼叫是我們要解決的一個難題。雖然我個人很喜歡使用?，但毫無疑問，這是一個有爭議的功能。所以可能會加入其它後綴運算子去解決這個問題。如果我們沒有其他選擇，我會同意這個選擇。Read morehttps://www.reddit.com/r/rust/comments/bmhmtw/what_postfix_macro_could_bring_to_rust_asyncawait/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"為什麼后缀宏可以帶進rust?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作為一個讓很多大佬都等待的重要功能Rust社群還是希望能討論出一個更好的解決方案歡迎大家來討論Read morehttps://www.reddit.com/r/rust/comments/bmhu4d/await_syntax_poll_still_open/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Await 語法仍然在討論中"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文提出是否可以增加await前缀关键字，比如 await future和future.await。感兴趣可以看看。Read morehttps://whitfin.io/some-thoughts-on-rusts-async-await-proposals/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"對Async/Await草案的一些想法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者写这篇文章阐述了他的理由。Read Morehttps://www.hardmo.de/article/2019-05-06-await-method-afterall.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"社区声音：为什么await应该是一种方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一位仁兄對大家看待開源程式的情況，表示不能接受像大家工作都在用 windows, mac 等等很多人搞不懂開源授權等等有興趣就看吧Read morehttps://www.linuxjournal.com/content/we-need-save-what-made-linux-and-foss-possible"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我們需要拯救Linux和自由開源的未來"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新的版控軟體 Pijul，也講了一個他解決的版控問題，这些该系列文章的最后一篇。有興趣的可以看看原文底下還有人問原po 最愛的await語法是什麼XDRead morehttps://jneem.github.io/pseudo/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」版本控制与伪边缘（pseudo-edges）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個純rust實現的2D圖形庫有興趣可以看看Read morehttps://www.reddit.com/r/rust/comments/bmpmm0/a_pure_rust_2d_software_graphics_library/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"raqote"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/bmr0re/wood_03_a_robust_material_that_is_simple_to_work/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wood 0.3 一個文字解碼器，專門讀取 Woodslist 格式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"属于slingshot区块链项目中的子项目Read morehttps://www.reddit.com/r/rust/comments/bmr272/zkvm_fast_confidential_smart_contracts_in_pure/Read more 2https://github.com/stellar/slingshot"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ZkVM： 快速私密的智能合約"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用StructOpt解析命令行参数https://www.tenderisthebyte.com/blog/2019/05/08/parsing-cli-args-with-structopt/在玩Advent of Code解谜的同时学习Rusthttps://andrzej.pragacz.pl/blog/2019/05/learning-rust-while-solving-advent-of-code/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"学习Rust汇总"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该作者花了一周的时间对「传统2D成像模型在现代图形世界中的未来」做了深入思考。2D图形建立在GPU之上是否是未来？作者认为是可行的，并且阐述了他的研究。感兴趣可以看看。Read Morehttps://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-10 14:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Xi-Editor作者新博文：现代GPU上的2D图形"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Low&Slow 是一种DDos攻击方法，利用产生大量的慢请求来保持住对服务器资源的消耗，从而影响正常请求的访问。finshir 就是这样一种用Rust写的工具。有两点高光：https://www.cloudflare.com/learning/ddos/ddos-low-and-slow-attack/Repohttps://github.com/Gymmasssorla/finshir"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-09 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"finshir - 一种 Low&Slow 流量产生器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个命令行工具。其使用 SDL2 来渲染图片显示。Repohttps://github.com/davejkane/riv"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-09 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"riv - 图片查看工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者总结了他最近的编程模式。他觉得在要用到布尔型的时候，使用枚举型更好。理由如下：说到我心坎里去了。Read Morehttp://www.blakesmith.me/2019/05/07/rust-patterns-enums-instead-of-booleans.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-09 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 编程模式：用枚举型替代布尔型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者正在练习实现一种语言 esta。第一步就是生成 AST（Abstract Syntax Tree 抽象语法树）。作者详尽地记录了怎样从头开始撸一门语言，这个文章是一个系列文章，想要自己设计语言和学习编译原理的同学强烈推荐阅读。https://github.com/epellis/estaRead Morehttp://nedellis.com/2019/05/08/esta_1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-09 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」使用 Rust 实现一种新语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者认为传统的2D渲染模式/方法已经过时了，将死。他做了一些探索研究。也参考了 PathFinder 等工作。https://github.com/pcwalton/pathfinder2D Graphics on Modern GPUhttps://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html文章很有深度，RF会组织翻译。https://rustforce.net"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-09 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何利用最新的GPU进行2D图形渲染的探索"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近这个事情引起了全球 Rust 社区的激烈反应，不管你喜不喜欢，官方三下五除二已经把语法放 nightly 中了，可以玩儿一下。Read Morehttps://github.com/rust-lang/rust/pull/60586这里，还有一个工具 replace-await （作者动作也真是太快了） 用于把之前的 await!(xxx) 这种宏代码迁移到 xxx.await 这种代码上去。https://github.com/taiki-e/replace-await\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-09 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Nightly 已经合并了 .await 语法，可以尝鲜了。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#await"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于await语法，官方已经安排上了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cloudsith #registryCloudsmith是Puppet Labs旗下的DevOps平台，目前支持Cargo。你可以把Cloudsmith作为crates.io之外的私人registry。本文介绍了如何使用cloudsmith-cli工具将你的crate发布到它的平台上。\nRead More\ncargo registry 相关文档\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"尝试在Cloudsmith上发布你的crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#concurrency #hashmap该论文通过实现一个并发无锁HashMap来研究Rust类型系统如何影响并发数据结构的开发和改进。他们的代码库concache在GitHub上公开，是Rust语言中最快的并发HashMap之一，可以帮助降低并发程序中的瓶颈。\nRead More\nPaper pdf\nconcache\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「论文」Rust并发的实践研究"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#UnitTest #chromestretch的作者写的一篇博客。stretch是一个跨平台的FlexBox引擎。在Visly公司，该作者正参与一个为前端工程师构建的设计工具，其中用到FlexBox，需要在不使用WebView的情况下保持Web、iOS和Android三端保持相同的布局。意味着在移动设备上复制Web的布局。这篇文章里，作者介绍了使用stretch的单元测试方案，是一套自动编写自动化测试的方案，他们称其为gentest系统。大概原理如下图：所有的测试用例都用html文件来描述，并且包含id =“test-root”的布局。然后gentest使用WebDriver将此文件加载到Chrome head-less浏览器中。加载后，gentest将通过WebDriver向浏览器询问每个DOM节点的样式，大小和位置等信息，然后利用此信息，gentest再生成Rust单元测试，用于构建三端等效的FlexBox树给stretch api使用。最后可以统一通过cargo test来完成测试。gentest的另一个好处是，因为每个测试只是一个html文件，只需打开文件就可以在浏览器中显示它。并且他们还利用gentest生成一套基准测试，确保性能不会退化。gentest有什么黑科技吗？它也是开源的，我翻了一下源码，主要是三步：\nRead More\nstretch\nwebdriver\ngentest\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Chrome对Rust进行全自动单元测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sed #X12x12pp是用Rust实现的可以漂亮地打印X12 EDI格式的Cli工具。作者写了一篇博文，阐述了他使用sed命令处理X12的问题，这些问题促使他使用Rust来写x12pp。并且写出来的工具性能上可以轻松击败sed这样的通用工具。\nx12pp\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust与sed命令不得不说的故事"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#c该reddit帖子作者用C和Rust分别写了一个同样功能的示例，发现rust编译器不如clang编译器优化的彻底，clang编译器生成的汇编代码最简单。Rust代码评论中有人给出原因，Rust代码中for循环的范围和step_by比较复杂。由此还贴出两个相关issues。\nRead More\nstep_by issues 1\nstep_by issues 2\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」Rust和C编译器优化问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#parsercombine和nom的功能类似，但它的特点是建立在Rust的trait和类型系统之上，而不是宏。完整的更新列表https://github.com/Marwes/combine/blob/master/CHANGELOG.md#400-alpha1-2019-05-07"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"combine-4.0.0-alpha.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clirust-latesthttps://github.com/dbeckwith/rust-latest"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-latest： 用于获取最新版Rust工具链的CLI工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargocargo vender支持将crates.io中的依赖项保存到你本地目录下。Read Morehttps://github.com/rust-lang/cargo/pull/6869"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo Vender 子命令即将登陆Cargo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#glibcRust和Glibc在动态链接的时候可能会失效，该文作者建议使用自定义工具链来解决此问题。Read Morehttp://redbeardlab.com/2019/05/07/rust-and-glibc-version/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用自定义工具链解决Rust和Glibc的问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#route一个应用程序的路由由Url Path和查询参数组成。app-route库可以将这样一个路由解析为Rust的类型结构。app-routehttps://github.com/bschwind/app-route"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"app-route: 将app的路由作为一种强类型结构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#javascript关于JavaScript二进制AST随着网站变得越来越复杂，JavaScript源代码的数量不断增加。依赖于大型JavaScript代码库会导致网站启动缓慢 - 通常速度慢得令人无法接受。这是因为存在两个瓶颈：解析和字节码编译JavaScript。不幸的是，浏览器几乎达到了两种操作的效率峰值。我们（Mozilla，Bloomberg，Facebook，CloudFlare）目前正致力于针对JavaScript的特定领域编码，称为“BinAST”（“JavaScript二进制AST”的缩写）。 JavaScript二进制AST旨在打破瓶颈。当前的高级原型已经在所有最常见的框架上显示了JS解析改进了30％-50％，只需更改格式，我们相信我们可以进一步提高这一改进。编码可以构建为webdev工具链的一部分，或者由代理或CDN注入，因此可以在不更改原始网站的情况下自动提高最终用户的性能。此编码目前在JavaScript TC39标准化过程中。它可以与现有的压缩技术（gzip，brotli等）一起使用binjs-refhttps://github.com/binast/binjs-ref"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"JavaScript二进制AST格式的参考实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#UITesttrybuildhttps://github.com/dtolnay/trybuild\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-08 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用于编译器诊断的UI测试工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自汉东兄。今天看了withoutboats发的博文，是关于Rust await语法的最后讨论结果，也许会有变化，但应该差不多了。这我看完文章后总结的一张脑图，分享一下。官方语言核心团队倾向于 .await 这种后缀语法。社区也是炸开锅各抒己见的。最终决定会在5月23号做出。不管怎样，我支持官方的决定。Read Morehttps://boats.gitlab.io/blog/post/await-decision/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Await 语法预告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"其实其它语言很多都有了。Rust一直显得比较生硬，格式化一个带变量值的字符串，要这样写：使用这个库，可以这么写了。作者把一套宏全部“升级”了。Repohttps://github.com/ct-austin/ifmt"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ifmt - 插值式格式化宏库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ANSI转义序列 就是这种 \"This is \\u{1b}[3Asome text!\"，我们平时在终端下看到的文字的色彩啊，一些特效格式啊什么的，都是按这个标准来做的。https://zh.wikipedia.org/zh-hans/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97相似的库还有 vtehttps://github.com/jwilm/vteRepohttps://gitlab.com/davidbittner/ansi-parser"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ansi-parser - ANSI转义序列解析库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"欧洲人很爱 Rust？大家都爱嘛。他们从 2014 年起就开始进行Rust聚会了。国内要更多点才好。不仅是大会，各个城市的小会也搞起来。Read Morehttps://berline.rs/2019/05/15/rust-hack-and-learn.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"柏林都举行了 100 场 Rust 碰面聚会了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这里的用户界面指的是，一个库，提供给别人使用的界面。通常来说，可能是 API。但是有些库，比如过程宏这种，它不是简单的 API 测试能覆盖的。所以就有了这个库。这个库设计得特别适合过程宏的测试。看一下它的效果。强烈推荐。Repohttps://github.com/dtolnay/trybuild"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"trybuild - 强力的库级用户界面测试套件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者也是写命令行工具的时候，觉得测试很不舒服，于是写了这个方便测试的工具。很不错。比如：Repohttps://github.com/Draphar/test-exec"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"test-exec - 用于测试命令行工具的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用了Tor技术，其貌似是要提供一种匿名服务。比如要访问google.com项目还在早期阶段，值得关注。Repohttps://github.com/tbrand/dystopia\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-07 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dystopia - 匿名防追踪的网络代理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"超级详细的 rust OS 编写教程，作者是清华大学陈渝教授的学生。（上周日报报道过相关信息）。感兴趣的可以关注下。Read Morehttps://zhuanlan.zhihu.com/c_1086573713289347072"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从零开始写 OS"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#redisRead Morehttps://www.youtube.com/watch?v=c1E8jxWVfoI"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」用Rust实现Redis的模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#dyon #langdyon是一个Rust实现的动态类型脚本语言，由Piston组织维护，最近发布了新的0.42版本。目前正在对高阶运算符重载(HOOO, Higher Order Operator Overloading)进行测试。dyonhttps://github.com/PistonDevelopers/dyon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Dyon正在引入高阶运算符重载功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GraphGraphlib，用于Rust编程语言的简单而强大的图库。提供了图数据结构的一些API。比如BFS/DFS等迭代器。graphlibhttps://github.com/purpleprotocol/graphlib"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Graphlib v0.3.0已经发布！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tui #cli音乐数据来自于Pandora流媒体平台musclihttps://github.com/CMatri/muscli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"muscli ： 基于Pandora和音乐播放器实现的Tui"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cache如果你的crates有很多依赖项，你可能已经注意到Rust编译阶段与实际运行测试相比需要花费很多时间。缓解该问题的一种方法是缓存Rust编译的中间对象：大多数博客文章建议缓存Rust目标文件夹以减少编译时间。这种方法有一个主要问题，这个缓存文件会越来越大。因此你需要定时清理这个缓存目录。该文推荐Mozilla的这个库sccache。该库的一个优点是可以配置文件夹的最大大小，当大小超过该限制时，会启动LRU清除算法（和Redis的差不多），清理掉部分缓存。\nsccache\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用sccache在CircleCI上进行Rust缓存"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该系列将以Rust手工制作方式开发Vulkan渲染引擎，这是第四篇博文。该项目的特点是，不使用标准库，只使用核心库。\nRead More\nHandmadeRust\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Handmade Rust系列」Part 4 : 创建Vulkan绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#concurrencyRead Morehttps://medium.com/@polyglot_factotum/rust-concurrency-patterns-communicate-by-sharing-your-sender-re-visited-9d42e6dfecfa"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust并发模式：通过共享sender通信"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#API #Web #API #HyperUsher是在基于Hyper实现的一个简单的库，用于开发简单的HTTP API服务。Usher的特色是提供了一些方便从URL中提取参数的方法，类似于actix的提取器，但是它更加轻量。Read Morehttps://whitfin.io/building-simple-apis-with-hyper-and-usher/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Usher和Hyper构建简单的API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm该系列文章旨在使用Rust和WASM构建一个生产级的Web应用。Read Morehttps://medium.com/tech-lah/webassembly-part-ii-a-wasm-with-rust-2356dbc6526e"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章：WebAssembly」Part II： 开始Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Minecraft作者声明：just doing this for fun。stevenarellahttps://github.com/iceiix/stevenarella\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-06 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"stevenarella: 用Rust编写的多协议兼容Minecraft客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#OS #tsinghua看看对学生有啥帮助。这里陈教授给出了一些学习资料：\n面向初学者的代码/文档信息\n面向对rust比较熟悉的同学的信息\n以及\n有兴趣学习/参与开发 rust-based os kernel的朋友，欢迎与陈教授联系和交流（他也在Rust社区微信群和Rust编程之道的读者群里）。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"清华大学陈渝副教授：尝试将Rust/Risc-V等新技术用于系统类课程教学"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#error_handle #panicXV是一个终端16进制查看器，作者之前是Java开发者，XV是他的第一个Rust项目。他在本文主要介绍了UX中使用panic的一些经验。\n\n作者认为Rust里的panic等价于Java里的异常，所以他在XV中大量使用Unwrap。（日报君友情提醒：这一条谨慎看待，不是指滥用）\n\n\n当然，作者也是针对具体的情况来使用unwrap，在预期操作总是会成功的情况下会unwrap。所以，如果程序运行崩溃了，说明代码里有问题。\n\n\n类型转换。在确定安全的情况下使用From，在不太安全的情况下使用TryFrom。\n\n\n在Release模式下开启默认检查算术溢出。Rust在Debug模式下如果算术计算溢出会报错，但是在Release模型下会静默生成错误的结果。需要在Cargo.toml中设置overflow-checks = true来开启溢出检查。\n\n\n自定义了一个panic处理程序，类似于HumanPanic库。它会捕获回溯信息，当崩溃后再次启动XV，它还会显示一条错误信息，提醒人们在GitHub上提交错误报告。\n\n\nRead More\n\n\nxv\n\n作者认为Rust里的panic等价于Java里的异常，所以他在XV中大量使用Unwrap。（日报君友情提醒：这一条谨慎看待，不是指滥用）当然，作者也是针对具体的情况来使用unwrap，在预期操作总是会成功的情况下会unwrap。所以，如果程序运行崩溃了，说明代码里有问题。类型转换。在确定安全的情况下使用From，在不太安全的情况下使用TryFrom。在Release模式下开启默认检查算术溢出。Rust在Debug模式下如果算术计算溢出会报错，但是在Release模型下会静默生成错误的结果。需要在Cargo.toml中设置overflow-checks = true来开启溢出检查。自定义了一个panic处理程序，类似于HumanPanic库。它会捕获回溯信息，当崩溃后再次启动XV，它还会显示一条错误信息，提醒人们在GitHub上提交错误报告。Read Morehttps://medium.com/@chrisvest/how-xv-uses-panics-ba22bd6152a5xvhttps://chrisvest.github.io/xv/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"XV中如何使用panic"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pythonRead Morehttps://medium.com/@p_chhetri/extending-python-with-rust-84e9299d34c1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust扩展Python"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#docker本文展示了如何在构建Docker镜像时获取私有Cargo依赖项并获取它们。Read Morehttps://medium.com/@c_ameron/rust-how-to-build-a-docker-image-with-private-cargo-dependencies-ab91c25c4301"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Rust：如何使用私有Cargo依赖项构建Docker镜像"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ferris喜欢Ferris的朋友可以按这个教材手工制作一个。Read Morehttp://edunham.net/2019/04/06/rustacean_hat_pattern.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「手工」自制Ferris布偶"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#futures本文以HTTP请求为示例，比较系统地介绍了Futures。Read Morehttps://dev.to/gruberb/explained-rust-futures-for-web-development-a10"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"指南：Rust Web开发中的Futures"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm又一个 WebAssembly 开发框架，完全用 Rust 开发网站前端的框架。作者立的 flag 是简单，快速。 新版本中增加了自定义路由的功能。Read Morehttps://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Smithy 0.3 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#guid #cli支持Linux平台，允许您将分区从一个磁盘复制到另一个磁盘等等。gptmanhttps://github.com/cecton/gptman"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gptman： 允许管理GUID分区表的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmerWasmer是一个可以嵌入到Rust应用中的wasm解释器。Read Morehttps://wiredforge.com/blog/wasmer-plugin-pt-4/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」使用wasmer和Rust构建插件系统 Part 4"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hawk #ImageRecognition用于人脸识别门禁系统的一个原型项目。架构设计图\nRead More\nhawk\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Hawk：基于Rust和AWS Services的图像识别应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#frontend该文作者在用Rust重写ember-cli项目，这篇文章是他的Rust学习心得吧。\nRead More\nrember-cli\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"前端开发人员的Rust：模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Graphics该指南主要为那些想要使用Rust编写图形内容（视频游戏，动画，炫酷可视化等）并且不知道从哪里开始的人提供上下文。Read Morehttps://wiki.alopex.li/AGuideToRustGraphicsLibraries2019"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust图形库指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"crates.io的crate下载总数达到了10亿"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #web基于futures 0.3， async和await!宏。应该是为1.0预热，准备迎接官方的异步稳定。Read Morehttps://www.reddit.com/r/rust/comments/bkmkwj/thruster_web_framework_074_released_with/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Thruster Web框架0.7.4发布，引入了async/await支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embededmicromath是一个嵌入式的Rust数学库，支持快速安全的浮点数近似计算、常用的算术运算、2D/3D向量类型、统计分析和四元数等。micromathhttps://github.com/NeoBirth/micromath"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」micromath 0.3发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#CDCL #SATVarisat是一个CDCL SAT求解器的Rust实现。CDCL SAT求解器在形式验证等领域应用广泛。\nRead More\nvarisat\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学术」Varisat 0.2.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo一般情况下可以通过CARGO_PKG_VERSION_MAJOR环境变量来获取包的版本号，但是这种方式总是会产生字符串，只能在运行时将其解析为数字。所以这个库提供了一个pkg_version_major!过程宏在编译期解决这个问题。（看源码发现依赖dtolnay的proc-macro-hack，它是一个支持表达式位置过程宏的库)\npkg-version\nproc-macro-hack\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pkg-version: 可在编译时获取Cargo包版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#visualize #browserPlotka可以从stdin获取数据，解析它（作为JSON或CSV）并通过websockets进行广播。 还可以托管静态文件，可以完全通过它在浏览器中绘制数据，它可以用作Matplotlib等的替代品。plotkahttps://github.com/micouy/plotka"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Plotka： 轻松可视化浏览器中的数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GitLFSLFS，Large File Storage, 大文件存储rudolfshttps://github.com/jasonwhite/rudolfs\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-05 18:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rudolfs: 基于AWS S3的高性能缓存Git LFS服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"from @ChaosRead Morehttps://zhuanlan.zhihu.com/p/64586315"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「警惕」存在于crate中的安全风险"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"未來可以有更多應用\n開啟五排開黑寫程式\n有了rank之後，大家寫程式更有競爭動力\n自動依rank配對等級相同的開發者\n坐等各地區rank第一的程式寫手pk\nRead morehttps://zhuanlan.zhihu.com/p/64505333"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"VS Code Remote 開發新天地"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Synthesizing是一個歷史悠久的圖學技術過去常用來製作背景修改、去除臉部痘痘、雀斑等現在有人將他用來做在3D模型上有興趣的可以來看看他怎麼做的Read morehttps://www.reddit.com/r/rust/comments/bk4i59/synthesizing_3d_structures_with_rust_in_immense/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"3D模型合成展示"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有些CSV會有一些metadata在header影響資料讀取這個程式庫可以解決這個問題Read morehttps://www.reddit.com/r/rust/comments/bk7rto/just_published_my_first_crate_first_rust_program/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CSV header 移除器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看起來簡單好用Read morehttps://www.reddit.com/r/rust/comments/bk7z2x/announcing_bardecoder_a_qr_detector_and_decoder/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bardecoder 一個 QRCode 加密解碼庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前還在实现中ConstEvaluatable(expr) 已經做好，現在一定要帶入exprRead moreRead morehttps://github.com/rust-lang/rust/issues/44580#issuecomment-488819344?tdsourcetag=s_pctim_aiomsg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"const generics 當前進度報告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"現在有很多人想了很多方法可以自動檢查程式碼的品質hoc也是其中一個方法，有興趣的人可以試試Read morehttps://www.reddit.com/r/rust/comments/bk8wz0/hitsofcode_badges/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Hits-of-Code Badges"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這是一個類似的Electron的跨平台gui看起來還很陽春，但支援Html render，有興趣的可以試試Read morehttps://www.reddit.com/r/rust/comments/bkbcoa/tether_v03_published/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tether v0.3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前大家對await還有很多意見作者希望大家看了這些不同的程式範例之後可以更好的為選擇 syntax 做出判斷Read moreRead morehttps://www.reddit.com/r/rust/comments/bkd6sm/a_repo_that_shows_what_the_proposed_await_syntax/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"await 示範project"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個高效的Git LFS server使用rust實作，使用aws S3做儲存空間Read morehttps://www.reddit.com/r/rust/comments/bkdcis/announcing_rudolfs_a_git_lfs_server/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-04 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rudolfs - Git LFS Server"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo #roadmap #2019nrc在他的博客上发布了Cargo 2019的目标：\n交叉编译。希望支持更多的目标。\n插件。也称自定义命令、任务或工作流程。希望使插件更加强大、可靠和实用。\n编译时间。这个目标是为Rust的目标服务。虽然这主要是rustc的问题，但是cargo也可以给予一些辅助。目前一个想法是：允许用户构建主crate而无需等待其他crate依赖。另一个想法是：目前只能是依赖的第一个crate构建完成才能开始第二个crate，但实际上还可以改进，比如第一个依赖的crate的元数据生成以后就可以开始构建第二个的元数据。\n这是Cargo在2019年要努力的重点。另外还有两个小目标：解决技术债务和完成即将完成的工作（比如Cargo features的长期改善计划）。目前将近完成的一些工作：\n自定义crate注册机构（私有的crates.io）（custom registries）\n离线模式（offline mode）\n配置文件依赖（profile dependencies）\n公共/私有依赖（public & private dependencies）\nRead Morehttps://www.ncameron.org/blog/cargo-in-2019/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo 2019 Roadmap"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有回應的幾乎都有用過65% 的人有看過46% 的人有看過76% 覺得有大部份的人覺得不夠好但可以接受太魔幻了，不能接受太多問號了，不能接受還是不太能接受Read morehttps://www.reddit.com/r/rust/comments/bju8di/asyncawait_syntax_survey_results/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Async/await 語法調查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這是一個系列影片的第一部， 有興趣的朋友可以看看。\nRead more\n（Chaos补充：作者好像是国人，这个ID有意思： One HR） 源码：onehr/crust\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列视频」从头开始写一个简单的x86-64 C编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我自己以前因為dota2編輯器也寫過很多lua目前產業界還是以 luajit 為大宗希望 luster 的速度能超越 luajit 為 lua 帶來新氣象Read morehttps://www.reddit.com/r/rust/comments/bjvt3i/luster_an_experimental_lua_vm_implemented_in_pure/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Luster 使用rust實作的實驗性質的lua VM"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli這是他第一個發佈的 crate，歡迎大家給作者友善的建議Read morehttps://www.reddit.com/r/rust/comments/bjx734/my_first_published_crate/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"spruce： 硬盘空间可视化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lisp這位仁兄腦洞大開想要使用rust執行lisp大家可以看看他怎麼做的Read moreReddit讨论https://m.stopa.io/risp-lisp-in-rust-90a0dad5b116"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Risp (Lisp (in (Rust)))"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://medium.com/nearprotocol/rust-parallelism-for-non-c-c-developers-ec23f48b7e56"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"給「非C++開發者」的 rust 并行计算教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"命令列無法看圖片一直是個大問題但這位大佬做到了！在命令列看圖！Read morehttps://www.reddit.com/r/rust/comments/bk0wc3/viu_view_images_from_the_terminal/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Viu：支持在命令行查看图片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人覺得 Async/await 可以參考 julia, Elixir然後他舉了一個語法例子\nReddit讨论\ninternal论坛\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-03 13:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」有人觉得await可以参考julia和elixir的pipeline语法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"wasmer.io继推出 php-ext-wasm 和 python-ext-wasm 后，又马不停蹄做出了面向 ruby 的扩展。这个扩展用来在 Ruby 中执行 wasm 二进制码。wasmer.io 是 wasm 平台化的先驱，其理念是要推动 wasm 成为一个通用的计算平台。Read Morehttps://github.com/wasmerio/ruby-ext-wasm/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ruby-ext-wasm：Ruby 中执行 wasm 二进制码的扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"感谢 Chaos 的分享。Read Morehttps://rust.cc/article?id=89c7e944-2473-41ba-b3c0-d86b9cb606e7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何快速实践actix和actix-web"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个估计懂深度学习的同学看得懂一些。是 go 版本的重写，原来的版本可以在同一仓库中找到。Repohttps://github.com/danieldk/dpar"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dpar：神经网络过渡依赖解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个计算器可以执行大数计算、浮点、分数和复数运算，看起来好用。使用即可安装。Repohttps://github.com/VladimirMarkelov/rclc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rclc - 又一个命令行计算器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"先来看看截图效果：这个库刚刚发布了 1.0。现在支持 clap 集成了。Repohttps://github.com/xliiv/fui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fui - 为你的终端命令行添加表单功能和界面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Rust 的痛。从最早的 leaf，到后来的 rusty-machine, rustlearn，再到 juice 。没有一个活得好的。只怪没有一个好爹？https://github.com/AtheMathmo/rusty-machineLukeMathWalker （ndarray 和 ndarray-stats 的重要参与者）仔细分析了这一现状。他认为 Rust 在这一领域其实是非常有潜力的。一个 ML 生态的基础有三个基石：https://github.com/LukeMathWalker\nn维数组运算库\ndataframes\nML 模型接口\nndarray 已经初具成效了。现在作者准备在后面两个上做一些努力，现在他正在做一些讨论和调查。讨论1讨论2slidehttps://github.com/rust-ml/discussion/issues/1有兴趣者可以参与讨论。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"想不想在机器学习领域用上 Rust？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它实际是对更下层一些工具（如 perf）的封装。更集成，更好用。可以尝试。Repohttps://github.com/gz/autoperf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"autoperf - 评测性能热点的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 1.34.1 版本，推出了一项新功能，允许用户建立自己的私有仓库。这篇作者建立了世界上第一个 Rust 私有仓库。请参考。Read Morehttps://blog.cloudsmith.io/2019/05/01/worlds-first-private-cargo-registry/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-02 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"建立 Rust 私有仓库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#windows感谢社区 @Matrix 的分享Read Morehttps://zhuanlan.zhihu.com/p/64344775"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和Windows不得不说的事儿"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#miri #unsafe_ub_check #stack_borrowralfj比较高产，他负责Unsafe下内存模型相关的工作，目的是用miri来检测unsafe中的UB行为。他在去年引入了栈借用模型1用于定义在unsafe内存模型中允许哪种别名。建立合理的别名规则，才能基于miri来检查unsafe下的UB行为。该模型的核心思想是： 对于一个内存位置，逐步建立可跟踪的引用，形成一个栈结构。比如有一个&mut i32，可以对其重新借用获得一个新引用。这个新引用是必须用于此位置的引用，建立在旧引用之上。当新引用过期的时候，旧引用会被激活，就好像是栈结构push和pop。在Safe Rust中，通常有借用检查来保护内存。但是在编写Unsafe代码的时候，借用检查就无法提供帮助了。所以，Rust核心团队就必须要定义一组规则，即使对于Unsafe代码来说也是非常有意义的。在今天这篇文章中，ralfj又带来了栈借用模型的升级，栈借用2。在栈借用1模型中，有一个概念叫做「frozen」，处于frozen位置的指针，只能读取，不能写入。它允许可变借用也能读取（检查粒度比较粗，把可变指针和共享指针同一化处理）。但是现在该模型被发现一个问题：当使用可变借用的时候，在该模型下可能会把某些未定义行为判断为合法。为了改进这个问题，栈借用模型2将精确跟踪允许访问的原生指针（更细粒度的检查，区分了共享指针和可变指针），而不是「frozen」。栈借用模型2还有很多已知的问题，比如其实并没有真正使用到「栈」，反而更像「树」。但这还不是最后的结论。本文比较长，去原文阅读更多信息。Read Morehttps://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」Unsafe Rust安全检查：栈借用模型 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pbrPBR全称(Physicallly-BasedRendering)。笼统的说，就字面含义可以看出，这是一种基于物理规律模拟的一种渲染技术。它构建在gfx-hal上。该项目是rendy和Amethyst的试验场; 这里实现的大部分或全部内容最终将以某种形式添加到Amethyst渲染器中。rendy-pbrhttps://github.com/termhn/rendy-pbr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rendy-pbr: 用rendy编写的小型实时基于物理的渲染器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #await声明： 这不是正式的Rust调查，它不会被Rust核心团队以任何方式认可，仅仅是一种民意调查，可能存在偏见。感兴趣的可以来填写一下。Read Morehttps://framaforms.org/unofficial-rust-asyncawait-survey-1556655135"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"非官方的Rust Async/Await调查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#fuzz #timing_side_channel_attack它的工作原理是将模糊测试目标编译到WebAssembly，然后在修改后的wasmi解释器中对wasm目标进行模糊测试，该解释器计算单个指令的执行次数。旁路攻击的一个案例：举一个最简单的计时攻击的例子，某个函数负责比较用户输入的密码和存放在系统内密码是否相同，如果该函数是从第一位开始比较，发现不同就立即返回，那么通过计算返回的速度就知道了大概是哪一位开始不同的，这样就实现了电影中经常出现的按位破解密码的场景。密码破解复杂度成千上万倍甚至百万千万倍的下降。 来源： 知乎：如何通俗地解释时序攻击(timing attack)?https://www.zhihu.com/question/20156213/answer/43377769sidefuzzhttps://github.com/phayes/sidefuzz"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SideFuzz：寻找时序旁路攻击漏洞的模糊测试库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #falling_sand该文作者制作过一款落沙游戏（falling sand game）Sandspiel，这种游戏允许玩家选择不同的材质（沙子、水、石头、冰块等）放到游戏中，自然下落，形成各种造型，比较艺术。作者在这篇文章里，介绍了他为什么要做这款游戏，以及这款游戏的架构等技术资料。架构：\n\n粒子模拟代码：Rust/WASM\n\n\n流体模拟：JS和GLSL\n\n\nReact和JS编写界面\n\n\nTypeScript和Postgresql编写CRUD后端\n\n\n在线试玩\n\n\nRead More\n\n\nsandspiel源码\n\n粒子模拟代码：Rust/WASM流体模拟：JS和GLSLReact和JS编写界面TypeScript和Postgresql编写CRUD后端在线试玩https://sandspiel.club/Read Morehttps://maxbittker.com/making-sandspielsandspiel源码https://github.com/MaxBittker/sandspiel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"制作落沙游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#template_enginemarkup.rshttps://github.com/utkarshkukreti/markup.rs###「远程工作 at 欧洲」Chorus One寻找加密软件工程师要求懂得Go或Rust。该团队成立15个月，有6名团队成员，工作主要是区块链相关。公司在美国西海岸，可全职远程。 薪资：£70 - £85kRead Morehttps://blockchain.works-hub.com/jobs/remote-cryptonomic-software-engineer-1f007?utm_source=reddit&utm_medium=chorus%20one&utm_campaign=j.gretton"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"markup.rs 又一个Rust的模板引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Learning额外的惊喜： Rust的文档非常棒！Read Morehttps://medium.com/@jondot/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从3W行Rust代码中总结出来的十个Rust关键学习点"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#libre最近，一些备受瞩目的自由软件项目已经考虑或采用专有聊天系统作为他们与社区沟通的主要方式。这应该引起所有对自由（libre）软件运动感兴趣的人的警觉。使用Discord作为官方通信方法的项目包括Fedora，Gentoo和openSuSE等发行版; Gitea和Yarn等基础设施项目;和自由编程语言，包括Elixir和Rust。软件不应该依赖专有通信工具的原因有很多：\n没有透明度。比如注册Discord会包含很多条款。\n不能选择客户端。挑选客户端只能受制于Discord的要求。\n缺乏基础设施控制。如果给Discord提供服务的服务商出现了问题，那么社区也就停止服务了。\n其实除了irc之外，还有很多备选方案：\nMattermost\nMatrix\nRocket.Chat\nZulip\n对于自由软件，也是时候迁移到自由的通信工具上了。（在Reddit讨论下，Zulip好评不断）\nRead More\nReddit 讨论贴\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「呼吁」保持所有人都可访问的自由软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#k8s虽然通常使用Go和kubernetes交互，这豪无争议。但是现在随着客户端的进化，再加上Rust的泛型和过程宏，现在完全有可能使用Rust来编写一个成熟的k8s客户端了。该文作者意见编写了好几个Rust的K8S工具，包括：k8s-openapi。并且他们也提交了新的工具：kube-rs，纯Rust实现的k8s客户端。更多内容请阅读原文。\nk8s-openapi\nkube-rs\noperator-rs: kube-rs使用示例项目\nRead Morehttps://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust和K8S交互"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#emacs\nemacs-module-rs\n指南\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"emacs-module-rs: 允许你用Rust编写emacs模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sledSled 是一个 Rust 写的嵌入式数据库，质量相当不错。作者用了一段时间后，想了解里面的实现，就开始了这个学习和审阅过程。这是第三篇。Read Morehttps://ayende.com/blog/187073-C/reviewing-sled-part-iii"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sled代码评审 Part III"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#aws #job\nRead More\nwatchrs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"watchrs: 使用Rust监控AWS批量Jobs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sonr #pub_sub #miosonr建立在mio之上的网络库，相比于Tokio来说，更加轻量。Read Morehttps://hagsteel.com/posts/building-a-pub-sub-with-sonr-part-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Sonr构建pub/sub服务器 Part II"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wlrootwlroots-rs项目的作者宣布放弃该项目。原因是因为它碰到的问题，无法用Safe Rust去处理。他认为Safe Rust才是Rust存在的意义，不太想用Unsafe Rust来处理问题，所以就选择回到了C语言。Read Morehttp://way-cooler.org/blog/2019/04/29/rewriting-way-cooler-in-c.html在该话题的Reddit讨论区，rlua的作者深有同感，也写下了自己的感受：rlua 让他身心疲惫，也经历了类似的失败。但是，他又说了：如果有Rust无法表达的模式，那么我想我们应该努力使Rust更好，或者找到新的模式？我认为Rust的最大优势是可以把全局不安全的东西变成局部不安全的东西。我知道这对于所有任务来说都不是100％可能，但我正在努力找出剩余问题的答案。同样也有人指出：当你认为Rust的全部意义仅仅是安全的时候，那么你就错失了Rust的好处。这并不是Rust的全部观点。Rust是让你在不安全的基础上抽象安全。如果那个C库本来就不安全了，那么Rust允许你公开那个接口，而不是非得把它包装为安全的。很多人也产生了共鸣。C和Rust之间的映射，确实比较困难。可能需要总结一些最佳的模式。Reddit 讨论区https://www.reddit.com/r/rust/comments/biq864/giving_up_on_wlrootsrs/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-01 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"放弃wlroots-rs项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"DataFusion 的作者 Andy Grove 最近在项目 datafusion-benchmarks 仔细评测了 DataFusion 的性能。对手是大名鼎鼎的 Apache Spark。https://github.com/andygrove/datafusion-benchmarks简单查询 DataFusion 在某些地方速度已经领先了，但是涉及到 GROUP BY 这种复杂一点的，DataFusion的性能还是不够，需要改进。作者已经着手在改进了。令人惊喜的是，DataFusion 的内存占用，几乎只是 Spark 的 1/100 （Spark 8G，DataFusion 80M）！Read Morehttps://andygrove.io/2019/04/datafusion-0.13.0-benchmarks/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：DataFusion 性能评测，性能展露头角，内存占用少得惊人"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者最近想基于wasm做一些网络游戏相关的实验，但是发现像 WebSocket 这种协议并不能满足他的要求：不可靠，无序包，需要面向具体的业务在上层做定制，不通用。而目前在Web层面，是不能直接发 UDP 包的。只有 WebRTC 这套协议里面提供了这种可能性，于是作者就开干了。这个想法并不是他独创的，比如有一个叫 WebUDP 的项目。他用 Rust 实现了这个想法。https://github.com/seemk/WebUdpRead MoreRepohttps://www.reddit.com/r/rust/comments/bihg1b/webrtcunreliable_a_library_for_writing_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"webrtc-unreliable：使用 WebRTC 通道，在浏览器和服务器之间发送 UDP 数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Smith 是 WebAssembly App 开发框架——完全使用 Rust 开发前端 App。项目刚开始没多久。Read Morehttps://medium.com/@robert.balicki_2494/rolling-your-own-router-with-smithy-v0-0-3-2de17cdbb49"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Smithy v0.0.3 发布。新增页面路由"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"哇，第三方整理的，非常好。对于一个新人来讲，怎么快速清楚如果想用 Rust 做 Web 开发的话，要学习什么，涉及哪些模块，组织结构如何。Read Morehttps://github.com/csharad/rust-web-developer-roadmap"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Web Developer Roadmap 2019"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它是对更底层字形引擎的封装。做字体渲染和图形渲染的同学可以关注。不过作者觉得自己坑不了这个坑了，水太深。Read MoreRead More 2Repohttps://raphlinus.github.io/rust/skribo/text/2019/02/27/text-layout-kickoff.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"skribo - 一个低阶文本布局库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"与  locate / mlocate / updatedb 类似，在终端下使用。Read Morehttps://github.com/ngirard/lolcate-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lolcate-rs：对文件系统索引和查找的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"闹翻天了。await 这个关键字没问题，现在最大的问题是：await 如何与 ? . 号这些操作符配合，而不产生歧义，代码层面上，又要直观，好看。整个社区，包括大佬们都分成几派。目前大体分成 4 派：\nOrder of Operations Solution\nSyntactic Sugar Solution\nPostfix Keyword Solution\nPostfix Sigil Solution\n大的派别分为前缀派和后缀派。这个问题，可以说是 19 年最大的问题了。很多人的东西都卡在这个问题上，所以官方压力也很大，想尽快定下来。无船同志说希望在 1.37 版本（7月4号）把async-await稳定下来（不过只是开始，后续还有大量工作要做，比如 trait 中的异步函数，大量优化工作等）。各位看官，下面4种形式，你选哪种？请在下面踊跃发言。Read MoreRead More 2Read More 3Read More 4https://paper.dropbox.com/doc/Await-Syntax-Write-Up-t9NlOSeI4RQ8AINsaSSyJ#:uid=096894980756621041377818&h2=Ergonomic-&-Readability-Consid\nTelgram Channel\n阿里云语雀订阅\nStemmit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-30 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"整个社区都在热烈讨论 await 语法问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mail作者将通过三篇文章来讲解如何用Rust编写邮件发送的代码。Part IPart IIPart IIIhttps://blog.1aim.com/post/002-mail-1-intro/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Rust如何发送邮件 三篇"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hex彩色输出不同类别的字节。Read Morehttps://chrisvest.github.io/xv/同类工具： hexylhttps://github.com/sharkdp/hexyl"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"xv: 命令行16进制查看器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#redox #tool该文介绍了一些终端工具，包括：\nAlacritty，跨平台、GPU加速的终端\nexa，Rust实现的ls命令\ndust，du (disk usage)工具的Rust版本\n等等Read Morehttps://sts10.github.io//2019/04/08/terminal-redox-alacritty.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Terminal Redox：一些用Rust编写的开发工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#webrtc\nRead More\nwebrtc-unreliable\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"webrtc-unreliable：用于编写具有多个基于WebRTC的Web客户端和类似UDP的网络的Rust服务器库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#macosRustPlaygroundhttps://github.com/cmyr/RustPlayground"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustPlayground: 用于Mac平台的Playground桌面软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#3dKiss3d是一个跨平台（包括WASM）2D和3D图形引擎，旨在简单地用于编写演示和原型的渲染部分。 此版本增加了对基于conrod的即时模式GUI的支持。kiss3dhttps://github.com/sebcrozet/kiss3d"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 3D引擎 kiss3d 0.20发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async作者给出了一些基准测试。评论中回复摘要：目前异步的实现中使用TLS（Thread Local Storage），会产生一些开销。generator不能接受resume的参数，但是在poll时future会传递contex，因此async/await将contex存储在TLS中以便将其传递给generator。可以关注此问题。\nReddit 讨论\n相关issues\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」Rust的异步是不是零成本的？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded\n嵌入式book ，最近有一些更新\n嵌入式book在线阅读，介绍如何使用Rust为裸机编写固件\nDiscovery book,基于微控制器的嵌入式系统的入门课程\n官方维护的 awesome-embedded-rust\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-29 14:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」一些资料介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"要用一个 LED 灯说出 Hello world。当然是需要用到莫尔斯编码啦（就是港警匪片中经常出现的那个用手指或枪有节奏地发出声音的那个信号序列）。https://zh.wikipedia.org/zh-hans/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81就像下面这个样子，视频地址 需fq。https://twitter.com/i/status/1120835944003846144作者参考了 The Embedded Rust Book 和这个样板项目https://rust-embedded.github.io/book/用了 openocd 来调试。然后向代码中灌入了：作为数据源，小板子就闪起来了。结果 ...- . .-. -.-- -.-. --- --- .-.. -.-.-- (verycool)Read Morehttps://idursun.com/posts/hello_world_in_morse_code/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 嵌入式开发的一个小示例：用一个LED灯说出 Hello world"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"UWP 在Win10 Mobile, Xbox One, HoloLens 上使用，虽然Win10手机已经死翘翘了，但是另外两样很有竞争力啊。所以Rust官方还是要支持的。Read Morehttps://github.com/rust-lang/rust/pull/60260"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 官方已经在做支持 UWP(Universal Windows Apps) 编译目标的工作了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust世界中终端库很多，但是完全跨平台的终端库不多，crossterm 算一个。下面是用它开发的Pikachu.来看看 3D 效果。https://preview.redd.it/p3nlqakx2bt21.gif?format=mp4&s=30d2dab1679000eedc65c7cadd550f26676a704eRead MoreRepohttp://www.jonathanturner.org/2019/04/porting-the-pikachu.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 crossterm 进行跨平台终端应用开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要卖点在它是跨平台的。Read Morehttps://github.com/Freaky/rust-proctitle"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-proctitle ：安全的设置进程名称的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当然，是没有开源的啦。作者只是在reddit上通报了一声，说了一下这个项目的大致情况。这个项目在16个月前立项。上线交易近10个月，盈利9个月。交易策略重写花了7个月，上线部署花了1个月。最终的效果是Rust在各方面都打败了c++版本，虽然只是一点点性能提升。不过作者还没有提到安全性和稳定性的问题。高频交易按道理说，应该是Rust能展示威力的地方，只是这块儿非常敏感，所以试水比较缓慢，现在终于有人出来公开宣传了。赞赞赞！Read Morehttps://www.reddit.com/r/rust/comments/bhtuah/production_deployment_of_rust_in_hft_system_at/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"韩国一家金融公司已经把 Rust 用在了一个正式的盈利的高频交易项目上"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个不常见的问题，但是如果是针对嵌入式设备编程，或手持设备进行游戏开发。这会是一个重要问题。作者给了以下3个要求：最后作者把 quick-protobuf 拿过来改了改，满足了要求。https://github.com/tafia/quick-protobufRead Morehttps://www.reddit.com/r/rust/comments/bi0xll/no_std_data_serializationdeserialization/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 no_std 下，如何做序列化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"非常容易使用，比如：\ntic-tac-toe\nchess\noko\nRepohttps://github.com/lcnr/rubot"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rubot - 一个独立的可嵌入其它游戏中的游戏机器人库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用过 tokio_codec 的都知道，我们需要用 poll 不断去检查流有没有输出结果，并对 Ready 还是 NotReady 返回分别判断处理，现在有了这个库，就可像下面这样更“符合人性”直观地写了：这个库只是Future 0.3 大生态的一部分。这个生态还是慢慢完善当中。Repohttps://github.com/matthunz/futures-codec"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"futures-codec: 配合 Future 0.3 进行流编解码的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个支付系统看起来很有趣。它有如下特性：\n有效快速支付。Offst不依赖于一个区块链或者任何形式的PoW。每个交易只影响网络中的一小部分节点。支付通常在一秒内完成。\n低支付费用。支付费用只由支付经过的路由长度决定。路径上的每个路由参与者只得到一份credit。\n公正的资产分布。Offst系统中总的 credits 是0,并且最终会在所有成员之间公正分布。\n如果你丢失了Key，你可以向你的朋友请求恢复你的账户。\n拒绝审查。没有任何实体可以阻止或审核你的交易。\n完全原始控制。Offst是可编程的，可以二次开发，方便地定制上层应用。\n这套系统背后的原理请阅读下文。个人感觉很有意思。Read MoreRead More 2Repohttps://www.freedomlayer.org/offst/offst-release/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"offst - 去中心化的支付系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我们的在线系统中，经常会有些资源文件（如配置更改），需要重新加载。最简单的方式当然是把服务停掉，重启。但是对于高可用度在线服务来讲，这是不可取的。要么就把配置存数据库或缓存redis等。现在有了这个库，你按它指导的方式进行编程，就可以实现我们想要的目的（不需要数据库）。具体需要试用后才知道好不好用。它还有资源发现的功能。Repohttps://github.com/phaazon/warmy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"warmy - 通用的热加载/重载资源库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者强调高性能。Repohttps://github.com/AhmedMostafa16/RiviDB"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rividb - 一个简单的内存并行解析析数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"什么，又来一个。跟 yew 有什么区别？这个库是仿 elm 的风格做的。其实，也是基于 yew 之上的封装。目标是易用，好用。作者：ivanceras，是一位有趣的开发者。svgbob，spongedown等，都是他的作品。https://github.com/ivanceras"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sauron - 一个 Web 前端开发框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有点好玩儿。有需要关于音乐文件处理的方面内容的同学，可以借鉴。Repohttps://github.com/tarkah/karaoke-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"karaoke-rs - Rust 写的音乐播放器（在浏览器中）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust嵌入式开发中需要用到的库。Repohttps://github.com/jonas-schievink/rubble"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rubble - BLE（低功耗蓝牙），零分配协议栈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"mamba语言翻译器会把 mamba 代码翻译成 python 代码。所以，它的后面，就是 Python 生态。mambahttps://github.com/JSAbrahams/mamba"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mamba - 用 Rust 写的一个语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这之前是一个 haskell 项目，作者把它移值到了 rust 中来，然后顺便分析了一下当前 Rust 中图形框架目前的生态。作者看起来很雄心勃勃。下面的博文非常好。可以关注。Read MoreRepohttps://phaazon.net/blog/pre-luminance-n-random-thoughts"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-28 14:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"luminance-rs - 类型安全，无状态的 Rust 图形框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#book看来大家都陆续上车了"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"日本最近也出了一本Rust新书：Rust入门实践"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#qtum #我上午看了这次分享，并且做了一份脑图。这次分享主要是介绍了椭圆曲线相关的内容，感兴趣的可以看看。同时，量子链也在招聘Rust工程师，感兴趣的可以投简历 yangting at qtum.info"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"量子链今天上午线上分享脑图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#reviewing #sledSled是一个用Rust编写的嵌入式数据库引擎。 对于如何存储数据采用了一种非常不同的方法。Read Morehttps://ayende.com/blog/186785-A/reviewing-sled-part-ii?Key=d48f04ae-25dc-428e-992a-ff38587a7c72"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sled源码评审 Part II"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#android该文作者有个很好的学习习惯，就是每年都给自己制定一个年度的个人项目，今年他的目标是为旧的HTC One X安卓智能手机编写一个可启动内核image。但他今年的计划看来是失败了。虽然失败了，但是他看来也学到了不少东西，在文章里介绍了：\n微内核（Little Knrnel），将加载地址设置为KERNEL_LOADING_ADDRESS=0x8000以使LK到达正确的位置。\n交叉编译，在MacOS上为armv7平台交叉编译代码。\n详细内容请看原文。Read Morehttps://onatm.dev/2019/04/22/what-i-learned-from-my-failed-attempt-of-writing-baremetal-android-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust编写Bare Metal Android的经验教训"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mozilla #ircMozilla最近宣布将关闭其IRC网络，理由是日益增加的维护和审核负担。距离最终关闭还有几个月的时间，官方建议大家转移到Rust的官方Discord服务器去交流。Discord服务器包含#users，＃help和#beginners频道。如果你想继续使用IRC，那么可以去非官方的freenode频道去交流。（IRC交流太古老了，为了扩大Rust社区的交流面，使用现代化的通信工具是必须的。）\nRead More\n更多讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mozilla 将关闭Rust IRC频道"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli本文介绍了crossterm的使用。\nRead More\ncrossterm\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"创建跨平台的终端应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#linkerd #Job\nRead More\n软件工程师职位\n系统工程师职位\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Job」linkerd公司开始招Rust工程师了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#job该岗位也支持Rust开发【工作职责】1、负责AI算法中计算在华为CPU/GPU/NPU等处理器上的计算性能优化，基础库设计；2、负责CNN/RNN/RL等模型的效果评估分析，持续优化到极致；3、负责持续跟踪业界最优实现，超越并创新4、负责和上下游同事对接，协同交付最优成果；【任职要求】1、熟悉计算机体系结构，非常了解现代处理器的特性；2、熟练掌握C，清楚C的常见坑和编程技巧；3、至少熟悉ARM NEON指令集、OpenCL、CUDA中一种， 有性能优化经验；4、熟悉至少一个推理平台开源框架的实现，具有相关经验者优先；5、熟悉机器学习算法，熟悉Caffe,Tensorflow,Pytorch,Mxnet等至少一个主流AI开源框架，具有上述开源项目经验者优先；6、追求极致、理性的心态。感兴趣的朋友可把简历直接发给@风辰（qq 304128534） ，或发送到 liuwenzhi4 at huawei.com"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Job」华为诺亚方舟实验室招聘 AI算法性能优化  工程师 或 实习生，职责和要求如下"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#keyboard通过该库可以很容易地自己构建机械键盘。keyberonhttps://github.com/TeXitoi/keyberon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"keyberon: Rust实现的机械键盘固件库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GraphicsLuminance是Rust实现的一个无状态类型安全的图形库。本来是Haskell实现的，后来作者使用了Rust之后就决定把Rust作为图形库开发的默认语言。可能比gfx-hal更易于使用？\nluminance-rs\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"luminance-rs 准备发布1.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #virtualDOMdumlehttps://github.com/axelf4/dumle"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dumle: Rust和WASM的虚拟Dom实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#TravisCI #GitHub本文教你如何使用TravisCI达到交叉编译的目的。Read Morehttps://dev.to/hawkinjs/leveraging-travis-ci-for-continuous-deployment-to-publish-compiled-binaries-to-github-2k06"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"利用Travis-CI进行持续部署，将编译后的二进制文件发布到GitHub"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#error_handle本文介绍了一种方法，让你在代码中编写更易于调试的编译错误：compile_error!宏，它也可以配合条件编译使用。Read Morehttps://blog.knoldus.com/how-to-write-better-compilation-error-message-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在Rust中编写更好的编译错误信息"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#search #elasticsearch本文是对Sonic的创建者Valerian Saliou的采访，也可以帮助我们对Sonic有一个比较全面的了解。Q: 什么是Sonic？A: Sonic是一个开源搜索索引服务器，用Rust编写。它构建简单，高性能且轻量级。 Sonic接受用户查询，并返回标识符。这些标识符指的是关系数据库中的实际文档（例如，在我们的案例中：消息，文章，CRM联系人等）。 Sonic不存储文档，这使得整个系统在存储方面简单而有效，因为从Sonic获取搜索结果的应用程序必须从另一个数据库（例如，MongoDB，MySQL等）提取实际结果数据，因为搜索结果返回的是ID）。Q: 为什么要创造一个除Solr、ElasticSearch之外的新选择？A: 我（sonic作者）经营一家名为Crisp的公司，为100,000名用户提供客户支持软件。用户想要搜索他们的消息，我们的一些用户有很多消息。事实证明，使用传统的开源搜索索引软件（例如Elasticsearch等）对我们的免费增值商业模型来说太贵了，因为这些系统很重，因此需要巨大的服务器CPU和RAM。作为开发人员和系统管理员，我非常喜欢Redis的简单性和速度。在计算机软件中，简单性通常提供速度，这在规模上是一件好事。我将Sonic打造成“可搜索的Redis”：简单的功能，简单的网络协议。Q: 你为什么决定使用Rust？使用Rust创建Sonic是一种什么样的体验？A: Rust使整个开发体验更加顺畅。语言的约束（例如，借用检查器，没有NULL值的事实）保证在生产中运行项目时不会遇到某些类型的错误（例如，NULL指针异常和分段错误，这些是在C，C ++或Go等编程语言中不可避免; 是人就会犯错误）。我过去已经构建了其他Rust项目来大规模支持Crisp基础架构，例如Bloom，Vigil和Constellation（它们也已经在GitHub上开源）。 Rust对我来说不是什么新鲜事;总的来说，我喜欢使用这种语言。我2年前的第一个Rust项目有点粗糙，因为你必须花很多时间借助借助检查器“无缘无故”阻挡你。一旦你了解它的工作机制，你就会变得更有效率，并且Rust借用检查器错误也会逐渐变得更加罕见。总的来说，我可以说在Rust中编写Sonic的经历非常棒。我爱Rust。它也使我成为一个更好的程序员。（同感）Q: 什么是Sonic Channel？这个功能的灵感是来自Redis吗？A: Sonic Channel用于通过网络与Sonic通信的协议。由于当今大多数应用程序基础结构都通过网络分布在多台计算机上，因此需要一种基于TCP的协议来将新文本数据推送到索引并查询索引。出于性能原因，我不想像Elasticsearch那样编写基于HTTP的协议。在发布Sonic之后，我从社区中获得了很多贡献，为最流行的编程语言构建Sonic Channel库（集成）：Go，Python，Ruby，Java，PHP和JavaScript（仅在NodeJS上运行）。这使开发人员能够以他们喜欢的编程语言从他们的应用程序中推送数据并搜索Sonic中的项目。它使整个Sonic集成过程更容易调用REST API，更简洁。Q: 您使用哪些数据结构来支持创建索引和自动完成？A: 索引存储在LSM（Log-Structured Merge-tree）中，底层使用了RocksDB。为了自动完成，Sonic使用FST（有限状态传感器），BurntSushi在他的博客上的一篇文章中详细解释了这一点。FST存储在磁盘上，用于每个Sonic（集合，存储桶）对，并且是内存映射的，这意味着实际的FST数据不会加载到RAM中，但访问速度仍然很快。我正在使用的Rust FST实现的缺点是任何构建的FST都是不可变的。如果Sonic存储桶中出现一个新的词，则需要将其推送到FST，因此需要重新构建新的FST。 Sonic定期为变异的FST运行合并任务，并在磁盘上添加或删除它们的词。FST结构不仅用于自动完成，还用于拼写错误校正（例如，它能够将“Englich”校正为“English”）。它使用Levenshtein自动机来实现这一点（给定最大Levenshtein距离相对于单词的长度;即，单词越长，允许的拼写错误越多）。Q: 你为什么选择RocksDB作为存储？A: RocksDB（来自Facebook）建立在LevelDB（来自Google）上。它非常擅长在巨大的密钥空间保持性能稳定，并通过压缩旧数据来最小化磁盘使用（它具有分层数据存储架构，旧数据处于较低级别，可以通过较高但较慢的比率进行压缩或压缩）。RocksDB改进了LevelDB，并且非常易于配置。这意味着Sonic用户可以通过Sonic配置调整R"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-27 12:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sonic：用Rust编写的Elasticsearch的极简替代品"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"clippy 誤報的問題已解決\nclippy::redundant_closure\nclippy::missing_const_for_fn\nRead morehttps://www.reddit.com/r/rust/comments/bhap9o/announcing_rust_1341/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-26 12:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.34.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"完成度還不高的一個引擎，有興趣可以看看Read morehttps://www.reddit.com/r/rust/comments/bha6ui/coffee_an_opinionated_2d_game_engine_for_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-26 12:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Coffee 2d遊戲引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文讲解了一些av1编码的概念，对影响视频压缩感兴趣的人可以看看Read morehttps://www.reddit.com/r/rust/comments/bh8xnl/implementing_tile_encoding_in_rav1e_a_rust_av1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-26 12:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust AV1 视频编码器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"高手可以查，新手可以學習，很棒的資源整理。新闻昨天也介绍过。Read morehttps://www.reddit.com/r/rust/comments/bh7lgp/a_typebased_rust_cheatsheet/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-26 12:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 基础类型 Cheatsheet"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"lobste.rs 是一個编程讨论社区https://lobste.rs/本文的作者用rust做了一個bbs版的uiRead morehttps://www.reddit.com/r/rust/comments/bh7dzd/what_i_learnt_building_a_lobsters_tui_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-26 12:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lobsters 電子佈告欄"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有cli程式開發需求的人可以試用看看中文說明https://github.com/MSDimos/commander-rust/blob/master/docs/README_CN.mdRead morehttps://www.reddit.com/r/rust/comments/bh6i0z/hi_everyone_heres_a_new_crate_for_cli_development/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-26 12:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"commander-rust 给cli开发者使用的新库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cheatsheetRust tg 群主 @upsuper 造福社区，大家是不是也可以提PR呢。\nRead More\nupsuper/rust-cheatsheet\n其他的CheatSheet汇总\ncheats.rs\nrust_cs_canvas: 归纳了Rust语法\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Cheatsheet"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo #DependencyHell依赖地狱：处理应用程序依赖性版本和依赖性冲突所带来的挫败感。Rust的解决方案：\nCargo。允许语义版本控制兼容规则。\nName Mangling。在Rust编译器源码的symbol_names.rs文件中有详细规则。\n通过上面两个共同作用来解决问题。假如你写的库被包含在某个应用程序中，而应用程序中使用了log-0.5，你的库中依赖的是log-0.4，那么Rust编译器会对应用程序内部使用log的库使用0.5版本，而你的库代码则使用0.4。更多详细内容请看原文。Read Morehttps://stephencoakley.com/2019/04/24/how-rust-solved-dependency-hell"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust如何解决依赖地狱"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#markdown\n\n跟进了最新的CommonMark规范 0.29版本\n\n\n一流的性能提升。增加了simd加速。PulldownCmakr是最好的CommonMark实现。\n\n\nRead More\n\n\n通用标注(CommonMark)介绍\n\n跟进了最新的CommonMark规范 0.29版本一流的性能提升。增加了simd加速。PulldownCmakr是最好的CommonMark实现。Read Morehttps://www.reddit.com/r/rust/comments/bgx1vg/new_pulldowncmark_05_release/通用标注(CommonMark)介绍http://www.commonmark.cn/w/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pulldown-cmark 0.5 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ast可以直接在浏览器里查看和解析AST了。之前我只能从命令行输出ast.json文件，然后找个在线的json可视化工具查看。现在方便多了。通过包装Rust的syn和WASM实现了这个功能。\nastexplorer.net\n源码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"让astexplorer.net支持Rust AST可视化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Amethyst为了支持WebAssembly在浏览器中运行紫水晶游戏，该笔资金主要用于支付在以下三点有突出贡献的贡献者：\nWASM渲染器（2D、3D、UI）\n文档改进，包括WASM\nWASM的并行性\nRead Morehttps://www.amethyst.rs/blog/moss-grant-announce/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amethyst接受了Mozilla的1w美元资助"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust该文是来自sentry公司的博客。概要\n不要使用自引用指针。（而应该用handle来代替，也就是说，不是存储指向对象本身的指针，而是存储一些信息，以便稍后计算指针。）\n不要陷入生命周期和借用检查地狱。（而应该使用引用计数共享所有权）\n不要轻易使用内部可变性。（考虑建立新的状态来代替内部可变）\n更多详细内容，包括代码解释请看原文。Read Morehttps://blog.sentry.io/2018/04/05/you-cant-rust-that"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「经验分享」Rust中你不应该做的三件事"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Generic此文通过详细介绍Iterator::collect函数，来让读者体会Rust的类型系统的优雅之处。Read Morehttps://blog.jcoglan.com/2019/04/22/generic-returns-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的泛型返回"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmerWasmer是一个可以嵌入到Rust应用中的wasm解释器。Read Morehttps://wiredforge.com/blog/wasmer-plugin-pt-1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」使用wasmer和Rust构建插件系统 Part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pbrtrs_pbrt是对《Physically Based Rendering,PBRT(光线跟踪：基于物理的渲染) 》这本书中代码的Rust实现。Read Morehttps://www.rs-pbrt.org/blog/2019-04-24-v0-5-2-release-notes/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rs-pbrt 0.5.2发布日志"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clicolor-backtracehttps://github.com/athre0z/color-backtrace"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"color-backtrace: 彩色化你的panic回溯栈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wapm此工具允许在wapm.io注册表上安装，管理和发布wasm包。wapm-clihttps://github.com/wasmerio/wapm-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wapm-cli: 命令行的WebAssembly软件包管理器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game曾经在公交车堵车，想知道为什么有车停在路上而不是公交车道？ A/B街是一个游戏，探索城市的小变化如何影响司机，骑车人，过境用户和行人的运动。abstreethttps://github.com/dabreegster/abstreet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"abstreet: Rust实现的交通模拟游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tide #futures0.3rust-web-boilerplatehttps://github.com/pbzweihander/rust-web-boilerplate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-web-boilerplate: 基于Tide和Futures0.3实现的样板项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pythoninline-pythonhttps://github.com/dronesforwork/inline-python"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"inline-python: 支持直接在Rust中写Python代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#currency #moneylotushttps://github.com/NerdyPepper/lotus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-25 12:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lotus: Rust实现处理货币格式的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#roadmapRust核心团队最近发布了Rust 2019 Roadmap RFC，主要的工作分为：\n\n治理。改进项目运作方式。包括整理RFC流程。\n\n\n完成已经开始但还未完成的工作。比如异步等。\n\n\n提高语言和工具的整体质量。包括改进编译时间和增强IDE支持等。\n\n\nRead More\n\n\nRust 2019 Roadmap RFC\n\n治理。改进项目运作方式。包括整理RFC流程。完成已经开始但还未完成的工作。比如异步等。提高语言和工具的整体质量。包括改进编译时间和增强IDE支持等。Read Morehttps://blog.rust-lang.org/2019/04/23/roadmap.htmlRust 2019 Roadmap RFChttps://github.com/rust-lang/rfcs/blob/master/text/2657-roadmap-2019.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust核心团队发布Rust 2019 Roadmap"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#topic为什么是四十年？作者拿铁路百年史做了类比1830年5月24日，美国第一条铁路（巴尔的摩—俄亥俄，21公里）通车。1869年5月10日，美国建成第一条横贯美洲大陆的太平洋铁路，总长2849公里。 革命性的里程碑，花费了39年。1901年，德国西门子—哈尔斯克电机公司制造的电力机车，在柏林附近的曼菲尔德—措森线上，创造了时速162公里的世界纪录。这个时间花了71年。那么系统编程语言呢？1973年，Unix正式用C语言改写。到2015年，Rust语言发布，是站在C/Cpp语言肩膀上的革命性语言。革命性的里程碑，花费了42年。那么未来四十年，Rust语言会取得什么辉煌成就？拭目以待。\nSlides\ngitlab仓库\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方演讲」Rust：未来四十年的语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hashmap将会在Rust 1.36版本中看到。该PR作者一共发布过两个PR。第一次是将Swisstable在标准库中重新实现了一遍，第二次是将Swisstable作为独立的hashbrown crate引入标准库中。显然，这次合并的PR是第二种方式。\nRead More\nhashbrown\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」HashMap的SwissTable算法重新实现的PR已经被合并"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#stablilize_futures_api这意味着异步开发离稳定又近了一步。此次Futures API主要是两大模块:future 模块\nstd::future\nstd::future::Future trait和它关联的项（Output和poll）\ntask 模块\nstd::task\nstd::task::Poll\nstd::task::Waker\nstd::task::RawWaker\nstd::task::RawWakerVTable\nstd::task::Context\n另外还有一些api的名称按照Rust标准库中统一的命名风格被修改。\nRead More\n相关issues\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」 Stabilize futures_api的PR已被合并"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rocket #google_cloud谷歌最近发布了他们新的Cloud Run服务的测试版，这是一个通过云中的容器运行无状态网络服务器的平台。 它结合了无服务器架构和托管容器解决方案（如Amazon的EKS）的最佳方面，使得将无状态Web应用程序部署到云中的过程比以往任何时候都更容易。感兴趣的可以玩玩Read Morehttps://cprimozic.net/blog/rust-rocket-cloud-run/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Google Cloud Run上使用Diesel，Rocket和MySQL部署Rust REST API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sonrRead Morehttps://hagsteel.com/posts/simple-chat/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Sonr实现一个简单的chat服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embedded #timeoutrust-embedded-timeout-macroshttps://github.com/braun-robotics/rust-embedded-timeout-macros"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」embedded-timeout-macros 发布 0.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pijul #gitpijul是一个Rust实现的类Git的分布式版本控制工具，发布了0.12版本Read Morehttps://pijul.org/posts/2019-04-23-pijul-0.12/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pijul 0.12发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustLatam2019Rustlatam2019大会的视频陆续放出了，此链接是without boats的演讲。大家可以在youtube列表中查看其他的。RustLatam 2019https://www.youtube.com/watch?v=skos4B5x7qE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「RustLatam 2019 系列视频」Without Boats: 零成本异步IO"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustupChangeloghttps://github.com/rust-lang/rustup.rs/blob/master/CHANGELOG.md#1180---2019-04-22"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustup发布了1.18.0版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#dmaDMA(Direct Memory Access)，直接存储器访问。之前都是，CPU参与，一点点把数据，从一个地方拷贝，即像搬家一样搬到，另一个地方。很明显，此时，相对时间比较宝贵（比较值钱）的CPU，把时间，就用在（浪费在）拷贝数据了。所以才出现了DMA，专门去干拷贝数据的累活。DMA是一种无需CPU的参与就可以让外设和系统内存之间进行双向数据传输的硬件机制，它不是独立外设，而是硬件模块支持的机制。Read Morehttps://flowdsp.io/blog/stm32f3-02-dac-dma/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」使用DMA传输数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#futures为了弥合由futures 0.1和不稳定的异步生态造成的生态鸿沟，官方异步团队在futures 0.3中引入了futures 0.1的兼容层，本文阐述了如何来使用它。Read Morehttps://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Futures 0.1 兼容层"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asciiRead Morehttps://medium.com/carwow-product-engineering/getting-a-bit-rusty-1285c49e520e"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「教程」使用Rust创建一个ascii的渲染工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#enjoy_rust该文作者写了一系列博客，阐述了Rust中他认为很有用的一些特性，本篇是enum，还有其他文章。感兴趣可以看看。Things I Enjoy in Rust: enumhttps://blog.jonstodle.com/things-i-enjoy-in-rust-error-handling/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列博客」Rust中让我享受的二三事：Enum"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DesignPattern作者认为，设计模式分为两种层级：低级和高级。像那种流行的设计模式，比如工厂模式之类，属于低级的设计模式。而高级的设计模式，是指整个应用程序的设计哲学。本文主要谈论后者，作者称之为「核反应堆设计模式」。作者使用该设计模式很长时间，并且它不特定于Rust，还可以应用于C/C++和Perl等其他语言。但作者认为，该模式应该在Rust中更受欢迎。核反应堆设计模式原理假如你的应用程序中有一个非常难以处理的难题（比如一个事件循环，或者是复杂的数据结构等等），那么你可以单独去解决这个难题，然后在这个难题的核心周围设置一堆API墙，利用这面强将难题核心和其他周围环境隔离起来。也就是说，将难题作为一个独立的整体去思考，而不能让它传播到其他程序中。就像核反应堆一样。为什么说Rust更适合这种设计模式\nRust语言比较吸引那些喜欢硬问题的人。\n心理作用。比如Rust就分离了unsafe Rust。\nRust的类型系统。可以更加方便地构建「核反应堆」。\n有人说，这不就是「封装」吗？难道说，只是把「封装」换了个名字？并不是。封装只是核反应堆的必要条件。并非每个封装的东西都是核反应堆。Read Morehttps://vorner.github.io/2019/04/21/nuclear-reactor-design-pattern.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"核反应堆设计模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#macro概要：\nlog-derive: 记录函数错误的宏\nrecap: 正则表达式解析库\nshrinkwraprs： 将数据类型重新定义为新的不同类型\nmetered： 自动在方法上生成统计信息\nderive-new： 自动实现new方法\nsnafu： 提供辅助函数来处理Rust中的错误，帮助增强代码的可读性\nRead Morehttps://medium.com/@benmcdonald_11671/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-24 22:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"六个你可能从未见过的有用的Rust宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Nick 大佬在分享 How to Think in Rust 。talkshttps://github.com/nrc/talks下面是B站真人和雪松老师在分享编译和resp协议解析中的一些思考和问题\nwayslog/resp\nrustcon-asia-2019-workshop-ffi/workshop\n来自百度X-Lab的Workshop分享： Build a Secure and trusted Framework in RustResources of workshop on Rust trusted computing in TrustZone (Rust OP-TEE TrustZone SDK):\nLive slides (will start at ~11am): https://www.icloud.com/keynote-live/sc:0QxM7b7GHp99fYtcIkJWWKjT6TV2STHzpEdHfoOYRKImNThy0DrqGQ907PuFNoW7ruL\nVirtual Machine (VirtualBox) will be distributed on site.\nRepo of Rust OP-TEE TrustZone SDK: https://github.com/mesalock-linux/rust-optee-trustzone-sdk\nGetting started with QEMU: https://github.com/mesalock-linux/rust-optee-trustzone-sdk/wiki/Getting-started-with-OPTEE-for-QEMU-ARMv8\nSlides: https://mssun.me/assets/rustcon-asia-19-rust-optee-trustzone-sdk.pdf\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-23 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCon Asia 大会 workshop 4.23 上午"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Room A：PingCap的Wish(施闻轩)讲rust中如何集成普罗米修斯监控。https://www.yizhibo.com/l/Px_sPev6S97VyanX.html资料：https://github.com/breeswish/rust-prometheus-workshopRoom B:Su Bo 讲如何使用Blockstack区块链开发框架开发Dapp应用。Room C：Gautam Dhameja讲使用substrate搭建区块链。直播地址：https://www.yizhibo.com/l/hDjblQeE299JGrSg.html资料：https://shawntabrizi.github.io/substrate-collectables-workshop/#/https://github.com/shawntabrizi/substratekitties"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-23 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCon Asia 大会 workshop 4.23 下午"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustConAsiaTopic：「RustConAsia 2019」如何高效学习Rusthttps://zhuanlan.zhihu.com/p/63232238Workshop： 使用Actix-web实现一个Restful APIhttps://github.com/ZhangHanDong/actix-workshop-rustconasia2019更多请关注大会PPT和workshop石墨文档：RustConAsia大会资料集合https://shimo.im/docs/zliTJIGgNwk6QIFh/read"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-23 11:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustConAsia 2019大会 张汉东的分享记录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天的日报比较特殊，聚焦于 Rust 亚洲大会的 workshop 的记录和介绍。Workshop 同时会有三场进行。今天早上第一场，志伟的 Clippy，BlockChain，和平时编程过程中一些代码质量重构经验的分享。第二场，IoT Using Blynk，Rahul 分享利用 Blynk 手机模拟器尝试使用 Rust 编写 http 客户端来点亮 LED。第三场，RustBridge 的 Olivia 给我们带来初学者如何快速上手 Rust 的指导。Ovilia 的分享一直持续到下午 4 点。下午的另一场分享是张汉东老师的《用Actix-web实现Restful API开发实践》。然后是 Ilya 带来的 Rust Webassembly 开发实践。（话说，Ilya还是 https://www.arewewebyet.org 网站的维护者）。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-22 20:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustConAsia2019持续两天的RustCon Asia 2019大会，今天顺利闭幕。后续还有两天Workshop活动。下面是持续更新的大会的Slides分享，后续大会官方会发布讲师们的录播视频。关于大会动态，可以在Rust.cc里有相关主题查看。持续更新的大会Slides分享https://shimo.im/docs/zliTJIGgNwk6QIFh/read"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustConAsia 2019 大会圆满结束"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#parser #combinator「长文预警」本文教你如何使用解析器组合子的函数式编程语言中常见的技术从头开始构建解析器。Read Morehttps://bodil.lol/parser-combinators/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"学习Rust的解析器组合子"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #stdweb本文展示了如何使用stdweb和yew构建一个WASM的2D地图组件。remaphttps://gitlab.com/alamminsalo/remap"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Remap: Rust中的Webassembly地图组件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#youtubeRead Morehttps://www.youtube.com/watch?v=1oSnLVE3YbA"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」使用Rust和Specs制作Roguelike游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"自libstd / sys / redox模块设计以来，Redox发生了重大变化。 relibc的创建导致开发了一个用于Redox的POSIX，C API，它支持libstd / sys / unix模块中绝大多数所需的功能。所以现在要考虑使用一个单独的redox target family，可能允许它属于unix target family。这一改变将大大减少将Redox OS转移到Tier 3所需的工作，完全支持Cargo，rustc和其他Rust工具。\nRead More\nReddit上针对这一变化的讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Redox」重大改进"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#no_std可以轻松地将你的crate移植到no_std。no-std-compathttps://gitlab.com/jD91mZM2/no-std-compat"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"no-std-compat：一个#![no_std]兼容层"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#no_std\nReddit 讨论\ngist\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于Rust 1.34写的最小化helloworld"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Amethys为了让Amethys成为Rust的旗舰级游戏引擎，Amethys基金会将支持一部分展示项目，可以有效地展示Amethys的关键功能。 Evolution Island是有Amethys基金会自己开发的一个展示项目。\nevolution-island\nReddit 介绍\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-21 19:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Evolution Island：Amethys展示游戏寻找合作者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這個作者介紹了一下新手應該知道的庫Read morehttps://www.reddit.com/r/rust/comments/bf0kny/12_killer_rust_libraries_you_should_try/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"12個rust殺手級程式庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://preview.redd.it/p3nlqakx2bt21.gifRead morehttps://www.reddit.com/r/rust/comments/bf5uzr/update_on_my_3d_ascii_art_generator_termiontobj/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"3D Ascii 藝術產生器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"请问，以这样的方式来获取枚举内部的值，这个state得到的是一个引用，那么该值的所有权属于谁？是枚举实例a吗？Rust语言社区Mike 2019/04/19 07:43:24是，因为他是copy的，复制了一份求学上 2019/04/19 09:46:28谢谢，请问您这里的copy指的是？我认为是Coin：：Quarter(state),这里声明了一个临时变量state,之后state借出Coin.Quarter的具体值。最后返回该引用。也就是所有权一直是没有改变的。之后，这里说，Quarter的参数是一个US_State的实例，那么这里是发生了移动吗？也就是Coin.Quarter的值的所有权被state夺走了？这里不是很明白Rust语言社区Mike 2019/04/19 09:50:27@求学上 编译器的意思是你传错了，上面枚举直接传枚举进去就行了，不需要传借用Rust语言社区Mike 2019/04/19 09:51:10能否把编译截图完整？求学上 2019/04/19 09:51:18是的，我之前是传枚举进去。确实取出了值数据。稍等求学上 2019/04/19 09:51:40Rust语言社区Mike 2019/04/19 09:53:35那就是写错了啊求学上 2019/04/19 09:54:16因为不是很明白这里的所有权转移，所以我在做测试。按照我目前所理解的，Quarter（state）这里，是发生了移动，match返回值时我既可以返回一个引用或者再次发生移动。但是如果按照我这样理解的话，取出这个值会使得原来的数据丧失所有权而不可用。Rust语言社区Mike 2019/04/19 09:54:52&Coin::Quarter(state) 这样应该也可以求学上 2019/04/19 09:55:36嗯嗯，我再试试。不知道我上面的理解对不对/小纠结Rust语言社区Mike 2019/04/19 09:56:06你拿这个例子测试所有权转移没有用Rust语言社区Mike 2019/04/19 09:56:07因为这个枚举是Copy的求学上 2019/04/19 09:56:28！enum居然是copy的/幽灵喵喵喵？？？求学上 2019/04/19 09:56:47/笑哭我没问题了。谢谢你/小纠结Rust语言社区Mike 2019/04/19 10:01:28/小開心求学上 2019/04/19 10:01:39/小纠结Rust语言社区Mike 2019/04/19 10:03:07@求学上 不一定是Copy的，要看他的组成里面有没有用堆Rust语言社区Mike 2019/04/19 10:03:27全标量类型组成的话，就是Copy的求学上 2019/04/19 10:05:43嗯嗯，也就是说这种复合类型，struct，enum,是否是copy取决于其内部成员是否都是标量？Rust语言社区Mike 2019/04/19 10:06:15对，准确求学上 2019/04/19 10:06:24谢谢你/托脸Rust语言社区Mike 2019/04/19 10:06:32默认实现是这样Rust语言社区Mike 2019/04/19 10:06:37没事，不客气求学上 2019/04/19 10:06:45/呲牙/托脸Read more"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一位群友不了解編譯器的教導，Mike大幫幫解釋"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有一位網友使用Amethyst實作了進化島如果不怕噁心的話可以來學習Read morehttps://www.reddit.com/r/rust/comments/bf65l3/evolution_island_amethyst_showcase_game_looking/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"進化島：噁心遊戲"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在rust中大家常常會希望找到一個最好的寫法但常常會有衝突讓我們想像一個場景，當你有兩個選擇A, B轉換為我的選擇A，他的選擇B時一旦發生，就很難理性的做選擇來看看作者怎麼探討這個問題吧Read morehttps://www.reddit.com/r/rust/comments/bf7mo6/aic_adventures_in_consensus/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"挑戰取得共識"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"跟C語言一樣精簡Read morehttps://www.reddit.com/r/rust/comments/bf8l2b/rust_134_tiny_hello_world_comparable_to_c_version/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.34 版 hello world"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"非同步計時器Read morehttps://www.reddit.com/r/rust/comments/bf8yik/asynctimer_interface_and_timer_primitives/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-20 16:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-timer"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"HashMap 使用SwissTable更新了實作這個代表asmjs以後會不支援不支援wasm的瀏覽器，例如IERead morehttps://www.reddit.com/r/rust/comments/bejkm0/should_we_downgrade_drop_the_asmjs_target/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我們應該要退版 asmjs target嗎？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這篇是sentry簡單說明rust的資源管理理念總結就是多線程下，使用 Arc 給 Rc and RwLock 給 RefCell單線程下，使用 RefCell 跟 ArcRead morehttps://www.reddit.com/r/rust/comments/belohw/what_not_to_do_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"為什麼rust不能做這些事?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用rust實作QUIC協定Read morehttps://www.reddit.com/r/rust/comments/ben9e4/quinn_03_released_quic_protocol_implementation_in/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Quinn 0.3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"需要翻牆Read morehttps://www.reddit.com/r/rust/comments/benycb/rustlang_project_todo_app_yew_framework_and_web/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"教你使用Yew Framework與Web Assembly"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讓你無痛的從 Futures 0.1 過渡到0.3的一篇說明文Read morehttps://www.reddit.com/r/rust/comments/beoomo/futures_03_compatibility_layer/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Futures 0.3 - Compatibility Layer"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"教你怎麼用rust寫parser，這篇文章很詳細也很長，有需要的人可以看一下Read morehttps://www.reddit.com/r/rust/comments/bepi63/learning_parser_combinators_with_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"學習解析器組合 rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個插件，有需要的人可以用Read morehttps://www.reddit.com/r/rust/comments/bepzir/neovim_show_crate_version_info_inline_in_cargotoml/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Neovim: 顯示crate版本在Cargo.toml"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/berjr2/lang_team_meeting_20190418/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"語言討論會議 2019.04.18"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Oxygen engine 一個javascript game engine，但資料太少Read morehttps://www.reddit.com/r/rust/comments/betmxr/wasm_im_porting_my_javascript_game_engine_into/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"親愛的，我把Oxygen engine移植到Rust&WASM上了！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看到actix作者fork了techempower项目，估计要提交actix-web 1.0的性能报告了，有改善除了JSON serialization 其它速度都可以拿前三，但是single query一堆錯https://www.techempower.com/benchmarks/#section=test&runid=d06ed950-3314-47f0-8708-137a9378ffe7&hw=ph&test=fortune"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-19 15:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tech empower報告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"视频教程，9 分多钟，讲得轻松有趣，虽然是英文，但是不难懂。推荐。https://www.reddit.com/r/rust/comments/be3akh/build_a_roguelike_game_in_rust/视频中用的这个库 tcod-rs，是 rougelike 工具库。另外还有一些 rust 的 rougelike 工具库，比如 quicksilver-roguelike。另外还有教程源码。https://github.com/tomassedovic/tcod-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 写一个 Rougelike 游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者宣称的特点是，简单，高性能，不需要额外学习，使用它就好像使用 Rust 语言自身的结构一样。比如：不过作为一款单机数据库，小编还是不是很理解这个库的意义有多大。大家可以留言指教小编。Repohttps://github.com/AlmightyFloppyFish/sfsdb"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sfsdb - 高性能 k-v 文件系统数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"支持 NFS/CIFS/Samba。Read Morehttps://github.com/mzhong1/File-Forklift"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"File-Forklift - 网络文件迁移工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"代码库并不大，适合有这个想法的人尝试（我知道，很多人有过这个想法 :D）Repohttps://github.com/dessalines/lemmy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lemmy - 使用 Rust 实现类似 reddit 这种聚合网站的尝试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"总结：显示树状目录文件结构有几种方式（只用Rust工具）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"总结有以下方法：Read Morehttps://github.com/johnthagen/min-sized-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"min-sized-rust：如何缩小 Rust 二进制包大小的总结"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一只蒸气朋克手表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"国人开发，特点：\n安全： Rust 天生的\n极速：相比 Node/python 版，Rust 速度可谓一骑绝尘\n稳定：除了网速或网易 API 限制，基本不会出现运行问题\n简洁：仿 GNOME Music 风格，GTK 原生界面，纯粹得令人发指\n简单：最小的编译与运行依赖\n大家去感受一下。Repohttps://github.com/gmg137/netease-cloud-music-gtk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-18 10:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"netease-cloud-music-gtk: 基于 Rust + GTK 开发的网易云音乐播放器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustconasiaRead Morehttps://talk.citahub.com/t/topic/527"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCon Asia 27位讲师介绍合集"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#runtime #asyncRuntime，是由Rust异步工作组发布的一个与平台无关的库，旨在使Async Rust既灵活又简单。该库也是异步生态系统标准化的基石。它通过以下方式实现：\n消除共享异步运行时的麻烦，包括I/O和异步执行程序\n遵循Rust标准库主导的API约定\n标准化运行时接口，实现应用程序和底层实现的分离，并且支持自定义运行时\n现在是基于宏，并且期望在未来能实现如下写法：希望成为标准库的一部分。\nRead More\nruntime\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」runtime: 为更容易地创建异步应用而生的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo #call_stack官方嵌入式组老大japaric写的库。可以对整个程序做静态调用栈的分析，可以最终生成svg图片。调用栈分析结果还包含了栈的具体使用情况（以字节为单位），以及包括Max最大值。在写一些对栈内存要求苛刻的程序，比如嵌入式，比较有用。本篇文章是第二篇内容。cargo-call-stackhttps://github.com/japaric/cargo-call-stack#cargo-call-stack"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-call-stack: 从rustc中获取调用图信息"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#readmeRead Morehttps://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用skeptic库保证项目Readme文档中的示例是最新的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust1.34该文作者对Rust1.34稳定版中引入的新功能std::iter::from_fn的探索。该功能允许通过一个函数来直接创建迭代器，以往此功能只能通过宏来辅助实现。现在看上去方便多了。Read Morehttps://weblog.latte.ca/blake/tech/rust/makingiterators.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的新奇功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lld最近的LLVM补丁大大提升了Rust debug模式下lld的链接性能，并且显著缩小了二进制文件。该文对此做了一个分析，包括，为什么这么。Read Morehttps://robert.ocallahan.org/2019/04/mysteriously-low-hanging-fruit-big.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Debug下LLD性能有大幅提升"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#UEFIUEFI是平台固件的软件接口，可替代BIOS.\nRead More\nuefi-rs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从头使用Rust编写UEFI应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nikoNiko最近意识到，Rust编译器团队，需要的不仅仅是开发人员，更加需要的是编码之外的人才，包括文档作者、组织者、传道者、项目经理等角色，只有加入了这些角色，编译器团队才能正常发展。因为编译器团队不仅仅是写代码，其他任务（各种会议、管理工作组、带新人、编写文档、协助沟通问题、帮助贡献者等等）也是同样重要。Read Morehttp://smallcultfollowing.com/babysteps/blog/2019/04/15/more-than-coders/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Niko：代码之外"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang #gleamGleam是Rust实现的一门函数式编程语言，拥有一个类似于erlang和elixir的分布式并发系统。这是该语言的第一次release版本。Read Morehttps://lpil.uk/blog/hello-gleam/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gleam发布了0.1版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#neat #game来自社区 @planet0104 的作品，使用了quicksilver。Neuro Evolution Of Augmenting Topologies(拓扑扩张的神经演化), NEAT代码来自《游戏编程中的人工智能技术》一书neat-flappy-birdhttps://github.com/planet0104/neat-flappy-bird"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-17 15:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"neat-flappy-bird: NEAT算法玩像素鸟"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ripgrep 是 Linux 命令行文件内容检索工具 grep 的 rust 实现版本。版本 11 修复了很多 bug，改进了性能，对二进制文件的搜索体验大幅改进。Read Morehttps://github.com/BurntSushi/ripgrep/releases/tag/11.0.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ripgrep 11 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是 nude.js 和 nude.py 的移植。看看下面的性能评测：https://github.com/pa7/nude.jsnode-js 社区经常引以为傲的性能优越感呢？不过 Rust 为 node 包性能的提升已经做好准备。此库目前还处于实验阶段。Read Morehttps://github.com/kpcyrd/nude-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nude-rs：高性能黄图检测"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Wasmerio 出品，之前我们报道过 php-ext-wasm，这个库就是对应的 Python 版本。https://github.com/wasmerio/php-ext-wasm主打：\n易用\n快速\n安全\n使用就可以安装了。Read Morehttps://github.com/wasmerio/python-ext-wasm"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"python-ext-wasm：用于运行 WebAssembly 二进制文件的 Python 扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 环形缓冲区 ring buffer 上建立一个 MPMC （Multiple Producer Multiple Consumer）通道。https://zh.wikipedia.org/zh-hans/%E7%92%B0%E5%BD%A2%E7%B7%A9%E8%A1%9D%E5%8D%80Read Morehttps://github.com/brunocodutra/ring-channel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ring-channel：环形缓冲区之上的无阻塞，bounded MPMC 管道"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Xray 是实验性的下一代基于 Electron 的编辑器的后端，用 rust 写成。但是项目进度好像遇到的问题。于是作者在 reddit 上心急如焚，发了一篇长文，细数了 Xray 的好。希望有人能接手继续开发下去。https://github.com/atom/xrayRead Morehttps://www.reddit.com/r/rust/comments/bdf3lx/we_need_to_save_xray/不过有人说好像有已经有人 fork 了。https://github.com/fdionisi/xray/issues/1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Xray 死了吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"image 是图像编解码库（图像处理库），由 piston 组织开发，不过 piston 的其它项目大部分是试水项目，感觉在玩儿。这个 image 库估计是想严肃做一下，故移到专门的组织来做。https://github.com/image-rs/imageRead Morehttps://blog.piston.rs/2019/04/15/transitioning-to-image-rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"image-rs 已经从 Piston 组织中独立出来了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Prometheus（普罗米修斯），在运维界几乎成了应用监控的代名词了，详细定义在这里。本身内容还是蛮多的，运维哥哥深有体会。https://prometheus.io/docs/introduction/overview/这个库应该是给rocket应用加一个metrics接口，这样就可以使用prometheus了Repohttps://github.com/sd2k/rocket_prometheus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rocket Prometheus：给 Rocket 应用添加监控"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不需要修改要检测的可执行二进制文件。它本质上是一个非常快的调试器。借鉴自：kcovhttps://github.com/SimonKagstrom/kcovRepohttps://github.com/gamozolabs/mesos"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mesos - 面向 Windows 二进制文件的覆盖率检测工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"就是根据关键词相似度查找结果。搜索引擎必备技能。Tantivy 也能做到。https://github.com/tantivy-search/tantivyRead Morehttps://github.com/andylokandy/simsearch-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"simsearch-rs：一个简单的模糊搜索工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有关async/await语法的一个悬而未决的问题是：await的最终语法。到目前为止，关于这个问题已经进行了大量的讨论;该讨论的现状和语言小组内的立场即将推出。本文无船同志这一系列文章将讨论一个影响该决定但尚未被考虑的问题：for循环流程。目前futures-async-await库中用的语法是这样的：但无船同志认为这个语法与await的作用其实是相似的，这也是JavaScript中使用for await...of语句来创建循环遍历异步可迭代对象的原因：对于Rust中如何设计这种语法呢？这个await是循环语法的一部分（只是for循环这么用）呢，还是单独的语法模式（更加通用）呢？无船倾向于让它成为通用的语法模式。然而目前Rust的类型系统对于后者的表达是有限制的，所以本文将讨论将await作为循环语法的一部分，而下一篇再讨论await作为单独语法模式。所以，对于await作为for循环的一部分，这个语法设计无船倾向于使用下面这种空格分隔prefix-await的语法（后缀语法类似于是elem.await这样的表达）：下一篇文章将探讨更多。（看看语法设计也挺有意思）bloghttps://boats.gitlab.io/blog/post/for-await-i/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」for await loops (Part I)：无船大神对 await for 语法的思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Org Mode 是 Emacs（神的编辑器）中用于记笔记，维护待做列表，做工程规划等活儿的插件，功能强大，操作快捷，受众广泛，被超多人喜爱。但是只能在 Emacs 中，是个硬伤。所以就有人想把它独立出来用。所以就有了解析器。https://orgmode.org/现在这个解析的 Rust 版本来了。目前处于早期阶段，可以玩儿了。Read Morehttps://github.com/org-rs/org-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-16 14:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"org-rs：Org 模式解析器的 Rust 实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate有人将crates.io的crate生态做了可视化，可以通过这个网站看到Rust crate的生态。Read Morehttps://rfdonnelly.github.io/crate-galaxy/#/galaxy/crates.io?cx=0&cy=0&cz=0&lx=0.0000&ly=0.0000&lz=0.0000&lw=1.0000&ml=150&s=1.75&l=1&v=2019-04-02T23-01-58Z"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Crate星系"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasi来自 @huangjj 的投稿Read Morehttps://huangjj27.gitlab.io/posts/fisrt-wasi/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WASI探索(一) -- WASI简介与Wasmtime配置"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game来自 @pickfire 的投稿躲避游戏，避开虫子，获取分数，使用 ggez 框架， Hackathon 时写的，之后会在 rust-malaysia 写文章。bugshttps://github.com/pickfire/bugs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bugs：ggez做的小游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#iOS"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"群讨论分享，关于rust在iOS开发中打包优化的问题 ​​​​"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded位域是把一个字节中的二进位划分为几个不同的区域，每个域有一个域名，并说明每个区域的位数，允许在程序中按域名进行操作。在对内存有苛刻要求的嵌入式系统中，经常会用到这个概念。该库中没有使用任何unsafe代码，新库，具体使用的时候需要谨慎。atomic_bitfieldhttps://github.com/amiraeva/atomic_bitfield"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」atomic_bitfield: core库中原子类型的位域(bit-field)抽象"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#trustDNS新的版本将更加稳定，写增加了一些新的功能。Read Morehttps://users.rust-lang.org/t/trust-dns-resolver-0-11-and-client-server-0-16-released/27268"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Trust-DNS Resolver 0.11和Client / Server 0.16发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #chess作者最近使用Rust为Syzygy游戏桌面构建一个服务器。它由lichess.org提供API，lichess.org是一款流行的免费/自由开源棋牌服务器。他的第一步是想构建一个常见的数据类型crate，但是发现crates.io中关于国际象棋的包中的类型定义各有不同，所以他在想能否统一一下，创建一个统一的crate。思考过程涉及了Rust的类型系统和国际象棋中各个角色的对应，值得关注。Read Morehttps://backscattering.de/chess/vocabulary/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Rust与国际象棋 Part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded #bluetooth该库支持Unix的Bluetooth API (BlueZ)。libbluetooth-rshttps://github.com/Wodann/libbluetooth-rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"libbluetooth-rs: BlueZ Linux蓝牙库的原始绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tokio可供学习Silverhttps://github.com/AhmedMostafa16/Silver"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Silver: 基于tokio实现的一个简单HTTP框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#udp #game新的版本专注于代码质量的提升。Laminar用于多人游戏的半可靠UDP协议实现。该库在UDP的基础上实现了TCP的一些功能。它被用于Amethyst游戏引擎中。laminarhttps://github.com/amethyst/laminar"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-15 13:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"laminar 0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://zhuanlan.zhihu.com/p/62370907"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何为TiKV做贡献"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 amethyst 项目下的底层网络库，可以独立使用。提供了可靠传输与不可靠传输的选择。https://github.com/amethyst发包收包Read MoreRepohttps://community.amethyst.rs/t/laminar-0-2-0/702"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"laminar - 面向多玩家游戏的半可靠 UDP 协议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cp 的替代品啊。什么都不说了，炫酷上图吧Repohttps://github.com/acidnik/ppcp"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ppcp - 带进度条的文件复制工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此库为 ndarray 的 ArrayBase 类型提供了统计方法。https://github.com/rust-ndarray/ndarray到目前为止，Scipy.stats (Python) 和 StatsBase.jl (Julia) 中的大部分统计特性都已经移植过来了。用 Rust 做机器学习的同学是不是可以上手了？Repohttps://github.com/jturner314/ndarray-stats本库作者还邀请大家一起来讨论这个库的未来走向，好机会。Roadmaphttps://github.com/jturner314/ndarray-stats/issues/1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ndarray-stats v0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust官方及社区最新信息搜集、文章推送，教程学习，技巧分享，社区交流。信息来源是整个全球Rust社区。以后本日报也会同步更新到此公众帐号去。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微信公众号：Rust语言学习交流 上线"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"读者frostRed和Yim先后总结出来的规则，大家可以参考讨论。Githubhttps://github.com/ZhangHanDong/tao-of-rust-codes/issues/164在随书源码选择「精选」label也可看到。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编程之道 关于闭包和所有权相关规则"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章 详细说明了要达到这个目标需要注意的点，和相关的可使用的辅助工具。https://blog.guillaume-gomez.fr/articles/2019-04-13+Keeping+Rust+projects%27+README.md+code+examples+up-to-date推荐学习。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"保持项目说明文档中的代码示例是最新方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"NEAT算法玩Flappy Bird(像素鸟) ，群友贡献，棒棒哒！JiaYe（planet0104）Repohttps://github.com/planet0104/neat-flappy-bird"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-14 12:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"neat-flappy-bird"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#guiPushrod 是一個利用piston_window做的很陽春的GUI library0.24版有下面新特色\nText Widget現在可以水平調整文字(靠左、靠右、置中)\n介紹 Push Button Widget\n介紹 Progress Widget\n介紹新的 callback 系統\nRead morehttps://www.reddit.com/r/rust/comments/bbvehy/pushrod_024_released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pushrod 0.2.4"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustConAsia2019我申请了两个RustCon Asia大会门票九折优惠码： IZHKfP6 和 fAp7FK1，给有需要的朋友。购票通道http://www.huodongxing.com/event/6479456003900"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"感謝Chaos bot幫我們申請兩張优惠码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustConAsia2019有位當地人分享可以吃什麼好吃的Read Morehttps://talk.citahub.com/t/topic/477"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCon Asia 吃货指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#WebRender現在Linux使用者可以手動開啟WebRender了這是一個實驗特性他可以開啟rust寫的gpu渲染程序給\"合格\"的Linux設備使用Read morehttps://www.reddit.com/r/rust/comments/bcb3g0/mozilla_preparing_to_test_webrender_with/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mozilla 準備跟一些\"合格\"的Linux使用者測試 WebRender"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#paniclovecraft是一個庫在你的程式panic時會發一段廢文Read morehttps://www.reddit.com/r/rust/comments/bcdi4f/i_miss_the_lovecraft_quotes_on_panic_in_every/Read morehttps://github.com/Geal/lovecraft/blob/master/src/lib.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我錯過了 lovecraft 在過去panic的使用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm支援WASI (can run PHP, SQLite, Lua)更多後端(singlepass, Cranelift, LLVM)這是一個可以讓你在wasm裡面跑更多其它語言的程式,感覺以後wasm會更厲害Read morehttps://www.reddit.com/r/rust/comments/bch8oa/wasmer_030_released_wasi_support_can_run_php/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wasmer 0.3.0 出來了，"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tcpstream這是一個可以把多個文字訊息打包通過tcpstream傳送的庫Read morehttps://www.reddit.com/r/rust/comments/bcie2g/sendmmsg_transmit_multiple_messages_using_only/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sendmmsg 一次傳送多個訊息但只呼叫一次system call"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded給嵌入式開發者的福音Read morehttps://github.com/jamesmunns/postcard"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」Postcard 一個no_std 的序列化程式庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者今天說了一個智障的除錯故事，是因為他寫了一個C++程式然後他想寫成rust的  https://github.com/fizyk20/differential-geometry一開始測試運行結果是對的，結果發現比C++的慢50倍他就在想到底是為什麼，想到後面想放棄了他就想到這星期有一個黑洞影象被拍出來所以他也應該再努力一下他發現有個計算光子路徑的部份C++只跑了2000次而rust跑了2000000次足足多了1000倍，最後他發現了原因（计算公式里多了个零，这种错误Rust没法帮助你检测）https://github.com/fizyk20/numeric-algs/commit/e9f4f16a56ba148c30b736051d8392e036eed747也希望大家不要跟他一樣寫錯字"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"多餘的字，讓程式慢1000倍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#githubRead morehttps://www.reddit.com/r/rust/comments/bclqcb/ive_been_writing_gitpub_v010_a_small_cli_app_to/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-13 12:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gitpub 一個輔助人快速在 github, gitlab上傳專案的程式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#stable_rust该稳定版本包括如下变动：\n引入了cargo registries，此功能允许你指定crates.io之外发布的crate，甚至一些闭源的crate。\n文档测试支持?语法\n过程宏中的自定义属性#[attr()],#[attr[]], 和#[attr{}] 可以接受token流。之前的unrestricted_attribute_tokens Features。\nTryFrom和TryInto稳定\n弃用fn before_exec而使用unsafe fn pre_exec\n稳定了一些标准库API，比如Instant::checked_add/ Instant::checked_sub等\n支持extern crate self as foo;将当前crate的root导出为指定别名\n支持新的target：riscv64imac-unknown-none-elf 和 riscv64gc-unknown-none-elf，以及powerpc64-unknown-freebsd\n可以使用-C linker-plugin-lto启用链接器插件LTO优化, 使得rustc将Rust代码编译为LLVM bitcode，从而允许LLVM跨C / C ++ FFI边界执行LTO优化\n更多内容请看官方release notes。\nRead More\nRelease Note\nunrestricted_attribute_tokens features示例\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.34 稳定版发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mock\nRead More\nrust-mock-time-demo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在Rust测试中Mock时间"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#javascript #parser该文作者在之前分享了如何使用Rust实现一个基于状态机的高性能的JS词法分析器。这之后，又开始写系列文章分享他的心得。\nJavascript evaluator part 1: Lexing\nJavascript evaluator part 2: Parser and Basic evaluator\njavascript-es9-parser\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」JavaScript解析和求值"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ripgrep #atom使用Ripgrep极大地提升了Atom项目内查找的性能，在文件量很大的情况下尤为明显。不过需要专门通过设置使用Rip Grep选项手动打开。Read Morehttps://blog.atom.io/2019/04/09/atom-1-36.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Atom 1.36选用了ripgrep"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#kernel #hypervisororange_slicehttps://github.com/gamozolabs/orange_slice"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"orange_slice: 用于研究的确定性的虚拟机管理程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crossterm #terminalcrossterm用于跨平台的终端操作，可以与Tui-rs集成使用。\ncrossterm\nBook\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crossterm 0.9 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#reddit #stackoverflow该贴作者对这个结果做出了以下可能的解释：\n跨越了学习曲线的人真的都喜欢Rust\n开发人员喜欢新的技术，即使他们还没了解Rust，但他们认为应该重视它。（这个角度来看的话，排名第二的Python看上去就比较诡异）\nRust社区是一个非常友好的社区\nRust社区营销的比较好\n有许多C++开发者因为Rust的安全性而选择它\n到底是什么原因呢？这个话题下评论区讨论比较激烈。（我喜欢Rust，是因为Rust这门语言恰好符合我对理想编程语言的某些预期。你是什么原因喜欢Rust呢？）偶尔也看到一条额外信息：Apple也在使用Rust构建分布式文件系统，据说在在西雅图举行过一次小型演讲，试图招募相关人才，在网上还找不到相关信息。Read Morehttps://www.reddit.com/r/rust/comments/bc46lc/understanding_rusts_popularity_on_stack_overflow/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」如何解读StackOverflow上面Rust连续四年成为最受开发者喜欢语言的这一事实？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sonr #pub_sub #miosonr建立在mio之上的网络库，相比于Tokio来说，更加轻量。\nRead More\nsonr\n源码：pubsub\nsonr介绍\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Sonr构建pub/sub服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate #clichithttps://github.com/peterheesterman/chit"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"chit: 可在终端查询crate信息的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ip_apiip-api是一个免费（非商用）的第三方IP地理位置API服务。\nip-api\nip-api-cli\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编写的的ip-api命令行界面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#testtest_doublehttps://github.com/pcsm/test_double"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"test_double: 可以在测试中将一种类型替换为另一种类型的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#python #wasmpython-ext-wasmhttps://github.com/wasmerio/python-ext-wasm"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasmer: 可执行wasm二进制文件的Python库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#css_injection #security #html_injection\nsic\nHTML注入介绍\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-12 18:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sic: 顺序导入链，一个HTML/CSS脚本注入工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#macro本文不是宏教程，作者写这篇文章的目的就是为了让还没有使用过Rust宏的人，早点尝试一下宏。（真香预警）作者比较了Rust和其他语言（C/C++/Java）中的元编程，摘要：\nC宏和Cpp模板元编程。很容易引入难以发现的错误，并且会扰乱编译时间，在构建中引入不必要的复杂性。你是否见过错误使用模板而引发的编译器错误呢？\nJava注解。Java的注解功能很强大，可以在编译时使用，也可以在运行时执行，既可以用于代码生成，又可以拿来反射。Java中最受欢迎的Spring框架大量使用Java注解。但正因为如此，Java的注解功能导致你写的代码可能超越语言自身的语义，而更像是另外一种语言。而且通过注解实现的代码，调试起来也非常痛苦。\n那么Rust的宏是不是完全避免了上面的问题呢？并不是百分百的避免，但是Rust已经努力避免了常见的问题，并且可以发挥出Rust语言自身的优势。作者介绍了声明宏和过程宏的一些优势，并且在文章底部列出了一些学习宏的资料。Read Morehttps://happens.lol/posts/a-love-letter-to-rust-macros/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一封写给Rust宏的情书"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix-web #face_detection这是上次日报里报道过「使用tensorflow与rust人脸检测」文章作者的续篇。在这篇内容里，作者介绍了如何将上一篇文章的成果通过HTTP API来提供。并且作者使用了actix-web = \"1.0.0-alpha.4\"版本。在mtcnn库的actix-web分支里可以看到具体实现。这两篇文章是实践性很强的文章，建议大家跟着玩玩。\nRead More\n上篇文章人脸检测Rust库：mtcnn\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Actix Web进行人脸检测"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nom #peg #pest和pest类似，但它是基于nom实现的。nom-peghttps://github.com/rust-bakery/nom-peg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nom-peg: 基于nom实现的PEG解析器生成器工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#youtubeRead Morehttps://www.youtube.com/watch?v=Evc3T9Zk2pk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」深入WASM和WASI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#irc #boturl-bot-rshttps://github.com/nuxeh/url-bot-rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的IRC机器人"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#FFI #cross_platformMozilla工程师最新分享，将Rust实现的核心业务逻辑封装到一个中间层，然后通过新的共享策略，达到Web、iOS、Android三端共享。实施这个策略遇到的一个问题就是如何安全地使用FFI，并且还能与Rust的所有权良好地配合。因此该团队写了一个ffi-support库来帮助达成此目的。该库最初的实现方案是通过序列化为JSON字符串在FFI中传递。但是缺点是，JSON序列化和反序列化会很慢。最重要的问题是，Java中字符串编码是UTF-16-ish。在Kotlin中，必须反序列化每个数据结构，这个过程会可能会发生异常。最严重的问题是，没有返回JSON字符串，而是某个C指针，忘记更新Kotlin中或者ObjectiveC中的数据结构，导致严重的内存问题。值得庆幸的是，团队发现了使用Protocol BufferV2替代JSON，可以解决上面的问题。在Rust中直接使用prost库，可以通过Rust的宏生成非常干净的结构。而且，PB比JSON的性能高。\nRead More\nffi-support\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust开发跨平台组件的新策略"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nightly_to_stable本文是Seq团队写的。Seq是一个微服务诊断SaaS产品，它们的存储引擎是使用Rust实现的（应该未开源）。从Seq 5.1开始，迁移到了Stable Rust。整个迁移过程说是毫无痛苦。感兴趣的可以看看。（开发Rust产品需要依赖的features列表越来越少了，这是好事）Read Morehttps://blog.datalust.co/our-journey-from-rust-nightly-to-stable/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-11 14:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「经验之谈」从Nightly到Stable Rust迁移之旅"},"type":"text"}],"type":"title"}},]
