export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是 第一次  Rust Gamedev Meetup 的视频记录, 关注的同学可以观看下回放. 需要科学上网.油管视频https://www.youtube.com/watch?v=2L3w3UiEzAk&feature=youtu.be" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-11 19:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "第一次 Rust Gamedev Meetup 视频回放" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是 使用 Rust 构造一个反射系统 的第 3 部分,也是最后一部分.原文链接https://www.osohq.com/post/runtime-reflection-pt-3" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-11 19:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Building a runtime reflection system for Rust: Part 3" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "repr(transparent) 可以让类似 struct Foo(i32) 和 i32 有同样的内存分布方式. 他作用范围非常具体,只能有一个非 0 size 的字段.本文章介绍了如何使用 repr(transparent) 以及一些陷阱.原文链接https://jack.wrenn.fyi/blog/semver-snares-transparent/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-11 19:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust陷阱: repr(transparent)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个一个 float 解析库, 可以快速从字符串解析为 float. 性能看起来还不错.github地址https://github.com/aldanor/fast-float-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-11 19:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fast-float: 超级快的 float 解析库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是对于目前非稳定特性try trait的一个新设计的提议. 感兴趣的同学可以关注一下.原文链接https://github.com/rust-lang/rfcs/pull/3058--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-11 19:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "try_trait_v2: A new design for the ? desugaring" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Tower是一个模块化和可重用组件库，用于构建健壮的网络客户端和服务器。上一个版本 0.3.1 版本是 2020 年1月17发布的，新版本0.4.0是2021年1月7好发布的，这个版本包含了大量改动，包括使用了tokio 1.0，将所有的中间件转移到了 tower crate，改造，添加了中间件 API。不过这次变更并没有核心 Service 或者 Layer trait，所以新版本还是依赖着 tower- service 0.3 和 tower- layer 0.3，因此新版本是兼容使用这两个 crate 的库的。更多发布细节请移步下面的链接。Repohttps://crates.io/crates/tower/0.4.0Release Notehttps://github.com/tower-rs/tower/releases/tag/tower-0.4.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-10 23:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "时隔一年 tower 终于发布新版本啦" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者Twitter@Ameobea10在圣诞节期间做了一个调频合成器，它使用了webaudio, webassembly, wasm SIMD，是一个运行在浏览器中的纯 wasm 应用。点击下方链接观看演示视频。Read Morehttps://twitter.com/Ameobea10/status/1347605885971939329" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-10 23:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "100% webassembly 构建的调频合成器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust Playground vim 模式，可以通过输入 :w 回车运行编译，非常棒的使用体验。Read Morehttps://github.com/emilk/egui/blob/master/CHANGELOG.md#060---2020-12-26" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-10 23:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Playground vim 模式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://rustinblockchain.org/newsletters/rust-and-smart-contracts/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-10 23:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Blockchain newsletter #19" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust Search Extension发布了最新版，同时也突破了500个star，感谢大家的支持！这个版本主要功能如下：https://rust.extension.sh/\n\n! 搜索改成了docs.rs，!! 改成了crates.io。\n\n\n给Rust仓库的release页面增加了目录菜单。\n\n\n\nRust标准库文档页面和源码页面所有\"since\"和\"issue\"标签分别会链接到仓库的release页面对应的版本和GitHub对应的issue页。\n\n\n\n增加了两个新的command：\n\n:cargo - 查看所有常用的第三方cargo subcommand\n:release - 快速打开Rust仓库的release页面\n\n\n! 搜索改成了docs.rs，!! 改成了crates.io。给Rust仓库的release页面增加了目录菜单。Rust标准库文档页面和源码页面所有\"since\"和\"issue\"标签分别会链接到仓库的release页面对应的版本和GitHub对应的issue页。增加了两个新的command：\n:cargo - 查看所有常用的第三方cargo subcommand\n:release - 快速打开Rust仓库的release页面\n附上一张海报：详细更新日志：https://rust.extension.sh/changelog/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rust.extension.sh/changelog/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-08 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Search Extension 1.1.0发布【小编私货】" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n把pin-project这个crate替换成了pin-project-lite, 在--no-default-features的情况下大幅提高了编译速度\n增加了几个新的API方法\n\nstream::repeat_with\nStreamExt::unzip\nsink::unfold\nSinkExt::feed\n\n\n\nstream::repeat_with\nStreamExt::unzip\nsink::unfold\nSinkExt::feed\n链接：https://github.com/rust-lang/futures-rs/releases/tag/0.3.9" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/futures-rs/releases/tag/0.3.9" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-08 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "futures-rs 0.3.9 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Druid是一个原生Rust GUI库，支持Windows，macOS，Linux，之前是xi-editor的一部分。链接：https://www.reddit.com/r/rust/comments/ksgtk7/druid_v070/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/ksgtk7/druid_v070/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-08 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "druid 0.7 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这本书正在MEAP阶段，目前才更新了3章，感兴趣的同学可以看看。链接：https://www.manning.com/books/refactoring-to-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.manning.com/books/refactoring-to-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-08 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Manning的Rust新书《Refactoring to Rust》" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "链接：https://this-week-in-rust.org/blog/2021/01/06/this-week-in-rust-372/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2021/01/06/this-week-in-rust-372/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-08 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week In Rust 第372期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在又经过六周的迭代开发，Rust 1.49.0 现在已经发布了！大家可以通过以下命令更新：这个版本比较亮点的地方就是 aarch64-unknown-linux-gnu 编译目标已经到达了 Tier 1， aarch64-apple-darwin 和 aarch64-pc-windows-msvc 目标也达到了 Tier 2. 关于 Tier 的描述如下：\nTier 1 由官方团队提供最高级支持保证，不但会在每一次编译器改动时会在对应的平台上进行完整的测试，也会提供相应的预编译可执行文件。\nTier 2 保证能够编译以及提供预编译可执行文件，但是官方团队不会在对应的平台上进行完整的测试，所以可能会由 bug 或者不按预期工作。\nTier 3 理论上编译器支持，但是官方不提供任何保证\n更多新变化请查看 官方博客https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 20:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.49.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "直播连接https://live.bilibili.com/22671598" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 20:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust唠嗑室第16期 - TensorBase 技术分享" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这次翻译新增了 第八章-关于生态的叙述 （@EthanYuan) 以及 第九章 http服务器项目（@huangjj27), 欢迎来指正错误或贡献~https://github.com/EthanYuanlinkhttps://rust-lang.github.io/async-book/01_getting_started/01_chapter.html--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 20:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "异步书翻译更新啦~" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个系列中, 作者会通过 神经网络 和 遗传算法 制作一个 进化模拟器.作者首先会介绍 神经网络和遗传算法 是如何工作的, 然后会使用 Rust 来实现他们, 并且编译成 WebAssembly. 下图是一个预览图.原文链接https://pwy.io/en/posts/learning-to-fly-pt1/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 09:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rust 创建一个模拟器: part 1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "非官方好书系列, 再次安利! Rust Design Patterns Book.book 链接https://rust-unofficial.github.io/patterns/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 09:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Design Patterns Book" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "slotmap 提供了三种 map 的实现, SlotMap, HopSlotMap 和 DenseSlotMap.增加,删除,查询均为O(1)复杂度,而且额外开销非常低. 非常适合存储需要稳定和安全引用的 objects, 例如游戏中的 entities, graph 中的 nodes.github 地址https://github.com/orlp/slotmap" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 09:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "slotmap: 1.0 released" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文是 python 同学专用, 介绍了 python 日常中的错误处理以及如何在 rust 中达到类似效果和最佳实践.原文链接https://theomn.com/rust-error-handling-for-pythonistas/--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-05 09:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 错误处理: python 同学专用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Gartner 今天的一篇博文报道了“Rust”：近年来，Rust获得了很多粉丝。并且有充分的理由。Rust旨在成为满足系统编程需求的C ++的可靠替代品。阅读原文https://blogs.gartner.com/manjunath-bhat/2021/01/03/why-2021-will-be-a-rusty-year-for-system-programmers/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-03 16:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么2021年将成为系统程序员的Rust年？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Twitterhttps://twitter.com/AeroRust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-03 16:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "AeroRust：Rust 在航天方面的应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Psst 是一款GUI的快速Spotify客户端，不带Electron，内置Rust。Repohttps://github.com/jpochyla/psst" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-03 16:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Psst：使用Rust和Druid构建的第三方Spotify客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "万众期待的B站分段剪辑视频出来了🎉。另外，大会嘉宾的pdf在这个仓库里：rustcc/RustChinaConf2020ps:  够学1年了。Repohttps://github.com/rustcc/RustChinaConf2020" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-03 16:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "{福利}  RustChinaConf2020 资料打包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RustChinaConf2020 的视频已上传至油管啦~Recordings of Rust China Conf 2020 which took place from Dec. 26 2020 to Dec. 27 2020 in Shenzhen, China.YouTubehttps://www.youtube.com/playlist?list=PLBz3WXlKhG1LPrNXvQDOfn0Ta46CD41w6" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-03 16:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "欢迎在油管上订阅我们" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n\nNiko Matsakis，Esteband K 入职 Amazon\nNiko Matsakis 入职 Amazon 担任 Rust 团队的技术主管。\nNiko的博客链接: https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/\nEsteband K 入职 Amazon 研究 Rust 编译器和相关工具。\nTwitter 链接：https://mobile.twitter.com/ekuber/status/1345218814087053312\n\n\nPatrick Walton 入职 Facebook\nPatrick Walton 将领导 Facebook 的新 Rust 团队，致力于为 Rust 社区改善其编译器和生态。\nTwitter 链接：https://twitter.com/pcwalton/status/1345094455712333824\n\nNiko Matsakis，Esteband K 入职 AmazonNiko Matsakis 入职 Amazon 担任 Rust 团队的技术主管。Niko的博客链接: https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/Esteband K 入职 Amazon 研究 Rust 编译器和相关工具。Twitter 链接：https://mobile.twitter.com/ekuber/status/1345218814087053312Patrick Walton 入职 FacebookPatrick Walton 将领导 Facebook 的新 Rust 团队，致力于为 Rust 社区改善其编译器和生态。Twitter 链接：https://twitter.com/pcwalton/status/1345094455712333824" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-02 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 社区知名开发者陆续入职巨头科技公司" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Veloren 是用 Rust 开发的多玩家 voxel RPG。 它的灵感来自诸如《魔方世界》，《塞尔达传说：旷野之息》，《矮人要塞》和《我的世界》等游戏。100th博客文章链接：https://veloren.net/devblog-100/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://veloren.net/devblog-100/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-02 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Veloren 发布其第100期开发博客" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rapier 是一个完全免费的开源物理引擎，可用于游戏，动画和机器人，完全使用 Rust 编程语言编写。 它着重于性能，可移植性和跨平台确定性（可选）。Rapier 团队希望到2021年年底，Rapier 具有游戏物理引擎所期望的所有功能，实现流行的 C++ 物理引擎，比如：Box2d，Bullet Physics 和 PhysX 等同等的功能， 但是不打算在 GPU 上支持运行物理仿真。2021 路线图链接：https://www.dimforge.com/blog/2021/01/01/physics-simulation-with-rapier-2021-roadmap/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.dimforge.com/blog/2021/01/01/physics-simulation-with-rapier-2021-roadmap/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-02 20:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rapier 2021的路线图" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是2020年第一期日报，Rust日报小组祝大家新的一年身体健康，工作顺利，Rust学得越来越好！2021年也是Rust很关键的一年，我们也将会迎来新的2021 Edition：Rust Foundation, Const Generic等等，不出意外的话应该不会像2018版那样拖到12月才发布，让我们一起期待Rust 2021版本的到来！" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-01 23:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 1.49版于2020年最后一天（12月31号）正式发布。比较值得注意的更新如下：\naarch64-unknown-linux-gnu升级为Tier 1\naarch64-apple-darwin和aarch64-pc-windows-msvc得到Tier 2级别的支持\n单元测试中线程中的print输出将会被捕获，默认不会在控制台打印出来了。如果不需要捕获，需要添加--nocapture参数。\nunion支持impl Drop trait了\n支持使用ref关键字让解构的字段不再被move而是被借用。\n#[derive(Debug)]\nstruct Person {\n    name: String,\n    age: u8,\n}\n\nlet person = Person {\n  name: String::from(\"Alice\"),\n  age: 20,\n};\n\n// `name` is moved out of person, but `age` is referenced.\nlet Person { name, ref age } = person;\nprintln!(\"{} {}\", name, age);\n\n\n链接：https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-01 23:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.49发布！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前Windows XP依然是Tier 3级别的支持，编译器团队计划放弃对Windows XP的支持。链接：https://github.com/rust-lang/compiler-team/issues/378" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/compiler-team/issues/378" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-01 23:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust将不再支持Windows XP" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "辛苦Mike将Rust China Conf的视频合集整理到了B站，没有看直播的同学可以在这个链接观看。另外还没填写大会问卷的同学，希望花两分钟时间帮忙填写一下问卷，谢谢大家！链接：https://www.bilibili.com/video/BV1Yy4y1e7zR?p=1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.bilibili.com/video/BV1Yy4y1e7zR?p=1" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-01-01 23:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustChinaConf2020-首届中国Rust大会合集" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "2020最后一天日报！希望各位rust同好在新的一年里技术更上一层楼，也希望新的一年里rust的岗位越来越多！新的一年，万事顺遂。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-31 22:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新年祝愿" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "1月4日起，Niko Matsakis开始在亚马逊担任 Rust 团队的技术主管。Read More: https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://smallcultfollowing.com/babysteps/blog/2020/12/30/the-more-things-change/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-31 22:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Niko Matsakis 去了亚马逊" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RAUI 的灵感来自 React declarative UI composition 和 UE4 Slate widget 组件系统。目前已经有了ggez后端的示例：Github: https://github.com/PsichiX/raui/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/PsichiX/raui/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-31 22:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "raui - 与渲染器无关的ui库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个外国小哥建的rust工作招聘版，你可以在这里找到rust工作，也可以发布招聘，目前大部分都是国外公司。rustjobshttps://www.rustjobs.dev/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-31 22:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustjobs.dev" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "截至日报发出时，还没有合并。Read More: https://github.com/rust-lang/compiler-team/issues/378" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/compiler-team/issues/378" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-31 22:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust将取消对windows xp的官方支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "371。Read More：https://this-week-in-rust.org/blog/2020/12/30/this-week-in-rust-371/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2020/12/30/this-week-in-rust-371/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-31 22:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 371" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Trust-DNS 是基于 Rust 编程语言的 DNS 客户端、服务端以及解析器。https://github.com/bluejekyll/trust-dns" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/bluejekyll/trust-dns" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-30 16:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Trust-DNS 发布 0.2 版本，支持 Tokio 1.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Isahc 是 Rust 版的 HTTP 客户端https://stephencoakley.com/2020/12/29/isahc-1.0-and-retrospective" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://stephencoakley.com/2020/12/29/isahc-1.0-and-retrospective" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-30 16:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Isahc 1.0 发布以及回顾" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 1.49 预发布版本已经准备好测试了，可以通过以下命令试用：https://blog.rust-lang.org/inside-rust/2020/12/29/1.49.0-prerelease.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2020/12/29/1.49.0-prerelease.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-30 16:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.49 预发布测试，欢迎参与" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "使用此工具，可以将命令行操作记录生成为 gif 动图https://github.com/sassman/t-rec-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/sassman/t-rec-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-30 16:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "t-rec: 极速命令行记录工具，现在支持 Linux" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "感谢各位参加由Rustcc主办的首届Rust中国开发者大会。本次大会的回放录像已经在Rustcc论坛公布。回放地址https://rustcc.cn/article?id=471b7ca6-aa2e-4ea5-b692-6757adc4778a" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-29 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中国开发者大会回放" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "知名的Rust语言静态分析软件发布了此次更新公告。现在，苹果M1处理器上可以运行rust-analyzer。对可模式匹配的结构体，现在rust-analyzer提供匹配的自动补全功能。VSCode已经支持对Rust语言的TextMate语法高亮标准，为了简化实现，rust-analyzer将使用VSCode提供的标准。当重命名Rust文件时，rust-analyzer会分析它所在的模块，一并命名父级文件中的模块名称。另外，本次更新支持了常量语句块的语法分析。本次更新还包括若干项修复和内部性能改进。更新公告https://rust-analyzer.github.io/thisweek/2020/12/28/changelog-57.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-29 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust-analyzer发布第五十七次更新公告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本篇博客中，作者分析了Tokio 1.0版本和0.2版本的接口代码差异，以及对代码风格的影响。在新版本下，许多Tokio结构体的操作不再要求自身的可变借用，这能为并发代码减少包装的层数。另外，作者还分析了异步询问函数的改变，以及给出了它对未来接口代码修改的期望。博客文章https://leshow.github.io/post/udp_tokio_1_0/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-29 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "《Tokio 1.0 接口概览》" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "PROST!是一个纯Rust语言的协议缓冲区（ProtoBuf）实现。它对proto2和proto3有良好的支持，使用Apache-2.0协议在GitHub上开源。发布页面https://github.com/danburkert/prost/releases/tag/v0.7.0--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-29 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Prost项目发布0.7版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一篇详细讲解 rust 中闭包的文章. 不仅从闭包的使用,更是从闭包的原理来更深入的理解闭包.原文链接https://zhauniarovich.com/post/2020/2020-12-closures-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-28 20:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中的闭包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是 Rust 代码仓库通过可视化的方式展示这十年变化的视频. 3382 为 contributors, 交织出 Rust 的辉煌.视频链接https://www.visualsource.net/repo/github.com/rust-lang/rust.git" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-28 20:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 代码仓库十年之旅" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#![feature(min_const_generics)] 目前已经合并到了 master 分支, 并且将于 Rust 的 1.51 版本稳定.相关的 github pull requesthttps://github.com/rust-lang/rust/pull/79135" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-28 20:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "min_const_generics 特性将于 1.51 稳定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本来通过几个例子讲述 Rust 中的一些工效学概念. 例如我们日常使用的 str.clone() 调用过程中, Rust 是如何帮助我们自动借用或者解引用的.原文链接https://www.fpcomplete.com/blog/cloning-reference-method-calls/--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-28 20:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中 Clone 一个引用以及方法调用语法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Stronghold 是一个开源软件库，最初是为了保护 IOTA Seeds 而建立的，但可用于保护任何数字机密。 它是用于加密的安全数据库，可确保永远不会泄露秘密（如私钥）。 它提供了自己的对等通信层，因此不同的实例可以使用最新的噪声协议安全地进行通信。stronghold 将成为新的 IOTA Firefly 钱包的安全基础。Read Morehttps://blog.iota.org/stronghold-alpha-release/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-27 23:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Stronghold alpha release" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeddedRead Morehttps://blog.cecton.com/posts/rust-and-riscv/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-27 23:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【文章】嵌入式和 RISC-V" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gamedevRead Morehttps://github.com/emilk/egui/blob/master/CHANGELOG.md#060---2020-12-26" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-27 23:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "EGUI 发布 0.60 版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #windowsRepohttps://github.com/tandasat/kraft_dinner/tree/main/kraft_dinnerRead Morehttps://standa-note.blogspot.com/2020/12/experiment-in-extracting-runtime.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-27 23:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 开发 Windows 驱动程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRead Morehttps://github.com/Chubek/RustMLEtudes" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-27 23:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rust 实现 Logistic 回归" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "今天，Rust China Conf第一日结束。2020-12-27，Rust China Conf继续为您带来精彩内容。内容包括但不限于以下内容：\nRust可信编程在华为\nRust 2021计划\nRust数值计算生态盘点\n本次大会演讲主题涵盖广泛，既有大厂的应用实践、也有小公司的实践、也会有中国的社区开源项目，也会有中国高校的科研项目实践。讲者既有在一线城市工作的开发者，也有在二线城市工作的开发者，更有学校的研究人员。详情请见文章链接。文章链接，https://2020conf.rustcc.cn/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://2020conf.rustcc.cn/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-26 21:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust China Conf精彩继续" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "为什么要写这个大部分rustaceans（包括我）从我们的第一个hello world程序开始使用std库。不过，在某些情况下，我们需要将代码部署到裸机环境中，这也是Rust的一个非常重要的特性。没有POSIX操作系统的支持，我们无法使用std库，而且它通常会让人们恐慌，所以我写这篇文章来澄清对Rust no-std的误解。文章链接，https://justjjy.com/Rust-no-std" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://justjjy.com/Rust-no-std" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-26 21:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust no-std FAQ" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "出于好奇，我编写了一个mongo数据库同步器，它可以从一个数据库同步到另一个数据库。当我完成这项工作时，我尝试用mongodump/mongorestore对对它进行基准测试。令人惊讶的是，mongodump比我的假设要快得多。文章链接，https://windsoilder.github.io/why_mongodump_is_fast.htmlhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://windsoilder.github.io/why_mongodump_is_fast.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-26 21:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么mongodump很快" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "为期两天的第一届Rust China Conf明天将于深圳举办，届时将会有接近300位来自全国各地的Rust爱好者参加，两天日程超过30个Topic，干货满满。另外，大会举办前最后时刻，收到了 Niko 的视频！想知道Niko说了什么？ 明天会场见！不能到会场的朋友，可以通过直播来看：#RustChinaConf2020 @ChinaRust大会直播地址：\nCSDN\n26 日： https://live.csdn.net/room/u012067469/3VT3jORs27 日： https://live.csdn.net/room/u012067469/51UUkkjG-思否https://segmentfault.com/area/rustconf-2020\nB站\nhttps://live.bilibili.com/22671598" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://live.bilibili.com/22671598" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-25 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "第一届Rust China Conf明天正式开幕" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Redox是Rust编写的操作系统。Unix/Linux的哲学是：一切皆文件。而Redox的哲学是：一切皆URL。一切皆URL是Redox设计中的重要原则。今天终于发布了0.6版，更新内容包括：完全重写内核内存管理器rmm，新的包格式pkgar，比tar格式在创建和解压时更快，重新设计cookbook等等。链接：https://www.redox-os.org/news/release-0.6.0/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.redox-os.org/news/release-0.6.0/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-25 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Redox OS 0.6.0发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "前几天社区日报曾经提到过 Tokio 1.0 版本，现在它官宣发布啦！Tokio 它是 Rust 编程语言的异步运行时。Tokio 提供了编写可靠的网络应用程序所需的构建基块，而不会影响速度。 它带有用于TCP，UDP，计时器，多线程，窃取工作的调度程序等的异步 API。多年来，我们很高兴看到我们的用户创造了惊人的东西。 例如，Discord 使用 Tokio 将尾部延迟降低5倍。 Fly.io 发现，使用 Tokio，他们可以毫不费力地满足其性能要求，并专注于为客户提供功能。 对于 Zcash 基金会而言，在 Tokio 上进行构建可以使他们设计出耐滥用的 API。 对于 AWS，他们的 Lambda 团队使用 Tokio 实施更可靠，更灵活的服务。更多请看 Tokio 官博：https://tokio.rs/blog/2020-12-tokio-1-0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tokio.rs/blog/2020-12-tokio-1-0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tokio 1.0 版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "得益于 Tokio 1.0 版本发布， hyper v0.14 版本也更新了。在此版本更新中，hyper 功能将变得可以自主选择\nhttp1\nhttp2\nclient\nserver\n这些功能涵盖了 hyper 的最大部分及其协议实现。现在，可以启用或禁用这些功能，您可以大大减少编译和包含在 hyper 中的代码量。例如，如果您的应用程序始终与 HTTP/1 服务器通信，则可以仅启用 http1 和客户端功能。或 Tonic（Rust gRPC库），因为它基于 HTTP/2，因此它可以禁用 Hyper 中的 HTTP/1 代码，仅启用 http2 客户端和服务器。地址：https://github.com/hyperium/hyper/releases/tag/v0.14.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/hyperium/hyper/releases/tag/v0.14.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "hyper v0.14 版本更新" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Neolink是一个小巧的程序，充当 Reolink IP 摄像机和常规 RTSP 客户端之间的代理。某些摄像机（例如Reolink B800）不实现 ONVIF 或 RTSP，而是使用仅与他们的应用程序和NVR兼容的专有“Baichuan”协议（任何使用“port 9000”的摄像机都可能会使用此协议）。Neolink 允许您使用Shinobi或 Blue Iris 等 NVR 软件来接收来自这些摄像机的视频。不需要 Reolink NVR，并且摄像机未修改。更多请看项目地址:https://github.com/thirtythreeforty/neolink" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/thirtythreeforty/neolink" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "neolink 项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "经过将近一个月大刀阔斧的迭代，Bevy 发布了 v0.4 版本，包括以下有意思的改动：\n支持 WebGL2 渲染，可以直接在浏览器上玩游戏啦\n支持跨端处理主函数依赖 #[bevy_main] 过程宏，加上就可以自动地检测所需平台的依赖了\n即时阴影宠加载\nECS 系统的若干优化， 包括不限定新建系统中的 Commands,Res/ResMut,Query 参数之间的顺序\n更多资讯请前往 Bevy 官网 - v0.4发布啦~https://bevyengine.org/news/bevy-0-4/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-22 21:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bevy v0.4 发布了！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Crypto2 在往期的日报也有报道过，但是这次附上了极速的测试结果：(x86_64)https://github.com/shadowsocks/crypto2更多详情请 查看 这里https://rustcc.cn/article?id=a1c83235-1a92-4b0c-b8e1-c050bc1f2793" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-22 21:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "“银河系最快”的密码库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "哪种语言更好呢? Rust 还是 Go ? 下一个项目应该用哪种语言, 以及为什么要使用他? 如果来对比这两种语言? 他们的共同点是什么? 不同之处呢?带着这些问题, 本文从多个角度对比了 Rust 和 Go.原文链接https://bitfieldconsulting.com/golang/rust-vs-go" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-21 20:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust vs Go" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一本描述如何使用 Rust 和 WebAssembly的书.原文链接https://rustwasm.github.io/book/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-21 20:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Book: Rust and WebAssembly" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前, curl 中关于 Hyper 的支持已经合并了最初的 10 个 commits 到 master 分支. 现在想使用 master 分支来体验带 Hyper 的 curl,就可以直接使用 master 分支进行编译了.curl github wikihttps://github.com/curl/curl/wiki/Hyper" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-21 20:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Hyper 的支持 已经合并到了 curl 的 master 分支" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RustFFT 是一个 FFT(快速傅里叶变换)的 Rust 库, 目前作者发布 5.0.0-experimental.1, 5.0 相比 4.0 版本有巨大的性能提升,并且在性能测试中击败了 FFTW 库(一个 C 语言的同类型库).github地址https://github.com/ejmahler/RustFFT" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-21 20:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustFFT 5.0.0-experimental.1 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是 使用 Rust 创造一门语言的最新一期. Part 18: 错误.原文链接https://arzg.github.io/lang/18/--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-21 20:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rust 创造一门语言, Part 18: 错误" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "tokio 1.0 将于今年年底发布，算起来也没几天了，小伙伴敬请期待吧。Roadmaphttps://github.com/tokio-rs/tokio/issues/2718" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-20 23:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tokio 1.0 即将发布！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "《 Rust in Action》是一本针对任何语言背景的中级程序员的书籍，这些程序员对通过项目工作来学习Rust和/或系统编程感兴趣。Bookhttps://www.manning.com/books/rust-in-action" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-20 23:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust in Action MEAP v15发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "C19协议的核心是在一组分布式服务之间共享状态，处理获取数据并使其在本地可用以供服务使用。由于其分布式的特性和较低的资源占用，您可以以低成本获得冗余，鲁棒性和性能。C19协议允许人们轻松地将c19代理程序附加到Pod中的应用程序，并使该c19代理程序成为共享相同数据（状态）的更宽泛的c19集群的一部分。这意味着该数据可在应用程序本地使用。该项目设计为可扩展的，允许不同的配置共享状态并与应用程序通信。Reophttps://github.com/c19p/c19" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-20 23:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust实现的C19协议" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Lanpeng" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Quake是360网络安全响应中心（360-CERT）自主研发设计的全网空间测绘系统。敲重点👉 Quake CLI命令行工具 是用 Rust 写的Repohttps://github.com/360quake/quake_rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-20 23:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Quake：360网络空间测绘系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是 Niko 从个人角度对 2020 的年度总结，其中回顾了他这一年参与的各种计划，有效的和无效的，以及其对于明年的意义。TL;DR\n流程与治理\n\n重大变更流程帮助编译器团队将更多时间用于设计\nLang团队的项目提案有希望，但是仍在进展中WIP\nLang团队的待办事项Bonanza很棒，应该继续\n我认为\"基金会对话\"(The \"Foundation Conversation\")是一个有趣的模版\n基金会非常令人兴奋\n\n\n技术工作\n\n从事RFC 2229（“不相交闭包捕获”）的小组很棒\nconst泛型的MVP很棒，我们应该做更多\nPolonius的Sprint是一个很好的模版，我们需要更多的Sprint\nChalk项目和共享类型库的设计\nffi-unwind进展\nNever类型稳定的进展\n异步Rust的进展\n\n\n\n重大变更流程帮助编译器团队将更多时间用于设计\nLang团队的项目提案有希望，但是仍在进展中WIP\nLang团队的待办事项Bonanza很棒，应该继续\n我认为\"基金会对话\"(The \"Foundation Conversation\")是一个有趣的模版\n基金会非常令人兴奋\n\n从事RFC 2229（“不相交闭包捕获”）的小组很棒\nconst泛型的MVP很棒，我们应该做更多\nPolonius的Sprint是一个很好的模版，我们需要更多的Sprint\nChalk项目和共享类型库的设计\nffi-unwind进展\nNever类型稳定的进展\n异步Rust的进展\n原文链接，http://smallcultfollowing.com/babysteps/blog/2020/12/18/looking-back-on-2020/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "http://smallcultfollowing.com/babysteps/blog/2020/12/18/looking-back-on-2020/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-19 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Niko的2020年度总结" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "此 crate 主要用于以极其简单的方式，从共享对象文件中加载新的函数定义。主要功能包括：线程安全，类型安全，适用于任何签名的函数，命名空间。示例：Github链接，https://github.com/Shizcow/hotpatch" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Shizcow/hotpatch" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-19 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Hotpatch" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Wasm-2048，是用Rust（Yew）实现了著名的2048游戏，并编译为WASM。Github链接，https://github.com/dev-family/wasm-2048在线 Demo 链接，https://2048.dev.family/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://2048.dev.family/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-19 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasm-2048" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个Github仓库，一些常用算法和数据结构的Rust实现，其中大多数基于William Fiset的 Java 实现：https://github.com/williamfiset/Algorithms。Github链接，https://github.com/TianyiShi2001/Algorithmshttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/TianyiShi2001/Algorithms" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-19 21:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用 Rust 实现的一些算法和数据结构" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "tab是一个类似于tmux或screen的终端复用器，作者尝试过tmux和screen之后依然觉得有不满意的地方，于是使用Rust自己写了一个。作者写了两篇博客介绍他为啥要重新造轮子，以及怎样使用Rust的async + actor模型 + tokio实现tab的。链接1：https://implaustin.hashnode.dev/why-i-decided-to-write-a-terminal-multiplexer-part-1链接2：https://implaustin.hashnode.dev/how-to-write-a-terminal-multiplexer-with-rust-async-and-actors-part-2Github:https://github.com/austinjones/tab-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/austinjones/tab-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-18 15:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tab-rs - Rust实现的Terminal Multiplexer" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇博客介绍了如何在no_std环境下构建自己的异步Mutex和单管道Oneshot，注释非常详细，值得学习。链接：https://tweedegolf.nl/blog/50/build-your-own-async-primitive" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tweedegolf.nl/blog/50/build-your-own-async-primitive" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-18 15:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Build your own async primitive" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "GTK 4.0 于12月16号正式发布，带来了很多新特性，gtk4-rs是GTK4最新的rust绑定。GTK 4.0 部分更新亮点：\n新的 widget 小部件以及对现有元素的重新设计\n集成媒体播放支持\n改进 GPU 加速功能（比如使用新的 Vulkan 渲染器）\n更好的 macOS 支持\n改进数据传输功能\n对着色器的重大改动\nVulkan 之外的 OpenGL 渲染改进\n更好的 Windows 支持\n博客：https://blog.gtk.org/2020/12/16/gtk-4-0/Github: https://github.com/gtk-rs/gtk4-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/gtk-rs/gtk4-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-18 15:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gtk4-rs - GTK4的rust绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "链接：https://github.com/flip1995/rust-clippy/blob/roadmap/doc/roadmap-2021.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/flip1995/rust-clippy/blob/roadmap/doc/roadmap-2021.md" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-18 15:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Clippy Roadmap 2021" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "之前社区征集的问卷调查出结果了。Read More: https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 2020问卷调查结果出炉" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "txtai是一个AI驱动的搜索引擎，这个github代码库包含了该引擎api的rust绑定。Github: https://github.com/neuml/txtai.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/neuml/txtai.rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "txtai - 一个AI驱动的搜索引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Lombok是java中一个减少样板代码的包，lombok-rs是该包的rust复刻，已经实现了：https://projectlombok.org\n@Getter - #[derive(Getter)]\n@Setter - #[derive(Setter)]\n@EqualsAndHashCode - #[derive(EqualsAndHashCode)]\n@ToString - #[derive(ToString)]\n@Data - #[derive(Data)]\n@NoArgsConstructor - #[derive(NoArgsConstructor)]\n@AllArgsConstructor - #[derive(AllArgsConstructor)]\n@Builder - #[derive(Builder)]\nGithub: https://github.com/sokomishalov/lombok-rs测试用例: https://github.com/sokomishalov/lombok-rs/blob/master/tests/tests.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/sokomishalov/lombok-rs/blob/master/tests/tests.rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Lombok - rust版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "1.SEQUOIA PGP 发布1.0版本Read More: https://sequoia-pgp.org/blog/2020/12/16/202012-1.0/2.minus 发布2.0版本Read More: https://github.com/arijit79/minus/blob/main/CHANGELOG.md#v201-2020-12-16" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/arijit79/minus/blob/main/CHANGELOG.md#v201-2020-12-16" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "crate重要版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Raph Levien也就是piet-gpu的作者，最新的blog里有提到对rust的一些看法。Read More: https://raphlinus.github.io/personal/2020/12/16/an-old-new-adventure.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://raphlinus.github.io/personal/2020/12/16/an-old-new-adventure.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Raph Levien 大神最新的blog" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是第十六部分，已经讲到了重构。Read More: https://arzg.github.io/lang/16/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://arzg.github.io/lang/16/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用rust编写一门编程语言系列又更新了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Bevy代码库最近的一个PR（https://github.com/bevyengine/bevy/pull/1074）将之前已经改动的system写法又改了回去：这个PR提到的议题评论内附带的rust_play.zip（https://github.com/bevyengine/bevy/issues/1032#issuecomment-744973676）文件很有趣，基本上是@cart大佬写bevy时打的一些草稿，以及对选择取舍的一些看法。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/bevyengine/bevy/issues/1032#issuecomment-744973676" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bevy" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个使用macroquad游戏引擎开发的wasm小游戏，作者十分推介wasm开发者去体验macroquad（https://github.com/not-fl3/macroquad）。Play: https://unic0rn9k.gitlab.io/mr-calculator/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://unic0rn9k.gitlab.io/mr-calculator/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "血腥计算器 - macroquad 写的小游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "github：https://github.com/rust-lang/rust-forge网站：https://forge.rust-lang.org/index.htmlBy @Rust大闸蟹" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "对Rust使用者有用的信息" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "369。Read More：https://this-week-in-rust.org/blog/2020/12/16/this-week-in-rust-369/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2020/12/16/this-week-in-rust-369/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-17 19:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 369" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://youtu.be/J7Aosp1Uauo" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://youtu.be/J7Aosp1Uauo" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-16 22:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【视频】OSO 如何为 Rust 构建运行时反射系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "和 BSON 一样，是一种二进制 JSON 数据格式。具有零依赖、no_std 支持、WASM 支持等特性。性能比较：使用实例：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-16 22:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "NoProto: 比 BSON 快 10 倍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "基于 BoringSSL，难以被滥用，符合开发者使用习惯并且性能优异。https://github.com/google/mundane" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/google/mundane" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-16 22:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Mundane: google 出品 Rust 密码学库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-16 22:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "FFI-Safe 生态：瘦 Trait 对象(Thin Trait Objects)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详细代码：https://github.com/signalapp/ringrtc/blob/master/src/rust/src/core/group_call.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/signalapp/ringrtc/blob/master/src/rust/src/core/group_call.rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-16 22:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "隐私聊天 APP Signal 使用 Rust 完成群组通话功能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 的 lib 团队正在考虑提升 std::sync 模块, 有可能通过以下方式, 例如切割为多个模块, 同时对 API 做一些改变. 其中一个要改变的 API 可能就是大家呼声较高的 non-poisioning 的 Mutex 和 RwLock 的实现.为了能够以最好的方式达到这个效果,他们做了一份关于 Lock poisoning 的调查问卷. 感兴趣的同学可以填写一下.原文链接https://blog.rust-lang.org/2020/12/11/lock-poisoning-survey.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-14 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Lock Poisoning 调查问卷" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一片非常详尽的调试指南, 但是目标不是我们笔记本或者服务器, 而是 PineCone BL602.原文链接https://lupyuen.github.io/articles/debug" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-14 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 VScode 和 GDB 在 PineCone BL602 上进行调试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "deps.rs 是一个可以检测你 crate 中有多少过期依赖的服务. 你可以在你的项目中加入 Badges, 以达到下面的效果.其次,你还可以访问他们的网站,来查看具体一个 crate 是否有过期的依赖.github地址https://github.com/deps-rs/deps.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-14 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "deps.rs 服务恢复了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是Crust of Rust作者的最新一系列视频. 在这一系列中, 作者会带领大家深入到 Unsafe Rust中.本视频是这一系列的第一章, 附该视频的关键时间节点:\n0:00:00 About this new series\n0:01:48 left-right and evmap\n0:06:31 Expressing the problem in code\n0:15:28 Why is aliasing a Box not okay?\n0:19:09 Aliasing Box with MaybeUninit\n0:39:48 Dropping aliases\n0:55:15 The cast is unsound\n1:00:45 Making the cast sound\n1:10:47 Q&A\n1:26:43 Unsoundness from non-determinism\n1:28:25 More Q&A\n1:35:14 Outroduction\n油管地址https://www.youtube.com/watch?v=EY7Wi9fV5bk" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-14 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "The Unsafe Chronicles: Exhibit A: Aliasing Boxes" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "chromiumoxide 提供了 high-level 控制 Chorme 或者 Chromium 的能力, 几乎支持所有的 DevTools Protocal 协议中的类型. 通过该 crate, 可以轻松启动或者连接到到一个 headless 或者 non-headless 的 Chrome 或者 Chromium 实例.可以非常方便的结合 Chrome 的 DevTools 来做一些 Rust 的相关工具, 如性能调试工具等.github地址https://github.com/mattsse/chromiumoxide--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-14 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "chromiumoxide: 通过 DevTools Protocal 控制 chrome/chromium" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm #chromedevtool重磅，Chromedevtool 团队发布 wasm 应用调试工具，为基于 esmcripten 编译的 wasm 的应用提供良好的调试体验。Read Morehttps://developers.google.com/web/updates/2020/12/webassembly" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-13 21:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ChromeDevTool调试Esmcripten webassembly应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#web@adrian_twarog 发布了 web development 2021，作者已经连续多年发布Web开发下一年的预测，下面是2021年web开发的主要亮点主要包括：https://twitter.com/adrian_twarog\n\nSingle-page Apps  单页面应用\n\n\nProgressive Web Apps (PWA)  渐进web应用\n\n\nArtificial Intelligence Development  智能开发\n\n\nWebAssembly\n\n\nVoice Search and Navigation 语音搜索和导航\n\n\nNative Apps will dominate the market\n\n\nMotion design UI\n\nSingle-page Apps  单页面应用Progressive Web Apps (PWA)  渐进web应用Artificial Intelligence Development  智能开发WebAssemblyVoice Search and Navigation 语音搜索和导航Native Apps will dominate the marketMotion design UIRead Morehttps://twitter.com/adrian_twarog/status/1338070297610575875" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-13 21:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Website Development 2021" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRead Morehttps://smallcultfollowing.com/babysteps/blog/2020/12/11/rotating-the-compiler-team-leads/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-13 21:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 团队leader轮换" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust在IntelliJ Rust中使用 Rust nightly 的特性时，如果忘记加 #![feature()]，编辑器会提示一个 quickly fix 添加上确实的 attribute。Read Morehttps://twitter.com/intellijrust/status/1336638020288737282" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-13 21:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "IntelliJ Rust 新特性" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者使用WebAssembly和Rust给Node.js应用带来12倍到15倍的提升。Read Morehttps://twitter.com/mnt_io/status/1336570327338520576" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-13 21:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么使用WebAssembly和Rust能给Node.js带来性能上的提升" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 官方团队 | Wesley Wiser 将出任 Rust 编译器团队 co-Leader昨天Niko在其博客上宣布，Wesley Wiser（https://github.com/wesleywiser）将出任编译器团队新的Co-leader。那么编译器团队的Co-leader，将由「Niko （https://github.com/nikomatsakis）和 Felix（https://github.com/pnkfelix）」变更为「Wesley Wiser 和 Felix」。之前 Niko 同时担任语言设计团队 Leader 和 编译器团队 Co-leader，现在 Niko 卸任编译器团队的Co-leader 角色，将专注于 语言设计团队 的工作，当然也会推动编译器团队中他还未完成的一些工作，比如 Chalk 。Rust 不仅仅是一门优秀的开源语言，它本身也是一个优秀的开源组织。 Niko 在博客表示，Co-leader 的轮换制度，在未来会成为常态。这也是 Rust 团队对开源治理的一种探索吧。文章链接，https://smallcultfollowing.com/babysteps/blog/2020/12/11/rotating-the-compiler-team-leads/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://smallcultfollowing.com/babysteps/blog/2020/12/11/rotating-the-compiler-team-leads/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Wesley Wiser 将出任 Rust 编译器团队 co-Leader" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个高性能DNS服务器，支持自由式路由方案，内置DoT/DoH功能。文章链接，hhttps://www.reddit.com/r/rust/comments/kbmuw0/dcompass_a_highperformance_dns_server_with/Github 链接，https://github.com/LEXUGE/dcompass" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/kbmuw0/dcompass_a_highperformance_dns_server_with/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dcompass" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "你听过/用过Webpack，Bable么？想了解他们背后的基本思想吗？在这篇博客文章中，我将创建Javascript bundler，并演示如何在这里利用像Bable这样的东西。但我们不会用\"Bable\"。在Rust生态系统中，我们有我们自己的，叫做swc。Github 链接，https://kakoc.blog/blog/myox-js-bundler/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://kakoc.blog/blog/myox-js-bundler/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "MYOX: Javascript打包器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个Hackernews的克隆，使用Prism, Rust and Actix-web构建。使用Hackernews REST API构建。灵感来自hn.svelte.dev公司。Github 链接，https://github.com/kaleidawave/hackernews-prismhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/kaleidawave/hackernews-prism" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Hackernews Prism" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "dhat是《Rust性能之书》作者新发布的crate，帮助大家只用几行代码就可以监控rust程序的堆内存使用情况。它提供了两种监控方式：\nheap profiling\n\nad hoc profiling\n运行之后分别会生成dhat-heap.json 或 dhat-ad-hoc.json两个json文件，需要使用Valgrind来查看。链接：https://docs.rs/dhat/0.2.0/dhat/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://docs.rs/dhat/0.2.0/dhat/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 16:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dhat - 监控你的Rust程序堆内存使用情况的crate" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rust-analyzer的作者写了一篇文章讲了如何监控Rust程序内存使用情况的几种方法。链接：https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 16:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Measuring Memory Usage in Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "微软Azure的 DeisLabs 团队在去年使用 Rust 开发了 Krustlet 概念验证型项目，基于 wasmtime 实现的 wasm-wasi 版的 Kubelet，实现了在K8S中运行 wasm 负载。一年后该团队写这篇文章，总结了 Rust 的Good、Bad和Ugly 三方面。Good：\ntraits： 帮助你设计可扩展的API\n第三方库 serde：超优秀\n错误处理、Option 和 迭代器\nEnum的表现力和便利性\n宏\nCargo\n强制性的 Unsafe 标记不安全的边界\nBad：\n生态系统中crate的文档，虽然指明了功能使用方法，但不够清晰，还必须查看源码才能发现是否真的是零成本抽象，或者有没有副作用。库作者在文档上还需要多花点心思。\n生态系统中很多crate 功能并不完善。\n操作实现同一个trait的集合类型有点烦人，比如这篇文章里的例子：https://deislabs.io/posts/a-fistful-of-states/\n发现Rust 学习曲线有两种：上手 Rust 、 设计合适的 API （特别是使用泛型和trait的时候）\n宏有时候会导致奇怪或难以解释的错误，编译器标记发生错误的地方和实际发生错误的地方并不一致\n有些trait可能被使用过度（个人偏好）\nCargo.toml 中 dependency features可以配置的更具体更易于调试\nUgly：\n异步 （async/await）\n该团队对Rust异步不满意的地方在于：\n异步运行时生态有竞争性问题（async-std、tokio等）\n到处都是复杂的不透明的返回类型，比如impl Future<Item = ...>\nasync trait 有持续的需求，但是没有内置到语言中\n为手动实现诸如AsyncRead之类编写的大量样板代码\n认为Rust异步目前对于新手不是很友好，在开发体验上还有更大的改进空间。总结：Rust 提升了工作乐趣，强烈推荐将 Rust 用于云原生应用。附录：DeisLabs 团队 对 Go 的看法：「对于需要快速，轻松编写的小型项目，Go是一个很好的工具，但是由于大型项目的维护难度，我们通常避免使用它。 在因err！= nil而导致的膨胀，缺少集合功能（如映射和过滤），缺少泛型以及低于标准的依赖管理解决方案之间，随着项目规模的增加，维护变得越来越困难。」链接：https://deislabs.io/posts/still-rusting-one-year-later/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://deislabs.io/posts/still-rusting-one-year-later/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 16:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "DeisLabs 使用 Rust 一年后总结：Still Rusting" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "国内Rust开发者实现的，完成度为初步，大家可以关注下目标：使用 Rust 有效地读取和编写OOXML组件。但是目前只支持xlsx解析。链接：https://github.com/zitsen/ooxml-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/zitsen/ooxml-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 16:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "OOXML - Rust 实现的 Office OpenXML 解析器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Manning新出了一本Rust书，最近在MEAP阶段，原价$47.99，现折扣价$23.99。感兴趣的朋友可以关注一下。简介：Rust Servers, Services, and Apps is a hands-on guide to developing modern distributed web applications with Rust. You’ll learn how to build efficient services, writecustom web servers, and even build full-stack applications end-to-end in Rust.链接：https://www.manning.com/books/rust-servers-services-and-apps" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.manning.com/books/rust-servers-services-and-apps" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 16:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "《Rust Servers, Services, and Apps》- Manning新出的关于Rust web开发方面的书" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "链接：https://blog.drogue.io/rust-and-async/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.drogue.io/rust-and-async/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-12 16:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "嵌入式中的Rust async体验" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust似乎在科学编程的未来中变得越来越重要。 它的速度与C++一样快，与Python一样灵活，并且包装甚至比R语言更好。同时它也相对比较难学习，需要大量的认知投入。总的来说，编写干净，快速和安全的代码的能力是值得的。在过去的两年中，我有一些比较烦人的转换经验。我第一次在斯坦福大学的编程语言课程中看到Rust在实践中，立刻被这种可能性迷住了。更多请看原文：https://scie.nz/rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-11 10:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "超越R和Python：面向科学的Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rusted-editor是rg3d游戏引擎的场景编辑器。相关repo如下：https://github.com/mrDIMAS/rg3dhttps://github.com/mrDIMAS/rusty-editor推文以及相关视频地址：https://twitter.com/DmitryNStepanov/status/1336802725007396865?s=20。这是游戏中时光倒流，实时时间大约是20分钟。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-11 10:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rusty-editor" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rust 实现的一个快速，异步终端分页库。它提供了高级功能，可以方便地为任何终端应用程序编写分页器。minus 同时支持 tokio 和 async-std 运行时。更重要的是，如果您只想使用minus来提供静态输出，你也可以选择不使用这些动态特性项目地址：https://github.com/arijit79/minus使用示例：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-11 10:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Minus 项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nRust GameDev播客\nRust GameDev调查的最后呼吁\n游戏更新\n学习资料更新\n库和工具更新\nGithub中的热门工作组问题\n要求捐款\n详情:https://blog.nodebb.org/optimizing-benchpress/https://rust-gamedev.github.io/posts/newsletter-016/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-09 20:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust GameDev工作组每月新闻-第16期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "引入了async_std::channel导出async-channel板条箱的新子模块，并将较旧且不稳定的async_std::sync::channelAPI标记为“已弃用”。详情:https://github.com/async-rs/async-std/releases/tag/v1.8.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/async-rs/async-std/releases/tag/v1.8.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-09 20:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "async-std v1.8.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Fuchsia是一个开源项目，从平台本身的架构，到我们正在建设的开源社区，都是一个包容性的设计。项目仍在快速发展，但系统的基本原则和价值在整个项目中保持相对稳定。更多关于核心架构原则的信息可以在文档中找到：安全、可更新、包容、务实。从今天开始，我们正在扩大Fuchsia的开源模式，使公众更容易参与项目。我们创建了新的公共邮件列表用于项目讨论，增加了一个治理模式以明确如何做出战略决策，并为公共贡献者开放了问题跟踪器以查看正在进行的工作。作为一项开源工作，我们欢迎所有人做出高质量、经得起考验的贡献。现在有一个成为会员提交补丁的程序，或者成为具有完全写权限的提交者。详情:https://opensource.googleblog.com/2020/12/expanding-fuchsias-open-source-model.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://opensource.googleblog.com/2020/12/expanding-fuchsias-open-source-model.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-09 20:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "拓展Fuchsia的开源模式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "今年八月，Rust核心团队决定在年底成立Rust基金会。为了筹备此次基金会，从12月7日开始，Rust核心团队将举办一系列的文字问答和直播，来促进社区成员和基金会的相互认识。基金会对话将解答社区的疑惑，并整理得到“常见的问题和解答”。Rust核心团队希望通过这样的对话，和社区成员分享对未来发展的看法，吸纳成员对基金会的意见和建议。基金会对话活动将持续一周。如果希望参与这场活动，社区成员可以：一、阅读目前的“常见问题和解答”草稿；二、填写与社区成员对基金会认识有关的调查表；三、在社区问答环节，提出想问的问题；四、观看Rust核心团队的直播或录播。社区问答环节和直播的安排在网页中有详细给出，一周内有多场活动。网页中也给出了活动所在的北京时间。Rust核心团队对Rust基金会的成立怀有激动和热情，期望和广大社区促进交流，听到更多的声音。Rust语言官方博客https://blog.rust-lang.org/2020/12/07/the-foundation-conversation.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-09 01:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust核心团队发起“基金会对话”活动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有名的Rust语言分析软件rust-analyzer发布了此次公告。现在，宏语法的错误提示将在宏定义中被标注，而非标注整个宏。悬停在Self关键字上时，将提示Self指代的类型。语法分析内部将“函数”和“方法”分开，来分别标注impl块里的函数和模块中独立的函数。每个Rust错误都包含一些建议，比如变量移动后使用，会给出移动的位置；现在rust-analyzer会单独标注这些位置，以方便开发者修改代码和修复问题。本次更新还包括若干的问题修复和内部优化。rust-analyzer项目官网https://rust-analyzer.github.io/thisweek/2020/12/07/changelog-54.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-09 01:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-analyzer发布第五十四期更新公告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洛佳" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Reddit网友给出了不同的答案和建议。reddit帖子https://www.reddit.com/r/rust/comments/k8mcwm/etiquette_if_a_crate_seems_unmaintained_is_it/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-12-09 01:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如果一个Rust项目不再被维护，我可以创建分支并继续维护吗？" }, "type": "text" }], "type": "title" } },]
