export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "鉴于 Rust 的安全性, 高性能 以及 是一门现代语言. SpaceX 已经开始使用 Rust 做一些原型. 而且 Rust 还能一份代码,在各个嵌入式系统中编译运行.原文链接https://www.reddit.com/r/rust/comments/ndm4ne/spacex_about_the_rust_programming_language/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 22:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "SpaceX 开始使用 Rust 了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "就在刚刚, Rust 团队宣布 Rustup 1.24.2 发布.主要使用内存池修复了一些内存碎片的问题.可以使用如下命令升级原文链接https://blog.rust-lang.org/2021/05/17/Rustup-1.24.2.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 22:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rustup 1.24.2 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个油管视频, 介绍如何来编写一个 Flutter 的 TODO app, 但是不同的是, 所有的逻辑均使用 Rust 编写.油管链接https://www.youtube.com/watch?v=Rs3_N4maNPw" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 22:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "构建所有逻辑使用 Rust 编写的 Flutter App" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Termview 可以让你像聊天一样来实现 控制各种 命令行 模拟器.github地址https://github.com/simvux/discord-termview--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 22:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Termview: 一个有趣的命令行管理器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust2021年5月15日是Rust六岁生日（从2015年 1.0 版本算起），在这过去的六年里发生了许多变化，但Rust没有什么不同，依然没有基金会，没有Const泛型，许多组织仍然换衣Rust是否已经准备好投入生产环境。这篇文章将会回顾一下过去一年中的一些重大改进，社区如何在生产中使用Rust，最后展望目前正在进行的一些改进工作，这些改进和改进了Rust在小型和小型企业中的使用。 明年的大型项目， 让我们开始用Rust吧！Read Morehttps://blog.rust-lang.org/2021/05/15/six-years-of-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 07:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 六周年 🎉" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRead Morehttps://twitter.com/vicentebosch/status/1394006058151157761" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 07:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在手机上使用Cargo安装Rust开发的软件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust这篇博客是关于 Rust 第三个 edition 的计划，它将在今年10月份发布。Rust 2021 包含了许多细小的变化，但是这些变化有望大大改善Rust在实践中的感觉，开发者体验up。同时这篇文章还介绍了什么事 edition，并列举了在 Rust 2021 中将会出现的细小改变。Read Morehttps://blog.rust-lang.org/2021/05/11/edition-2021.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 07:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 2021 Editon 计划" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust这篇文章介绍了如何在 Xcode 中为 Rust GUI 项目（iOS + macOS) 设置 debug 环境。Read Morehttps://twitter.com/LinguaBrowse/status/1393904718183899136" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 07:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在 Xcode 中设置 Rust GUI-base 项目 debug 环境" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust作者在Rust中编写新的容器运行时的原因：Rust 是实现 oci-runtime 的最佳语言之一，许多容器工具都是用 Go 编写的，这都是非常不错的产品，但是容器运行时需要使用系统调用，而在 Go 中实现时，这需要一些特殊的处理，这太棘手了（例如namespaces，fork），使用Rust，就变得相对简单，可以使用系统调用。 而且与C不同，Rust提供了内存管理的优势。railcar 的开发已暂停，这个项目非常好，但是不再开发了，这个项目的灵感来自它。Repo%5Bhttps://github.com/utam0k/youki%5D(https://t.co/wkfeYansug?amp=1)" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-17 07:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "“Youki”一个Rust的容器运行时" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ritedb / riteraft是一个基于Raft共识算法的快速开发和验证分布式应用程序的实用框架。Raft共识算法模块由tikv/raft-rs支持，并使用Tokio + Tonic + Prost提供gRPC服务。您可以在examples文件夹下找到基本的hashstore键值服务，然后尝试一下。文章链接，https://www.reddit.com/r/rust/comments/ncwhkr/riteraft_a_raft_framework_for_regular_people/Github 链接，https://github.com/ritedb/riteraft" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/ncwhkr/riteraft_a_raft_framework_for_regular_people/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-15 22:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RiteRaft:一个用rust写的raft框架，使用160行代码构建raft服务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作为Rust subreddit的主持人，我经常发帖谈论开发人员试图将其各自的语言范例转换为Rust的尝试，但结果喜忧参半，完成的程度也不尽相同。在本指南中，我将描述开发人员在将其他语言范例转换为Rust时遇到的一些问题，并提出一些替代解决方案来帮助您解决Rust的局限性。文章链接，https://blog.logrocket.com/what-you-cant-do-in-rust-and-what-to-do-instead/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.logrocket.com/what-you-cant-do-in-rust-and-what-to-do-instead/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-15 22:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "你在rust中无法做的事，以及该怎么做" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "为了确保应用程序的安全性，我们使用诸如身份验证和授权之类的机制。我认为你们中的许多人都熟悉这些概念，在本文中，我们将重点介绍授权和相关访问控制模型的概念。文章链接，https://dev.to/ddtkey/authorization-mechanisms-in-rust-web-applications-27ag" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://dev.to/ddtkey/authorization-mechanisms-in-rust-web-applications-27ag" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-15 22:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Web应用程序中的授权机制" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust标准库的翻译遵循了Rust的脚步，并已更新到v1.52.1版。Rust标准库本地化文档现在支持104种语言的早期预览，这些预览可以用作IDE工具的智能提示，以帮助Rust开发人员快速了解Rust API并提高Rust工程师的开发效率和代码质量。文章链接，https://www.reddit.com/r/rust/comments/nc4020/standard_library_the_translation_of_rust_standard/Github 链接，https://github.com/wtklbm/rust-library-i18nhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/nc4020/standard_library_the_translation_of_rust_standard/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-15 22:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "[Standard Library] Rust标准库的翻译版本已更新至v1.52.1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "链接：https://www.ncameron.org/blog/tikv-rust-client-0-1-release/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.ncameron.org/blog/tikv-rust-client-0-1-release/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-14 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tikv Rust 客户端发布0.1版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者说有600美元的学习预算，希望用这笔钱来支持rust社区。可以购买哪些资源来帮助开发人员？如果能够将这笔钱捐赠给谁，应该捐赠给谁？下面的对话讨论的非常有意思。假如是你，该怎么做，欢迎在评论区留言。链接：https://www.reddit.com/r/rust/comments/nb2wsj/how_to_support_the_rust_community/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/nb2wsj/how_to_support_the_rust_community/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-14 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "假如有600刀预算，你打算怎样支持Rust社区" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "时间：2021年5月15日地点：北京中关村 e 世界A座财富中心负2层 联合创业办公室（星巴克旁路口电梯下B2）报名链接：https://www.huodongxing.com/event/6596259780300?td=9111549962706Rust 马上六周年了，社区月刊开启 《我 与 Rust》的周年征文活动，欢迎大家投稿。分享你与 Rust 的故事即可。链接：https://rustmagazine.github.io/rust_magazine_2021/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rustmagazine.github.io/rust_magazine_2021/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-14 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WebAssembly meetup" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Szyszka 使用 Rust 和 GTK3 创建，具有简单明了的 GUI ，适用于 Linux，Max，Windows。支持多种重命名规则：替换、清除、修改、自定义等。Github: https://github.com/qarmin/szyszkaSnap: https://snapcraft.io/szyszka" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://snapcraft.io/szyszka" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-13 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Szyszka - 简单好用的批量文件重命名工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Tracing Prism 是一个简单的工具，可以根据文本过滤器或日志级别将日志文件分为几列。它专为 tracing 设计，但是可以应用于任何文本文件。在线预览: https://najamelan.github.io/tracing_prism/Github: https://github.com/najamelan/tracing_prism" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/najamelan/tracing_prism" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-13 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tracing Prism - 提高日志文件可读性的 Web 程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一旦一个对象被移动，它在栈上占用的内存就可以被重用。但在 Rust 中存在相反的例子：Stackoverflow: https://stackoverflow.com/questions/67499399/why-does-the-rust-compiler-not-reuse-the-memory-on-the-stack-after-an-object-isGithub Issue:https://github.com/rust-lang/rust/issues/85230" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/rust/issues/85230" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-13 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么 Rust 编译器在移动对象后不重用栈上的内存？ - Rustc/LLVM 热议" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "经过两年努力，Tauri 团队自豪地发布 v1.0 Beta 。Tauri 是一个工具包，用于创建更小、更快、更安全且具有 web 前端的桌面应用程序，其核心系统是用 Rust 编写的。GitHub: https://github.com/tauri-apps/tauriWebsite: https://tauri.studioArticle: https://dev.to/tauri/announcing-tauri-beta-more-efficient-crossplatform-apps-with-better-features-1nbd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://dev.to/tauri/announcing-tauri-beta-more-efficient-crossplatform-apps-with-better-features-1nbd" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-13 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tauri v1.0 Beta 发布 - Rust ❤ GUI" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 390: https://this-week-in-rust.org/blog/2021/05/12/this-week-in-rust-390/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2021/05/12/this-week-in-rust-390/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-13 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 390" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 的第三版 Rust 2021计划于10月发布。\n\n什么是版本？\n\n\n版本不会分裂生态系统\n\n\n版本迁移很容易，而且很大程度上是自动化的\n\n\nRust 2021计划进行哪些更改？\n\n\n前奏曲的补充\n\n\n默认 cargo feature 解析器\n...\n\n什么是版本？版本不会分裂生态系统版本迁移很容易，而且很大程度上是自动化的Rust 2021计划进行哪些更改？前奏曲的补充默认 cargo feature 解析器...ReadMore:https://blog.rust-lang.org/2021/05/11/edition-2021.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2021/05/11/edition-2021.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-12 23:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 2021 版本计划" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "tui-rs是一个Rust库，用于构建丰富的终端用户界面和仪表板。ReadMore:https://github.com/fdehau/tui-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/fdehau/tui-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-12 23:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tui-rs 富命令行终端用户界面" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "用 Rust 写的语法类似于 Rust 语法的脚本语言ReadMore:https://github.com/tuqqu/oxide-lang" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/tuqqu/oxide-lang" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-12 23:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Oxide" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个版本是1.52.0中出现的编译错误的一个临时解决方案。这些编译错误的典型表现是报错信息中包含 found unstable fingerprints。在1.52.0中，编译器内部新增了一个验证机制，这个验证机制检测出了一些从增量编译被启用后(Rust 1.24)就存在的bug。这些bug在增量编译下可能会导致最终生成的二进制产物出错，理论上程序可能出现任意行为。所幸在release版本的构建中增量编译是默认关闭的，所以对生产环境影响应该不会太大（只有那些开启了增量编译的用户）。因为这些bug从很早以前就一直存在，所以将版本退回并不能解决问题。这个版本并没有解决这个问题，只是：目前编译器团队正在积极解决这些bug，根据解决的情况可能会发布1.52.2将这些修复带到stable channel。阅读原文：https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-11 22:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.52.1发布。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "国外网友Nell Shamrell-Harrington的3D打印版Ferris，可爱！阅读原文：https://twitter.com/nellshamrell/status/1391931296822087681" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://twitter.com/nellshamrell/status/1391931296822087681" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-11 22:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ferris，3D打印版!" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "阅读原文：https://mnwa.medium.com/speeding-up-algorithms-with-arena-allocators-d72d06f23607" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://mnwa.medium.com/speeding-up-algorithms-with-arena-allocators-d72d06f23607" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-11 22:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用arena allocators为算法加速" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇是作者关于过程宏的使用系列文章的第三篇，教你如何使用syn::Error来生成能让编译器显示定位在宏的输入中的错误，而不是一个直接指向宏调用的错误。阅读原文：https://blog.turbo.fish/proc-macro-error-handling/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.turbo.fish/proc-macro-error-handling/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-11 22:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "过程宏中的错误处理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一位网友 @perqin 为了解决自己的需求，选择了基于 Leaf（一款梯子）进行自己的GUI包装，以下是他尝试在 Windows 下面交叉编译出 Android 的 leaf 时遇到的若干坑：原文连接：https://perqin.github.io/2021/05/04/build-leaf-android-on-windows/#%E8%A7%A3%E5%86%B3stopLeaf%E5%B4%A9%E6%BA%83" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://perqin.github.io/2021/05/04/build-leaf-android-on-windows/#%E8%A7%A3%E5%86%B3stopLeaf%E5%B4%A9%E6%BA%83" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-11 22:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Windows上交叉编译Leaf" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Arrow2 是一个官方的 Rust 重写的 Arrow 实现. 作者最近几个月贡献了大量代码,同时也做了大量的测试和思考. Rust赋予了我们在不损害安全性和可维护性的情况下利用Arrow格式.原文链接https://jorgecarleitao.medium.com/safe-analytics-with-rust-and-arrow-564f05107dd2arrow-rshttps://github.com/apache/arrow-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 20:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 和 Arrow 的 安全分析" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者做了一个网站,可以直接在网站上使用 Rust 进行 WebAssembly 的编码和运行, 感兴趣的同学可以去体验一下.WebAssembly Cloudhttps://webassembly.cloud/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 20:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WebAssembly Cloud: 在线的 wasm playground" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "NewsFlash 是一个 Rust 编写的阅读器,可以让你方便的跟踪你喜欢的博客或者新闻.gitlab 地址https://gitlab.com/news-flash/news_flash_gtk" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 20:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "NewsFlash: Rust 编写的阅读器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "simdutf8 一个 UTF-8 验证库, 有着比官方库更优秀的速度. Benchmark 如下:更多的见github地址https://github.com/rusticstuff/simdutf8--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 20:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "simdutf8: 速度飞快的 UTF-8 验证库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "使用MacBook Pro (13-inch, 2016)測試使用 gfx-rs 做了一個實驗，發現經過他們的轉換速度加速4倍read mehttps://gfx-rs.github.io/2021/05/09/dota2-msl-compilation.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 01:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在dota2上測試將SPIR-V 轉換成 MSL可以加速渲染速度4倍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "現在7.0了 新增三個功能：gix tool estimate-hours 估算要工作多少才能做出這個專案gix tool organize 當你引用了太多的git repo在這個專案 可以使用這個指令整理gix tool find 列出所有的git repo引用read mehttps://github.com/Byron/gitoxide/releases/tag/v0.7.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 01:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gix 是個可以直接存取git repositories 的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "超快速驗證utf8字串是否合理read mehttps://github.com/rusticstuff/simdutf8" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 01:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "simdutf8" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Apache Arrow 是個跨平台的數據層，來加快大數據分析項目的運行速度。讓 spark pandas cassandra HBase 等等大數據系統使用統一的資料格式作者在4個月之前做了arrow2重寫了官方的rust實作。在他看來這樣的設計更安全性能更好。read mehttps://jorgecarleitao.medium.com/safe-analytics-with-rust-and-arrow-564f05107dd2" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 01:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust與arrow的安全分析" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有很多遊戲更新了這邊就看一下遊戲引擎部份更新了什麼新增許多範例在官網Tetra 2D遊戲引擎支援了BMFont增加ImageData類型，用於在CPU上加載和處理圖像錯誤修正和文件改進Oxygengine 網頁遊戲引擎修復了在Firefox上渲染錯誤。添加了對過濾器的支持。更新了RAUI 改善UI。添加了對圖像平滑渲染命令的支持。添加了益智遊戲演示WIP。rg3d支援WebAssembly 可以在網頁玩了紋理壓縮性能提升各種錯誤修復和小改進。一個新的遊戲引擎，還在發展中。read mehttps://gamedev.rs/news/021/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-10 01:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust GameDev #21" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我们很兴奋地宣布Rust的新AWS SDK的alpha版本发布。在Rust中开发的AWS客户想要一个本地的Rust SDK，这样他们就可以使用他们习惯的语言结构，而Rust的新客户想要一个与他们在其他语言环境中使用的SDK行为类似的SDK。在这个alpha版本中，客户可以在客户端试用7种AWS服务，并提供可用性方面的反馈。文章链接，https://aws.amazon.com/cn/blogs/developer/a-new-aws-sdk-for-rust-alpha-launch/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://aws.amazon.com/cn/blogs/developer/a-new-aws-sdk-for-rust-alpha-launch/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-08 13:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个Rust的新AWS SDK：alpha发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我在2019年11月写了我对Rust的第一印象。此后，我花了几次时间研究它，但主要是在非常简单的代码上进行的，而当我喜欢使用Rust时，我并不感到惊讶。从表面上看，这种感觉或多或少就像我所涉猎的许多其他语言一样！上个月，当我最终决定用Rust构建一个现实的用例时，一切都改变了。文章链接，https://deepu.tech/my-second-impression-of-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://deepu.tech/my-second-impression-of-rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-08 13:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "我对Rust的第二印象以及为什么我认为它是最好的通用语言！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust for Windows v0.9最近已发布，其中包括全面的消费支持以及其他几个更新！有了完整的使用支持，您现在可以使用Rust语言来调用任何Windows API（过去，现在和将来）。 Rust开发人员可以以一种惯用的语言访问整个Windows API接口，从而使他们可以轻松利用Windows开发的强大功能和广度。文章链接，https://blogs.windows.com/windowsdeveloper/2021/05/06/announcing-rust-for-windows-v0-9/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blogs.windows.com/windowsdeveloper/2021/05/06/announcing-rust-for-windows-v0-9/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-08 13:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Announcing Rust for Windows v0.9" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "当前本来可以在这个版本下工作的代码：但在这两个版本上就不能正常工作了：因此需要对这部分升级的代码进行回归，具体原由看这里：https://github.com/rust-lang/rust/issues/84958" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "由于\"mutable noalias\"的逻辑错误bug导致回归" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个库包含了TurboWish/tokio-console的原型实现，这是一个用于异步Rust程序的诊断和调试工具。诊断工具包由多个组件组成:\n一种有线协议，用于将检测数据从已检测应用程序传输到诊断工具。 有线格式是使用gRPC和协议缓冲区定义的，以实现有线上的有效传输以及数据生产者和使用者的不同实现之间的互操作性。\n用于从过程中收集诊断数据并将其以有线格式公开的工具。 对于使用Tokio和tracing的项目，此代码库中的console-subscriber库包含工具侧API的实现，作为traceing-subscriber的Layer。\n用于显示和浏览诊断数据的工具，已使用控制台有线协议实现为gRPC客户端。 console库实现了使用此数据的交互式命令行工具，但其他实现（例如图形工具或基于Web的工具）也是可能的。\n当前这个库只是作为一个实现原型，具体的工作进展请关注这里：https://github.com/tokio-rs/consoleGithub: https://github.com/tokio-rs/console#tokio-console-prototypes" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/tokio-rs/console#tokio-console-prototypes" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tokio-console: 一个新的异步Rust调试工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一篇介绍如何使用Rust在安卓上运行的博客。同时作者提供了最小运行在安卓上的Rust项目模板。Read More: https://blog.svgames.pl/article/running-rust-on-android模板: https://github.com/suve/rust-on-android/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/suve/rust-on-android/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在安卓上运行Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "glommio库的作者写的一篇关于Rust异步的博客，从中讨论了一些有关Rust异步Api设计历史以及使用心得。https://github.com/DataDog/glommioRead More（需要科学上网）: https://itnext.io/async-rust-history-strikes-back-d69aced6760" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://itnext.io/async-rust-history-strikes-back-d69aced6760" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "异步Rust：历史反击" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Readme部分介绍很精彩，将Rust当前实现collection的各种方法做了比较，指出各自的优缺点。同时该库实现方法也很值得研究，如果对编译期引用计数等感兴趣的，千万不要错过。Github: https://github.com/matthieu-m/ghost-collections" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/matthieu-m/ghost-collections" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ghost-collections：使用 stable Rust 编写的安全集合，基于 GhostCell 和 StaticRc" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "389。Read More：https://this-week-in-rust.org/blog/2021/05/05/this-week-in-rust-389/中文: https://blog.budshome.com/budshome/rust-guan-fang-zhou-bao-389-qi-(2021-05-05)顺便推介一下芽之家的博客，内含大量Rust中文博客：https://blog.budshome.com/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.budshome.com/budshome/rust-guan-fang-zhou-bao-389-qi-(2021-05-05)" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 389" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "angelilu" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "计算机诞生后的每个十年里，软件世界都会被一种语言\"重写\"。\n1960s 是 Fortran\n1970s 是BASIC\n1980s: Pascal\n1990s: C++\n2000s: Java\n2010s: JavaScript\n那么 2020s 又会是哪一种语言呢？https://deprogrammaticaipsum.com/the-great-rewriting-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://deprogrammaticaipsum.com/the-great-rewriting-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【博客】 Rust 对软件世界的伟大重写" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "angelilu" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "使用 wgpu，目前完成了 MVPhttps://github.com/dskart/rustcraft" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/dskart/rustcraft" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustcraft：类似于 \"我的世界\" 的游戏引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "angelilu" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://mbuffett.com/posts/incomplete-macro-walkthrough/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://mbuffett.com/posts/incomplete-macro-walkthrough/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【博客】一个半成品宏节省了我 4000 行 Rust 代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "angelilu" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://www.fluvio.io/blog/2021/05/java-client/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.fluvio.io/blog/2021/05/java-client/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【博客】如何把 Rust 打包进 Java Jar" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "angelilu" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nRust 基金会已开始接手\n2021 路线图更新\n团队章程\nhttps://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-06 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 核心团队进展更新" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rust 下好用的 LinkedHashMap & LinkedHashSet 。目前已经升级至 hashbrown 0.11 以及 griddle 0.5.1 （感谢 jonhoo 合并了 PR）。https://github.com/ritedb/ritelinkedhttps://crates.io/crates/ritelinked欢迎大家试用" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-04 22:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ritelinked v0.3.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "TL;DR：原文作者打算实现LocalNative的跨平台桌面GUI，大致上要实现electron版本的基本功能，然后选了 druid 和 iced 作为调研，最后选择 iced 的理由基于以下三点：原文： https://localnative.app/blog/2021/05/04/localnative-2021-soc-plan-blog/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-04 22:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "druid 和 iced 的比较" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "上个月写了一篇 对蓄水池算法稍有改进的博客，今天趁着休假外出的空挡整理了一个库，实现了以下抽样的功能：https://huangjj27.github.io/reservoir.htmlrepo：https://github.com/huangjj27/reservoir-samplercrate：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-04 22:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "（小编私货） Choosen ——你就是被选中的人嘛？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 背后,有非常多的无名英雄在默默的贡献着, 这里讲述的是其中一人: Dave Herman, 以及他如何悄悄的影响着 Rust 结果的故事.原文链接https://brson.github.io/2021/05/02/rusts-most-unrecognized-contributor" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-03 20:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust最不知名的贡献者" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust拥有陡峭的学习曲线, 即使拥有了一些 C++的背景, Rust 的学习依旧不是一件容易的事情.本文作者以C++开发者的角度, 对 Rust 和 C++的一些知识点做了一些对比, 希望能帮助想了解 Rust 的 c++开发人员.原文链接https://renoth.medium.com/understanding-rust-as-a-c-developer-69ee8ca76fd6" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-03 20:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "C++ 开发人员如何理解 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ccdb 是一个命令行游戏引擎.crates.io地址https://crates.io/crates/ccdb/1.5.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-03 20:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ccdb: 命令行游戏引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "crates.io地址https://crates.io/crates/soa_derive--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-03 20:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "soa_derive: 自动生成 struct 的数组" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RustCrypto 项目多个 crate 发布新版本：\naead v0.4；\ncipher v0.3；\ncrypto v0.2；\nelliptic-curve v0.9；\necdsa v0.11；\n详细的公告链接，https://users.rust-lang.org/t/rustcrypto-release-announcements/59149" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://users.rust-lang.org/t/rustcrypto-release-announcements/59149" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-01 22:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustCrypto 项目多个crate发布新版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rayon 是针对 Rust 语言的数据并行性库。开始使用 Rayon 的程序员，普遍表达了一种神奇的感觉：“我更改了一行，现在我的代码可以并行运行！” 。Rayon 的开发者 Josh Stone 认为这要归功于 Rust 语言自身，并撰文 Rust 是如何支持 Rayon 的并行性。\nRust 的所有权和借用规则；\n线程安全 traits：Send 和 Sync；\n闭包 traits：FnOnce，FnMut 和 Fn；\n泛型约束；\n使用Rayon，可以轻松地将顺序迭代器转换为并行迭代器。通常只需将 foo.iter() 调用更改为 foo.par_iter()，其余则由 Rayon 完成示例：Github 链接，https://github.com/rayon-rs/rayon文章链接，https://developers.redhat.com/blog/2021/04/30/how-rust-makes-rayons-data-parallelism-magical/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://developers.redhat.com/blog/2021/04/30/how-rust-makes-rayons-data-parallelism-magical/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-01 22:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust如何使Rayon的数据并行性变得神奇" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rg3d，一个功能丰富的通用 3D 游戏引擎，并带有场景编辑器。迄今为止，用Rust编写的功能最强大的3D游戏引擎。Github 链接，https://github.com/mrDIMAS/rg3d在线 Demo 链接，https://rg3d.rs/assets/webexample/index.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rg3d.rs/assets/webexample/index.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-01 22:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rg3d游戏引擎现已完全支持WebAssembly" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Gfx-rs，Rust 中的底层图形抽象层，低开销的类似于 Vulkan 的GPU API。gfx-rs，使用较难，建议对性能敏感的库和引擎使用，wgpu-rs 是一种安全而简单的选择。Github 链接，https://github.com/gfx-rs/gfx" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/gfx-rs/gfx" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-01 22:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Gfx-rs 发布 v0.8" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Youtube 视频，https://youtu.be/xcygqF5LVmM祝大家五一劳动节快乐。https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://youtu.be/xcygqF5LVmM" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-05-01 22:42" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【Video】Crust of Rust 系列：胖指针" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "私货：里面有小编的一篇文章《优化 Rust 标准库的 binary_search》。https://rustmagazine.github.io/rust_magazine_2021/chapter_4/improve-std-slice-binary-search.html链接：https://rustmagazine.github.io/rust_magazine_2021/chapter_4/toc.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rustmagazine.github.io/rust_magazine_2021/chapter_4/toc.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-30 22:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中文社区月刊《Rust 中文精选》第四期 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "perf-monitor-rs 是飞书 Rust 团队最近开源的一个跨平台的性能数据采集库，目前可以对cpu、内存、io和 fd 的相关数据进行采集。链接：https://github.com/larksuite/perf-monitor-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/larksuite/perf-monitor-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-30 22:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "perf-monitor-rs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Folyd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Facebook 昨天宣布加入了 Rust 基金会，紧接着发布了一篇博客介绍 Rust 在 Facebook 的发展历史。Facebook 目前有上百名写 Rust 的工程师，写了上百万行 Rust 代码，并且表示将会持续加大对 Rust 的投入。https://engineering.fb.com/2021/04/29/developer-tools/rust/https://github.com/folyd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-30 22:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "A brief history of Rust at Facebook" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Generative 是用 Rust 实现的一个二维自动生成艺术库，目前处于早期阶段。自动生成艺术是“艺术家应用计算机程序，或一系列自然语言规则，或一个机器，或其它发明物，产生出一个具有一定自控性的过程，该过程的直接或间接结果是一个完整的艺术品。” -- Philip GalanterGithub: https://github.com/gp-97/generative" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/gp-97/generative" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-29 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "generative - 2D 自动生成艺术库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "netdiag 是 Kentik Labs 开源的第一个 Rust crate 。作为一个实用的网络诊断工具，它包括经典的 ICMP Ping，使用 TCP 或 UDP 包的 Traceroute ，以及一个自定义诊断工具 knock 。crates.io: https://crates.io/crates/netdiagGithub: https://github.com/kentik/netdiagOpen-Sourcing Our Netdiag Crate: https://kentiklabs.com/blog/2021/04/21/open-sourcing-our-netdiag-crate/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://kentiklabs.com/blog/2021/04/21/open-sourcing-our-netdiag-crate/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-29 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "netdiag - Rust 下的弹性异步 Ping 和 Traceroute" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Linfa 的 0.4.0 版本引入四种新算法，改进 ICA 和 K-means 实现的文档，并为 K-means 添加了更多的基准测试，更新 ndarray 的版本到 v0.14 。crates.io: https://crates.io/crates/linfaGitHub: https://github.com/rust-ml/linfaRelease 0.4.0: https://rust-ml.github.io/linfa/news/release040/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rust-ml.github.io/linfa/news/release040/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-29 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Linfa v0.4.0 发布 - Rust ❤ 机器学习" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 388: https://this-week-in-rust.org/blog/2021/04/28/this-week-in-rust-388/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2021/04/28/this-week-in-rust-388/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-29 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 388" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新特性:\n工具链指定文件名\n更好的支持低内存系统\n更好的支持 windows 添加/删除程序\nReadMore:https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.mdReadMore:https://blog.rust-lang.org/2021/04/27/Rustup-1.24.0.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2021/04/27/Rustup-1.24.0.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-28 23:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rustup 1.24.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "基于 github star 增长的 Rust 项目的趋势。ReadMore:https://www.libhunt.com/l/rust/trending" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.libhunt.com/l/rust/trending" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-28 23:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust项目趋势" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "当 Linus 被问到 Rust 能否取代 linux 内核中的 C 时, Linus Torvalds 回答:\"我不认为 Rust 会接管核心内核,但在内核中做个别驱动程序,听起来并非完全不可能。\"ReadMore:https://www.tag1consulting.com/blog/interview-linus-torvalds-linux-and-gitReadMore:https://crates.io/crates/ccdb/1.4.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://crates.io/crates/ccdb/1.4.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-28 23:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Linus - Linux 和 Git 的 30 年" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "simdutf是一个Rust编写的SIMD加速的UTF-8验证库。比起std，在non-ASCII快22倍，在ASCII上快了3倍。GitHub: https://github.com/rusticstuff/simdutf8阅读更多：https://www.reddit.com/r/rust/comments/mz44xi/simdutf_v011_a_small_step_for_semver_one_giant/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/mz44xi/simdutf_v011_a_small_step_for_semver_one_giant/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "simdutf v0.1.1 - 小版本的更新，巨大的性能提升" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Mara Bos 最近通过了一项PR，在Rust 1.53中为数组类型添加IntoIterator实现。在这个更新之前，只有数组的引用实现了IntoIterator，这意味着无法直接对数组类型进行迭代。阅读更多：https://twitter.com/m_ou_se/status/1385966446254166020" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://twitter.com/m_ou_se/status/1385966446254166020" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.53，为数组类型添加IntoIterator" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "TurboWish 是用于Rust程序性能分析的框架，着力于展现async/await编写的task-oriented code的性能和资源使用情况。阅读更多：http://blog.pnkfx.org/blog/2021/04/26/road-to-turbowish-part-1-goals/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "http://blog.pnkfx.org/blog/2021/04/26/road-to-turbowish-part-1-goals/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TurboWish 之路；第一部分：目标" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "阅读更多：https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "欢迎编译器团队的新成员 Aaron Hill。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇博客记录了作者关于这一问题的思考。阅读更多：https://mcyoung.xyz/2021/04/26/move-ctors/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://mcyoung.xyz/2021/04/26/move-ctors/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中的移动构造函数：可能吗？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "主页：https://zellij.dev阅读更多：https://twitter.com/_dev_ice/status/1386903434939535361" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://twitter.com/_dev_ice/status/1386903434939535361" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Zellij，Rust编写的新终端复用工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "whfuyn" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "相比原先Python和C++混合，使用大量的锁和跨语言交互的数据读取器，在使用了Rust编写的专用进程进行数据读取后，性能提升了100x到400x。相关Issue: https://github.com/tensorflow/tensorboard/issues/4784阅读更多：https://www.reddit.com/r/rust/comments/mzlg5s/parts_of_tensorboard_are_being_rewritten_in_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/mzlg5s/parts_of_tensorboard_are_being_rewritten_in_rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-27 23:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust重写Tensorbord部分组件带来了100x到400x的速度提升" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "JimFawcett: 退休教授开始专注于 Rust他的 GitHub 主页写道：他还创建了一个网站，记录 cpp和 rust 的一些信息https://jimfawcett.github.io/https://github.com/JimFawcetthttps://www.reddit.com/r/rust/comments/mxlm75/for_folks_getting_started_on_rust_this_is_a_gem/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 20:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "JimFawcett: 退休教授开始专注于 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一篇介绍如何在 Rust 中使用 gRPC 的教程, 包含完整的 client 和 server 例子,感兴趣的小伙伴可以看一看.原文链接https://romankudryashov.com/blog/2021/04/grpc-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 20:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中使用 gRPC" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rustcommon 是 twitter 使用的一些通用库的集合, 里面包含了很多twitter 在项目中使用的 库, 例如 rpc-perf 等.github地址https://github.com/twitter/rustcommon" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 20:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustcommon: twitter 的一些 Rust 通用库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "tracing-actix-web 提供了 actix-web 的一个 开箱即用的 tracing 的中间件.github 地址https://github.com/LukeMathWalker/tracing-actix-web" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 20:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tracing-actix-web: 0.4.0 realse" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "该项目包括两个主要目标:github 地址https://github.com/RustyBamboo/hash-shader--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 20:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "SHA256 Compute Shader" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "網站又更新了，雖然很多人已經知道了，還是分享一下read mehttps://cheats.rs/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 01:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 函數快查表網站" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有很多不錯的高級語言特性多行 lambdas 表達式鏈式疊代器 Chaining iterators多元組參數 Tuple de-structuring in lambda arguments這些高級語法都讓作者感到實用read mehttps://www.reddit.com/r/rust/comments/mxzphs/rust_sometimes_feels_more_high_level_than_python/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 01:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust有時比Python感覺更高級" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "可以看一下哪些大佬在貢獻社群read mehttps://www.johndbeatty.com/rustaceanrank.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-26 01:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustaceanRank: crate 的 PageRank" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Jupyter Notebook 是基于网页的用于交互计算的应用程序。本文主要是对 Rust Jupyter 内核的创建者David Lattimore的采访。博客链接，https://blog.abor.dev/p/evcxrGithub链接，https://github.com/google/evcxr" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/google/evcxr" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-24 20:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Evcxr，Rust Jupyter内核" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "电子游戏工作室Utopixel的联合创始人Alex，在Windows和Linux平台发布益智冒险游戏Outer Wonders的演示版。网站链接：https://utopixel.itch.io/outer-wonders" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://utopixel.itch.io/outer-wonders" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-24 20:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Outer Wonders 演示" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RAB，Rusty Armor Builds，一个为怪物猎人崛起（Monster Hunter Rise）的开源装甲套装创作工具。GitHub 链接，https://github.com/itytophile/rabYoutube 链接，https://www.youtube.com/watch?v=taua_So6Hes" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.youtube.com/watch?v=taua_So6Hes" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-24 20:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RAB，Monster Hunter Rise的开源盔甲集创建工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文来自Visual C ++团队的有关他们静态分析工具的当前状态和未来路线图的演讲，讨论了Rust如何影响某些工作。Youtube 链接，https://www.youtube.com/watch?v=RZ2s89kJQzEhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.youtube.com/watch?v=RZ2s89kJQzE" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-24 20:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 对Visual C++静态分析工具的影响" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n时间：2021.04.24（13：00-17：00）\n地点：成都市天府软件园B5号6楼\n内容：干货满满\n嘉宾：众多大佬\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-23 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust MeetUp 成都站打卡" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nhttps://github.com/arzg/sema\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-23 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为rust-analyzer优化了 vscode主题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "用Rust编写的Ruby包管理器\nhttps://github.com/TaKO8Ki/frum\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-23 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "frum" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "看看大家怎么说，讨论地址：https://www.reddit.com/r/rust/comments/mwe45y/for_those_of_you_who_migrated_to_rust_from_go_do/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/mwe45y/for_those_of_you_who_migrated_to_rust_from_go_do/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-23 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "对于那些从一开始就迁移到Rust的开发者来说，是否感觉更有生产力？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n\n2021.04.23  晚上20:00 ～ 22:00\n\n\n讨论主题：\n\n语言特性： 《Rust 标准库 trait 之旅》\n领域项目：通过WebSocket实时共享应用程序状态框架 Aper\n\n\n\n参考资料：\n\nhttps://github.com/pretzelhammer/rust-blog/blob/master/posts/tour-of-rusts-standard-library-traits.md\nhttps://github.com/aper-dev/aper\nhttps://aper.dev/guide/\n\n\n2021.04.23  晚上20:00 ～ 22:00讨论主题：\n语言特性： 《Rust 标准库 trait 之旅》\n领域项目：通过WebSocket实时共享应用程序状态框架 Aper\n参考资料：\nhttps://github.com/pretzelhammer/rust-blog/blob/master/posts/tour-of-rusts-standard-library-traits.md\nhttps://github.com/aper-dev/aper\nhttps://aper.dev/guide/\n线上沙龙说明：经过前面几期的沉淀，目前周五线上沙龙讨论主题结构打算固定下来：\n语言特性\n领域项目\nRust 中文社群 飞书群 邀请你加入（可能需要pc打开）：\n对话群： https://applink.feishu.cn/TeLAcbDR\n话题群：https://applink.feishu.cn/TeLD868w\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-23 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustFriday 飞书群线上沙龙 第五期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "讲师是jam1garner。https://github.com/jam1garner?tab=overview&from=2021-03-01&to=2021-03-31讲座简介： 可以说，Rust中的宏系统仍处于起步阶段。 尽管已经完成了很多实现，但是由于宏编程的资源有限，因此许多项目无法正确利用宏。 本讲座的目的是向有兴趣在现有或将来项目中使用宏的人员介绍能将项目带入新高度所需的宏惯用法。（机翻，除了冗长没啥毛病 :) ）About More: https://meetupfeed.io/talk/rust-conf-2020-macros-for-a-more-productive-rust-by-jam-1-garner" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://meetupfeed.io/talk/rust-conf-2020-macros-for-a-more-productive-rust-by-jam-1-garner" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-22 22:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "让Rust拥有更高生产力 RustConf 2020 讲座" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n感谢Fly.io，Discord，Embark等赞助商，我们很高兴地宣布，Tokio将资助Alice Ryhl，将更多时间花在Tokio上。 这是一个计划的开始，该计划通过Github赞助通过捐款来支付对Tokio进行工作的贡献者。\n如果有关注tokio的discord群组的小伙伴应该对Alice Ryhl并不陌生，贴一些reddit上对Alice的评价：\nThe whole Rust community owes Alice Rhyl money lol...she's answered gazillions of questions and is always spot on. I wish Alice and the Tokio team all the best.(整个 Rust 社区都欠 Alice Rhyl 钱 hahaha... 她回答了大量的问题，而且总是准确无误。我祝愿 Alice 和Tokio团队一切顺利。)\nCongratulation Alice :)\nBtw Thanks for all the help you did to me in discord :) Rust Lang is beautiful because of all the helpful people like Alice Rhyl, Johnhoo, Brandon, Steve, Togglebit etc. .（\n祝贺Alice\n顺便说一下，感谢你在discord上对我的所有帮助，Rust 语言因为有像Alice Rhyl, Johnhoo, Brandon, Steve, Togglebit 等等，所有给予别人帮助的人而美丽。）\nAlice's Github Home: https://github.com/darksonnRead More: https://tokio.rs/blog/2021-04-welcome-alice" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tokio.rs/blog/2021-04-welcome-alice" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-22 22:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "欢迎Alice Ryhl成为第一位受雇于Tokio的投稿人" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "387。Read More：https://this-week-in-rust.org/blog/2021/04/21/this-week-in-rust-387/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2021/04/21/this-week-in-rust-387/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-22 22:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 387" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我的一个朋友在周末的时候尝试着在 windows 系统下面编译 aleaf 库，然而编译的时候遇到了 Rust bindgen 找不到 clang 的问题，最后尝试重新编译 llvm 的时候发现问题在于：llvm 在 Linux 下和 Windows 下的编译过程有差异，在 Linux 上 llvm 在 stage1 上编译出 libclang 并在 stage2 依赖这个库，而在 Windows 下直接跳过  stage1 进行 stage2 的编译，因此没有编译出 libclang可用https://github.com/eycorsican/aleaf关于这个问题，更多详见：https://stackoverflow.com/questions/67150514/how-to-use-isysroot-of-clang-properly顺带一提：朋友直接在 Linux 上编译一遍过（Linux 才是生产力！）" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-22 00:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 交叉编译到 安卓的 二三事" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "huangjj27" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "既然上面说到 aleaf，这个应用为什么会变得如此麻烦呢？原因在于，这个库的依赖顺序是： rust business code -> rust bindgen  -> c wrapper -> android ndk c API然而通常如果利用 Rust 开发安卓库，我们会采用的路径是直接通过调用 NDK库来方便处理相关的接口https://github.com/rust-windowing/android-ndk-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-22 00:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "aleaf，NDK" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "最简单的 Rust web3 库，具有非常简单的 ABI 解析功能。Ethane 是一个用 Rust 的 web3 库。它不依赖于 futures 或任何 executors 。它目前支持 http 和 websockets（包括普通的和 TLS 的），以及通过 Unix 域套接字（仅 Unix ）的进程间通信。对于 http 和 websockets ，它还支持 Http Basic 和 Bearer 认证。它也有一个内置的 ABI 解析器库。ReadMore: https://github.com/zgendao/ethane在一个相当大的项目中，作者用 GitHub Actions 来完成一些重复性的工作，主要的两个改进就是：合并多个任务，使用 sccahe 提高测试速度\nGitHub workflows 矩阵\n包含和排除规则\n使用 sccahe 优化Rust编译速度\n检验 sccache 结果\nReadMore: https://www.fluvio.io/blog/2021/04/github-actions-best-practices/Fish Game 是一款采用 Macroquad 游戏引擎和 Rust 编程语言构建的 2-4人 在线游戏。介绍以下 Nakama 功能：\n用户认证\n对接会\n实时多人游戏\n排行榜\nReadMore: https://heroiclabs.com/blog/tutorials/rust-fishgame/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://heroiclabs.com/blog/tutorials/rust-fishgame/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-21 23:12" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "微软给想学习 Rust 的朋友提供了一份新手教程, 手把手带你走出 Rust 第一步.原文链接https://docs.microsoft.com/en-us/learn/paths/rust-first-steps/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-19 20:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "微软出 Rust 新手教程了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Cool bear 的最新文章. 如果你想深入了解 Box, 可以跟着Cool bear 的思路, 探讨 Box 的特性和原理.原文链接https://fasterthanli.me/articles/whats-in-the-box" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-19 20:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "box 里都有什么?" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RAII - Resource Acquisition Is Initialization 是个听起来高深莫测不知所云，但实际理解起来并不困难的概念。我们在理解一个新的解决方案的时候，先深入了解它面临的问题，再看之前的解决方案（prior work），然后再看它是怎么解决同样的问题，最后比较优劣。这大概是做研究的通识，也是我们从本原去真正理解事物的最佳途径.原文链接https://mp.weixin.qq.com/s/jaKjzc_1rkDe67rfpnFTgg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-19 20:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "透过 Rust 探索系统的本原：RAII" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "最近几个版本 Rust 还是更新了不少新功能, 具体是什么呢?这里列出了 1.50 和 1.51 所包含的一些新功能.原文链接https://rustacean-station.org/episode/033-rust-1.50-1.51/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-19 20:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "What's New in Rust 1.50 and 1.51" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "估计很多有人也有这个疑问, 我们能在嵌入式系统编程中使用标准库 std 吗?作者同样有这个疑问, 但是他找到了自己的答案, 有同样困扰的小伙伴可以参考一下.原文链接https://timmmm.github.io/std-embedded-rust/index.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-19 20:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "嵌入式系统中使用 std" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "trait-set 可以提供 trait 的别名, 虽然 Rust 也提供了类似的功能, 但是还没有 stable, 在此之前, 可以使用该库来替代github地址https://github.com/popzxc/trait-set--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-19 20:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "trait-set: 提供 trait 别名" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust请查收一份 Rust Web 全栈开发进阶图。Read Morehttps://github.com/anshulrgoyal/rust-web-developer-roadmap" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-18 23:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Web Developer Roadmap" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-18 23:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "“现代化”的 HTML 是什么样子？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "lidongjies" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "@MisterTechBlog 创建了自定义的打包目标 riscv32imacf-unknow-none-elf，让 Rust 成功在 BL602 IoT SDK 上运行起来。https://twitter.com/MisterTechBlogRepohttps://github.com/lupyuen/bl_iot_sdk/tree/rust/customer_app/sdk_app_rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-18 23:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 运行在 BL602 IoT SDK 上" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "快速，精简和可定制的系统信息提取器。Macchina允许您查看基本的系统信息，例如主机名，内核，正常运行时间，内存使用情况等等。它为您提供方便的功能和广泛的自定义选项，但不会忽略其两个主要优先级，即简约和性能。Github 链接，https://github.com/Macchina-CLI/macchina" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Macchina-CLI/macchina" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-17 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Macchina" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust非常酷，对于我的第一个Rust crate，我做了一个制作交互式shell的东西。它支持诸如解析命令之类的东西，并为您提供自动补全功能。Github 链接，https://github.com/Utagai/shi文章链接，https://www.reddit.com/r/rust/comments/ms95fn/my_first_rust_crate_an_interactive_shell_library/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Utagai/shi" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-17 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "shi：我的第一个Rust crate---交互式shell库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在finnhub-rs，一个给https://finnhub.io 做的简单的api，我们有一些问题很容易用rust来实现。如果您愿意，您可以为获得一些开源世界的经验做出贡献。文章链接，https://www.reddit.com/r/rust/comments/msmaij/easy_opensource_contributions_welcome/Github 链接，https://github.com/henryboisdequin/finnhub-rs/issues" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/msmaij/easy_opensource_contributions_welcome/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-17 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "欢迎来贡献简单的开源项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我正在使用RUST实现RTMP实时服务器，基本功能现已完成，下一步，我将进行一些测试并实现其他CDN功能，例如静态push或pull。Github 链接，https://github.com/harlanc/xiuhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/harlanc/xiu" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-17 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Xiu:Xiu是一个由rust写的在线服务。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "对于常规语言来说，字符串的理解对于大多数人来说不是难事。当新手开始接触Rust时,字符串&str,String会让他们丈二和尚摸不着头脑。本文详细介绍了Rust中字符串使用困难的原因。详情链接：https://www.brandons.me/blog/why-rust-strings-seem-hard" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.brandons.me/blog/why-rust-strings-seem-hard" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-16 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么Rust字符串看起来很难" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "最近，Rust基金会在官网宣布，接下来时间将陆续介绍了解董事会系列。本期的嘉宾是来自AWSShane Miller详情链接：https://foundation.rust-lang.org/posts/2021-04-15-introducing-shane-miller/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://foundation.rust-lang.org/posts/2021-04-15-introducing-shane-miller/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-16 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "带你了解Rust基金会" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者用Rust编写了一个给绿植的灌溉功能的小型系统。非常有意思的是，用的还是国内厂商的电磁阀。如果你对树莓派、硬件电路感兴趣的话，不要错过它。详情链接：https://github.com/kitallis/WAP" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/kitallis/WAP" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-16 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust构建小型滴灌系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n\nRust的重要性与C一样重要：https://www.reddit.com/r/rust/comments/mrl5sv/rust_is_every_bit_as_important_a_revolution_as_c/\n\n\nGoogle将支持Rust引入Linux内核:https://www.tectalk.co/google-throws-support-behind-bringing-rust-to-the-linux-kernel/\n\nRust的重要性与C一样重要：https://www.reddit.com/r/rust/comments/mrl5sv/rust_is_every_bit_as_important_a_revolution_as_c/Google将支持Rust引入Linux内核:https://www.tectalk.co/google-throws-support-behind-bringing-rust-to-the-linux-kernel/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.tectalk.co/google-throws-support-behind-bringing-rust-to-the-linux-kernel/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-16 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "推荐阅读" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baoyachi" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "项目为 Octopus Network，公司 Base 在北京。Octopus Network 致力于将 Web3.0 分布式应用落地化，积极探索 Web3.0 与 Web2.0 的结合，带给用户与当前互联网同样或相似的使用体验。公司已获得数百万美元的VC投资。网址：https://oct.network。现招聘 Rust工程师。\n使用 Rust 构建一整套 Web3.0 技术栈\n完善现有的开发框架\n解决一些细节技术问题\n\n有相当程度的 Rust 经验（1~3年经验）\n对 Rust 的 crates 依赖机制、cargo 工具、编译选项等使用相当熟悉\n对 Rust 的 no_std 编程有过研究\n有网络编程、存储系统、密码学背景知识\n\n对 WebAssembly 的原理和实践有经验者优先\n对 Blockchain 的原理和实践有经验者优先\n英语听说写能力好者优先\n对社区建设有经验，在Rust社区中有过贡献者优先\n对知名 Rust 开源项目（包括但不仅限于密码学、p2p通信、blockchain、分布式存储等项目）有过贡献者优先\n有加密领域实践经验者优先\n\n全远程\n\n同行业上等水平，100K$-150K$ total package, tax free。优质待遇诚邀优秀人才。\n\nEmail：mike@oct.network\nvx：daogangtang\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2021-04-16 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "【招聘】远程-Rust工程师，Web3.0，Octopus Network，待遇同行上等" }, "type": "text" }], "type": "title" } },]
