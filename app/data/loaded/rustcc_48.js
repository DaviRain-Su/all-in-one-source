export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cliRead Morehttps://meli.delivery/posts/2019-06-15-pre-alpha.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"meli: 新的终端邮件客户端 pre-alpha版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix_web使用最新版(actix-web 1.0.3)的APIRead Morehttps://gill.net.in/posts/auth-microservice-rust-actix-web1.0-diesel-complete-tutorial/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Actix-Web 1.0实现Auth Web微服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded这篇文章涵盖了使用声明宏、过程宏来避免在编写嵌入式代码中遇到的坑： 当Embedded Rust编码器调用Mynewt API，驱动程序和其他C函数时，可能会出现字符串相关的问题。为了解决这个问题，作者使用Rust的宏创建了一个新的类型Strn，它表示一个永远不会被修改的以null结尾的字符串。Apache Mynewt是一个开源的ioT操作系统，是C语言实现的，它支持很多传感器。Read Morehttps://medium.com/@ly.lee/safer-simpler-embedded-rust-with-apache-mynewt-on-stm32-blue-pill-d8fcb41969ac"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」使用Apache Mynewt更安全更简单地在STM32 Blue Pill上使用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ranger #file_browser #cli看起来操作性很高，比linux之前的MC好用多了。本工具受 ranger 和 emacs 启发。 （之前日报也推过）Hunterhttps://github.com/rabite0/hunter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hunter - 终端下的文件浏览器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nom类似于nom，但是它提供了读写功能，作者自己称：是nom的小兄弟。bin_iohttps://github.com/Tazdevil971/bin_io"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bin_io: 一个读写二进制文件的框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Higher-KindedType该文作者提出了一种方法，通过类型参数向下转换泛型trait来模拟当前Rust中的高阶类型/泛型关联类型，并且提供了使用该方法在Rust中创建Functors，Applicatives和Monads的简单示例。Read Morehttps://gist.github.com/edmundsmith/855fcf0cb35dd467c29a9350481f0ecf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中模拟高阶类型的方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust #std #const_genericsRead Morehttps://github.com/rust-lang/rust/pull/62435"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust标准库中array impl用上了const generics"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#algorithm #Geneticrusty-geneshttps://github.com/mithi/rusty-genes\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-08 23:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现遗传算法并用Python进行可视化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"flamer 是这样一个魔法东西，它可以方便地计算出你代码块的耗时。基本方法，就是在你的代码/函数头和尾（自动）插入计时代码，最后汇总出一个耗时（报告）。用到了 nightly 的自定义属性，所以暂时只能以 nightly 版运行。看下例子：Repohttps://github.com/llogiq/flamer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-07 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"神器 flamer"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 作这类工具太适合不过了。Repohttps://github.com/kanishkarj/snoopy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-07 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"snoopy - 一个可高度配置化的多线程网络包嗅探分析工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"采用 handlebars 语法。作者说它是 Rust 界最快的模板渲染引擎。Repohttps://github.com/botika/yarte"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-07 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"yarte - 号称最快的模板渲染引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个项目很有意思。想法很新颖。Repohttps://github.com/lopopolo/ferrocarril\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-07 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ferrocarril - 把 Ruby on Rails 嵌入 Rust 服务（容器）中运行的尝试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人寫了一個程式可以分析crates.io 裡面庫的大小read morehttps://www.reddit.com/r/rust/comments/c9fzyp/analysis_of_rust_crate_sizes_on_cratesio/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-06 21:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Analysis of Rust Crate Sizes on crates.io"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Keccak是一種多功能的加密函數。tiny-keccak是一個有基本加密函數的庫。這次新增了  big-endian平台支持與 KangarooTwelve哈希函數的支援read morehttps://www.reddit.com/r/rust/comments/c9h6ab/tinykeccak_150/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-06 21:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tiny-keccak 1.5.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用 d! 取代 dbg! 讓你得到更多debug資訊read morehttps://www.reddit.com/r/rust/comments/c9hdgu/dmacro_why_dbg_when_you_can_d/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-06 21:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"d-macro"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"三個月前曾發佈第一版現在的API跟 crossbeam-epoch 很類似，方便與 crossbeam 的組件合作。read morehttps://www.reddit.com/r/rust/comments/c9iltj/announcing_hazptr_dynamic_lockfree_memory/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-06 21:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hazptr - 動態無鎖內存回收"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新增了桌面縮放，WebGL更強大：低功耗高效能增加了 WebRender 一個基於GPU的2D渲染引擎read morehttps://www.reddit.com/r/rust/comments/c9kdfz/mozgfx_newsletter_46_mozilla_gfx_team_blog/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-06 21:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"moz://gfx 新聞 #46"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者寫了一個丟骰子的範例程式作為教學範例read morehttps://www.reddit.com/r/rust/comments/c9l2ow/speedy_desktop_apps_with_gtk_and_rust/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-06 21:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust與GTK 快速開發桌面應用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"read morehttps://youtu.be/k7nAtrwPhR8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-05 15:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"給 C++ 程式員的Rust教學影片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個簡單的教學，讓你用 Rust與WebAssembly 創建離線頁面read morehttps://www.reddit.com/r/rust/comments/c924s8/create_devs_offline_page_with_rust_and_webassembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-05 15:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust與WebAssembly 創建離線頁面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"read morehttps://www.reddit.com/r/rust/comments/c90dtm/build_a_decentralized_chat_using_javascript_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-05 15:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用JavaScript Rust 建構區塊鏈聊天系統（WebAssembly）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新增了 基本佈局、水平佈局修了幾個bug讓速度變快read morehttps://www.reddit.com/r/rust/comments/c97e9w/pushrod_035_gui_library_for_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-05 15:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pushrod 0.3.5: GUI Library"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"調查你工作上、業餘時間使用rust的情況。read morehttps://www.reddit.com/r/rust/comments/c96jnu/survey_on_upgrading_versions_rust_in_production/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-05 15:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 問卷調查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这次更新的内容比较丰富，概要：\nFuture trait已经稳定。那么async/.await也不远了\nalloc crate 稳定\nMaybeUninit 代替 mem::uninitialized\nNLL for Rust 2015 支持\n新的 HashMap<K, V> 实现，也就是hashbrown\nCargo offline支持\nRead Morehttps://blog.rust-lang.org/2019/07/04/Rust-1.36.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.36 稳定版新鲜发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章中详细讲解了 Perlin 团队，在他们的 Wavelet 区块链框架的基础上，构建一个去中心化应用（Dapp）的示例。逻辑使用 Rust 合约实现，编译成 Wasm 运行。数据存储，直接存储在区块链上。https://medium.com/perlin-network/build-a-decentralized-chat-using-javascript-rust-webassembly-c775f8484b52这种聊天与我们通常讲的IM有所区别，你见过发一条消息还要钱的吗？：）DemoRepohttps://perlin-network.github.io/decentralized-chat/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 和 Js 构建去中心化聊天软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Youtube 上，得自己想办法出去看咯。Read Morehttps://youtu.be/k7nAtrwPhR8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"（据说）有史以来最好的面向 C++ 程序员的 Rust 视频教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"融断是这样一个东西，它属于质量控制中的一环。如果一个组件发生多次失败调用，那这个组件就被融断了。调用这个组件中的东西，直接就返回拒绝服务的结果。（不知道小编理解得对不）。这里有讲 ，还是看原文吧。https://martinfowler.com/bliki/CircuitBreaker.htmlBook: Release it!Repohttps://www.amazon.com/gp/product/0978739213?ie=UTF8&tag=martinfowlerc-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0978739213"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"recloser - 使用 Rust 实现的一个融断库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库，思路清奇，通过接受 stdin 的输入，来直接产生2D图形输出。比如，可以像下面这样：然后运行输出Repohttps://github.com/calebwin/stdg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Standard Graphics - 另一种思路的2D图形渲染引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个视频，里面提到两个库特别有趣，一个是 copyless，另一个是 memcpy-find。对于性能优化有很大作用。https://github.com/kvark/copylessRead Morehttps://www.reddit.com/r/rust/comments/c8o1pc/video_rust_features_and_ecosystem_gems_that_power/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebRender 背后的生态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比如像下面这样简单几行就可以写一个向 Telegram 发消息的机器人了：Repohttps://gitlab.com/SnejUgal/tbot"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tbot - 用 Rust 为 Telegram 写机器人"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Glib 不用多介绍了吧。Glib 在 Gtk/Gnome 中的地位就跟 glibc 在 Linux 中的地位一样。这篇文章 讲了，glib 2.x 要设计一个新的分配器 API，借鉴了一些 Rust 的理念。https://gitlab.gnome.org/GNOME/glib/issues/1815\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-04 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的理念已经开始影响 glib 的接口设计了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#jobassembl公司主要技术栈是Nodejs和Electron，所以也希望应聘者有Nodejs经验。可远程。当然你有Rust的丰富开发经验也是可以的。联系邮件：s@assembl.ch\nassembl官网\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「远程工作」assembl招Rust开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#CrossPlattform该贴作者的团队计划开发一个应用程序并将其部署在Android和iOS上，同时也想以将其移植到Windows，MacOS和Linux。目前的想法是，整个应用程序/业务逻辑将作为可交叉编译的库一次性实现，以便可以在多端共享。你是否会推荐Rust呢？如果推荐Rust有什么经验分享？目前还未有太多讨论，可以关注。Reddit 讨论https://www.reddit.com/r/rust/comments/c8c9ce/crossplattform_application_logic_development_as_a/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」跨平台应用的逻辑开发共享库的最佳实践是什么？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm该文以使用WebAssembly转换markdown格式为html的示例，介绍了Rust和WASM。Read Morehttps://dev.to/sendilkumarn/increase-rust-and-webassembly-performance-382h"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"提升Rust和WebAssembly的性能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#C(ABI)该文介绍了一个小工具cargo-c，帮助开发者改善Makefile和build.rs的开发体验。\nRead More\ncargo-c\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"构建C(ABI) Like的Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#raytracingray-tracing-iow-rusthttps://github.com/nwtgck/ray-tracing-iow-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"花一个周末写的光线追踪动画"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#timberio #logTimber.io是一家提供日志服务的SaaS厂家。Vector是一种高性能的可观测数据路由器。它使得收集、转换和发送日志、性能指标和事件更加容易。它将数据收集和路由从应用服务中分离出来，使开发者能够控制和拥有数据，还有许多其他好处。它编译成一个静态二进制文件，并被设计为部署在整个基础设施上，既充当轻量级代理，又充当高效的服务，使从A到B的数据获取过程简单而统一。\nhttps://vector.dev/\nvector\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Vector: 为logs, metrics, 和 events提供收集、转换和路由的开源工具集"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustcPGO优化是一种常见的基于概率的编译器优化技术，主要是通过在收集程序执行的profile信息来估算某些代码执行的频率来进行优化。Read Morehttps://github.com/rust-lang/rust/pull/61268"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编译器按配置文件引导优化（Profile-guided optimization，PGO）稳定化支持已经被merge到主分支"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tls #opensslrustls是一个现代的Rust实现的TLS库。结论：\nRead More\nrustls\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TLS 性能: rustls vs OpenSSL"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-analyzer是Rust编程语言的实验性编译器前端。 该项目的最终目标是为Rust提供完美的IDE体验，所有IDE功能在编辑代码时都能完美运行。在2019年2月，rls-2.0工作组在柏林成立之后，rust-analyzer成为了这项工作的一部分。该工作组的目的是尝试构建支持IDE的编译器的可能方法，然后通过这些尝试所获得的知识来确定Rust的总体方向。请注意，rls-2.0用词不当：当前并没有立即替换现有Rust语言服务器（rls）的计划。这篇文章讨论了rust-analyzer的现状、未来计划，并宣布rust-analyzer Open Collective （可能是某种开放式基金会）。Open Collective是一组具有共同使命的人，完全透明地运作。每个人都可以看到他们如何收钱或花钱。到目前为止完成的成就：\nChalk和rust-analyzer的集成\n尝试集成现有的rls和rust-analyzer\n保证新功能的引入不会影响性能\n尝试解决「宏」相关的问题，让IDE可以更好地支持宏\n未来计划：\n将目前取得的成就进行组件化，也就是开发出独立的crate，然后集成到rustc中，估计rustc会有大量的重构工作。\n确定rls和rust-analyzer的关系，因为它们具有不同的体系结构，这个问题也需要花费大量时间。\nOpen Collective：Open Collective专注于为正在进行的项目而不是为个人筹集资金。有闲钱的可以支持下。\nopencollective.com/rust-analyzer\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer现状：成就和Open Collective"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mimallocmimalloc是最近流行的一个C实现的性能良好的小型通用分配器。mimalloc_rusthttps://github.com/purpleprotocol/mimalloc_rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mimalloc_rust: mimalloc的另一个Rust绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#indy #hyperledgerHyperledger Indy（超级账本）官方发布的Rust SDK。Hyperledger Indy是特别为去中心化的身份而建立的一种分布式账本。它提供了基于区块链或者其它分布式账本互操作来创建和使用独立数字身份的工具、代码库和可以重用的组件。indy-sdkhttps://github.com/hyperledger/indy-sdk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"indy-sdk: indy SDK实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#openapi #WIP0.2发布，支持OpenAPI V2接口。目前还是WIP状态。papercliphttps://github.com/wafflespeanut/paperclip\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-03 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"paperclip: OpenAPI的代码生成工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Discordserenityhttps://github.com/serenity-rs/serenity"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"serenity: Discord API的Rust客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Spotifylibrespothttps://github.com/librespot-org/librespot"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"librespot: 开源的Spotify客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RSoC目前是本系列第三篇。ptrace (process trace)系统调用通常与调试相关,它是本地调试器监视类unix系统上调试的主要机制，同时也是实现strace系统调用跟踪的常用方法。Read Morehttps://www.redox-os.org/news/rsoc-ptrace-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Redox编程之夏博客系列」：为Redox OS实现ptrace Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pythonMercurial开发人员写的一篇博客。在重写Mercurial的一些核心部分期间，他们必须为Python提供一个类似于类的接口来运行Rust代码（他们使用rust-cpython）。 通常，该类实现了__iter__，这需要Python来保存对Rust迭代器的引用。 每当遇到这个问题时，他们只是将整个结构复制到Python的数据类型，这是一种糟糕的方式。最近他们重构了代码，直接在Rust和Python之间实现了共享引用来解决上述问题。本文通过一个简单的HashSet为示例，阐述了他们的共享引用的方法，并且还解决了Python GC可能会将共享引用收集而引发内存泄漏等问题。\nRead More\n相关代码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Python和Rust之间共享引用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#OrthogonalArray正交数组：一个具有特殊的数学特性的二维数组，例如，数组中的任意两列都包含了所有可能的、由数组的任意值组成的对值。Read Morehttps://afnan.io/post/introducing-oars/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学术」介绍oars：用于处理正交数组的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#python #go该文作者先后用Python、Go和Rust实现了同一个程序，在使用过这三种语言之后，他写了这篇文章，比较客观公正地比较了这三门语言。感兴趣的可以看看，结论还算客观。Read Morehttp://www.nicolas-hahn.com/python/go/rust/programming/2019/07/01/program-in-python-go-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Python，Go和Rust编写同一程序之后的心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#riscv由MIT并行和分布式操作系统小组出品RVirthttps://github.com/mit-pdos/RVirt"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RVirt: 用Rust编写的RISC-V管理程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#zig作者出于比较Zig和Rust哪个更适合编写小型的图形应用的目的，分别使用这两种语言实现了一个小的光线追踪程序。所以，作者的结论是：Rust和Zig他都非常喜欢，以后做大项目就用Rust，做点自己的小项目用Zig。Read Morehttps://nelari.us/post/raytracer_with_rust_and_zig/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust和Zig编写小的光线追踪程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang #wip又一门由Rust编写的新语言，不过该语言状态是WIP，感兴趣可以关注。leafhttps://github.com/AlmightyFloppyFish/leaf\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-02 15:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"leaf：注重效率的高级函数式编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#topic如果你在San Francisco, Berlin 或 杭州，想要分享Rust在区块链中的应用，可以填一下这个申请表Read Morehttps://docs.google.com/forms/d/e/1FAIpQLSdqDDPv6WylWCel8j5oorm3U5M1wtQJ7gYLsw_Ng6IcDcDSBg/viewform"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust在区块链中的应用 Topic 申请表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#closure本文是一篇介绍闭包的文章，在学习中的朋友可以看看Read Morehttps://medium.com/swlh/understanding-closures-in-rust-21f286ed1759"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"理解闭包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GUIWinit是纯Rust Window创建库。Servo和Alacritty都使用了该库。 支持Glutin（或者包括gfx-rs，Glium和Amethyst在内的相关项目）等图形编程。新的版本中引入了新的事件循环。现在因为团队人手缺乏，所以想请求社区的朋友帮助测试、审查和贡献代码。\nRead More\nwinit\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Winit 0.20 alpha 1 发布，请求测试、审查和贡献"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#study该系列文章记录了作者对Rust标准库的一些学习心得。Read Morehttps://ehsanmkermani.com/2019/06/18/rust-std-study-series-interior-mutability/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Rust标准库研究系列」内部可变性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#study该文通过示例记录了作者学习Rust生命周期的一些心得Read Morehttps://medium.com/@richardanaya/a-journey-through-rust-lifetimes-5a08782c7091"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的生命周期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ReverseProxysozu是一个Rust实现的反向代理库，该文作者写了一篇关于sozu的文章。\nsozu\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sozu：HTTP 反向代理实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#runtimeRuntime库的成员正在考虑为其增加时间支持，本文讨论了std:time模块，以及可以为无缝集成runtime工作流而进行的一些更改讨论。Read Morehttps://blog.yoshuawuyts.com/std-time/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"std::time与Runtime库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli #markdowntermimadhttps://github.com/Canop/termimad"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"termimad： 可以在显示富（Markdown）文本的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RayTracerRead Morehttps://canmom.github.io/programming/graphics/raytracer/rust-raytracer-part-3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」使用Rust实现光线跟踪 Part3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GameBoy任天堂的Game Boy是曾经最受欢迎的计算机之一，该小书作者说：如果想学习计算机是如何工作的，没有比模拟实现一个计算机更好的学习方法了。Read Morehttps://blog.ryanlevick.com/DMG-01/public/book/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「小书」使用Rust从零开始制作任天堂GameBoy模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #log这是一个通用的包，它使用异步元数据扩展标准日志包。 这是向Rust引入完整的异步track功能的第一步。Read Morehttps://blog.yoshuawuyts.com/async-log/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-log：使用异步元数据扩展标准日志包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#haskell #regexhaskell-vs-rust-regex-benchmarkhttps://github.com/bennydictor/haskell-vs-rust-regex-benchmark/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust vs Haskell 正则性能比拼"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#jiebaRead Morehttps://blog.paulme.ng/posts/2019-06-30-optimizing-jieba-rs-to-be-33percents-faster-than-cppjieba.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"优化jieba-rs，比cppjieba快33%"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#termux #nixShell #androidNixOS平台上为安卓手机交叉编译Termux（安卓手机上的终端）Read Morehttps://blog.geemili.xyz/blog/rust-app-on-termux-with-nix/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用nix-shell为Termux编译Rust应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#git #clidiffrhttps://github.com/mookid/diffr\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-01 13:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"diffr: 一个diff高亮工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以在 Linux，macOS 和 Windows（暂不确定）上工作。如何使用：\ncopy text to clipboard: cbs -c \"Text to be copied to clipboard\"\npaste copied text: cbs -p\ncopy from stdin: cat exmaple-file.txt | cbs\nRepohttps://github.com/robatipoor/cbs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-30 12:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cbs - 在命令行中管理剪贴板"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个例子写得非常清晰，详细，是作者为了学习 Rust 异步开发的一个尝试。强烈推荐学习。当然，它只能在 Linux 上运行（因为 epoll）。另外，Reddit 上的大神们给了一些改进建议https://www.reddit.com/r/rust/comments/c7292d/asyncawait_simple_http_server_with_epoll/Repohttps://github.com/murphysean/betarustasyncawait"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-30 12:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"例子：使用 Rust Async/Await 和 Epoll 配合使用写一个简单的 http 服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由 brson 大佬维护，代码中给了详尽的注释，是很好的学习教项目。其实平时测试时也是可以用的：Repohttps://github.com/brson/basic-http-server"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-30 12:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"basic-http-server - 另一个静态 http 服务器的示例教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对，就是那个 MIT 博士生，之前在 youtube 上录过超长时间 Rust 教程讲异步的那位小青年。他真的很热心。开问答的时间是：https://www.youtube.com/watch?v=9_3krAQtD2k不过，好像我们这边在睡眠中。Repohttps://github.com/jonhoo下面这个帖子的跟帖很有价值。Read Morehttps://www.reddit.com/r/rust/comments/c71f03/im_a_phd_student_building_a_fast_research/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-30 12:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Jonhoo 要在线开问答了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用Brave瀏覽器的工程師重寫了Rust中瀏覽器的廣告攔截引擎，並因此看到了大幅度的速度提升。原因是，他們可以更勇敢的實作複雜的平行演算法而不怕資料競爭。read morehttps://www.reddit.com/r/rust/comments/c6smnj/in_rust_we_trust_brave_smashes_speed_limit_after/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中 在超級重寫ad-block引擎後，Brave打破速度限制"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"裡面對不同的crate做特化tracing-fmt, tracing-futures, tracing-macros, tracing-proc-macrostracing-log, tracing-env-logger, tracing-serde, tracing-subscribertracing-tower, tracing-tower-httpread morehttps://www.reddit.com/r/rust/comments/c6rrwf/ann_new_crate_tracing_application_level_tracing/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tracing: 程式級別的追踪程式執行"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust的分析客戶端https://segment.com/是一個分析網站，透過這個crate，你可以把你的程式資料上傳上去進行進階的資料分析read morehttps://www.reddit.com/r/rust/comments/c6mj6w/segmentioanalyticsrust_segment_analytics_client/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"segmentio/analytics-rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"所有crate都更新為Rust 2018。刪除了所有構建腳本，從而縮短了構建時間。文檔已更新。read morehttps://www.reddit.com/r/rust/comments/c6j6ge/rand_07_release/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rand 0.7"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者說最近NLLrust 1.36 的2015版本可以使用了read morehttps://www.reddit.com/r/rust/comments/c6hs2t/breaking_news_nonlexical_lifetimes_arrives_for/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"臨時新聞： NLL 已經好了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"非同步的 log 記錄read morehttps://www.reddit.com/r/rust/comments/c6wjbz/introducing_asynclog/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-log"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"N-D線性代數的一個安全的const泛型實現這個庫非常像 aljabar你可以簡單的創造出 2x3 矩陣read morehttps://www.reddit.com/r/rust/comments/c6uzbr/constalg_and_arrayvec_a_safe_const_generics/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-29 22:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"const-alg & array-vec"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比上一版快28倍，可以快速的掃描各種 js frameworkread morehttps://www.reddit.com/r/rust/comments/c60bo9/announcing_ress_rusty_ecmascript_scanner_070/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RESS (Rusty EcmaScript Scanner) 0.7.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個人講了他做了一個 entity system他需要資料跟行為綁在 entity 而且可以互相分享並在實體內裡面有靜態的資料大家可以看看怎麼做的read morehttps://www.reddit.com/r/rust/comments/c62uwn/way_of_rheas_entity_system/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rhea 實體系統"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PF3是什麼？給一些矢量路徑根據矢量路徑生成“填充”（將生成“圖塊”的操作）使用“填充”來生成“圖塊”：實心圖塊或Alpha圖塊實心瓷磚並不存在，它們只是渲染命令/著色器，表示“用顏色X為圖塊中的每個像素著色”透明度圖塊是16x16像素的平方數據，用於對每個像素中的透明度級別進行編碼，透明度圖塊用作“Mask”以及實心圖塊來繪製不僅僅是一種純色的圖塊請注意，屏幕的16x16像素平方區域可能有多個與其關聯的透明度平鋪，具體取決於該平鋪中的路徑數量（因此，透明度平舖是路徑特定的）最後通過GPU混合功能完成透明度圖塊的混合PF3 目前使用OpenGL來實作read morehttps://www.reddit.com/r/rust/comments/c60o58/implementing_a_gfxhal_backend_for_pathfinder_3_an/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"實作 gfx-hal 的 PF3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"read morehttps://www.reddit.com/r/rust/comments/c63amk/wavelet_an_open_ledger_for_writing_scalable/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wavelet 一個開放式分類帳，用於在Rust中編寫可擴展、任務式、安全、分散式的WebAssembly智能合約"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"平行化執行 shell 指令它的靈感來自GNU Parallel，主要區別在於異步通過在後台運行服務器來保持命令之間的狀態。read morehttps://www.reddit.com/r/rust/comments/c66dtz/async_parallelize_your_shell_commands/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"twiggy 是一個 wasm 大小分析器read morehttps://www.reddit.com/r/rust/comments/c6apb2/announcing_twiggy_version_060/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Twiggy 0.6"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前還沒有文件，還不太了解跟其它實作的差異read morehttps://www.reddit.com/r/rust/comments/c6hbc5/neqo_mozillas_rust_quic_implementation/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-28 17:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Neqo : Mozilla的 Rust QUIC的實作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当然，有算法方面的改进。也正是 Rust 语言让项目组的人思考更清晰，找出更有效的算法。Read Morehttps://brave.com/improved-ad-blocker-performance/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Brave.com 使用 Rust 写的浏览器广告阻拦器比原来C++写的快了 69 倍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章详细阐述了 Rhea 粒子系统（图形渲染领域）的实现方法，作者用 Rust 实现了一个与 Rust 语法很类似的脚本语言。Read Morehttps://www.anthropicstudios.com/2019/06/05/entity-systems/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通向 Rhea 粒子系统之路"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这次更新讲解了操作系统实现中的堆分配。对操作系统感兴趣的同学可以仔细学习一下。Read Morehttps://os.phil-opp.com/heap-allocation/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 写操作系统，新更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"其中的智能合约SDK部分，使用 Rust 实现，也就是说，智能合约由 Rust 来写，编译成 WebAsssembly 部署。项目本身是用 go 实现的，据说是发明了一种新的共识协议。Read MoreRepohttps://medium.com/perlin-network/wavelet-beta-df9c738747e2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wavelet - 性能超高的公链"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比 Angular.js 的词法扫描器快 28 倍（229ms -> 11ms）Read MoreRepohttps://www.reddit.com/r/rust/comments/c60bo9/announcing_ress_rusty_ecmascript_scanner_070/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RESS - JS 词法扫描器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这里全是 https://rustacean.net/Read Morehttps://rustacean.net/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"想要 Ferris 吉祥物的小伙伴注意了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 1.38.0 (beta cut 2019-08-15) MVP 稳定。文章在下面。Read Morehttps://github.com/rust-lang/rust/issues/62149"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async/await MVP 稳定目标日期出来了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"bstr 是一个字符串库，与 std 字符串库的区别是，它不需要字符串内容是 utf8 的。其它完全一样。Read Morehttps://docs.rs/bstr/0.2.1/bstr/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bstr 发布了 v0.2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者自己搭的，可供自行搭建参考。Repohttps://github.com/mcorbin/meuse\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-27 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"meuse - 第一个私有仓库中心"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #videos该视频探讨基于wasm技术构建现代区块链智能合约执行环境的关键问题。Read Morehttps://www.youtube.com/watch?v=q8c5n_1dQm4"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」Lightbeam: 一个高度优化的流式WebAssembly编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tokio\nRead More\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tokio master分支正在切换到std::future"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GNU Parallel，它是一个shell工具，可以在一台或多台计算机上并行的执行计算任务，一个计算任务可以是一条shell命令或者一个以每一行做为输入的脚本程序。GNU Parallel会把输入分块，然后通过管道并行执行parallelhttps://github.com/mmstick/parallel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"parallel： Rust实现的类GNU Parallel的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#const #LinearAlgebra不过目前是实验性的。aljabarhttps://github.com/maplant/aljabar"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"aljabar: 基于 const generics 实现的n维线性代数库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clipfhttps://github.com/robatipoor/pf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"paste.rs：命令行文件共享工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm类似于Rust By Example的一本小书，是教你学WASM。目测内容还不够丰富，不过可以先关注。Read Morehttps://wasmbyexample.dev/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WASM by Example"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#regularRead Morehttps://rustexp.lpil.uk/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust正则表达式在线编辑工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#macro这是一篇介绍Rust声明宏的精简文章。Read Morehttps://blog.x5ff.xyz/blog/easy-programming-with-rust-macros/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"把Rust宏变成自己的日常小帮手"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#renderDigitalBridge公司利用光线追踪技术做家居环境的云渲染技术。他们为什么使用Rust呢？最初的挑战是：可行的云渲染需要大量使用低开销，高性能的语言。 自成立以来，构建和维护此服务一直很困难，我们的初始生产版本包括：\n复杂的CUDA层;\n成千上万的C++代码来准备和运行渲染;\nC库上的C++包装器;\nC封装在C++库上;\nCython为渲染器提供可调用的接口以进行集成。\n使用C++会严重阻止许多具有高级语言经验的团队成员为代码库做出贡献。 它还导致偶尔难以调试的内存安全性和正确性问题，即使是我们经验丰富的C++开发人员也会感到困惑。所以，他们选择了Rust。他们的全部服务，包括所有C、C++和Python组件都使用Rust重写了，从任务加载到调度GPU操作都使用Rust（一个全栈Rust案例）。使用Rust为他们带来诸多好处：\n改进了开发流程。\n将多语言统一为一种语言。之前是C/C++/Python，现在只有Rust。\n保证了产品质量。\n现在他们的产品中，每天可以处理1000多个渲染定制服务。Read Morehttps://www.digitalbridge.com/blog/why-were-using-rust-for-cloud-rendering"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"DigitalBridge： 为什么我们在云渲染中使用Rust？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#type本文简要地介绍了Rust中的类型系统。Read Morehttps://medium.com/journey-to-rust/rust-type-language-48e1c43b1ef4\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-26 22:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 类型语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#memoization有一种技术叫记忆化（memoization），可以避免函数的多次计算，从而节省资源。顾名思义，记忆化技术可以把函数的调用结果记忆下来，或者说缓存下来。本文作者以Fibonacci序列递归函数作为例子，一步步介绍了Rust中的实现函数记忆化功能的最佳实践。Read Morehttps://medium.com/swlh/on-memoization-291fd1dd924"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的记忆化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mercurialFacebook的Mercurial版本控制系统从去年开始就已经用Rust重新实现了，这篇文章主要是其开发者在学习模块系统的一些实践和有助于命令行参数解析和错误处理的常用crate分享。Read Morehttps://ngoldbaum.github.io/posts/helpful-rust-cli-crates/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Rust模块系统和命令行应用有用的常用的crate介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tokio #futuresRead Morehttps://chilimatic.hashnode.dev/experiment-with-streams-reading-files-with-futures-cjx1q0gmo001eurs1pt0c27kz"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Stream和Futures读取文件实验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli #GettingStartRead Morehttps://www.linuxjournal.com/content/getting-started-rust-working-files-and-doing-file-io"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「新手向」使用文件和文件I/O开发实用的命令行程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tips使用NewType模式和Deref配合使用。Read Morehttps://medium.com/apolitical-engineering/how-do-you-impl-display-for-vec-b8dbb21d814f"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「技巧」如何为Vec实现Display"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#aws #lambdaRead Morehttps://medium.com/clevyio/automating-rust-and-nodejs-deployment-on-aws-lambda-using-layers-2d47d129a6bc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用AWS Lambda 的“层(Layer) ”功能实现自动Rust和NodeJS部署"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix_web本文通过记录一个actix-web的应用案例，展示了从0.7升级到1.0的过程。Read Morehttps://zupzup.org/asyncify-rust-webapp/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步Actix Web App升级到1.0案例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ffi本文作者在使用Rust和C做一些SoC设备上的开发，想对其室内的植物土壤中的水份湿度进行监测。该文描述了作者认为的Rust和C集成的最佳实践：Rust-C插件接口。该文作者的另一篇FFI文章也值得看看。\nRead More\nrepo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个简单的Rust FFI插件接口"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#green_thread可以算上一本小书了，从零开始实现绿色线程，值得学习。\nRead More\nrepo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"200行Rust代码实现绿色线程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#git应该是一个练手项目，根据《构建Git》一书来实现的。Repohttps://github.com/samrat/rug"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rug：使用Rust重新实现git"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GStreamerRead Morehttps://gstreamer.freedesktop.org/news/#2019-06-24T20:00:00Z"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GStreamer Rust绑定 0.14 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lockfreeswym是一个事务性内存库，它优先考虑性能。 这篇文章将探讨一些关于swym进展承诺的最新研究，以及与非阻塞算法的一些比较。Read Morehttps://mtak-blog.github.io/are-we-lock-free-yet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"swym 实现无锁了吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#python #pyoxidzerPyOxidizer（项目，文档）发布了第一个版本，这是一个旨在解决Python应用程序分发问题的开源实用程序！独立单个文件，无依赖性可执行Python应用程序。\nRead More\nPyOxidizer\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用PyOxidizer构建独立的Python应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clikutt-rshttps://github.com/robatipoor/kutt-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust为https://kutt.it实现命令行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust评论很精彩。看到了编译时间、闭包、错误处理等。（但是有人说语法不优雅，我是不认同的）Read Morehttps://www.reddit.com/r/rust/comments/c4nb27/what_are_the_things_you_hate_about_rust/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-25 21:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Reddit讨论」Rust中有哪些遭人诟病的地方？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustSites有意願貢獻者可以直接註冊 https://pontoon.rust-lang.org/zh-TW 協助貢獻，亦可加入 TG 群參與討論 https://t.me/rust_zh_tw。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 網站台湾繁體中文翻譯計畫正式啟動"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Erlang #BEAMScroggin是一位经验丰富的软件工程师，对计算机世界有着广泛的兴趣。他最著名的贡献是他的Phoniex框架和其他库对Elixir生态系统的支持。在这次Code BEAM STO 19大会上，他分享了Rust和BEAM的集成。\nVideos\nSlides\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sonny Scroggin - BEAM + Rust 天作之合"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gtk新版本开始支持Rust 1.34Read Morehttps://gtk-rs.org/blog/2019/06/22/new-release.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gtk-rs 发布了新版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#malloc虽然这不是一个Rust实现的项目，而是C实现的，但这可能项目很酷，也许Rust社区也需要。可以下载一下论文pdf看看。已经有了Rust绑定：mimallocator\nmimalloc\n论文Pdf\nmimallocator\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mimalloc: 一种性能良好的小型通用分配器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RSoC目前写了两篇，还未完。ptrace (process trace)系统调用通常与调试相关,它是本地调试器监视类unix系统上调试的主要机制，同时也是实现strace系统调用跟踪的常用方法。Read Morehttps://www.redox-os.org/news/rsoc-ptrace-0/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Redox编程之夏博客系列」：为Redox OS实现ptrace"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #Graphics这是一篇学习图形化开发的好文章。使用Rust和SDL2实现Doom有效中的火焰效果。Read Morehttp://notryanb.github.io/rust-doom-fire-fx.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"利用SDL2实现[PSX]毁灭之火（Doom Fire）效果"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lockfree #hashtablechthttps://github.com/Gregory-Meyer/cht"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cht: 无锁并发hash表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actixsoxyhttps://github.com/estk/soxy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"actix-web 1.x实现的反向代理库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#socks5merinohttps://github.com/ajmwagar/merino"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"merino: Rust实现的SOCKs5代理服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#softbody\n在线demo\ngravitle\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gravitle: 用于Web的2D软体引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embededReal Time For the Masses (RTFM)是嵌入式并发框架。嵌入式Rust工作组Leader写博客宣布RTFM v0.5.0新版本支持多核，该版本将随着Rust 1.36稳定版先后发布。Read Morehttps://blog.japaric.io/multicore-rtfm/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」RTFM v0.5.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#physics该贴作者声称，这是首个使用Rust分析的论文被发表。之前都是Cpp。该论文主要探讨了Rust在其领域的可行性，并且他实现了一个分析框架，用于分析来自CERN基地的公共数据。\nReddit 讨论贴\nalice-rs\n论文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学术」物理学粒子实验室研究员首次使用Rust进行数据分析并且发表了论文"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#concurrent #skiplist该库是官方核心成员无船大佬新写的并发数据结构。这些可用于任何只有Map或Set扩展的并发算法，而不会丢失成员。kudzuhttps://github.com/withoutboats/kudzu"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Kudzu：在并发跳表之上实现Map和Set"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nomnom 5.0是你从未见过的船新版本。抛弃了宏语法，拥抱了基于trait的组合子函数。但是据说向后兼容？\nnom\n示例\n5.0发布日志\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nom 5.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli国内社区 smilingleo 自我安利的他自己的rust练手小成果typing-englishhttps://github.com/smilingleo/typing-english\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「小工具」边打字边背单词"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库的特点是多线程，可以充分利用多核。可以放心地用在不安全网络中（可能是做了很完善的错误处理）。看看效果：Repohttps://github.com/kpcyrd/sniffglue"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sniffglue - Rust 实现的网络嗅探器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新出来的一个，纯正的用Rust写GUI。借鉴于 IMGUI, MLIB, Love2D。其基本理念是利用 Widget trait 对象和 Container，来看一下其设计理念图：Repohttps://github.com/mrgaturus/trgui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"trgui - 又一个GUI框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个系列文章，目的是对于有以往OOP编程经验的程序员，看一下在Rust中如何实现/做到OOP编程的思维和模式。写得非常细致。推荐。Read MoreRead More 2Read More 3Read More 4https://oribenshir.github.io/afternoon_rusting/blog/rust-for-oop"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【系列】Rust 的 OOP 编程研究"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者其实在2017年就用Rust实现了一版，现在新写了一篇文章，讲他如何用最新的异步语法来升级了之前的程序，记录下这个过程中的心得体会。HTSP 协议是 TVHeadend 支持的一种流媒体协议。https://tvheadend.org/Read MoreRead More 2https://www.rubdos.be/rust/async/programming/2019/06/22/implementing-htsp-in-rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 实现 HTSP 协议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者写 proxy 的目的是为了代理 API 请求和一系列的中间件服务。在写作过程中，感觉 Rust 很好，很好，很好~~~~甚至自己做了一个EVA的图？虽然有点丑。Read Morehttps://medium.com/@terry.raimondo/writing-a-proxy-in-rust-and-why-it-is-the-language-of-the-future-265d8bf7c6d2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 写一个 Proxy，作者感言 Rust 是编程界的未来"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust密码学生态现在已经是第一完善的梯队了。这都是区块链带来的机遇吧？Repohttps://github.com/brycx/orion"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"orion - 又是一个Rust密码学库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个算法是Matlab中用于处理矩阵的算法，论文在这里。Rust 实现版本基于 ndarray。http://xrm.phys.northwestern.edu/research/pdf_papers/1997/bro_chemometrics_1997.pdf算法小编是不懂，但是我知道Rust实现的版本比Python实现的版本快多了：Repohttps://github.com/igmanthony/fnnls"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fnnls  - Rust 实现的 FNNLSa算法库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个问题很常见，但是能处理好的不多，这是他的最新思考。Read Morehttps://raphlinus.github.io/rust/gui/2019/06/21/smooth-resize-test.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-23 17:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Xi-Editor 作者最新文章 - 窗口变动大小的时候如何做到平滑"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cli 和 registry 后端都是 rust 构建的这是国内社区Andy 实现的一个idris包管理器read morehttps://www.cao.st/posts/elba-3-pub/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"elba v0.3 上线了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"将rust的猜数字游戏迁移到WASI目标上，并增加日志追踪与命令行传游戏难度的功能read morehttps://huangjj27.gitlab.io/posts/wasmer-guess-game/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasmer guess game"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇介紹並發執行在rust為什麼無聊但是讓人安心的投影片因為不用解 data racesread morehttps://speakerdeck.com/_rvidal/concurrency-in-rust-is-boring"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Concurrency in Rust is Boring"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用soa vec來存資料可以更有效的擊中cpu cached 達到計算加速read morehttps://www.reddit.com/r/rust/comments/c35rre/introducing_soavec/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"soa-vec(Struct-of-arrays-vec)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"安全多線的封包嗅探器 支持ipv6read morehttps://www.reddit.com/r/rust/comments/c3atmi/sniffglue_v090_released_with_ipv6_support/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sniffglue v0.9.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"windows gui rust庫，需要大家一起來測試read morehttps://www.reddit.com/r/rust/comments/c3cmqb/winit_020_the_state_of_windowing_in_rust_and_a/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Winit 0.20"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"read morehttps://www.reddit.com/r/rust/comments/c3fo96/short_youtube_intro_to_rust_lifetimes_ownership/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-22 21:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust簡介短片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要新增了 const 常數關鍵字的高亮支持read morehttps://www.reddit.com/r/rust/comments/c2xkyn/intellij_rust_changelog_100/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IntelliJ Rust 又更新了 #100"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個輔助測試 Bash 的程式假如你原本有個你可以改成 toml 的格式read morehttps://www.reddit.com/r/rust/comments/c2y4vl/scriptkeeper_a_bash_testing_library_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Scriptkeeper"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原本用 actix 0.7 要升級到1.0的可以看read morehttps://www.reddit.com/r/rust/comments/c30kru/asyncifying_an_actix_web_app_and_upgrading_it_to/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"教學：升級到Actix Web 1.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"IOTA是一種區塊鍊 可以遠端要會英文，需要帶team 的程式主管職read morehttps://www.reddit.com/r/rust/comments/c31the/searching_for_a_senior_rust_developer/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IOTA現在需要rust高手"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇非同步讀寫 stream 教學read morehttps://www.reddit.com/r/rust/comments/c326e0/rust_streams/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Streams"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"老生常談了，速度快、記憶體安全、平行計算能力read morehttps://www.reddit.com/r/rust/comments/c32qgb/why_we_chose_rust_as_our_programming_language/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"為什麼我們要選rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"typestate 是一種API設計原則讓對象的某些函數在特定狀態下才可用，如果在錯誤的狀態便會不能編譯這有個好處，是將執行期錯誤轉為編譯期，消除運行時檢查讓代碼更小更快來看看作者怎麼說吧？read morehttps://www.reddit.com/r/rust/comments/c33u9m/the_typestate_pattern_in_rust/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-21 16:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Typestate 模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个按这本书实现的图形渲染库。看下效果Read Morepbrthttps://www.rs-pbrt.org/blog/v0-6-1-release-notes/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rs-pbrt 发布 v0.6.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 diesel-factories。这个库参考 Ruby 的 factory_bot 设计。可以对应像下面这样写：https://github.com/davidpdrsn/diesel-factoriesRead Morehttps://techblog.tonsser.com/posts/creating-test-data-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何对 diesel 写自动化测试数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"vxWorks 是大名鼎鼎的实时操作系统，在嵌入式设备和工业上大面积使用。现在有个pr要在 Rust 编译中加入对 vxWorks 的支持。Read Morehttps://github.com/rust-lang/rust/pull/61946"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"把 Rust 移植到 vxWorks 上面去"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讲安全，讲历史，讲Rust。Read Morehttps://thenewstack.io/rust-creator-graydon-hoare-talks-about-security-history-and-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 最早作者 Graydon Hoare 又给出一个演讲"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用这个库，用 Rust 对 GPU 编程就非常方便了，这个库提供了一些宏，使得 GPU 编程也能充分利用 Rust 的生态。看下代码长啥样：Read Morehttps://github.com/calebwin/emu"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：使用 Rust 进行 GPU 编程的库 Emu"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Iterator 页面据说会从 14.4MB 缩减到 724kB ：DRead Morehttps://www.reddit.com/r/rust/comments/c2fi64/the_size_of_the_iterator_doc_page_will_be_reduced/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的 docs 页面要瘦身了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天这个库发布了 v0.7。来看一下性能：另外还有一个库叫 librsvg，目前也已经用 Rust 重写了。这是各大 Linux 发行版中很基础的一个库，与resvg 比，两者性能上目前各有千秋。Read Morehttps://github.com/RazrFalcon/resvg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"resvg - 强悍的 svg 渲染库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讲得很清晰，想听听现场录音。Slidehttps://content.riscv.org/wp-content/uploads/2019/06/14.05-building_secure_systems-1.pdf\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-20 19:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 和 RISC-V 构建安全系统，一个 Slide"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#libra #facebook谢邀。昨天第一时间看了下白皮书。看看Libra的愿景，安全是重中之重。使用Rust写区块链，底层的内存安全有保证，也就是说杜绝了系统产生漏洞的可能性。另外从Libra的智能合约语言MOVE中看得出来，Rust对Libra的影响是很深的。如果说Rust是专门为内存安全而重新抽象和设计，那么MOVE就是为金融安全而重新抽象和设计。看看MOVE这个名字，它代表了资源只能在帐号间转移，而不会被复制或无故消失。这和Rust的MOVE语义是很相近的。这种影响是深层次的，设计哲学级别的影响。也就是说：\nLibra不仅仅是底层区块链使用了Rust。\nLibra上层的金融逻辑基础，都是受Rust安全思想的影响。\n这也印证了，Rust之父在创造Rust之初对互联网未来的看法：未来的互联网必然是安全和性能都要保证的。以Facebook的体量和野心，也许未来的互联网，就是货币互联网，对于安全和性能都是有很高要求的。\n现在Libra代码量还不是很大，可以开始学习Rust了，现在学习还不晚。Librahttps://github.com/libra/libra"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Facebook的数字货币项目Libra由Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async目前async/await已经接近稳定了。但目前还在等待PR 61775，它允许多个生命周期参数出现在async fn中。还有另外的PR 61872，它接近了一些ICE问题。现在官方希望大家来提交更多的测试用例。\nRead More\nPR 61872\nPR 61775\n测试用例\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async/await 请求更多测试用例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GUIAzul的作者因为自己的工作和家庭私事，所以无暇继续维护Azul框架。也许这种情况会持续一年。不过也有其他人汲取了Azul框架的灵感，会继续fork说不定。Read Morehttps://www.reddit.com/r/rust/comments/c24b57/azul_the_gui_framework_will_be_unmaintained_from/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「通告」Azul GUI 框架从现在起停止维护"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#riscv64 #debian完成迁移后，除了Rust的500多个crate之外，还有其他软件包在某种程度上直接依赖或使用LLVM，但目前这并不完全适用于riscv64，所以，在后续他们也会提供LLVM for riscv64的支持，预计在2019年期间完成。Read Morehttps://people.debian.org/~mafm/posts/2019/20190617_debian-gnulinux-riscv64-port-in-mid-2019/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Debian GNU/Linux 将要在2019年中完成riscv64的迁移工作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#opengpgKeys.openpgp.org正在运行一个新的验证密钥服务器，该服务器使用Rust编写，基于Sequoia。本文介绍了此服务器。Read Morehttps://sequoia-pgp.org/blog/2019/06/14/20190614-hagrid/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Hagrid： 基于Sequoia的新验证密钥服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#X509用于生成X.509证书的库rcgenhttps://github.com/est31/rcgen"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rcgen 0.4发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#decompilerradare2是一个开源的逆向工程和二进制分析框架，包括反汇编、分析数据、打补丁、比较数据、搜索、替换、虚拟化等等，同时具备超强的脚本加载能力，它可以运行在几乎所有主流的平台。Radecohttps://github.com/radareorg/radeco"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Radeco: 一个基于radare2的二进制分析框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#compiler #javascriptrusty-jsychttps://github.com/jwillbold/rusty-jsyc\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-19 12:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rusty-jsyc: Rust实现的JavaScript-To-Bytecode编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ESP这篇文章简要介绍了ESP32开发板相关的Rust生态。Read Morehttps://dentrassi.de/2019/06/16/rust-on-the-esp-and-how-to-get-started/?pk_campaign=twitter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」如何在ESP上使用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clitockhttps://github.com/nwtnni/tock"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"命令行下的闹钟"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pbrtrs_pbrt是对《Physically Based Rendering,PBRT(光线跟踪：基于物理的渲染) 》这本书中代码的Rust实现。Read Morehttps://www.rs-pbrt.org/blog/v0-6-0-release-notes/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rs-pbrt 0.6 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nodejs使用Rust和通过FFI加速项目后端的Nodejs服务，也可以使用Rust和WASM来加速前端页面。Read Morehttps://medium.com/paloit/speed-up-your-javascript-with-rust-7661922562fa"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust加速JavaScript"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#patternTypestates是一种将状态属性（程序正在处理的动态信息）迁移到类型级别（编译器可以提前检查的静态世界）的技术。该文作者基于Typestates探讨了一个更广泛的主题，将其扩展为一种模式，用于API设计。作者认为，使用类型状态模型，可以防止破坏指定规则的代码正常编译，从而帮助程序员更早发现错误并消除运行时检查的开销。该文举了两个简单示例，然后也谈到serde库里的Serializer使用了该模式，用来建立一个相当复杂的状态机。（也许是Rust语言的特有模式？）Read Morehttp://cliffle.com/blog/rust-typestate/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"类型状态(Typestates)模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#thread这篇文章图文并茂地系统的介绍了Rust中多线程并发、内存可见性、锁和原子类型等概念。Read Morehttps://chilimatic.hashnode.dev/threads-in-rust-cjwmbxw9e003pzjs19n7pa0bt"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的线程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#videoRust 核心团队leader在PLISS大会上的另一场分享，讲述了他在设计和实现Rust的过程中所学到的东西。\nYoutube\nSlides\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」Things I Learned (TIL)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DirectedGraph据作者称，比标准Dijkstra算法要快。fast_pathshttps://github.com/easbar/fast_paths/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fast_paths: 计算加权有向图最短路径的快速算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#makepad #2D #animation\nmakepad\n在线js版demo\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-18 15:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"makepad: 基于Rust实现的2D设计和动画工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#official大家快来了解下Rust吧！！！Rust官网中文简体版https://www.rust-lang.org/zh-CN/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust官网简体中文翻译，正式上线了。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#java通过j4rs这个库可以实现在rust中调用java，这篇翻译文章是该库的作者所写，介绍了j4rs项目的初衷和现状。Read Morehttps://zhuanlan.zhihu.com/p/69412984"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【翻译】在Rust中调用Java代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blogos探讨了另一种裸机程序适配链接器的解决方案和它的必要性。《链接器参数》https://zhuanlan.zhihu.com/p/69393545还修改了第一到三章大量篇幅内容，适配了上半年出现的自定义目标三元组编译方式，修复了诸多问题。Read Morehttps://zhuanlan.zhihu.com/c_1078248076300521472GitHub项目地址https://github.com/rustcc/writing-an-os-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《使用Rust编写操作系统》系列文章新增一节附录《链接器参数》，"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#vec #tips该文中给出了12种解法，各有什么优劣呢？这就需要你自己来考察了\nRead More\nPlayground\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"检测Rust中Vec中是否有相等的元素"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gameRepohttps://github.com/hecrj/coffee"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"coffee 2D游戏引擎 发布 0.3版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Comparing该文作者是加拿大滑铁卢大学（uwaterloo）的学生，在做他们学校cs444的编译器课程。该课程的目的是提供对类Java语言编译器基本结构的透彻理解，主要部分包括为简化的类Java语言实现编译器。该文作者使用了Rust语言来实现此课程的编译器。其他团队使用别的语言，比如Haskell、C++、Python、Scala和Ocaml，所以他就有此机会在同一项目之下，比较不同语言的实现。他主要是比较不同语言实现的代码量和编译器大小，与该语言的思想、特性、解析方案等所做的决策之间的关系。\nRead More\ncs444\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"同一项目实现的情况下，对比Rust，Haskell，C++，Python，Scala和OCaml"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#const_generic此包提供用于初始化，使用和转换数组的实用方法。 所有方法都是长度通用的。此库使用了最新的const_generics功能。array-helpers-rshttps://github.com/finegeometer/array-helpers-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"array-helpers-rs: 利用const-generic特性的方便数组操作的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#any #traitObjecttraitcasthttps://github.com/bch29/traitcast"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"traitcast: 支持从Any转为trait对象的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tips此方法返回切片上的迭代器。 可以指定迭代器长度。 它允许您遍历切片并在每次传递时具有特定大小的窗口。Read Morehttps://medium.com/@tindleaj/rusts-slice-windows-is-really-cool-70d50cdc74c5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「技巧」Rust的slice::windows功能非常棒"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ripgreprga包装了ripgrep并使其能够搜索pdf，docx，sqlite，jpg，zip，tar。*，电影字幕（mkv，mp4）等。性能很好。\nRead More\nripgrep-all\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rga: 对ripgrep搜索功能的扩展库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#videoRust社区的老朋友Jon Gjengset昨天带来的直播视频，过程宏的第二部分。Read Morehttps://www.youtube.com/watch?v=KVWHT1TAirU"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」过程宏 Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game最新版主要是集成了Rendy。 Rendy是一个位于gfx-hal之上的底层渲染引擎，允许定位Vulkan，Metal，DirectX（WIP），OpenGL（WIP）和WebGL（WIP）。与gfx生态系统兼容使得独立库的集成变得更加容易！Read Morehttps://amethyst.rs/posts/release-0-11"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amethyst 0.11.0  已经发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#VST #RustAudioGitHub组织Rust DSP最近与RustAudio合并。所以之前Rust DSP的vst-rs项目现在已经迁移到RustAudio组织中。\nRustAudio 论坛\nRustAudio/vst-rs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"VST crate现在已成为RustAudio的一部分"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Flatpak该文主要介绍了flat-manager这个库，该库是Flatpak官方出品。Flatpak(前世为xdg-app) 是一种用于构建，分发，安装和运行应用程序的技术。它主要针对的是Linux桌面，通过在沙箱中隔离应用程序来提高Linux桌面的安全性，允许应用程序安装在任何Linux发行版上。解决Linux软件安装时的依赖问题。\nRead More\nflatpak/flat-manager\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"flat-manager: 用于管理Flatpak存储的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmLightbeam旨在用作Wasmtime中的初始编译器，并作为Substrate智能合约子系统的主要编译引擎。该文详细介绍了Lightbeam。Read Morehttp://troubles.md/posts/lightbeam/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"介绍 Lightbeam：优化流式WebAssembly编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tipsRead Morehttps://ngoldbaum.github.io/posts/project-euler/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-17 19:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「经验分享」使用Rust刷欧拉项目（Project Euler）的前20个问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"刚出来，仅供了解，这里的“交易”是指业务的原子性，常见于数据库中。与区块链或密码学中的交易，是不同的概念。类似于 STM。https://en.wikipedia.org/wiki/Software_transactional_memoryRepohttps://github.com/Dynisious/tx-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tx-rs - 一个提供 wrtie ahead 的原子交易库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一看就是国人的项目。命名有点玩耍的味道，但是思路和设计可以借鉴。Repohttps://github.com/xiaoniu-578fa6bff964d005/duang"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"duang - 使用宏来提供默认参数和命名参数"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个工具发布 v2.0 了。就是 du 的升级版。先看下效果图。Repohttps://github.com/Byron/dua-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dua-cli - 用于查看当前目录下的磁盘容量使用情况"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不过这个UI是用于游戏内的UI。Repohttps://github.com/hecrj/coffee"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"coffee 2D游戏引擎推出了响应式UI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对于这些文件，就可以放心删除。这在重构的时候很有用。来看一下效果图：Repohttps://github.com/pzmarzly/stale-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"stale-rs - 用于找出项目工程中，没有被链接的rs文件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者说，在网上，总是听到说Rust这里好那里好，那么，Rust不好的地方有哪些？这里就简单汇总一下人们的吐槽：\nCompile times for large projects\nCrate ecosystem is still very young, volatile and sparse\nBecause the community is young and still largely curiosity-driven, some essential crates have inconsistent maintenance since there aren't many maintainer organizations yet\nOrphan rules make the glue-package approach (like Java uses) intractable and thus it's difficult to combine different parts of the ecosystem or factor libraries as much as one would like\nRelated to the above, we're probably still several years or editions away from a good dynamic linking/plugin story (but for good reason, related to the below)\nThe language's real potential still always seems one unimplemented RFC away (e.g., async, const generics, GATs, unsized rvalues, etc.)\nA lot of the features really essential to write libraries of the quality one would like are still unstable (e.g., specialization)\nMany crates have not yet reached version 1.0. This can make them more \"scary\" to use, as the API could change at any point.\nstd::net is quite lacking. For example, you can't perform a non-blocking connect. There is net2, but it has its own set of issues. Then there's socket2 to address net2's issues, but its API is a bit clunky. It's also not very popular, so it remains to be seen for how long it will stick around.\nI think only recently was mirroring of crates.io introduced in a more sane way, though I don't remember exactly in what state.\nAsync IO is still clunky. MIO seeks to provide a nice API, but it's not zero-cost by any means. It also has some issues with Windows. I ended up having to use my own wrappers for epoll and kqueue, and used wepoll for Windows.\nNo crate namespacing, so you end up with crates like \"yorickpeterse-socket2\", \"billy-bob-socket2\", etc. This also means name squatting is more annoying.\nThis is not an issue with Rust itself, but is worth mentioning: I really can't stand Clippy. More often than not I upgrade it, and it in"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust不好的地方有哪些？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"要比较语言，莫过去用它们实现同一个项目/工程了。作者是一个学生，他们被布置实现一个Jave的子集到x86的编译器。不同的组用了不同语言自行实现。不过，这次这篇文章只是比较了实现同一个编译器需要用到的代码量。其实这个很不客观，因为不同小组实现同一个目标的设计思路和算法都不同。但是这还是能给人一点参考意义，至少知道一个大概的量级和复杂度。Read Morehttp://thume.ca/2019/04/29/comparing-compilers-in-rust-haskell-c-and-python/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-16 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust, Haskell, C++, Python, Scala 和 OCaml 实现同一个工程的比较"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#zhihu #impl_lang来自国内社区 NameFactory ，他在用Rust实现一门动态语言，并且在知乎里记录了他的心路历程。大家可以关注一下，支持一下。\nRead More\nshattuck\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」用Rust写脚本语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今晚8点，Random Capital合伙人刘毅老师会有一场关于web3，substrate方面的讲座，敬请期待小鹅通手机直播地址：最好微信打开https://appbhteffsi3308.h5.xiaoeknow.com/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81ZDAwYjU0NjEzOGJmXzhLQ0NscGtIIiwiYXBwX2lkIjoiYXBwYmhURWZGc0kzMzA4IiwicHJvZHVjdF9pZCI6InBfNWNmNzczNTJjZGUxY18xYUtGTDZNYSIsInNoYXJlX3VzZXJfaWQiOiJ1XzViNTUzNTg5MjhmNzZfd0Zhd25tdTZ1MSIsInNoYXJlX3R5cGUiOjUsInNjZW5lIjoi5YiG5LqrIn0="},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"区块链直播讲座： Web3思想简史——致真正的区块链创业者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://zhuanlan.zhihu.com/p/69269688"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「源码阅读」qrcode-rs源码学习分享"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#image #go这是一次群里讨论的记录。主要问题是：Go和Rust图像处理性能相比如何？（同一场景）经过作者的测试，发现go的性能更好。\nGo耗时：695.732µs\nRust耗时：8 ms （默认release opt-level应该是3）\n探究其原因：这个案例说明：Rust并不保证默认的实现就是高性能，还需要开发者根据具体的实现来优化。对此，PingCAP的唐刘大佬说：「嗯，后面我们都可以开一个 talk，如何用 Rust 写高性能代码，在 TiKV 里面不知道踩了多少坑」，这里立个Flag。 PingCAP参加今年的台湾开源年会，可能也有相关的主题。Read https://github.com/developer-learning/learning-rust/issues/23"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「实录」Rust 和 Go 在图像处理上的性能之争"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sealed这是来自于德国柏林一家专注于Rust咨询和服务的公司Ferrous System写的文章。这是系列文章中的第一篇文章，详细介绍了Ferrous System计划对Rust语言和编译器进行安全关键领域认证的计划，这个计划叫做Rust「封印计划」（Sealed Rust）。也就是说，他们要搞起Rust认证了，但这个认证不是对人的认证，而是对Rust语言和编译器，在特定领域上进行安全认证，以便满足特定领域（汽车，工业或航空电子设备等对安全要求更高的领域）的安全需求。该系列第一篇文章就是描述了该计划的初始流程等内容，感兴趣可以看看。概要：目前Rust有三种发布状态：Nightly、Beta和Stable。现在Ferrous公司打算提出第四种状态：Sealed。这个版本是从当前Rust中，精选出可以用于特定领域的功能子集，来专门发布一个版本。有点像 #[no_std]，专门用于嵌入式。所以，Sealed就相当于是一种功能的「封印」，这是我把这个计划叫做「封印计划」的原因。现在还不确定这个计划是否会成为Rust开发的一部分，但是该公司首先会进行第一波推动，并且打算和Rust Core团队合作。这个计划也是一个长期的计划，他们在学习Rust edition，计划第一个封印版本在18个月内推出。更多内容请看原文吧。（我个人觉得这个计划很不错）Read Morehttps://ferrous-systems.com/blog/sealed-rust-the-pitch/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」 Rust「封印计划」"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blockchain是一个快速和可扩展的可验证随机函数(VRF)库，目前支持一些最广泛使用的椭圆密码套件。Read Morehttps://medium.com/witnet/announcing-our-verifiable-random-function-vrf-rust-library-2e042c29a4f7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"vrf-rs: 可验证随机函数(VRF) Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#HexagonalArchitecture该文作者在看《Clean Architecture（整洁架构）》一书中提到的六边形架构的时候所作的一些思考。六边形架构，也叫洋葱架构或端口和适配器架构，这个架构的思想是：拥抱依赖倒置。这非常有利于架构的可扩展性。作者的这篇文章也酝酿了很久，按他的话说，就是他发现Rust非常适合六边形架构，可以说是最佳选择。原因？所以，作者进一步考察了使用派生宏在六边形架构的Rust代码中是否适合，结论是：在当前状态下，在Rust代码库中最大限度地使用这样的架构会导致与Rust生态系统中的自定义派生的某些事情产生一些“摩擦”。但是看到Rust发展并在解决这些问题，他感到非常兴奋！具体案例代码看看原文吧。Read Morehttps://blog.eizinger.io/5835/rust-s-custom-derives-in-a-hexagonal-architecture-incompatible-ideas"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"六边形架构中应用Rust的自定义派生（derive）宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#FileEncryption核心是Rust实现，GUI是基于CFC/MFC和Qt实现。cloakerhttps://github.com/spieglt/cloaker"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cloaker：非常简单的基于密码的跨平台文件加密工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tips该文介绍了基于Global build cache来加速编译的一个小技巧，但也有三点重要的注意事项。另外的替代方案是使用Mozilla出品的sccache工具。Read Morehttps://estada.ch/2019/6/7/rusts-hidden-talents/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust隐藏的天赋：加速构建和版本管理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix #irc基于actix和irc库实现的一个irc协议库。Read Morehttps://gitlab.com/AGausmann/actix-irc/tree/0.1.0-dev"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"介绍 actix-irc"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章开篇抛出一个有趣的问题：在一个纯粹的假设场景中，太空中有一颗小卫星可以让地球上的人在其机载计算机上上传和运行自己的任务软件。然后，用户将能够控制卫星子系统。选择哪门编程语言最好？以允许人们编写这样的软件，而不用担心过早结束任务？要求：首先，任何语言的主要必要性是匹配应用程序的所属领域。可以将空间任务软件视为基于事件驱动的基于状态的体系结构，其中至少有部分代码在硬实时下运行，某些任务活动只能在特定条件下进行。生存任务要优先于科学或其他活动。因此，任务的软件开发过程需要生成特别健壮的代码，这些代码有望在预期和非预期的场景中均可执行。语言工具和语义都必须能够强制执行编写软件产品代码所需要的规范。其次，与许多地面计算机相比，卫星车载计算机在可用硬件资源方面的限制增加，特别是如果所讨论的卫星是具有有限功率和计算预算的CubeSat（立方体卫星，低成本微卫星，计算资源有限）。有效的资源利用率必须是语言功能的一部分，可直接控制内存分配和CPU周期。第三，应该对卫星上使用的硬件和软件功能提供足够的支持。如果要考虑CubeSat，则应包括嵌入式通信总线，如I2C，SPI和CAN，以及可能需要实现自定义驱动程序的许多不同硬件外围设备。现代纳米卫星中常用的操作系统是FreeRTOS和Linux，通常是一种ARM微处理器。最后，用这种编程语言编写代码应该很有趣。我们希望没有太空产业的人们亲身体验太空探索;他们不应该对现代航空航天软件开发过程感到沮丧和恐惧。如果修补自制硬件和软件的人不喜欢这样做，那么70年代和80年代的计算机革命就不可能实现。即使编程航天器是一项关键任务活​​动，如果我们希望在航天工业中发生类似的革命，也不应感到痛苦和无助。(感觉就是为Rust量身定制的问题？)该问题我也发到了知乎：https://www.zhihu.com/question/329522820 ，欢迎大家讨论。来看看本文作者怎么说？Read Morehttps://blog.exodusorbitals.com/2019/06/14/a-programming-language-for-extraterrestrial-applications/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一种用于太空应用的编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#github来吧，给你喜欢的Rust开源大佬们（当然，不限于Rust语言）投一票。Read Morehttps://docs.google.com/forms/d/e/1FAIpQLSdE8nL7U-d7CBTWp9X7XOoezQD06wCzCAS9VpoUW6lJ03KU7w/viewform"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"你希望在GitHub赞助名单上看到哪位开发人员？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Symbolication #Debug #Sentry符号化即服务（Symbolication as a service），Sentry在过去的几个月中，将使用的许多符号代码移动到一个独立的服务中。 现在他们很自豪地推出独立的原生符号服务Symbolicator。它的API与Microsoft的符号服务器兼容，并且始终100%开源。Read Morehttps://blog.sentry.io/2019/06/13/building-a-sentry-symbolicator"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Symbolication as a service: Sentry 为捕获Rust崩溃调试信息操碎了心"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#vimeo #av1今天，世界领先的专业视频平台Vimeo宣布支持新的免版税视频编解码器AV1。 AV1编解码器使高清晰度和超高清视频内容能够以更低的比特率流式传输到受众，而不会影响视觉质量。Vimeo去年加入了开放媒体联盟。在推出对AV1的支持时，Vimeo与开放媒体联盟的创始成员之一Mozilla合作。 Vimeo利用并贡献了Mozilla的开源编码器rav1e（Rust实现的AV1编码库）。至此，Vimeo也算是拥抱了Rust社区。「我们很自豪能够为rav1e编码器的开发做出贡献，并加入Mozilla为免费和开放视频所做的努力。总之，我们正在为下一代视频编解码器奠定坚实的基础，—— Vimeo编码首席工程师 Vittorio Giovara 如是说。」rav1ehttps://github.com/xiph/rav1e"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Vimeo推出对免版税视频编解码器AV1的支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clijenhttps://github.com/whitfin/jen\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-15 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Jen：根据模板生成虚假文档的命令行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"开放社会密码朋克运动比特币前传交易成本为何是比特币？超越比特币世界计算机——以太坊去中心化的三个维度后斯诺登时代Web3及其愿景Web3应用的特性Polkadot/Substrate历史的两条线索Web3创业者的伴手礼15号晚上刘毅老师会有一场关于web3，substrate方面的讲座，敬请期待小鹅通手机直播地址：最好微信打开https://appbhteffsi3308.h5.xiaoeknow.com/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81ZDAwYjU0NjEzOGJmXzhLQ0NscGtIIiwiYXBwX2lkIjoiYXBwYmhURWZGc0kzMzA4IiwicHJvZHVjdF9pZCI6InBfNWNmNzczNTJjZGUxY18xYUtGTDZNYSIsInNoYXJlX3VzZXJfaWQiOiJ1XzViNTUzNTg5MjhmNzZfd0Zhd25tdTZ1MSIsInNoYXJlX3R5cGUiOjUsInNjZW5lIjoi5YiG5LqrIn0="},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Web3思想简史——致真正的区块链创业者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要是rust愈來愈多人想學了read morehttps://www.reddit.com/r/rust/comments/c05rue/2019_developer_skills_report_hackerrank/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2019 開發者技術報告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個使用rust實作的 keyserverread morehttps://www.reddit.com/r/rust/comments/c05xuz/keysopenpgporg_written_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"keys.openpgp.org (使用 Rust 實作)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這在C++有個Impl Pointer 實作法，來看看rust怎麼做的吧read morehttps://www.reddit.com/r/rust/comments/c073i1/on_public_api_and_private_implementation/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何開放API並且隱藏實作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人想在windows用rust寫driver 但找不到資源，希望大家給個建議目前只有一個 https://github.com/pravic/winapi-kmd-rs 的樣子read morehttps://www.reddit.com/r/rust/comments/c082tt/are_there_resources_in_rust_to_work_with_wdk/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Windows Kernel-Mode Drivers 使用rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"4k1w是 Four Kings One War這個遊戲https://store.steampowered.com/app/883680/Four_Kings_One_War/看起來蠻有趣的，作者覺得是個不錯的體驗read morehttps://www.reddit.com/r/rust/comments/c0e5yf/i_created_a_rust_chess_ai_for_16x16_variant_4k1w/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"有人做了一個 下棋AI 4k1w"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個產生文件的命令列程式能根據模版產生一些常見的文件read morehttps://www.reddit.com/r/rust/comments/c0d879/jen_a_rust_cli_to_generate_fake_documents_based/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-14 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Jen"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章总结了很长一段时间以来，与生命周期打交道的一些心得体会。写得非常清晰，仔细。可供一读。Read Morehttps://medium.com/@richardanaya/a-journey-through-rust-lifetimes-5a08782c7091"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"与Rust生命周期打交道的经历总结"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"同步还发布或升级了 rand_chacha, rand_distr, rand_pcg, rand_hc, rand_isaac, rand_xorshift, rand_xoshiro 等组件。Read Morehttps://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust rand 库发布 v0.5，有不兼容更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个有趣的项目。我们想一想，如果我们想在两个浏览器中交换文件，按以前的方式，是不是要通过一个服务器中转（A传文件到服务器S，B再从S上下载）。对于比较大的文件，这种方式就会呈现很多缺点。fibridge是这样一个项目，它可以实现文件，以流的形式，通过服务器中转，实时传送到另一端（浏览器）。其中的 fibridge-proxy-rs由 Rust 实现。https://github.com/anderspitman/fibridge-proxy-rsRead Morehttp://iobio.io/2019/06/12/introducing-fibridge/相关项目（貌似都很有创意啊）\nbrowserver\nomnistreams\nfilepizza\ninstant.io\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fibridge - 用于浏览器中点对点直接流式缓冲的项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"相当于一个简化版的tls。作者说，它只有一个用户，就是你有一个tcp连接，想加密，但是不想使用tls时 ：DRepohttps://github.com/mrmekon/ossuary"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ossuary - tcp加密通道库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"也就是说，最新的 nightly 可以像这样写了：Read Morehttps://github.com/rust-lang/rust/pull/60669"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"函数内的 Attributes 标注已经被合并了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Cool! 来看一下例子：Repohttps://github.com/hsfzxjy/i2a-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"i2a-rs - 把图片转换成终端下的彩色文字的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"据小编观察，数据非常可信，由于国内图床很麻烦，建议大家直接传送过去看。另外，关注微信公众账号：Rust语言学习交流，查看完整版本。Read Morehttps://www.jetbrains.com/lp/devecosystem-2019/rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：Jetbrains 发布了 Rust 2019 生态报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"别听很多人嚷嚷，其实看这一篇就够了。Read Morehttps://github.com/rust-lang/rfcs/blob/master/text/2592-futures.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"当前标准库（nightly）中 futures 的设计思路和取舍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不知不觉，gfx 已经 5 周年了（对，在Rust 1。0发布之前就开始了）。这个项目目前几乎已经成了 Rust 图形领域库的一个事实上的标准设施。也为我们展示了如何做一个世界级的项目。Read Morehttps://gfx-rs.github.io/2019/06/12/anniversary-5.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gfx-rs 5 周年庆典了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新鲜速看。Repohttps://github.com/cfsamson/book-green-threads-explained"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 200 行 Rust 代码讲解绿色线程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比如：Repohttps://github.com/io12/unf\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-13 22:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"unf - 把文件名中不符合unix命名规则的字符清除的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"继续公开测试，检查是否有错别字、或表意错误等问题，然后在Pontoon上面进行审校。\nRead More\nPontoon\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 官网简体中文翻译公开测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pingcap #talent感兴趣的可以跟着学习一下。当然，该项目下也有Go课程，针对TiDB相关的。Read Morehttps://github.com/pingcap/talent-plan/tree/master/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PingCAP人才计划培训课程：Rust网络应用实践"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#githubRead Morehttps://mgattozzi.com/turning-github-into-your-own-registry/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"把GitHub打造成你自己的Cargo Registry"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gtk #windows #msvc该贴作者对于gtk-rs团队推荐使用GNU工具链不是太满意，所以他自己折腾出一些方案分享出来给其他人减少麻烦：Reddit 讨论https://www.reddit.com/r/rust/comments/bzkhmt/how_to_use_gtkrs_on_windows_using_the_msvc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在Windows平台上基于MSVC工具链使用gtk-rs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustRust 核心团队leader在PLISS大会上的分享，对编译器感兴趣的可以听一下。时长1小时27分。许多编译器教科书和课程将编译视为一种“批处理过程”，其中编译器接收一堆输入文件，经过一组编译器转换，并最终生成目标代码作为输出。 但是，越来越多的用户希望与VSCode等IDE集成，后者需要不同的结构。 此外，许多语言都具有递归结构，其中正确的处理顺序难以静态地确定。 Niko（Nicholas）将讨论Rust团队在重组（restructuring）Rust编译器以支持增量编译和IDE集成方面所做的一些工作。\nSlides\nSlides\nVideos\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」响应式编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lockfree支持同时读写，与evmap库类似。evchttps://github.com/4lDO2/evc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"evc: 一个无锁的同步原语库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded概要：Read Morehttps://rust-embedded.github.io/blog/embedded-rust-in-2019/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」嵌入式工作组： 嵌入式Rust 的 2019"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sql通过http接口交互请求，支持简单的SQL语法。minsqlhttps://github.com/minio/minsql"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"minsql: 分布式SQL式日志搜索引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章：视频"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一些无锁和无等待数据结构的学习资源"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ocr是leptonica 和 tesseract C库的Rust绑定leptesshttps://github.com/houqp/leptess"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"leptess： Rust OCR库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #puzzlewordsolvehttps://github.com/naftulikay/wordsolve"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wordsolve：现代填字游戏的简单求解器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#metricsmetrics-facade提供了类似于log库的宏，这些宏方便开发者收集性能指标(递增计数器、度量表和直方图)来测量其代码。metrics-facadehttps://github.com/metrics-rs/metrics/tree/master/metrics-facade"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"metrics-facade 发布 0.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Raytracer\nPart I\nPart II\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」用Rust写一个光线追踪器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#docker主要是利用多阶段构建的方式，在最后一个阶段将编译好的二进制文件复制到一个最小化镜像里。详细请看原文。Read Morehttps://alexbrand.dev/post/how-to-package-rust-applications-into-minimal-docker-containers/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-12 15:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何将Rust应用打包为最小的Docker镜像"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#official首轮翻译和校对已经完毕，感谢参与者们的付出。现在公开给社区进行下一轮审校，感兴趣的朋友可以登录Pontoon，参与后续的贡献。https://pontoon.rust-lang.org/zh-CN/rust-www/可以点开Pontoon网站，查看team info信息，加入组织。官网中文版在线的测试地址http://www-staging.rust-lang.org/zh-CN/本次贡献者分工角色和工作流程记录："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-11 16:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 官网简体中文翻译已经完成了一个里程碑。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#frameworkNannou 是一个开源的创意框架，新版本从OpenGL切换到Vulkan以处理跨平台图形。这个框架真酷，可以生成各种创意性的艺术动画。\nRead More\nguide\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-11 16:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Nannou 0.9 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GraphQLGraphQL对于构建API非常棒，作者认为Rust非常适合GraphQL，因为它的类型系统和代码生成功能很棒。但是，如果要构建一个由SQL数据库支持的GraphQL API，会很快遇到N + 1查询错误。当在解析器内执行查询并具有返回列表的字段时，会发生这些情况。 如果不小心N + 1真的会带来很大的性能损耗。对此的一种常见解决方案称为“eager loading”。 该方案的想法是提前执行必要的查询，并使用尽可能少的查询加载多个关联。\nReddit 讨论\njuniper-eager-loading\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-11 16:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"juniper-eager-loading ： 用于修复GraphQL中的N + 1查询错误的包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gitTokei是一个Rust实现的快速计算程序代码行数的工具。Read Morehttps://github.com/XAMPPRocky/tokei/blob/master/CHANGELOG.md#1000"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-11 16:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tokei 10.0.0版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tomlwarmy是一个Rust编写的可实现热加载/重载的库，新版本提供了对toml crate的通用支持。warmy-0.12https://crates.io/crates/warmy/0.12.0\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-11 16:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"warmy 0.12 新版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Linux #StaticallyLinked运行于Linux内核之上Read Morehttps://www.reddit.com/r/rust/comments/bylizk/statically_linked_rust_executable_running_on/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-10 17:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「示例」使用静态链接的Rust可执行程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#concurrent #map #set #lockfree新库，刚发布0.1。Read Morehttps://vorner.github.io/2019/06/09/announcing-contrie.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-10 17:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Contrie： 无锁并发映射和集合库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix_web这个教程非常完整，基于actix-web 1.0和Diesel实现的一个基于JWT认证的微服务系统。\nRead More\nrepo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-10 17:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「教程」使用actix-web 1.0实现认证微服务系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GUI用于随时查看和控制数据repohttps://github.com/nannou-org/nannou_timeline"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-10 17:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nannou_timeline： 一个GUI小工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix_web #tokio #postgresReddit讨论贴https://www.reddit.com/r/rust/comments/bytqu5/actixweb_10_and_tokiopostgres_04_deadlock/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-10 17:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」使用actix-web 1.0和tokio-postgres 0.4发生的死锁问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Embedded长文预警！这是来自新加坡李立源（一位嵌入式教育工作者）老师的文章。他在尝试用Rust来替代C语言进行嵌入式开发的教学。这篇文章很详细地比较了C和Rust在嵌入式开发中的差异。如果你也想跳出C开发的「苦海」，建议好好看看这篇文章。\nRead More\n相关视频\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-10 17:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」使用STM32 Blue Pill在Apache Mynewt上托管嵌入式Rust应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 中的模板渲染引擎已经有不少了，这一个是支持 ERB/JSP 渲染语法的库。Repohttps://github.com/kardeiz/erst"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-09 16:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Erst - ERB/JSP 那种 <% %> 的模板引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"glob 模式是这样一些：globber 是实现这些功能的一个 Rust 库，它提供了对字符串的匹配功能。目前还没有支持文件目录查找，正在进行中。Repohttps://github.com/CJP10/globber"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-09 16:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"globber - 扩展的通配模式匹配库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它支持多后端：位图、矢量图、windows和 webassembly。来看看效果，相当不错Repohttps://github.com/38/plotters"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-09 16:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"plotters - Rust 图表库 v0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个对科学计算应该非常有用。它做如下工作：把这种写法，简化成这种：Repohttps://github.com/Andlon/numeric_literals"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-09 16:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"numeric_literals - 数字字面量库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"网络隐写术就是这种，比如把有用的信息，编码到一个图片中，把图片发送给别人，达到传递隐藏信息的目的。哇，终于见到Rust写的这种库了！Repohttps://github.com/ajmwagar/stego\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-09 16:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"stego - 网络隐写术界的瑞士军刀"},"type":"text"}],"type":"title"}},]
