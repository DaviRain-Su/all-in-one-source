export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Dart and Rust: the async storyhttps://dev.to/sunshine-chain/rust-and-dart-the-async-story-3adk作者在及之前发表的文章Dart Meets Rust: a match made in heaven中介绍了Dart和Rust语言的完美结合在一起用于开发Flutter应用。（Flutter用于开发跨平台iOS/Android的原生态移动端应用程序)。这里作者继续介绍如何把两个语言结合一起用Rust语言的多线程异步操作和Dart语言的异步功能实现强大的应用开发。https://dev.to/sunshine-chain/dart-meets-rust-a-match-made-in-heaven-9f5" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://dev.to/sunshine-chain/rust-and-dart-the-async-story-3adk" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-24 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Dart语言和Rust语言: the async story" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Multidimensional Arrays and Operations with NDArrayhttps://shahinrostami.com/posts/programming/rust-notebooks/multidimensional-arrays-and-operations-with-ndarray/这篇文章介绍了ndarray这个crate，用来作多维数组的容器和操作。演示如何创建多维数组，如何找到数组的维度，检索以及如何对多维数组作基本的数学操作。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://shahinrostami.com/posts/programming/rust-notebooks/multidimensional-arrays-and-operations-with-ndarray/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-24 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用NDArray实现多维数组及其操作。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "How to use C++ polymorphism in Rusthttps://medium.com/swlh/how-to-use-c-polymorphism-in-rust-76e1d1a88ed1C++一个非常普遍的设计范式就是可以先写一个抽象类，然后用户可以继承这个抽象类并实现具体的商业逻辑。具体的实体类就可以具体实现这个抽象类的函数并传递给别的类库。这个文章告诉大家如何在Rust语言中实现和调用C++多态性。代码Github: https://github.com/sakex/Rust-CPP-FFI-Polymorphism" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-24 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何在Rust语言中应用C++ polymorphism多态性。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Writing Non-Trivial Macros in Rust.http://adventures.michaelfbryan.com/posts/non-trivial-macros/?utm_source=reddit&utm_medium=social&utm_campaign=non-trivial-macroshttps://github.com/Michael-F-Bryan/non-trivial-macros用Rust语言编写强大魔幻的宏。Rust宏是除了名的复杂。提供了Github代码例子。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Michael-F-Bryan/non-trivial-macros" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-24 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Writing Non-Trivial Macros in Rust。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "TermUI : A Window manager for the command line.https://github.com/Teln0/TermUITermUI : 是一个用Rust语言编写的简单命令行窗口管理器。现在只能有三个可移动的可变换窗口大小的终端命令行管理器。一个尝试哈～" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Teln0/TermUI" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-24 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TermUI : 一个命令行窗口管理器。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-24 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli #rust #iotRoomba S9+时iRobot的一款扫地机器人，创新型自动集尘功能，让你不再为清理灰尘盒而烦恼。\t@CeclieTonglet 实现了一个CLI工具，控制扫地机器人工作，用你最熟悉的命令行工具让扫地机器人工作，生活美滋滋。https://twitter.com/CecileTongletRead Morehttps://github.com/cecton/roomba-s9plus-cli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-22 21:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust实现控制Roomba S9+ Cli工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #track" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-22 21:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": ".zip() 方法迭代两个数组" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustOneSignal 是一家提供移动推送，网络推送，电子邮件和应用内消息提供支持的公司，文章介绍了Rust在团队中高使用四年的经历，以及Rust时如何赋能团队实现每天70亿条消息推送。Read Morehttps://onesignal.com/blog/4-years-of-rust-at-onesignal/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-22 21:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 在OneSignal这四年" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #graphics在学习使用一个新的crate时，我们可能想看一些满足我们需求的示例代码，但是通常我们要自己去浏览所有的示例才能找到我们需要的那个，wgpu-rs制作了一个特性矩阵，列举了每个example都是用了哪些特性，非常人性化，建议开源项目作者可以尝试用这种方式指引开发者。Read Morehttps://github.com/gfx-rs/wgpu-rs/tree/master/examples#feature-matrix" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-22 21:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Wgpu-rs examples 特性矩阵" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #realtimeTonari是一家致力于创造最先进实时通信技术的公司，使用Rust他们构建出了3K、60fps、130ms的视频实时通信服务，点击下面的链接阅读更多。Read Morehttps://blog.tonari.no/why-we-love-rust?ref=twtr\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-22 21:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust构建安全、高性能、可维护的项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nCS196，这个系列视频教程是 UIUC 的课程。\n视频集链接，https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos\n学习 Rust，这个系列是针对 C++ 程序员和游戏开发人员\n视频链接，https://www.youtube.com/watch?v=1asufxmZW5A" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.youtube.com/watch?v=1asufxmZW5A" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-21 12:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 视频教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有助于 Rust 新手理解基础知识的文章：\n解释 String 和 ＆str 区别的文章：https://blog.thoughtram.io/string-vs-str-in-rust/\n在 Rust 中使用字符串的文章：https://fasterthanli.me/blog/2020/working-with-strings-in-rust/\n在 Rust 中使用字符串的文章的中文翻译：https://mp.weixin.qq.com/s/ZX_0G6JcNMusLz6JJOkNSg\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-21 12:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "理解 Rust 中的字符串" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Github 链接，https://github.com/JoshMcguigan/libps1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/JoshMcguigan/libps1" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-21 12:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "libps1，实验性的 shell 提示库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者基于 Thorsten Ball 的 Interpreter 书 实现了 Rust 中的 Monkey 编程语言。https://interpreterbook.com/Github 链接，https://github.com/Dentrax/Monkeyhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Dentrax/Monkey" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-21 12:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中的 Monkey 编程语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "專門比較浮點數的crateRead morehttps://crates.io/crates/float_eq" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-20 20:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "float_eq 0.4.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust用plotly畫拆線圖Read morehttps://shahinrostami.com/posts/programming/rust-notebooks/finishing-touches-for-visualisation/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-20 20:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "plotly 視覺化庫" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "來聽聽他怎麼說吧？Read morehttps://github.com/choiway/prognog/blob/master/README.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-20 20:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "從python轉成Rust加速80倍快?!" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一個實驗性的專案Read morehttps://fnordig.de/2020/06/19/build-your-project/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-20 20:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "bygge - 不用Cargo就能建置Rust專案" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://wezfurlong.org/wezterm/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://wezfurlong.org/wezterm/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-18 12:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WezTerm：GPU加速的跨平台终端模拟器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://dev.to/sayanarijit/rocket-rs-with-no-word-and-4-snippets-34a7" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://dev.to/sayanarijit/rocket-rs-with-no-word-and-4-snippets-34a7" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-18 12:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rocket.rs 一声不吭的添加了几段代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/ivanceras/titik" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/ivanceras/titik" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-18 12:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Titik：组件式交互的 TUI 库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://medium.com/@polyglot_factotum/rust-concurrency-the-archetype-of-a-message-passing-bug-817b60efd8f8" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://medium.com/@polyglot_factotum/rust-concurrency-the-archetype-of-a-message-passing-bug-817b60efd8f8" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-18 12:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "以Rust为例讲解消息传输的常见bug" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "该仓库打算使用vim操作方式来实现一个图片编辑器https://github.com/TanTanDev/vimnail" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/TanTanDev/vimnail" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-18 12:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "不用鼠标的图片编辑器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "A simple web analytics in Rusthttps://github.com/kooparse/bastRust语言实现网页分析器，生成网站流量简明报告。InstallUnix and OS/X\n\nFor the api.\n\nFork or download this repository.\ncd to the project's location.\ncargo install diesel_cli --no-default-features --features \"postgres\".\ndiesel setup (You'll need postgres up and running).\n\n\n\nFor the front.\n\ncd to website folder.\nnpm install\n\n\nFor the api.\nFork or download this repository.\ncd to the project's location.\ncargo install diesel_cli --no-default-features --features \"postgres\".\ndiesel setup (You'll need postgres up and running).\nFor the front.\ncd to website folder.\nnpm install\nRunning the api in development\n\nFor the api.\nFirst create a new .env file at the root. You should use .env.sample to get all required values.\nIf you want to watch the project while developping it, install cargo-watch first.\n\ncargo install cargo-watch\nrun cargo watch -i \"website/**/*\" -x run\nLive at http://localhost/3333.\n\nOtherwise simply run cargo run.\n\n\nFor the front (website).\n\ncd to website folder.\nnpm run dev\nLive at http://localhost/3000.\n\n\nFor the api.First create a new .env file at the root. You should use .env.sample to get all required values.If you want to watch the project while developping it, install cargo-watch first.\ncargo install cargo-watch\nrun cargo watch -i \"website/**/*\" -x run\nLive at http://localhost/3333.\nOtherwise simply run cargo run.For the front (website).\ncd to website folder.\nnpm run dev\nLive at http://localhost/3000.\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/kooparse/bast" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-17 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust语言实现网页分析器。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "A multithreading library for Rust and WebAssemblyhttps://github.com/w3reality/wasm-mtA multithreading library for Rust and WebAssembly.Rust和WebAssembly多线程系统库。wasm-mt helps you create and execute Web Worker based threads.You can program the threads simply using Rust closures and orchestrate them with async/await.Examples\nwasm-mt-pool - Thread pool library based on wasm-mt.\nYou can run all the following apps in browser!\nexec - How to use wasm_mt.\nfib - Computing a Fibonacci sequence with nested threads.\nexecutors - Minimal serial/parallel executors using wasm_mt.\nparallel - Julia set benchmark of serial/parallel executors.\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/w3reality/wasm-mt" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-17 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust和WebAssembly多线程系统库。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Using Rust to Delete Gitignored Crufthttps://www.forrestthewoods.com/blog/using-rust-to-delete-gitignored-cruft/\nDelete files across many source repos at once.\nDelete files inside Git, Mercurial, and Perforce repos.\nDelete files within a monorepo.\nSupport Windows, macOS, and Linux.\nSource Code: GitHub\nInstallation: cargo install fts_gitignore_nuke\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.forrestthewoods.com/blog/using-rust-to-delete-gitignored-cruft/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-17 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust语言清除Gitignored垃圾。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "native-dialog - A cross-platform file picker and message box library.https://github.com/balthild/native-dialog-rsnative-dialog显示文件选取器和消息框，目前支持GNU/Linux, MacOS和Windows。安装：用法：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/balthild/native-dialog-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-17 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "native-dialog - 跨平台文件选取器和消息框开发库。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Ropey 1.2 - an editable text buffer for Rusthttps://crates.io/crates/ropey/1.2.0Ropey是rust语言的UTF8文本利器，是设计来支持文本缓存用到的类似文本编辑器这样的应用的。Ropey是快速，高效，稳健的能处理大量的文本编辑特性造成的内存相对支离破碎的文本处理编辑器。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://crates.io/crates/ropey/1.2.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-17 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ropey 1.2 - 一个rust语言可编程文本编辑缓存" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-17 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "A scalable privacy service written in Rusthttps://hackernoon.com/second-state-releases-scalable-privacy-service-at-mozilla-open-labs-b15u3wh7A scalable privacy service written in Rust。Mozilla Open Lab开发的新一带的互联网一定是隐私保护有限的网络。可扩展的隐私服务变得及其重要。传统的PKI(Public Key Infrastructure)是不容易扩展的。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://hackernoon.com/second-state-releases-scalable-privacy-service-at-mozilla-open-labs-b15u3wh7" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-16 13:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust语言开发可扩展的隐私保护服务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Eddit - A basic text editor with GTK and Rusthttps://github.com/maze-n/edditEddit - A basic text editor with GTK and Rust，Eddit - 一个用GTK和Rust实现的简洁文本编辑器。发行版本下载 - https://github.com/maze-n/eddit/releases从源代码编译，依赖软件库：\nlibgtk-3-dev\nlibgtksourceview-3.0-dev\nmake\nrustc\ncargo\n编译，安装，运行和卸载：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/maze-n/eddit/releases" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-16 13:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Eddit - 一个用GTK和Rust实现的简洁文本编辑器。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Fast 2D rendering on GPUhttps://raphlinus.github.io/rust/graphics/gpu/2020/06/13/fast-2d-rendering.html用GPU实现快速2D矢量图像渲染。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://raphlinus.github.io/rust/graphics/gpu/2020/06/13/fast-2d-rendering.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-16 13:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用GPU实现快速2D图像渲染" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Microsoft: Rust Is the Industry’s ‘Best Chance’ at Safe Systems Programminghttps://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/Rust语言是产业届安全系统编程最好的时机！ “C++, at its core, is not a safe language,” - C/C++ Can’t Be Fixed。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-16 13:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "微软：Rust语言是产业届安全系统编程最好的时机！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-16 13:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#c++Bjarne(C++之父)提交了一份关于过去十年C++演变的168页论文，在论文中“security”一词出现了3次。下面的链接是论文传送门。Read Morehttps://dl.acm.org/doi/abs/10.1145/3386320" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-15 12:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "过去十年C++的演变" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #blockchain在介绍ethers-rs前，简单介绍一下ethers.js，它旨在为以太坊区块链及其生态系统提供一个小而完整的 JavaScript API 库 它最初是与 ethers.io 一起使用，现在已经扩展为更通用的库。https://ethers.io/@gakonst实现了一个Rust版本的ethers.js，很快就会发布0.1版本，他正在为接下来的发版收集一些建议和反馈https://twitter.com/gakonstRead Morehttps://github.com/rust-lang/rust/pull/72342" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-15 12:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ethers-rs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #avrRead Morehttps://github.com/rust-lang/rust/pull/69478" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-15 12:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "AVR被合并进Rust中" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #asmRead Morehttps://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-15 12:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Nightly支持新的内联assembly语法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "微软云技术推广工程师 Ryan Levick 在上个月的 AllThingsOpen 网络会议上表示，无论软件公司在工具和开发人员培训方面投入多少资金，“从本质上讲，C++ 不是一种安全的语言”，他在这次演讲中解释了为什么微软正逐渐转向使用 Rust 来构建其基础设施软件，而不是 C/C++。同时鼓励其他软件行业巨头考虑同样的问题。文章链接，https://thenewstack.io/microsoft-rust-is-the-industrys-best-chance-at-safe-systems-programming/中文翻译，https://rustcc.cn/article?id=3e761f66-4904-4222-b68b-404d55f6418a" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rustcc.cn/article?id=3e761f66-4904-4222-b68b-404d55f6418a" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-14 16:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "微软：Rust 是业界在安全系统编程的“最佳机会”" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 的 trait 系统是图灵完备的，crate fortraith（https://docs.rs/fortraith/0.1.3/fortraith/）使用 trait-eval 中的原则使用户可以根据需要充分利用 trait，并提供forth!宏产生 Forth 语法的 trait 表达式。Github 链接，https://github.com/Ashymad/fortraith" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Ashymad/fortraith" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-14 16:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fortraith，实现于 Rust 的 trait 系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个演示使用前端 lalrpop + 后端 walrus 将 kaleidoscope 语言编译为 wasm。编译器本身也是一个 wasm 模块。https://github.com/lalrpop/lalrpoplalrpop，https://github.com/lalrpop/lalrpopwalrus，https://github.com/rustwasm/walruskaleidoscope，https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html演示的链接，https://github.com/warycat/walrus_demo###【视频】使用 Rust + Jupyter Notebooks 进行数据分析这是一个讲解使用 Rust 和 Jupyter Notebooks 进行数据分析的入门视频。视频链接，https://www.youtube.com/watch?v=SZKEzNL9alshttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.youtube.com/watch?v=SZKEzNL9als" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-14 16:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个 wasm 编译器演示" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文 Rust 的初学者和对 Rust 感兴趣却还没能很好上手的朋友更加友好。阅读和理解大约需要15分钟，仅需一些基本的编程知识，你就能很好的理解本文。在文章中，作者会介绍 Rust 中错误的基本知识，并分析为什么会这样处理，然后解释一些更高级的错误处理概念，同时分享一些实用的技巧。原文地址：https://www.halcyon.hr/posts/error-handling-in-rust/reddit 上参与讨论：https://www.reddit.com/r/rust/comments/h12itt/error_handling_in_rust_a_beginners_guide/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "进一步理解 Rust 错误处理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "社区大佬出品的超好用插件，赶紧来支持一个 o(￣︶￣)o ：https://github.com/huhu/rust-search-extension" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-search-extension v0.10 版本更新啦👏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "TinyDB是一个占用空间小，速度超快的数据库，旨在在内存中使用，并在需要保存时轻松地从文件中转储/检索。项目地址：https://github.com/scowez/tinydb" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TinyDB" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前该项目已经有一些完整的实现：https://github.com/drew-wallace/rarebears" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rarebears - pandas 的 Rust 实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "postgrest-rs 库提供了 PostgREST 的 ORM 接口，项目地址：https://github.com/supabase/postgrest-rs简单使用示例：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "postgrest-rs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "diesel，elephantry，postgres，sqlx 这四个常见库的性能测试：https://github.com/elephantry/benchmark#rust-postgressql-clients-benchmark最新补充，来自网友 biluohc 的评论回复，他指出原作者的 postgres benchmark 异步sqlx的结果是错误的。作为对比， biluohc 提供了他实现的示例：https://github.com/biluohc/actixweb-sqlx-jwt。更多内容欢迎大家到评论区查看详情，深入交流。https://rustcc.cn/blog_with_author?author_id=11cb8775-a843-405b-9f53-71fb575d7edb" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust PostgresSQL clients benchmark" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者将一些常用的技术栈进行组合，制作了用于 Svelte + Rust + TypeScript 的热模块重装的简单模板，项目地址：https://github.com/HugoDaniel/svelte-template详细一点的原文介绍：https://hugodaniel.pt/posts/browser-tech-stack-2020/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Svelte + TypeScript + Parcel + Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Fuchsia 是 Google 正在开发的一个开源操作系统，最近 fuchsia.dev 上最近更新了很多开发文档，其中 Rust 开发文档最近于 2020-06-10 更新。在已经开放的开发文档里面，Rust 文档相对来说还是比较丰富的，相应的公开讨论频道在：rust@fuchsia.com。https://fuchsia.dev/了解更多详情或者查看文档请看：https://fuchsia.dev/fuchsia-src/development/languages/rustreddit 上参与讨论：https://www.reddit.com/r/rust/comments/h7dkv2/rust_fuchsia/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 22:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "了解 Fuchsia 的 Rust 开发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "GameLisp 是一个用于 Rust 游戏开发的脚本语言。了解详情请看：https://gamelisp.rs/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 22:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GameLisp" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Shredder 项目主要针对于 Rust 的智能指针的“垃圾回收”，更多细节请看博客原文：https://blog.typingtheory.com/shredder-garbage-collection-as-a-library-for-rust/项目地址：https://github.com/Others/shredder" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 22:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Shredder 项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "derive_aktor 是一个宏库，使用起来还是挺方便的，项目地址：https://github.com/insanitybit/derive_aktor使用示例:" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-12 22:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "derive_aktor" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Free online book: Create your own programming language with Rust (early release)https://createlang.rs/免费网络书: 《用Rust语言开发自己的编程语言》。展现rust语言的强大和神奇魅力！" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://createlang.rs/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "免费网络书: 《用Rust语言开发自己的编程语言》" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "unFTP: When you need to FTP, but don't want to.https://github.com/bolcom/unFTPunFTP，当你需要FTP功能，但是你有不想启动FTP服务的应用，用Rust语言写成。建立在libunftp和Tokio基础上具备asynchronous run-time，而且不需要像传统的FTP服务器那样启动：https://github.com/bolcom/libunftp\nConfigurable Authentication (e.g. Anonymous, PAM or a JSON file).\nConfigurable storage back-ends (e.g. GCS or filesystem)\nIntegration with Prometheus for monitoring.\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/bolcom/unFTP" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "unFTP: When you need to FTP, but don't want to." }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Announcing Tiberius 0.4, a Microsoft SQL Server Clienthttps://github.com/prisma/tiberius/Tiberius 0.4发布, Rust语言开发的原生Microsoft SQL Server客户端程序。完全支持SQL Server特有的TDS数据库通讯协议。对MS SQL Server 2005及之后的版本，支持async/await调用。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/prisma/tiberius/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tiberius 0.4发布, Rust语言开发的Microsoft SQL Server客户端程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "This Month in Rust GameDev #10 - May 2020https://rust-gamedev.github.io/posts/newsletter-010本月的Rust语言编写的游戏活动和更新汇总：\nVeloren\nPaddlers\nGarden\nSandbox\norb.farm\nFor The Quest\nCrate Before Attack\nStellary\nDig Escape\nAkigi\nOn FPS Game Progress #1\nLife\nMind's Eye\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rust-gamedev.github.io/posts/newsletter-010" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Month in Rust GameDev #10 - May 2020" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "mongo-rust-driver 1.0 releasedhttps://github.com/mongodb/mongo-rust-driver/pull/197https://crates.io/crates/mongodbmongo-rust-driver 1.0 正式发布。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/mongodb/mongo-rust-driver/pull/197" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "mongo-rust-driver 1.0 正式发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "chardetng: A More Compact Character Encoding Detector for the Legacy Webhttps://hsivonen.fi/chardetng/chardetng: A More Compact Character Encoding Detector for the Legacy Web。一个小而强悍的用于旧网页多语言编码的检测程序。这是一个轻量的用rust语言写成的，用在Firefox上的字符编码检测程序。主要用于解决一个Chrome已经解决但是Firefox之前没有解决的非拉丁字符网页显示乱码的问题。当web刚刚开始创建的时候，网页的内容往往ISO-8859-1拉丁字母，而后来逐渐字符集支持来自从操作系统的local设置，但是浏览器并不知道来自服务器端的字符集。所以最早的时候浏览器一直是提供一个菜单条让用户选择字符集。而谷歌在做Chrome的时候，沿袭了谷歌自己的搜索自动检测网页字符集的功能。这就造成有些网页Chrome因为能自动检测内容的字符集而显示正常而Firefox因为不知道字符集而显示不正常。这就需要一个Firefox的字符集local探测程序。就是这个Chardetng。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://hsivonen.fi/chardetng/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "chardetng: 一个小而强悍的用于旧网页多语言字符编码的检测程序。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 09:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "mlua v0.4 released with Lua 5.4 supporthttps://github.com/khvzak/mluamlua v0.4 发布并支持Lua 5.4。https://github.com/khvzak/mluav0.4 changeloghttps://github.com/khvzak/mlua/blob/master/CHANGELOG.md#v040" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/khvzak/mlua" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 07:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "mlua v0.4 发布并支持Lua 5.4" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "MiniCouchDB: implementing a subset of CouchDB in Rusthttps://www.garrensmith.com/blogs/mini-couch-hack-weekhttps://github.com/garrensmith/couch_hack_week受mini-redis启发，搞了一个mini-CouchDB in Rust.https://github.com/tokio-rs/mini-redis" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.garrensmith.com/blogs/mini-couch-hack-week" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 07:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "MiniCouchDB: implementing a subset of CouchDB in Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Benchrs: Apache Benchmark(ab) clone in rusthttps://crates.io/crates/benchrsApache Benchmark style http bench tool written in async rust." }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://crates.io/crates/benchrs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 07:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Benchrs: Apache Benchmark(ab) clone in rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Getting started with Rust/WinRThttps://kennykerr.ca/2020/06/05/getting-started-with-rust-winrt/加拿大小伙子Kenny Kerr写的Rust/WinRT编程快速入门。Rust/WinRT编程快速入门已经非常简单，这得益于程序员喜欢的Rust语言编程工具链提供了大量的便利。如果你想不需要额外的帮助直接入门，下面是一些有用的链接\nGitHub: https://github.com/microsoft/winrt-rs\nDocs.rs: https://docs.rs/winrt/\nCrates.io: https://crates.io/crates/winrt\n下面会给一些个人的心得和小技巧：安装先决条件和工具：\nVisual Studio 2019 – be sure to install the C++ tools as this is required by the Rust compiler (only the linker is required).\nVisual Studio Code – this is the default IDE used for Rust.\nPython – be sure to install the x64 version as this is required for debugging support.\nGit – Rust has deep support for Git.\nRust – this installs rustup which is a tool for installing Rust toolchains and common Rust related tooling.\n打开VS Code然后键入Ctrl+Shift+X打开扩展页安装下面的extensions:\nrust-analyzer – there are others, but this is the only Rust extension that I’ve tried that actually works reliably most of the time.\nCodeLLDB – you can also use the Microsoft C++ extension for debugging, but this one does a better job of integrating with the IDE.\nC/C++ – the Microsoft C++ extension doesn’t integrate as well with the IDE, but provides superior debugging information, so you may want to have that on hand for an emergency.\n提示下载并安装Rust language server，确认安装，然后重新启动IDE。然后我们开始用新的cargo包创建例子：新创建的项目目录下修改Cargo.toml配置文件，并添加WinRT的依赖库包：确认所有的库是最新的，然后开始编译项目：在项目文件夹里找到写hello world的源文件main.rs，我们用winrt::import macro来生成Rust bindings for WinRT的APIs：其实你在main.rs里面任何位置放置上面的代码都可以，这个导入的宏分成两个部分：一类是你的项目中需要标识WinRT组件，另一类是特别需要相应的类型子集。这里用了os表示需要运行的操作系统，也可以指定特定版本的Windows SDK。然后指定了官方文档中的一些类型windows::data::xml::dom下面还有用了XmlDocument，具体的细节可以参考官方文档:https://docs.microsoft.com/en-us/uwp/api/windows.data.xml.dom.xmldocument编译运行的结果：这样，import宏导进来的库就可以开始调用指定的Windows API了。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://kennykerr.ca/2020/06/05/getting-started-with-rust-winrt/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 07:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust/WinRT快速入门" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Animal Fight Chess Game written in rust.https://github.com/netcan/AnimalChessAnimal Fight Chess Game（斗兽棋） written in rust. Rust语言写斗兽棋游戏游戏规则和玩法：\nhttp://ancientchess.com/page/play-doushouqi.htm\nhttps://en.wikipedia.org/wiki/Jungle_(board_game)\n编译和运行：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/netcan/AnimalChess" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 07:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust语言写斗兽棋游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-09 07:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "就在前天【6月2号】，Rust 进入了 TIOBE 指数的前 20 名，它从第 38 位跃升到第 20 位，跃升了惊人的 18 位，这其实是挺罕见的。于是 Visual Studio Magazine 发表了一篇题为 So What's Up with Microsoft's (and Everyone Else's) Love of Rust? 的博文，更多详情请看：https://visualstudiomagazine.com/articles/2020/06/02/rust-love.aspx?m=1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-05 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "微软对 Rust 的热爱是怎么回事？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ct_python!是一个 Rust 宏，用于在编译时执行 Python 代码，并将输出作为 Rust 代码插入到 Rust 程序中。它是 inline-python【https://github.com/fusion-engineering/inline-python】的一部分。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-05 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ct_python!" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "首先 syn（https://github.com/dtolnay/syn） 是一个解析库，用于将 Rust 令牌流解析为 Rust 源代码的语法树。syn-rsx 基于 syn，是一个类似于 JSX 的 TokenStreams 解析器。 解析的结果是嵌套的 Node 结构，类似于浏览器 DOM，其中节点名称和值是支持构建 proc 宏的 syn 表达式。并提供了用于自定义解析行为的 ParserConfig。项目地址：https://github.com/stoically/syn-rsx示例：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-05 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "syn-rsx" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是油管上的一个较短视频教程，约 20 分钟，结合实际例子，讲述使用 Rocket 框架进行简短、易用、类型安全的 Rust web 开发。地址：https://www.youtube.com/watch?v=tjH0Mye8U_A&feature=youtu.be" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-05 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rocket 进行 Rust web 开发实例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "对web的支持是通过 WebAssembly 实现的。https://silvia-odwyer.github.io/photon/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://silvia-odwyer.github.io/photon/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-04 18:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Photon：高性能图片处理库（native和web均支持）" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "支持 Windows/Linux/macOS 三个主流平台，可以安装超过1000个 C/C++ 包。例如在 Cargo.toml 中添加：然后执行下面的命令，即可安装pkg1、pkg2https://crates.io/crates/cargo-vcpkg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://crates.io/crates/cargo-vcpkg" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-04 18:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-vcpkg：C/C++ 依赖安装工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "john01dav 准备开发一个native的Rust IDE，在征集用户问题。https://users.rust-lang.org/u/john01davhttps://users.rust-lang.org/t/what-features-would-you-like-to-see-in-a-rust-ide/43697" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://users.rust-lang.org/t/what-features-would-you-like-to-see-in-a-rust-ide/43697" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-04 18:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "你最希望Rust IDE里面有哪些功能？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustStackoverflow发布了2020年开发者调查报告，Rust仍然是开发者最喜爱的语言，Python是开发者最想学习的语言，详细报告内容请点击链接查看。Read Morehttps://insights.stackoverflow.com/survey/2020#overview" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 21:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Developer survey 2020" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #cargoPull Request #72342为nightly版本的Rust加入了新的规则https://github.com/rust-lang/rust/pull/72342运行上面的命令，如果cargo.toml中有源代码中未使用的crate编译的时候就会报错。Read Morehttps://github.com/rust-lang/rust/pull/72342" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 21:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Nightly 中引入了unused_crate_dependencies规则" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust@MGDev91通过拆解Rust来学习，通过了解Rust结构如果转化为指令，观察哪里需要注意内存安全，点击链接查看作者的第一篇文章。https://twitter.com/MGDev91Read Morehttps://giordi91.github.io/post/disassemlbyrust1/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 21:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "通过拆解Rust来学习" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #debug从rls切换到rust_analyzer，你将得到开箱即用的调试集成（包括测试），再也不必为了搭建基本的调试环境去看一堆文档了。\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 21:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从rls切换到rust_analyzer的感受" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "這篇文章比較了三種RUST現在主流的二進制解析庫nom, byteorder, binread也介紹了為什麼要用binread因為簡單直覺Read morehttps://jam1.re/blog/binread-a-declarative-rust-binary-parsing-library" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 00:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust二進制解析" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有個crate叫cov-mark可以手動標上覆蓋標記能更輕鬆地共同開發測試和代碼，這有助於維護。可以用 cov_mark::hit! 來標這篇文章也講解了這個hit宏的實作Read morehttps://ferrous-systems.com/blog/coverage-marks/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 00:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "覆蓋測試" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Fuchsia 作業系統也支援rust開發這邊列了一些相關的庫Read morehttps://fuchsia.dev/fuchsia-src/development/languages/rust/crates\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-06-01 00:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Fuchsia Rust 庫" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Logiq 撰文讨论关于 Rust 是否适合用作高级语言的。他在文章最后总结：In summary, Rust spans both the low and high level, and it is up to us, the programmers to make our abstractions not only fast, but usable.总而言之，Rust 跨越了低级语言和高级语言，它主要取决于我们，程序员应该使抽象不仅快速而且可用。博客文章链接，https://llogiq.github.io/2020/05/30/hi.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://llogiq.github.io/2020/05/30/hi.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-31 18:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 是否适合用作高级语言？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "如何利用硬件上所有可能的 SIMD 指令获得最佳性能。文章链接，https://www.nickwilcox.com/blog/autovec2/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.nickwilcox.com/blog/autovec2/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-31 18:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中较新指令集的自动向量化" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Tour of Rust 链接，https://tourofrust.com/index_zh-cn.htmlBTW：GitHub 搜索时，Rust 已成为语言过滤的选项之一。https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tourofrust.com/index_zh-cn.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-31 18:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tour of Rust 中文版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "来自 Rust 官博。前些时间 Rust 最近已满 5 岁了！Rust 项目之所以能够蓬勃发展，是因为它的贡献者众多，而且我们一直在寻找使人们更容易参与的方法。因此官博发起了贡献者调查，详情请看：https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-29 23:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "2020 贡献者调查" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "没错就是终端 - terminal，15 puzzle 是用 rust 实现的终端游戏，简直摸鱼神器...项目地址：https://github.com/24seconds/rust-15-puzzle-cli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-29 23:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "15 puzzle 终端游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "如果你对 Rust runtime 了解不多，可以查阅这个博文看一下运行时代码的样子，并逐一分解它的工作方式，地址：https://blog.mgattozzi.dev/rusts-runtime/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-29 23:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "关于 Rust runtime" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是嵌入式 Rust 的示例，作者从调研、选型到实践作了详细介绍，文章地址：https://specific.solutions.limited/projects/hanging-plotter/oxidized-bluetooth.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-29 23:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ESP32 上的 Bluetooth Heartrate 示例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://stackoverflow.blog/2020/05/27/2020-stack-overflow-developer-survey-results/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-28 10:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "2020 开发者调查报告：Rust 再次成为最受欢迎的语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "下例将展示用 Ringbahn 处理 IO 有多简单：https://boats.gitlab.io/blog/post/ringbahn/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://boats.gitlab.io/blog/post/ringbahn/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-28 10:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ringbahn: 安全高效的 io-uring API" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/iceiix/stevenarella" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/iceiix/stevenarella" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-28 10:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Stevenarella: 跨平台我的世界客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "下运行两个为同一个数字加一的线程：https://docs.rs/easy-parallel/2.2.0/easy_parallel/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://docs.rs/easy-parallel/2.2.0/easy_parallel/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-28 10:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "easy-parallel：一个简单的多线程处理工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-28 10:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "对2018年 rust-lang.org 重新设计的回顾" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://www.rottedfrog.co.uk/?p=24" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.rottedfrog.co.uk/?p=24" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-28 10:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "零开销抽象：Rust vs C++" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个项目的思路很清奇，之前也报道过。先通过这个方式编译成 wasm 字节码，后面用的时候，就不用再从头编起了。节约了时间（好像是用的空间换时间策略）。这种方法有它的一些好处，详情见项目文档：https://github.com/dtolnay/watt这次要说的是，已经有一些志愿者提前编好了一些过程宏了（需要一直跟版本？）。看这里：https://github.com/jakobhellermann/watt-contrib/现在又出现一个项目 https://github.com/jakobhellermann/cargo-watt，这个项目相当于帮人帮到底，继续干了一些样板活，几乎可以“一键”把过程宏搞成 wasm 字节码了。厉害厉害。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "watt - 将过程宏编译为 wasm 字节码的工具和运行时" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "都说 nom 难，好在教程一打一打的来了。https://github.com/benkay86/nom-tutorial" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nom-tutorial - nom 解析器工具的教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个库有用啊，特别是在写编辑器的时候。不同的 unicode 字符显示出来的字符宽度是不一样的。https://github.com/unicode-rs/unicode-width" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "unicode-width - 计算一个 unicode 字符的显示宽度的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "可以快速加载外部代码进来。这是一个cli工具，直接可用 cargo install 安装。需要单独处理过程。具体的方法，是用了 md 的注释里面可以写东西的技巧。https://github.com/martypapa/md-inc" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "md-inc 在 markdown 文件里面加载其它文件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "tmux 不用我介绍了吧。程序员必用。之前小编也想克隆一个 tmux 玩玩，现在有了 dmux， 空了准备试一下。https://github.com/zdcthomas/dmux" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dmux - 用 Rust 写的一个类似 tmux 的 console 窗口管理器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "讲云原生应用开发从 0 到产品的一本书，连载。惊喜的是是用 Rust 语言来描述。强烈推荐。https://www.lpalmieri.com/posts/2020-05-24-zero-to-production-0-foreword/这是前言。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "书：从 0 到产品（利用 Rust 语言描述）" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个概念很有新意。可以用在实时协同编辑doc之类的应用上面。新知识太多，小编根本学不过来了。这是一个示例：https://github.com/anchpop/crdts这是 CRDT 的一个简单教程：http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CRDT = Conflict-free Replicated Data Type" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "无船哥经常写一些有趣的新东西出来，和一些思考得很深的文章。毕竟，别人是Mozilla研究员。利用这个库，可以对某一个资源的并发访问设限。https://github.com/withoutboats/access-queue" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "access-queue - 无船哥写的并发限制库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "哇哦。厉害！可以试试，不过刚出来不久，还有一些不完善的地方。https://github.com/ridiculousfish/regress" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "regress - 又一个正则表达式库，兼容 JS 语法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://joshleeb.com/blog/rust-integration-tests/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中的集成测试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "非常容易使用。https://github.com/haraldh/dynqueue" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "动态可扩展的 rayon 并行迭代器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "对于一个大一点的库来说，各种 feature 开关的测试，真心让人头痛。现在这个工具来救场了。https://github.com/frewsxcv/cargo-all-features" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-all-features - 让你非常容易测试各种 feature 组合的 cargo 辅助工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "goose 借鉴自 Locust。新版本引入了 async，执行速度提高了两倍。https://github.com/tag1consulting/goose" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "goose - 负载测试框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/MoAlyousef/fltk-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fltk-rs - fltk GUI 库的 rust 绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这几篇不错。\n\nRewriting the heart of our sync engine - Dropbox\nhttps://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine\n\n\nUsing Rust in Windows - Microsoft\nhttps://msrc-blog.microsoft.com/2019/11/07/using-rust-in-windows/\n\n\nWhy Discord is switching from Go to Rust - Discord\nhttps://blog.discord.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f\n\nRewriting the heart of our sync engine - Dropboxhttps://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engineUsing Rust in Windows - Microsofthttps://msrc-blog.microsoft.com/2019/11/07/using-rust-in-windows/Why Discord is switching from Go to Rust - Discordhttps://blog.discord.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-26 19:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "要去推广 Rust 的话，有哪些材料比较好" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rash v0.1.0 released!https://github.com/pando85/rashRash是一种受Ansible工具启发的Declarative Shell脚本语言。https://www.ansible.com/\n避免冗长不方便管理的Shell脚本\n类似Ansible这样的编程风格\nDeclarative vs imperative：Imperative: entrypoint.sh:Declarative: entrypoint.rh:" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/pando85/rash" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rash v0.1.0 released!" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rocket can be compiled on stable Rust 1.45https://github.com/SergioBenitez/Rocket/issues/19#issuecomment-630650328Rocket现在可以通过stable Rust 1.45编译了。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/SergioBenitez/Rocket/issues/19#issuecomment-630650328" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rocket现在可以通过stable Rust 1.45编译了。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Mun v0.2.0 Releasedhttps://mun-lang.org/https://github.com/mun-lang/mun/releases/tag/v0.2.0Mun是一个通过iteration可以不断创造迭代的嵌入式编程语言。Mun语言诞生的想法来自找到一个可以规避Lua动态脚本语言的弊端有可以在Rust语言里hot-reload（热加载）新的编程语言。因此，Mun新语言首先不能是Rust语言的竞争对手，同时有可以在Rust语言（或C/C++）宿主语言中无缝嵌入编程。Mun完全由Rust语言写成，主要的软件包是rust-analyzer和rustc 。主要的特点包括：https://mun-lang.org/\nAhead of time compilation\nStatically typed\nFirst class hot-reloading\n新版本更新的功能：\nHot reloadable data structures\nMarshalling of data structures to Rust, C, and C++\nGarbage collection for data structures (with opt-out at the struct-level)\nloop, while, break and explicitreturn expressions\nFull operator support for numeric and boolean types\nIncremental compilation\nBenchmark support\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/mun-lang/mun/releases/tag/v0.2.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Mun v0.2.0 Released" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Actix Casbin Middlewarehttps://github.com/casbin-rs/actix-casbin-authCasbin 是Rust语言网页构架 actix-web framework的访问控制中间件。https://github.com/casbin/casbin-rs安装（install）在Cargo.toml添加下面的内容：需求（requirement）Casbin只负责权限管理，因此需要实现Authentication Middleware来确认用户。因此需要将带有subject(username)和domain(optional)信息的actix_casbin_auth::CasbinVals加在Extension里。https://docs.rs/actix-web/2.0.0/actix_web/dev/struct.Extensions.html比如下面的例子：然后看下面的例子：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/casbin-rs/actix-casbin-auth" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Actix Casbin 中间件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新闻来源：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-24 23:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "yakuza-freecam，这是针对 Yakuza 0，Kiwami 和 Kiwami 2 的经过改进和重写的相机工具。它可以在 Cutscenes 和Free roam 中使用。Github 链接，https://github.com/etra0/yakuza-freecam" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/etra0/yakuza-freecam" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "yakuza-freecam，Yakuza Kiwami 2 的“照片模式”" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "上周末，戴姆勒（Mercedes）的内部 Gitlab 内容被泄露，包含其内部用于梅赛德斯货车的“车载逻辑单元”（OLU，Onboard Logic Unit）软件系统的源代码。Rust 相关项目的代码仓库，https://git.rip/search?utf8=%E2%9C%93&search=rust&group_id=169&project_id=&repository_ref=&nav_source=navbarzdnet 的报道文章链接，https://www.zdnet.com/article/mercedes-benz-onboard-logic-unit-olu-source-code-leaks-online/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.zdnet.com/article/mercedes-benz-onboard-logic-unit-olu-source-code-leaks-online/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "戴姆勒内部源代码泄露，有 Rust 相关的项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Tour of Rust 链接，https://tourofrust.com/index.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tourofrust.com/index.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tour of Rust 更新第4章-范型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Youtube 链接，https://www.youtube.com/watch?v=43X9ia-qpds&feature=sharehttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.youtube.com/watch?v=43X9ia-qpds&feature=share" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "[视频] C++20，Rust 和 Zig 中的零成本抽象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前還缺很多功能，算是作者練習的玩具。Read morehttps://github.com/RyanHope97/CHIP-8" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CHIP-8 直譯器 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "解答新手對對Rust生命週期的誤解，高手也可以查表複習。Read morehttps://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "對Rust生命週期的誤解" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "測試是發現bug的一種廉價且簡便的方法。單元測試的偉大之處在於成本低廉。Read morehttps://blog.logrocket.com/how-to-organize-your-rust-tests/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何組織Rust的測試" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者寫了一個自己的套件 lorikeet-dashRead morehttps://cetra3.github.io/blog/drawing-svg-graphs-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust畫SVG圖片" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust終於要有自己的ABI了嗎？ 令人期待Read morehttps://internals.rust-lang.org/t/a-stable-modular-abi-for-rust/12347\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-23 22:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust ABI Proposal" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前 rust-lang 仓库的 llvm 子模块由 branch = rustc/9.0-2019-12-19 更新为 branch = rustc/10.0-2020-05-05，更多详情、讨论请看：https://github.com/rust-lang/rust/pull/67759" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-22 00:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-lang 更新到 LLVM 10" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详细教程请看：https://outcrawl.com/rust-react-realtime-chat,教程中附带了项目源码地址。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-22 00:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用  Rust 和 React 构建实时聊天室应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "gitui 是使用 Rust 实现的高效的 git terminal-ui，还支持主题切换，项目地址：https://github.com/extrawurst/gitui 。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-22 00:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gitui 0.3.0 版本更新" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "iiiD6 - A hydrogen atom orbital wave function renderer based on random sampling.github:https://github.com/cbeuw/iiiD6" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-22 00:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "iiiD6" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 是作者最喜欢的语言，但是其中一些东西也让作者喜欢不起来：比如太多的字符串类型(&str, String, &OsStr, OsString, AsRef)，再比如impl<T> for Trait for T where T: OtherTrait 这样的写法太过麻烦等https://blog.yossarian.net/2020/05/20/Things-I-hate-about-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.yossarian.net/2020/05/20/Things-I-hate-about-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-21 09:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中最让我讨厌的东西" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "以讲故事的方式来讲 Rust 技术面试的一些东西https://blog.mgattozzi.dev/oxidizing-the-technical-interview/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.mgattozzi.dev/oxidizing-the-technical-interview/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-21 09:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Oxidizing the technical interview" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/rust/pull/69171" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/rust/pull/69171" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-21 09:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新语法 asm! 被合并进了 rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Refinery 是一个 SQL 数据库迁移工具包https://github.com/rust-db/refinery" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-db/refinery" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-21 09:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Refinery 0.3 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "A crate for indexing and quering json objectshttps://github.com/mambisi/json_indexer这是一个多数值json objects检索器。这个软件包可以创建基于点路径（dot path)的json objects的排序表，这个有点类似mongodb那样根据你给的路径建立检索。这个软件包主要是针对NoSQL编程，已经在项目escanordb中用于创建检索结构了。https://github.com/mambisi/escanorhttps://github.com/mambisi/escanor" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/mambisi/escanor" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "json objects索引和查询软件包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "A Guide to Global Data in Rusthttps://github.com/paulkernfeld/global-data-in-rust这个应用指南介绍如果在rust语言中使用\"全局数据\"，\"全局数据\"（Global Data)的意思就是你在一个程序加载了的数据，可以在别的程序中调用和使用。\"全局数据\"潜在的应用场景包括：\n配置，App configuration, e.g. weapon characteristics for a game\n参数，Making data available everywhere without needing to pass it as an argument through all functions (apply this carefully!)\n代码生成，Generating Rust code from external data\n数据库连接，Database connections... or other network resources?\n日志，A logger, maybe\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/paulkernfeld/global-data-in-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust语言全局数据应用指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Gamedev #4: Benefits of full-stack Rusthttps://www.jakobmeier.ch/blogging/Paddlers_4.html如何在服务器端和客户端之间高效的做数据同步一直以来都是一个巨大的挑战。这篇博文分享一下博主在这个领域编程的宝贵经验，用rust语言做同时服务器端和客户端的endpoint开发。博主的经验分享是基于一个长期开发的基于浏览器玩的在线多用户游戏Paddlers。https://github.com/jakmeier/paddlers-browser-game游戏源码：https://github.com/jakmeier/paddlers-browser-game" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/jakmeier/paddlers-browser-game" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Gamedev #4: 全栈Rust编程的好处" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Nike just open-sourced our Rust wrappers around the AWS Greengrass SDKhttps://github.com/Nike-Inc/aws-greengrass-core-sdk-rustAWS Greengrass Core Rust SDK提供了一套基于AWS Greengrass Core C SDK的Rust Wrapper SDK，使得在rust语言中调用Greengrass的原生Lambda函数更简单方便。https://github.com/aws/aws-greengrass-core-sdk-c主要功能：\nPublishing to MQTT topics\nRegistering handlers and receiving messages from MQTT topics\nLogging to the Greengrass logging backend via the log crate\nAcquiring Secrets\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Nike-Inc/aws-greengrass-core-sdk-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Nike团队开源Rust语言wrappers的AWS Greengrass SDK" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Deno 1.0 - A Secure TypeScript/JavaScript Runtime Built In Rusthttps://deno.land/v1动态编程语言是一种非常强大的工具，脚本语言允许用户快速简洁的把复杂的系统和自由的思想表达完美的结合起来，既不需要担心各种内存管理，也不用考虑编译系统的复杂性。最近几年，像Rust和GO语言这样的编程语言已经可以让用户编译各种非常精妙的原生机器码变得越来越简单，这些编程语言对计算机基础设施的开发至关重要。然后，我们依然认为强大的脚本语言的环境还是非常重要的，脚本语言的确可以解决非常广泛的各种领域的实际问题。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://deno.land/v1" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Deno 1.0 - 用Rust语言开发的安全的TypeScript/JavaScript Runtime" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Announcing Octocrab 0.x: A modern, extensible Github API client.https://github.com/XAMPPRocky/octocrabOctocrab是一个第三方github API客户端，它允许方便的用rust语言集成Github和做Github机器人。Octocrab自带两大类跟GitHub通讯的APIs，一类是高级强类型的语义学API，另一类是低级的HTTP API用于扩展各种功能。\nSemantic API\nHTTP API\nStatic API\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/XAMPPRocky/octocrab" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Octocrab 0.x: 一个现代可扩展的Github API客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新闻来源：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-20 02:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Castor: A Browser for the small internet (Gemini, Gopher, Finger)https://sr.ht/~julienxx/Castor/Caster这是一个用Rust调用GTK库编写的纯文本互联网协议集的图形客户端，目前支持的简单互联网协议包括：Gemini, Gopher和Finger.安装（Installation）Castor需要最新的>=1.39以上的Rust语言版本，如果你的系统没有最新版本的Rust，请用Rustup安装。https://rustup.rs/依赖库：\nopenssl\ngtk+3\ngdk-pixbuf\npango\natk\ncairo\n编译和安装：\n运行make就可以编译Castor\n安装：sudo make install\n运行Castorr然后输入gemini://gemini.circumlunar.space就可以开始在网上冲浪了！～\n在Linux环境编译：\napt install build-essential rustc cargo libgtk-3-dev libgdk-pixbuf2.0-dev libssl-dev\nmake & make install\nMacOS环境下编译：详见（步骤）https://tcp.rip/text/misc/install-castor.txt.htmlWindows环境下编译：详见（步骤）https://gist.github.com/sexybiggetje/3a4df41bb7f304aab02ea6006944f283修改设置：编辑~/.config/castor/settings.toml设置文件，支持用12进制，纯颜色甚至emojis!" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://sr.ht/~julienxx/Castor/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-19 19:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Castor: 微型互联网浏览器 (Gemini, Gopher, Finger)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "WebAssembly as a Platform for Abstractionhttps://users.rust-lang.org/t/wasm-as-a-platform-for-abstraction/35736http://adventures.michaelfbryan.com/posts/wasm-as-a-platform-for-abstraction/?utm_source=users-forum&utm_medium=social&utm_campaign=wasm-platform-for-abstraction最近玩嵌入式WASM，应用系统需要在runtime加载任意语言写成的可执行/二进制代码，在提供沙盒式的运行时环境的同时，可以让用户提供定制的跟编程环境分离的runtime. 这就是著名的WebAssembly as a Platform for Abstraction." }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "http://adventures.michaelfbryan.com/posts/wasm-as-a-platform-for-abstraction/?utm_source=users-forum&utm_medium=social&utm_campaign=wasm-platform-for-abstraction" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-19 19:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "抽象化了的WebAssembly即是平台" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Loops in Rust; Breaking From Nested Loopshttps://qvault.io/2020/05/14/loops-in-rust-breaking-from-nested-loops/Rust语言的循环和标准的C语言方式是不一样的。语法不一样，而且有一些强有力的循环选项是的Rust语言的循环用起来非常简单。首先我们学习一些最基本的循环，然后我们再学习一下如果在嵌套循环里中断退出和继续执行。标准的For循环:这个循环打印：0..10的iterator在循环语法中包含了下限但是不包含上限。更通用的语法：https://doc.rust-lang.org/1.2.0/book/iterators.html我个人认为，所有的编程语言都应该采用iterators单一语法来实现循环。这样的简单明了的方式使得Rust语言通俗易懂，这样就可以通过定制iterator来让循环变得更加强大，甚至可以达到Go语言的复杂格式的循环：Rust语言的循环没有说明iteration(i++)的每一个指针步增时候的情况，也没有说明如何在（i<10)前如果步进到下一步，仅仅是让iterator走完。循环继续和中断：关键词continue都是跟所有语言一样，在这个例子中当x>5并且x<7的时候在循环中continue到下一个iteration中而不打印，这样结果是：中断循环也是类似：嵌套循环：在很多编程语言，嵌套循环都非常诡异，比如，我们如何在一个嵌套循环中让外循环继续的条件建立在内循环里呢？让我们看看下面的例子：利用``outer`标签使得直接控制从哪个循环中断出来非常清晰。缺省的中断就是直接从内循环中断出来，利用标签的方式，也可以用来实现循环继续。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://qvault.io/2020/05/14/loops-in-rust-breaking-from-nested-loops/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-19 19:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust的循环; 从嵌套循环中中断退出" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "qwy16" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新闻来源：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-19 19:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "cnrust" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ruruby: An alternative Ruby implementation by Rust." }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-19 00:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #crateSled.rs是一个嵌入式数据库，作者将编译时间优化到了6s，而其他很多数据库的编译时间都是分钟来衡量，这对开发人员的体验是不友好的。Repohttp://sled.rs/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-18 13:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Sled.rs 只需要6秒即可编译完成" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #deno #wasmDeno 是一个Javascript和Typescript的运行环境，最近刚发布了1.0版。这片文章介绍如何在Deno中使用Rust开发的wasm模块。Read Morehttps://dev.to/lampewebdev/writing-webassembly-in-rust-and-runing-it-in-deno-144j" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-18 13:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Deno中使用Rust开发的wasm模块" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustwasm@str4d 实现了一个解密年龄密码加密文件的web应用，使用了Rust开发的wasm模块，目前是将解密内容输出到控制台中，接来下尝试实现将解密文件流式传输回用户，而不是将其打印在控制台上。https://twitter.com/str4dRead Morehttps://twitter.com/str4d/status/1261813879912333316" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-18 13:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用rustwasm实现的解密应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #wasmRSIC-V 是一个Rust+wasm实现的模拟器，无需安装任何东西就可以运行在浏览器中，它现在支持debug模式了。Repohttps://github.com/takahirox/riscv-rust\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-05-18 13:31" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RSIC-V 在线模拟器支持debug了" }, "type": "text" }], "type": "title" } },]
