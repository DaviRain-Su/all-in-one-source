export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "德国慕尼黑 - 2023年3月7日 - 安全系统的开发对汽车市场至关重要。Rust编程语言默认是内存安全的，是任务关键型汽车软件设计的重要推动者。Infineon迈出了第一步，在嵌入式领域创造了一个Rust生态系统。该公司成为第一个正式支持其微控制器使用Rust的主要半导体制造商。ReadMore:https://www.infineon.com/cms/en/about-infineon/press/market-news/2023/INFATV202303-076.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.infineon.com/cms/en/about-infineon/press/market-news/2023/INFATV202303-076.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-08 22:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "汽车安全：Infineon的部分微控制器支持Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ReadMore:https://github.com/xfbs/diff.rs单击体验:https://diff.rs/serde/1.0.153/1.0.152/Cargo.toml" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://diff.rs/serde/1.0.153/1.0.152/Cargo.toml" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-08 22:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个可以查看 Rust Crate 版本差异的在线网站" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者在文章中比较了 Zig 与 Rust，最后的基准测试得出的结论是 Zig 比 Rust 快 1.56-1.76 倍左右。让我们看看 Rust 的代码的优化空间有多大。Github:https://github.com/zackradisic/rust-vs-zig" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/zackradisic/rust-vs-zig" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-08 22:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Zig 与 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Bevy 是一个用 Rust 构建的令人耳目一新的数据驱动游戏引擎。自几个月前发布上一个版本以来，173 多位开发者贡献了 689 条 PR，近日 0.10 版本终于正式发布了！在这个版本中，Bevy 添加了大量新功能、错误修复和调整，详细内容可以参考其更新日志https://bevyengine.org/news/bevy-0-10/github 仓库地址https://github.com/bevyengine/bevy" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-07 23:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bevy 0.10 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "langs-in-rust 这个项目中，作者列举了使用 Rust 实现的编程语言列表，其中包含了 Deno、Rust 自身、RustPython 等知名项目。https://github.com/alilleybrinker/langs-in-rust作者说，希望这个项目可以激发大家的灵感，并作为一个收录库，收集这个领域中有趣的项目。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-07 23:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rust 实现的编程语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "zellij 是一款类似 Tmux 的终端应用，其包含了很多便捷的功能，能够让使用者在终端中也能高效地进行工作。https://zellij.dev/Zellij 0.35.1 版本刚刚发布，除了修复一些问题，还带来了包含了“层叠面板”，”自适应布局“，”浮动面板“等一系列新功能，细节可以参考其更新日志。https://zellij.dev/news/stacked-panes-swap-layouts/github 仓库地址https://github.com/zellij-org/zellij" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-07 23:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Zellij 0.35.1 版本给终端带来了全新的层叠面板功能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust的设计是围绕安全和健全性展开的。粗略地说，安全的代码是不使用 unsafe 关键字的代码，而健全的代码是不会导致内存损坏或其他未定义行为的代码。但是当涉及到 unsafe 代码时，这个承诺可能会被打破，而几乎每个地方都涉及到 unsafe 代码。像Vec和HashMap这样的数据结构在它们的实现中有 unsafe 代码。这导致了一个常见的问题：“如果Rust不能保证所有安全的代码都是健全的，它怎么能成为一种内存安全的语言呢？本文试图给出一个比较合理的答案。原文链接https://jacko.io/safety_and_soundness.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-06 18:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中的安全性和稳定性" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "runst 是一个非常简单的通知守护程序。这篇文章介绍了这个项目，并提供不同的用法示例，这些示例将改善你在Linux桌面上的体验。runst github 地址原文链接https://github.com/orhun/runst" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-06 18:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Linux上简洁地处理桌面通知" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个使用纯Rust实现的exFAT。目前仅支持读取，不支持写入，并且并未实现所有功能，但如果您只需要列出目录并读取文件，则可以使用它。github地址https://github.com/obhq/exfat" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-06 18:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "exfat: exFAT 的纯Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "如果你也想让你的 rust 项目拥有多平台的发布, 可以尝试使用 github actions 来实现.原文链接https://blog.urth.org/2023/03/05/cross-compiling-rust-projects-in-github-actions/--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-06 18:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在GitHub Actions中进行Rust项目的交叉编译" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Databend 是一款开源、弹性、低成本，基于对象存储也可以做实时分析的新式数仓，致力于解决大数据分析的成本和复杂度问题。\n一个使用 Rust 开发的云原生数据仓库：存算分离，面向对象存储设计，极致弹性\n支持完整的 CRUD 特性，提供了 MySQL/Clickhouse/HTTP RESTful 等协议支持\n提供原生的 ARRAY、MAP、JSON 等复杂类型和 DECIMAL 高精度类型支持\n构建了类似于 Git 的 MVCC 列式存储引擎，支持 Data Time Travel 和 Data Share 能力\n不受存储供应商的限制，可以在任何存储服务上运行，并直接查询任何存储服务上的数据\n目前已全面支持 HDFS/Cloud-Based Object Storage 协议，包括：阿里云 OSS，腾讯云 COS，华为云 OBS，以及 S3，Azure Blob, Google Cloud Storage\n链接：https://zhuanlan.zhihu.com/p/611446725" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-05 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Databend1.0发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个新的文件树和磁盘使用可视化工具，可以看成 tree+du。本次版本支持 glob 和 icon。使用界面如下所示：使用说明：GitHub：https://github.com/solidiquis/erdtree" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-05 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "erdtree1.2.0发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在终端使用 ChatGPT3.5：功能包括：\n与浏览器相比，终端启动速度更快，需要的资源更少。\n突出显示聊天消息和流。\n定义角色并让 AI 扮演角色。\n保存聊天消息。\n支持代理。\n用 Rust 编写，单个可执行文件，跨平台。\nGitHub：https://github.com/sigoden/aichat" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-05 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ChatGPT3.5" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "构建在 io-uring 之上的小型单线程异步运行时。使用示例：GitHub：https://github.com/Maaarcocr/picol" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-05 21:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "picol" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Lemurs 为大多数 GNU/Linux 和 BSD 发行版显示/登录管理器提供了终端用户界面(TUI)。不管有没有 SystemD，它都可以工作。Lemurs 适用于大多数 Unix 系统，包括 Linux、 FreeBSD 和 NetBSD。这个项目创建了一个小型的、健壮的和可定制的登录管理器，它可以作为你的 TTY、 x11或wayland的前端。文章链接，https://www.reddit.com/r/rust/comments/11hgk5y/announcement_lemurs_v031_increased_stability/Github 链接，https://github.com/coastalwhite/lemurs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/coastalwhite/lemurs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-04 22:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Lemurs v0.3.1: 增加稳定性，更好的支持wayland" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "你们好，Rust使用者们！我很高兴地宣布，Diatom 编程语言，一个用Rust编写的Lua替代品。文章链接，https://www.reddit.com/r/rust/comments/11h2l82/announcement_the_diatom_programming_language/Github 链接，https://github.com/diatom-lang/diatom" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/diatom-lang/diatom" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-04 22:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Diatom 编程语言 v0.6.0.alpha" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "继前面的第2部分之后，我一直在继续 Rust 中的图形引擎hotline的工作。我最近的重点是插件，多线程命令缓冲区生成和 Rust 代码的热重载，hlsl 着色器代码和 pmfx 渲染配置。我已经取得了相当不错的进展，已经有了一些可用的东西，并且以一种我相对满意的方式构建起来。文章链接，https://www.polymonster.co.uk/blog/building-new-engine-3Github 链接，https://github.com/polymonster/hotlinehttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/polymonster/hotline" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-04 22:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在 Rust 中构建新的图形引擎-Part 3" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Doctave是一个快速md文件预览器，使用Tauri构建。Tauri虽然只是一个壳，内部显示Web Page.但是，它有一个backend模型，可以直接使用Rust来写process. 也就是说，不是传统的BS模型。没有服务端，不会通过HTTP协议传输HTML页面，也没有一堆JS文件和各种打包。而是直接通过rust process生成HTML显示在Tauri内的Web view 里面。这个性能就高很多。一个非常有趣的模型。也即是说，界面是用的HTML及DOM表达。但是实际生成是从Rust实时渲染的，没有通过js或webassembly。https://www.doctave.com/blog/https://www.doctave.com/blog/2023/02/02/why-we-built-a-rust-powered-desktop-app-for-previewing-documentation.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 22:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Tauri构建桌面应用的一种较高性能途径" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Stalwart SMTP Server关注在安全，速度和可扩展性。内部支持 DMARC, DKIM, SPF and ARC 等特性。https://github.com/stalwartlabs/smtp-server" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/stalwartlabs/smtp-server" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 22:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Stalwart SMTP Server - 用Rust实现的一套功能完整的SMTP服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "gitoxide是使用rust实现的libgit2. 又被蟹化一个！Cargo拉github代码的时候，不依赖libgit2的话，就少一个对c库的依赖了。https://github.com/rust-lang/cargo/pull/11448" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/cargo/pull/11448" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 22:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gitoxide 已经集成进 cargo 了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "实时可视化Rust程序编译时和运行时的情况, 直接把borrow checker给庖丁解牛了。牛逼啊，强烈推荐。https://cognitive-engineering-lab.github.io/aquascope/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://cognitive-engineering-lab.github.io/aquascope/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 22:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "aquascope: Rustacean的福音, 把borrow checker给庖丁解牛" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Cloudflare 基本已经向Rust投诚了。Oxy他家平台的一个公共组件。CF家的东西，必须是高性能的。https://blog.cloudflare.com/introducing-oxy/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.cloudflare.com/introducing-oxy/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 22:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Oxy - Cloudflare 的下一代代理框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Stalwart SMTP 是一个使用 Rust 开发的现代化 SMTP 服务器，专注于安全、性能和可配置性。内置 DMARC、DKIM、SPF 和 ARC 支持，用于消息验证；通过 DANE、MTA-STS 和 SMTP TLS 来保障传输安全；允许动态配置规则并提供对 Sieve 脚本的原生支持，灵活可定制。Announcement: SMTP Server in Rust with DMARC, DANE, MTA-STS, Sieve, OTEL support: https://www.reddit.com/r/rust/comments/11fw8h0/announcement_smtp_server_in_rust_with_dmarc_dane/GitHub - stalwartlabs/smtp-server: https://github.com/stalwartlabs/smtp-server" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/stalwartlabs/smtp-server" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Stalwart SMTP 服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "zune-jpeg 是一个使用 Rust 开发的 JPEG 解码器，比 jpeg-decoder 快 1.5 到 2 倍，与 libjpeg-turbo 相当。该库已经在超过 350,000 个 JPEG 文件上进行了广泛测试，并将输出与 libjpeg-turbo 进行比较以发现正确性问题。目前该库正在寻找贡献者为 image crate 添加对 zune-jpeg 的支持。Announcing zune-jpeg: Rust's fastest JPEG decoder: https://www.reddit.com/r/rust/comments/11f4jre/announcing_zunejpeg_rusts_fastest_jpeg_decoder/GitHub - etemesi254/zune-image/tree/dev/zune-jpeg: https://github.com/etemesi254/zune-image/tree/dev/zune-jpeg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/etemesi254/zune-image/tree/dev/zune-jpeg" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "zune-jpeg：JPEG 解码器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 484: https://this-week-in-rust.org/blog/2023/03/01/this-week-in-rust-484/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2023/03/01/this-week-in-rust-484/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-03 00:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week In Rust 484" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在这篇文章中，作者构建了一个最小的 Tauri 应用程序，展示了使用 JS、Vue 和 Rust 构建原生 iOS 应用程序。ReadMore:https://studioterabyte.nl/en/blog/tauri-mobile-app-development源码:https://github.com/StefanVDWeide/demo-mobile-app" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/StefanVDWeide/demo-mobile-app" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-01 19:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tauri Mobile - 使用 JavaScript 和 Rust 开发移动应用程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "学习 Rust 的一些书籍、资料、博客。ReadMore:https://gist.github.com/noxasaxon/7bf5ebf930e281529161e51cd221cf8a" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://gist.github.com/noxasaxon/7bf5ebf930e281529161e51cd221cf8a" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-01 19:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "learning_rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 正被用于构建 Linux 内核和 Android 操作系统，也被 AWS 用于关键基础设施，以及用于 ChromeOS 和Firefox。尽管 Rust 很有前景，但它在 GUI 原生开发领域还有所欠缺。在 2019 年，GUI 是阻碍采用 Rust 的第六大原因。这其实与语言本身的设计有关，Rust 使得构建 UI 的常见方法进行建模很困难。‍在Warp，我们一直在用 Rust 构建一个自定义的UI框架，用来在 GPU 上渲染。构建这个框架是非常棘手的，也是一项巨大的投资，但它在构建一个拥有丰富 UI 元素的终端时发挥了很好的作用，其速度不亚于地球上的任何其他终端。如果我们使用 Electron 或 Flutter 这样的非原生方式来运行，这种水平的性能几乎是不可能的。在这篇文章中，我将讨论为什么Rust独特的内存管理模型和缺乏继承性使得传统的技术难以建立一个 UI 框架，以及我们一直在解决这个问题的一些方法。我相信这些方法中的一种，或者它们的某种组合，最终将构成一个稳定的跨平台 UI 工具包，用于高性能 UI 渲染，最终给每个人使用。ReadMore: https://www.warp.dev/blog/why-is-building-a-ui-in-rust-so-hard" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.warp.dev/blog/why-is-building-a-ui-in-rust-so-hard" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-01 09:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么用 Rust 构建原生 UI 程序这么困难" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "2018年4月1日，Cloudflare 宣布推出 1.1.1.1 公共DNS解析器。多年来，我们在平台上添加了用于故障排除的调试页面、全局缓存清除、Cloudflare上区域的0 TTL模式、上游TLS和家庭用的的1.1.1.1。在这篇文章中，我们想分享一些幕后的细节和变化。当项目开始时，Knot Resolver 被选为DNS解析器。我们开始在它的基础上构建一个完整的系统，以便它能适合Cloudflare的使用情况。拥有一个经过实战检验的DNS递归解析器，以及一个DNSSEC验证器，真是太棒了，因为我们可以把精力放在其他地方，而不是担心DNS协议的实现。Knot Resolver 在其基于 Lua 的插件系统方面相当灵活。它允许我们快速扩展核心功能，以支持各种产品特性，如 DoH/DoT、日志、基于 BPF 的攻击缓解、缓存共享和迭代逻辑覆盖。但是随着流量的增长，我们遇到了某些限制难以突破。终于，我们下定决心重新实现一套 DNS 解析器，基于 Rust 和 WASM 来实现。ReadMore: https://blog.cloudflare.com/big-pineapple-intro/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.cloudflare.com/big-pineapple-intro/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-03-01 09:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 和 WASM 如何驱动 1.1.1.1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "最近有人在Linkedin 上提出, 把 AWS Lambdas 从 python 替换为 Rust 可以节约很多成本. 于是作者做了 2 个例子进行对比.最后,在这个例子中, Rust 比 Python 快了大约 20%, 而且内存节省了 40%.原文链接https://www.confessionsofadataguy.com/aws-lambdas-python-vs-rust-performance-and-cost-savings/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-27 21:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "AWS Lambdas - Python vs Rust 性能和成本节约" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "您可以把 ForkFS 看作是一个轻量级容器: 程序仍然可以访问您的实际系统, 但是它们的磁盘更改被重新路由到特殊的目录, 而不改变实际的文件系统.github 地址https://github.com/SUPERCILEX/forkfs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-27 21:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ForkFS: 轻量级文件系统的沙盒" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是去年一个分享, 如要围绕如何编写优雅的 Rust 库 API.油管视频https://www.youtube.com/watch?v=6-8-9ZV-2WQ原文链接https://towardsdatascience.com/nine-rules-for-elegant-rust-library-apis-9b986a465247--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-27 21:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "编写优雅的Rust库API的九条规则" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "发布了 serde-query 0.2.0 版本！这个 proc-macro 库允许您针对任何与 serde 兼容的数据格式编写查询：https://github.com/pandaman64/serde-query/新版本完全重写了代码生成。这次重写使我能够实现数组查询并显着改进错误消息！欢迎任何问题和意见！例子数组查询错误信息" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-26 20:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "发布 serde-query 0.2.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ws-tool 0.7.0 发布，带来了 permessage-deflate 扩展以及更多的性能和 API 优化。https://github.com/PrivateRookie/ws-tool这是 ws-tool 的特征矩阵目前 ws-tool 的性能相当不错，你可以在 README 中找到基准测试数据，或者克隆项目并使用 load_test 和 bench_xxx 示例。这是一个包含 300 字节负载大小的基准测试的简要表。欢迎PR和star。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-26 20:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "公告：ws-tool 0.7.0 发布 🎉🎉🎉" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Libmake 简介：一个 Rust 库生成器，可帮助您快速轻松地创建高质量的 Rust 库。https://www.reddit.com/r/learnrust/comments/11bpcho/introducing_libmake_a_rust_library_generator_that/Libmake旨在易于使用，并生成一个简单、惯用的 Rust 库，您可以使用它来构建自己的应用程序。https://github.com/sebastienrousseau/libmake该库旨在用作命令行工具。Libmake 的一些主要功能包括：\n通过命令行手动生成新的 Rust 库。\n从预定义的 CSV、JSON 或 YAML 文件生成新的 Rust 库。\n如果您有兴趣尝试 Libmake，可以通过以下链接在 Crates.io 上找到它：\nhttps://crates.io/crates/libmake\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-26 20:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Libmake 简介：一个 Rust 库生成器，可帮助您快速轻松地创建高质量的 Rust 库。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在没有引擎或图形API的情况下制作第一人称视角游戏似乎是一项几乎不可能的任务。在这篇文章中，作者将展示如何使用一种叫做光线投射（ray casting）的算法来完成这一任务。博客原文链接，https://grantshandy.github.io/posts/raycasting/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://grantshandy.github.io/posts/raycasting/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-25 23:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现仅2KB的第一人称视角游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "fltk-decl 是对fltk-rs 的声明式 UI 的探索。目前它支持使用json、json5、yaml、xml和toml来描述用户界面。繁重的工作是由Serde完成的。它支持从 UI 描述文件中热重载（保存时）UI，所以不需要频繁地重新编译。这也可以帮助那些不需要 Rust 知识的 UI 设计师团队。GitHub 链接，https://github.com/MoAlyousef/fltk-decl" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/MoAlyousef/fltk-decl" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-25 23:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "探索 fltk-rs 的声明式 UI" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "jammdb 是一个嵌入式的单文件数据库，允许以字节的形式存储键/值对。它最初是 Ben Johnson 开发的 BoltDB 的 Rust 移植，其灵感来自 Howard Chu 的 LMDB。jammdb 提供了 ACID 合规性，可序列化和隔离的事务，有多个无锁的读和一个并发的写。数据被组织在一个单层的 B+ 树中，所以随机和连续的读取都非常快。底层文件是内存映射的，所以读取时不需要额外的内存分配。GitHub 链接，https://github.com/pjtatlow/jammdbhttps://github.com/lesterli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/pjtatlow/jammdb" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-25 23:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "jammdb，嵌入式的单文件数据库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust写的画ASCII示意图的工具。支持各大平台。程序员的最爱啊。https://github.com/huytd/ascii-d" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/huytd/ascii-d" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-24 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ascii-d - 画ASCII示意图的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Dioxus 是新出的与 Yew 类似的 Rust Web 前端框架（为什么这么多，百花齐放的感觉，难道是天下苦js久已？）。性能已经与原生js实现的框架差不了多少了。绝对值得关注。https://dioxuslabs.com/blog/release-030/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://dioxuslabs.com/blog/release-030/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-24 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Dioxus 0.3 发布，巨大的更新" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是系列文章。从基础知识点讲解一个GUI系统应该怎么构建，结合Rust语言的特性进行描述。https://samsartor.com/guis-1/https://samsartor.com/guis-2/https://samsartor.com/guis-3/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://samsartor.com/guis-1/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-24 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "福利帖：Rust 如何实现 GUI 系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇教程讲解了Diesel中 join, 1对多，多对多关系的使用。比较详尽。使用 diesel orm 的同学可以关注。http://diesel.rs/guides/relations.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "http://diesel.rs/guides/relations.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-24 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "DIESEL：新增一篇讲解关系的教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "以后可能会出现这种语法（还在动议阶段），表示可能是或者不是async trait 或函数。然后本篇文章还详细探讨了一种通用的 ?modifier 支持。小编表示：学不动了。https://blog.rust-lang.org/inside-rust/2023/02/23/keyword-generics-progress-report-feb-2023.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2023/02/23/keyword-generics-progress-report-feb-2023.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-24 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "?async 新的进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "esp-rs：https://github.com/esp-rs/esp-hal 在紧锣密鼓的开发中。期待啊。这是本项目2023年计划。https://mabez.dev/blog/posts/esp-rust-24-02-2023/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://mabez.dev/blog/posts/esp-rust-24-02-2023/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-24 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ESP 嵌入式支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "官方博客发布了治理改革RFC的公告，了解详情请点开链接查看。主要看点其实是新的RFC改革治理之后，提供了多语言的支持，其中包括简体中文，该PR目前还在讨论中。https://github.com/rust-lang/rfcs/pull/3392原文: https://blog.rust-lang.org/inside-rust/2023/02/22/governance-reform-rfc.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2023/02/22/governance-reform-rfc.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-23 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "治理改革 RFC公告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Dioxus 是一个UI框架，内嵌rsx!宏来写界面，本次更新主要看点是官方提供了配套的开发工具链，比如给宏内代码fmt，比如提供热重载等功能，具体更新内容请看原文链接。原文: https://dioxuslabs.com/blog/release-030/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://dioxuslabs.com/blog/release-030/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-23 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Dioxus 发布0.3版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个新的游戏引擎，和之前社区存在的fyrox和bevy等相较而言，这个游戏引擎侧重在多人游戏构建，以及简单的完成游戏，原文链接里有更详细的介绍，目前看来完成度挺高，官方宣称18个月的开发，发布了现在的0.1版本。原文: https://www.ambient.run/post/introducing-ambient" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.ambient.run/post/introducing-ambient" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-23 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ambient 0.1 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust周报483期This Week in Rust 483: https://this-week-in-rust.org/blog/2023/02/22/this-week-in-rust-483/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2023/02/22/this-week-in-rust-483/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-23 23:40" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "本周Rust社区进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "尽管深度学习取得了进展，但以合理的成本有效地训练和部署模型的问题继续限制了它在现实世界中的采用。虽然 Python 一直是开发深度学习模型的首选语言，但它的效率和部署简便性并不为人所知。从糟糕的包版本控制到不兼容的 Python 版本，让一切都正确并不总是那么容易。最近的编程语言，如 Rust 和 Go 解决了这些问题，并使可扩展和高效的解决方案成为可能。在这篇博文中，我们将探讨 Rust 在深度学习中的应用案例，以及为什么它可能是比 Python 更好的选择。凭借其通过安全和并发抽象处理复杂性的能力，Rust 有可能以 Python 无法解决的方式解决该领域的最大挑战。\nhttps://burn-rs.github.io/blog/a-case-for-rust-in-deep-learning\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 20:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "深度学习中的 Rust 案例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nhttps://rustacean-station.org/episode/rust-1.65-1.66-1.67/\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 20:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.65、1.66 和 1.67 中的新功能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nhttps://www.lpalmieri.com/posts/pavex-progress-report-01/\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 20:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pavex，一个新的 Rust 网络框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "“有些 bug 仅仅是好玩。还有一些简直是有趣” -- from 本文章作者GNU Emacs 是一个自由软件文本编辑器。它由 GNU 项目创始人 Richard Stallman 创建，基于为 Unix 操作系统开发的 Emacs 编辑器。GNU Emacs 一直是GNU项目的核心组成部分，也是自由软件运动的旗舰项目。它的名字偶尔被缩写为 GNUMACS。GNU Emacs 的标语是“可扩展的自文档化文本编辑器”。作者运行了 Emacs 同时在管理器中配置 rust-analyzer 和高亮等，并在 Rust code 中用一个小 emoji 作为注释，rust-analyzer::stderr 就会报错。以下文章复现了这个过程\nhttps://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 20:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "底部的表情符号打破了 rust-analyzer" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "哪一种，当然是Rust。这篇文章是从能源方面来讲，说之前那些语言特别是gc语言，对，说的就是java，js，py，go等。不环保。而Rust是未来。https://interestingengineering.com/innovation/rust-can-halve-data-center-land-use" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://interestingengineering.com/innovation/rust-can-halve-data-center-land-use" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 18:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "这种语言，能占据数据中心半壁江山" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "也就是只有world，没有图形界面。手把把教。https://www.riskpeep.com/2023/02/make-text-adventure-game-rust-10.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.riskpeep.com/2023/02/make-text-adventure-game-rust-10.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 18:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust制作一个文本冒险游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "对于其它语言中有的各种空类型，在Rust中会怎样呢？文中对 Null, Option::None, empty tuple, never type, 做了一些试验。https://geeklaunch.io/blog/nothing-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://geeklaunch.io/blog/nothing-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 18:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "专题探讨：Rust中的空类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "PikeOS是一款实时操作系统，主打安全领域，广泛用于车载平台。https://www.sysgo.com/press-releases/rust-now-available-for-real-time-operating-system-and-hypervisor-pikeos--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.sysgo.com/press-releases/rust-now-available-for-real-time-operating-system-and-hypervisor-pikeos" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-22 18:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust可以在PikeOS上运行了。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我正在使用 crate 编写 Piet 的实现glow，其中文本布局是使用cosmic-text. 然而，我意识到拥有一个独立的文本实现可能会对其他人制作这样的箱子有所帮助。GitHub: https://github.com/notgull/piet-cosmic-text这个 crate 实现了Piet文本 API，因此 finalTextLayout是一个cosmic_text::Buffer. 有些部分没有完全实现（比如命中测试和文本对齐），但现在我认为这已经准备好成为一个可用的候选者。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-19 19:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "发布 piet-cosmic-text，一个使用 cosmic-text 实现其文本 API 的 piet 层" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "想要分享tracing-indicatif，这是我最近发布的一个crate！https://github.com/emersonford/tracing-indicatif主要优势/特点：\n通过对现有跟踪订阅者初始化代码进行简单的 3 行更改，您可以为 CLI 启用进度条。\n为您处理所有 PB 管理，包括防止 PB 破坏您的标准错误输出和限制可见 PB 的数量。\n能够在 PB 中显示父子跨度关系。\n轻松“切换”PB：如果您不在 CLI 上下文中，则不要添加该层。\n在您的库中需要零PB 管理代码。意味着您可以让 PB 显示您的依赖项中的跨度，并且您不需要向您的库中添加任何侵入性 PB 管理代码。\n易于定制，它保留了 Indicatif 的 ProgressStyle API，因此您可以根据自己的喜好定制 PB 外观。\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-19 19:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tracing-indicatif：自动显示活动跟踪跨度的 CLI 进度条" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我发现了一些很酷的项目，我想与社区分享。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-19 19:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一些用 Rust 编写的论坛软件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "经过一年多的开发，Relm4 v0.5终于完成了大量的新特性和改进！毫无疑问，版本0.5是迄今为止我们最大的版本，使得 Relm4比以前更容易、更稳定、更高效。我们不能把所有的改进都放在这篇文章中，所以我们只能看看自第一个 beta 版以来添加的最重要的新特性。有关更多信息，请查看完整的变更日志。文章链接，https://relm4.org/blog/posts/announcing_relm4_v0.5/Github 链接，https://github.com/Relm4/Relm4" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Relm4/Relm4" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-18 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Relm4 v0.5发布!" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "想要分享tracing-indicatif，我最近发布的一个crate！我非常喜欢在 CLI 中设置进度条，因为我发现它们明显更具互动性。不过，我一直不太喜欢在 CLI 中添加进度条相关的逻辑。有一天，我意识到进度条实际上只是在跟踪某个“范围”的生命周期，所以我可以将我的进度条绑定到库中现有的tracing spans; 为此，我编写了一个跟踪层。我很高兴看到这个解决方案变得如此干净和简单文章链接，https://www.reddit.com/r/rust/comments/114xcui/tracingindicatif_automatically_show_cli_progress/Github 链接，https://github.com/emersonford/tracing-indicatif" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/emersonford/tracing-indicatif" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-18 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tracing-indicatif: 自动显示活动跟踪范围的 CLI 进度条" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Pfetch 是用 POSIX sh 编写的一个流行的系统实用程序，用于显示系统信息。我在 Rust 中重写了这个工具，使其运行速度提高了10倍文章链接，https://www.reddit.com/r/rust/comments/115cnur/pfetchrs_a_rewrite_of_pfetch_in_rust/Github 链接，https://github.com/Gobidev/pfetch-rshttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Gobidev/pfetch-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-18 22:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pfetch-rs - 一个pfetch的Rust重写" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个Wordle解迷器。https://github.com/Twister915/wordle-solver" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Twister915/wordle-solver" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-17 23:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust + Yew + Wasm 案例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "LemmyBB - 支持ActivityPub协议。后端使用Actix, 前端使用Js实现Orbit - 支持ActivityPub协议。前端使用Ts, 后端有 Redis + PostgreSQLDiscuz - 使用MySQL和Actix实现Morum - 采用了 Matrix ProtocolHikari - 还很新，缺乏细节https://www.reddit.com/r/rust/comments/114htlg/some_forum_software_written_in_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/114htlg/some_forum_software_written_in_rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-17 23:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一堆使用Rust实现的论坛程序分享" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "从底层构建起，对非结构化数据，比如：图片，视频，文本以及更多，做了很好的优化，据说速度非常快。https://github.com/Oxen-AI/oxen-release#-oxen" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Oxen-AI/oxen-release#-oxen" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-17 23:48" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "oxen - 非结构化数据的版本控制系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RustConf 2023 将于9月12号～15号在美国新墨西哥州Albuquerque（该州最大城市）举行。包含主会议和数个workshop。采用线下面基+线上直播的形式举行。议题提交在2月14号开放了，到4月2号截止。请在下面地址查看详情：https://sessionize.com/rustconf-2023" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://sessionize.com/rustconf-2023" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-16 21:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustConf 2023 将于9月12号在美国新墨西哥州Albuquerque举行" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个可在代码里面调用Chrome或Chromium能力的库，类似于Nodejs 的 Puppeteer。常用于自动化的一些工作，比如自动化前端测试，爬虫等。https://github.com/atroche/rust-headless-chrome" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/atroche/rust-headless-chrome" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-16 21:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Headless Chrome 1.0正式发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "MIT技术评论。里面罗列了Rust语言发展的历史、重要里程碑和重要人物。MIT Technology Review，科技行业权威杂志和网站。https://www.technologyreview.com/2023/02/14/1067869/rust-worlds-fastest-growing-programming-language/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.technologyreview.com/2023/02/14/1067869/rust-worlds-fastest-growing-programming-language/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-16 21:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "综述：Rust - 如何从一个副业项目变成世界上最受欢迎的语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nTauri：使用系统的 webview 来渲染 HTML/JS 的前端。你可以选择任何前端框架。后台是用Rust编写的，可以通过内置的方法与前台通信。\nIced： 受 Elm 启发的（响应式）GUI库。在桌面上使用 wgpu 进行渲染；实验性的web后端创建DOM进行渲染。所有代码都用 Rust 实现\negui: 使用 OpenGL 进行自定义渲染即时 GUI。所有代码用 Rust 实现\nReadMore: https://lukaskalbertodt.github.io/2023/02/03/tauri-iced-egui-performance-comparison.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://lukaskalbertodt.github.io/2023/02/03/tauri-iced-egui-performance-comparison.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-14 18:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust GUI 框架对比： Tauri vs Iced vs egui" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "uutils 是用 Rust 编程语言编写的 GNU Coreutils 的重新实现。 它实现的 cp、mv 和其他核心实用程序版本与 GNU 版本越来越接近，并能够承担更多的实际用途。随着 uutils 的发展越来越好，它已被许多 Linux 发行版打包，现在也被“Yocto 项目”深入使用。 在 Sylvestre Ledru 的演讲中，他描述了该项目的动机及其由于安全性、可移植性、能够利用现有 Rust crate 以及巨大的性能潜力而使用 Rust。ReadMore: https://www.phoronix.com/news/Rust-Coreutils-uutils-2023" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.phoronix.com/news/Rust-Coreutils-uutils-2023" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-14 18:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 实现的 GNU Coreutils 正在被越来越多的人使用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "VoceChat 服务器是一个 17MB 的开源个人聊天服务器！ 类似 Discord，但您可以在自己的真实服务器上运行它！支持 Markdown、公共频道、私人频道和个人聊天等。ReadMore: https://voce.chat/zh-CN" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://voce.chat/zh-CN" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-14 18:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个仅 17MB 的个人聊天服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个油管视频, 讲解和可视化了大部分的数据结构.\nInteger, char\nreference\narray\nslice\nString,str,&str\nstruct\nenum\nbox pointer\nOption\nRc\n等等\n油管视频https://www.youtube.com/watch?v=rDoqT-a6UFg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-13 19:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "可视化Rust数据类型的内存布局" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "zune-inflate 是 libdeflate的一个Rust移植.特性:\n支持 gzip, zlib和 deflate streams.\nsafe Rust 实现\n支持#[no_std]\n支持解压设限\ngithub地址https://github.com/etemesi254/zune-image/tree/main/zune-inflate" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-13 19:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "zune-inflate: Rust中最快的gzip/zlib/deflate 实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rnote是一款Rust 编写的基于矢量的开源绘图应用程序, 用于绘制草图, 手写笔记以及注释文档和图片.github 地址https://github.com/flxzt/rnote" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-13 19:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rnote: Rust编写的笔记应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "比现存的 linters 快要 10-100x 倍.原文链接https://morioh.com/p/25f97bbf9107?f=5cb7d89d660c8335951ca454--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-13 19:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Ruff: Rust 编写的超快的 python linter" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我们今天要感谢r/Rust社区。🙏我们从这里获得了第一个 GitHub 星标。我们在这里找到了新的贡献者和团队成员。我们从这里的帖子中学到了很多东西。感谢您成为灵感的源泉。https://www.reddit.com/r/Rust/经过两年的开发，我们很高兴地宣布用 Rust 编写的开源矢量搜索数据库 Qdrant v1.0 版本发布。🦀 https://github.com/qdrant/qdrant发行说明：https ://qdrant.to/v1releasehttps://qdrant.to/v1releaseRust 赋予我们真正的超能力。💪 根据公共开源基准，Qdrant 是性能最高和可扩展的矢量搜索。🚀 https://qdrant.tech/benchmarks/多亏了 Rust，我们能够快速构建很多东西。从分布式部署和复制功能到内存映射支持，仅用了一年时间。我们有宏伟的计划。这是 2023 年的路线图 https://qdrant.to/roadmap📆 一个小活动公告：3 月 2 日，我们的工程师 Arnaud 将在 Rust Meetup Linz 发表演讲。主题是 Rust 和 AI。保存日期 https://www.meetup.com/rust-linz/events/291483339/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-12 11:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "开源矢量数据库 Qdrant 庆祝 v1.0 发布。🦀 Rust 社区的颂歌！🙏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "我们刚刚发布了proptest 1.1.0，这是一个 Rust 的属性测试框架。Proptest 最近找到了新的维护者，这标志着大约 2 年来 Proptest 的第一个新版本。https://crates.io/crates/proptest此版本的亮点是：\nconst 泛型支持\n改进了浮点数采样\n通过环境变量禁用持久性\nNonZero*类型现在实现Arbitrary\n该库现在由@matthew-russo、@rex-remind101 和我自己 (@cameron1024) 在 Github 上维护。如果您有想法，请随时打开问题或 PR。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-12 11:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "发布 Proptest 1.1.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Github：https ://github.com/JettChenT/timeblokhttps://github.com/JettChenT/timeblok你好！我用 Rust 制作了一个简单的声明式 DSL，它结合了纯文本的多功能性和可扩展性以及数字日历的便利性，可用于个人日历规划。例如，您可以使用以下内容来描述今年 2 月工作日的早上安排：... 可以直接导入到您的日历中。（在内部，timeblok 将上述内容“编译”为 .ics 文件，这是一种数字日历文件格式，大多数日历应用程序都支持这种格式，人类几乎无法阅读。）我正在寻找贡献者，欢迎提供有关此项目的任何反馈！" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-12 11:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一种简单的声明式日历语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "gtk4-rs代码库包含GTK4的Rust crates。还有个庞大的GObject库生态系统，其中许多库基于gtk-rs中包含的Rust绑定工具。 特别是：\ngtk-rs-core，一些核心库的绑定，例如 glib、gio、pango、graphene\ngstreamer-rs，GStreamer 媒体框架的绑定，也发布了新版本v0.20。\n关注GTK3的人越来越少了，它将会在未来被弃用，建议所有未升级到GTK4的人进行升级。GTK4 GitHub链接，https://github.com/gtk-rs/gtk4-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/gtk-rs/gtk4-rs" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-11 21:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GTK4发布v0.60" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Polars 是个速度极快多线程的 DataFrames 库，使用 Apache Arrow Columnar Format 作为内存模型。同时有Rust，Python和Node.js的实现。\nRust Polars发布v0.27\nPython Polars发布v0.16.4\nPolars GitHub链接，https://github.com/pola-rs/polars" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/pola-rs/polars" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-11 21:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Polars 发布v0.27" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一家早期的数据库初创公司，经过 7 个月的开发，完全删除了 C++ 代码库，并用 Rust 语言从头开始重写了所有内容。相比 C++，他们选择 Rust 的四个主要原因：\nRust 是安全的；\nRust 是易用的；\nRust 是易学的；\nUnsafe Rust 是可管理的。\n具体关于他们是如何做出决定，以及为什么他们认为这是有史以来最好的决定之一，请查看博客原文。博客原文链接，https://www.risingwave-labs.com/blog/building-a-cloud-database-from-scratch-why-we-moved-from-cpp-to-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.risingwave-labs.com/blog/building-a-cloud-database-from-scratch-why-we-moved-from-cpp-to-rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-11 21:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从头开始构建云数据库 RisingWave - 为什么我们从 C++ 转向 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个实验项目旨在提供一个符合人体工程学的适配器，用于构建与 S3 兼容的服务。\ns3s，以通用的 hyper 服务形式实现 Amazon S3 REST API。 S3 兼容的服务可以专注于 S3 API 本身而不必关心 HTTP 层。\ns3s-aws，提供有用的类型并与 aws-sdk-s3 集成。\ns3s-fs，实现了基于文件系统的 S3 API，作为示例实现。它专为集成测试而设计，可用于模拟 S3 客户端。它还提供了一个用于调试的二进制文件。\nGitHub 链接，https://github.com/Nugine/s3shttps://github.com/lesterli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Nugine/s3s" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-11 21:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "s3s，S3服务适配器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是 2023 年 1 月的 Rust 工作机会报告。Filtra 维护了一份招聘 Rust 相关职位的公司索引。为了感谢来自 Rust 社区的支持，Filtra 决定公开分享这些数据。Rust Jobs Report: January 2023: https://filtra.io/rust-jan-23" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://filtra.io/rust-jan-23" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-10 02:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 工作机会报告：2023 年 1 月" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 1.67.1 stable 正式发布，赶快升级到最新稳定版本体验 Rust 带给你的强劲动力吧 :)一起看下新版本有哪些值得关注的地方吧：\n暂时使用 LLVM 的 archive writer 以修复链接到 thin archives 的项目。\n由于 rust-analyzer 还没有支持 uninlined_format_args，所以现在将其降级并默认允许这种风格。\n修复 Rust 自举代码。\nAnnouncing Rust 1.67.1: https://blog.rust-lang.org/2023/02/09/Rust-1.67.1.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2023/02/09/Rust-1.67.1.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-10 02:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.67.1 stable 正式发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 481: https://this-week-in-rust.org/blog/2023/02/08/this-week-in-rust-481/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2023/02/08/this-week-in-rust-481/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-10 02:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week In Rust 481" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在本篇中，作者对面向对象做了初步的介绍，并用代码展示了Rust的基本封装方法。https://www.thecodedmessage.com/posts/oop-1-encapsulation/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.thecodedmessage.com/posts/oop-1-encapsulation/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust面向对象研究 - 封装" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在本篇中，作者对面向对象理论的第二根支柱——多态——进行了实践研究。https://www.thecodedmessage.com/posts/oop-2-polymorphism/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.thecodedmessage.com/posts/oop-2-polymorphism/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust面向对象研究 - 多态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "界面非常不错，现在发布了v1.1版，功能更加完整。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sniffnet - Rust实现的网络监控工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Bed-Reader（一个Py生物信息学库）的作者总结的经验教训，包含9条：https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust为Python写扩展的9条原则" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Matrix 就是那个 Fediverse 的聊天网络。之前的Home server - Synapse 是用python写的。现在准备一点一点分模块使用Rust进行性能优化。另外一个出现的地方是SDK，使用Rust替换了之前js实现的密码学的部分。另外还有一个第三方的Home server实现是用Rust写的：https://conduit.rshttps://github.com/matrix-org/synapse" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/matrix-org/synapse" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Matrix 2.0 官方正在引入Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个系列文章，基于Rust已进入Linux kernel。此团队将研究如何将C驱动迁移到Rust上来的最佳实践。当然在迁移过程中，也会对比采用Rust来写driver到底有什么优势。文章有四篇，强烈建议阅读学习：\n\nPart 1 – Leaking Addresses：https://research.nccgroup.com/2023/02/06/rustproofing-linux-part-1-4-leaking-addresses/\n\n\nPart 2 – Race Conditions（待写）\n\n\nPart 3 – Integer Overflows（待写）\n\n\nPart 4 – Shared Memory（待写）\n\nPart 1 – Leaking Addresses：https://research.nccgroup.com/2023/02/06/rustproofing-linux-part-1-4-leaking-addresses/Part 2 – Race Conditions（待写）Part 3 – Integer Overflows（待写）Part 4 – Shared Memory（待写）" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://research.nccgroup.com/2023/02/06/rustproofing-linux-part-1-4-leaking-addresses/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rustproofing Linux" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "tui-rs 作者貌似跑路（不出现）了。大家在商讨如何接手推进的事情。https://github.com/fdehau/tui-rs/issues/654" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/fdehau/tui-rs/issues/654" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-08 22:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tui-rs 需要人接手维护" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "准备了一个多月的 Rust Magazine 第一期终于发布了，里面有 Folyd 同学写的 VecDeque::resize() 优化解析的文章，也有迟先生的一周教你写一个 LSM 数据库存储引擎，Yukang 分享自己给 Rust 编译器提交 70+ PR 的经验，还有 Folyd 采访 Cargo 官方成员 Weihang Lo 的文章等等，欢迎大家阅读，也期待大家投稿 👏🏻Rust Magazine 主页https://rustmagazine.org/issue-1/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-07 19:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Magazine 第一期发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Github 目前的代码搜索引擎基于 Rust 实现，其代码搜索团队成员在本文中简要介绍了其如何实现代码索引，以及背后的架构。https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/读者还可以参考 Github 之前发布的一篇博客：a brief history of code search at github，其中介绍了代码搜索在 Github 的发展历程，以及用到的关键技术。https://github.blog/2021-12-15-a-brief-history-of-code-search-at-github/Github code search 功能介绍https://github.com/features/code-search" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-07 19:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Github 用 Rust 重写搜索引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Meilisearch 是一个轻量的搜索引擎，可以轻松集成到你的应用和网站中。近日，其发布了第一个稳定版本 1.0，完善了中文和韩文的语言支持，提高了索引和搜索的速度，提供了一键升级的特性，详细内容可以参考发布日志https://blog.meilisearch.com/whats-new-in-v1-0/github 仓库https://github.com/meilisearch/meilisearch" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-07 19:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Meilisearch 发布 1.0 版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者提出了自己对 Rust UI 的愿景和期望, 并且提出了 Fearless GUI.要实现这个目标, 作者认为至少要达到以下方面:\n可遍历性\n灵活性\n可测试性\n可观测性\n可重放性\n并且,作者发布了 Masonry 0.1. 旨在达成上述目标.原文链接masonry github地址https://poignardazur.github.io/2023/02/02/masonry-01-and-my-vision-for-rust-ui/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-06 18:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust UI 愿景以及 Masonry 0.1 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "glow 是一个GL 的各种 binding, 目标是可以在任何地方运行 GL(Open GL, OpenGL ES, WebGL). 下面的视频是如何使用 glow 来实现在终端上展示漂亮的 markdown.油管视频glow github 地址https://www.youtube.com/watch?v=h9JJjyiHOAw" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-06 18:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Glow实现漂亮的 markdown 终端显示" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "erdtree 是一个现代的 文件树 可视化工具, 并且可以展示额外的硬盘使用信息等, 目前发布稳定版本 1.0github 地址https://github.com/solidiquis/erdtree" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-06 18:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "erdtree: 1.0 版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "proptest 是一个 属性测试框架. 目前发布 v1.1 版本.crate地址https://crates.io/crates/proptest--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-06 18:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "proptest v1.1 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在此之前，Citadel 协议使用后量子安全保护传输中的数据。但现在，Citadel 协议还可以保护静态数据（具有后量子安全性）。Github：https ://github.com/Avarok-Cybersecurity/Citadel-Protocolhttps://github.com/Avarok-Cybersecurity/Citadel-ProtocolCitadel 协议现在提供远程加密虚拟文件系统 (RE-VFS) 功能，并将后量子安全性集成到协议中。这将允许客户端、对等点和服务器使用虚拟化文件目录将彼此用作远程存储端点。此外，这提高了文件存储的安全性，因为这将用于解密的私钥与存储节点分开。这将迫使黑客为了破坏文件而破坏两个端点，而不是只破坏一个点。最后，由于 RE-VFS 是建立在 Citadel 协议之上的，使用该协议的所有好处，例如多层加密和多层棘轮，都可以大大提高文件的安全性。The Citadel Protocol 有效使用基于 Kyber 的数据加密的背后发生了什么？请参阅此处的帖子：https ://www.linkedin.com/posts/tpbraun_kyber-postquantumcryptography-postquantum-activity-7025100733385515008-xAXS?utm_source=share&utm_medium=member_desktophttps://www.linkedin.com/posts/tpbraun_kyber-postquantumcryptography-postquantum-activity-7025100733385515008-xAXS?utm_source=share&utm_medium=member_desktop" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-05 18:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Citadel 协议更新 | 远程加密虚拟文件系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "它是什么，为什么要制作它？Async-rdma是一个用于编写具有高级抽象和异步 API 的 RDMA 应用程序的框架。https://github.com/datenlord/async-rdma如果您想了解有关此库和 RDMA 的更多信息，请查看这篇文章。https://www.reddit.com/r/rust/comments/t6er7c/announcing_asyncrdma_a_lib_for_writing什么是新的？在此版本中，我们添加了一些 API，使用户能够控制设备、连接和 async-rdma 后台框架的更多属性。我们在部分硬件RDMA设备（之前只有Soft-RoCE）上测试了async-rdma，发现默认配置无法满足所有硬件需求。有些硬件需要特殊配置，所以我们增加了更丰富的设置接口。我们支持监听 IBV 异步事件。当 IBV 异步事件发生时，它会被记录下来。以后我们会添加更多的录音功能。ChangeLog包含每个版本的更改的简短摘要，您可以查看它以获取更多详细信息。https://github.com/datenlord/async-rdma/blob/master/ChangeLog.md试试？您可以尝试在没有特殊硬件（RDMA NIC）的情况下开发 RDMA 应用程序。查看我们的Github Repo，它将指导您配置环境并运行演示。https://github.com/datenlord/async-rdma欢迎试用并提出意见和建议。链接\nGithub：https ://github.com/datenlord/async-rdma\nCrate：https ://crates.io/crates/async-rdma\nDocs：https ://docs.rs/async-rdma/0.5.0/async_rdma\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-05 18:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Async-rdma v0.5.0：用于简单编写高吞吐量、低延迟网络应用程序的 Rust 库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "将 Python 重写为 Rust：buku 风格的 CLI 书签管理器。结果：快 20 倍。Github: https://github.com/sysid/bkmr特点：\n具有语义排序的全文搜索 (FTS5)\n模糊搜索（ala FZF）\n分类标签\n知道如何打开 HTTP URL、目录、文件（例如 Office、图像……）\n自动用来自 Web 的标题和描述丰富 URL\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-05 18:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CLI 书签管理器和启动器：bkmr" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "大家好，我想分享我在过去几个月的工作: 一个新的初学者友好的锈课程：Comprehensive Rust。我在 Android 上工作，我们已经支持用Rust支持系统级开发好几年了。为了帮助加速 Rust 在 Android 中的应用，我们编写了一个为期四天的课程，旨在让开发人员从 Rust 上手开发。文章链接，https://users.rust-lang.org/t/new-rust-course-by-android-comprehensive-rust/86318Github 链接，https://github.com/google/comprehensive-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/google/comprehensive-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-05 13:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Android的Rust新课程：Comprehensive Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "DarkBird是一个用作文档检索的一个面向文档、实时的内存数据库解决方案。文章链接，https://users.rust-lang.org/t/darkbird-5-0-2-released/88759/1Github 链接，https://github.com/Rustixir/darkbird" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Rustixir/darkbird" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-05 13:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "DarkBird 5.0.2 released" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "它解决了什么问题？使用简单的浮点数来存储角度值是容易出错的: 通常你可以添加两个角度，一个以弧度为单位，另一个以度为单位，你可以尝试计算一个值的余弦，然后得到一个非预期的结果。Angulus提供了一种特定的类型，表示一个角，与单位无关。文章链接，https://www.reddit.com/r/rust/comments/105pnb4/my_unemployment_project_a_unix_terminal_in_the/Github 链接，https://github.com/Property404/its-a-unix-systemhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Property404/its-a-unix-system" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2023-02-05 13:04" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Angulus 0.3 release" }, "type": "text" }], "type": "title" } },]
