export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "为什么？名字太长了，改短点" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 09:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」「Rust每日新闻」在2019年将改名为「Rust日报」" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "来自Bitgo（比特币相关）的一位工程师，编写了cargo-crev库，它的作用是通过创建加密ID，以加密验证的证明形式查看crate，在线发布证明并与其他用户共享。最终构建为一个信任网络，低质量的包形成差评，高质量的包积累好评，并且很容易地确定哪些crate是新的，需要更高级别的审查。作者在今年遭遇过一些问题，促使他实现了此库。可能是因为作者有区块链数字货币背景，促使他想通过加密验证的证明形式来构建审查网络。工具看上去不错，但未来发展如何呢？拭目以待。Read Morehttps://dpc.pw/cargo-crev-and-rust-2019-fearless-code-reuse" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 09:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "无恐惧代码重用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm可供入门学习wasm-bindgen之用virtual-dom-rs-hello-worldhttps://github.com/richardanaya/virtual-dom-rs-hello-world" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 09:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「HelloWrod项目」Rust+WASM实现虚拟dom" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#freebsd  #debugRead Morehttps://venshare.com/debugging-rust-with-vscode-on-freebsd/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 09:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在FreeBSD上用VSCode调试Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job物联网企业Ditto发布的网络工程师职位，可远程，职位要求等详细情况可以去该网站查看。\nwww.ditto.live\nRead More\n每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-30 09:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「远程工作」Rust网络工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#book详情https://zhuanlan.zhihu.com/p/53527737" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust编程之道预售开启" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cppUnity公司的一位工程师写下了这篇文章，罗列了现代C++中的一些问题。感兴趣可以看看。\nRead More\n作者GitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "现代C++哀歌" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ds_store好奇，解析这个垃圾文件有什么用？安全攻击？ds_storehttps://github.com/sinistersnare/ds_store" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": ".DS_Store解析工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async基于raft的分布式复制状态机实现，采用了async/await和tokio。\npaxos\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "复制状态机的Paxos" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#raytracer该库是对一个C++库的移植。raysthttps://github.com/djeedai/rayst" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现光线跟踪" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aocRead Morehttps://cprimozic.net/blog/a-rusty-aoc/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust AOC解题记录" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded #epaper基于embedded-hal实现ssd1675https://github.com/wezm/ssd1675" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」电纸屏显示控制驱动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#memory #procfsprocmapshttps://github.com/jabedude/procmaps每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-29 12:45" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "procmaps: 获取给定进程的内存映射" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gfxgfx-rs是Rust实现的底层图形抽象层，gfx-hal是gfx-rs中包含的组件，gix的硬件抽象层。不要小看这个0.1版，这是经过gfx团队2018年一年的努力，才最终发布的版本。\ngfx-rs 2018\ngfx-hal\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-28 11:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gfx-hal 0.1发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#errorhandle该库是通过实现了过程宏为错误类型自动实现std::Error和Display。\nRead More\nerr-derive\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-28 11:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "又一个错误处理库: err-derive" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#postgres可用Stable Rust。\nRead More\npg-extend-rs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-28 11:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用pg-extend-rs轻松为Postgres写扩展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#C视频时长6分钟左右。读取10gb大小的文件。从视频里的结果来看，C代码和Rust代码的实现应该是有差异的。C代码占用内存一直稳定在600MB左右，而Rust的内存占用是稳定在7.5GB。从后续作者分享的代码来看，确实如此。C代码读取文件是每次最大150个字节，而Rust代码是一次全部读取到内存里。这是一个Rust新人做的测试，也没有用任何优化。不过从CPU占用来看，C语言整个过程CPU占用是70%~80%浮动，而Rust是20% ~ 40%，可能是在最初读取整个文件的那几秒内会飙升到70%左右。这和他的程序是有关系的，持续读取文件会占用CPU。\nRust代码\nC代码\n后续reddit其他人贴出了等价于C的Rust代码：等价Rust代码https://gist.github.com/jjwest/c59d7d8889f25fcac22a09b7c5a7b4ec在Rust没有开任何优化的情况下，总时间是2分05秒，而C程序是2分01秒。这个故事告诉我们，不要轻易相信网上的对比测试结果。\n视频地址\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-28 11:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「油管」比较Rust和C读取文件时的CPU和内存占用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "GBL是一种Gerber数据。Gerber是所有PCB CAD系统可以生成的， 可以被所有光绘图机处理的文件格式。GERBER格式是EIA 标准RS-274D的子集。扩展GERBER格式是EIA标准RS-274D格式的超集，又叫RS-274X。RS-274X增强了处理多边形填充，正负图组合和自定义D码及其它功能。它还定义了GERBER数据文件中嵌入光圈表的规则。专业领域的库。\ngbl\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-28 11:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GBL文件操作库发布0.1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lambda #aws所谓新故事是指作者之前写了一系列在lambda上面跑Rust的文章，那会官方还不支持Rust。现在官方支持了Rust，那么他又针对这一变化，对他之前发布的工具集和思路做了一个更新说明。Read Morehttps://medium.com/@softprops/serverless-rust-revisited-f2c79f4039bb每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-28 11:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在AWS Lambda上运行Rust的新故事" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Gluon算是用Rust实现的语言中最值得关注的一个。它的成熟度比其他用Rust实现的语言更高一点。特点：\nGluon是函数式语言，借鉴了 F#, OCaml 和 Haskell语言，静态类型，并支持类型推断。\n它的目标应该是类似于Lua语言，可以嵌入在Rust语言中，也可以直接调用Rust函数，和Rust无缝集成。\n它支持GC，但每个Gluon线程都使用一个单独的堆，堆的大小也比较克制，所以GC的开销理论上也比较小。\n默认线程安全的语言。\n支持Language Server Protocol (LSP)。\nGluon算是一种通用语言。然而在Rust生态社区更常用的是rlua，Lua语言的Rust绑定。基于Rust实现的语言之中，还有另外两个语言值得关注：Dyon和Formality 。Dyon是Piston游戏引擎组织实现的动态类型脚本语言，专门为游戏引擎和交互式应用程序而创建，其对象模型和javascript类似，但不存在null，支持类似Go的协程等。也可以和Rust无缝集成。Formality，可用于写智能合约，可用于定理证明，兼容EVM（可运行以太坊合约），兼容GPU。我印象中，还有另外一个使用Rust实现的动态语言，成熟度也很高，可惜的是，我已经忘记它的名字了，也搜索不到相关资料。如果你知道某款由Rust实现的编程语言，可以告诉我。无论如何，这些语言都还太年轻，属于「极客语言（可不是什么褒义）」，请谨慎选择。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "考察基于Rust实现的语言：Gluon" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sd #cli #regex支持正则表达式语法sdhttps://github.com/chmln/sd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sd: 替代sed和awk的命令行工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ide目测是支持2018 edition新的模块系统了，也可以正确解析async和try关键字了。intellij rust changeloghttps://intellij-rust.github.io/2018/12/25/changelog-89.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "intellij rust 动态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #miri官方团队成员ralfj已经结束了他在Mozilla的实习工作。他在实习期间内推动了miri的进展，Stack Borrows是他一直研究的unsafe内存模型，新闻里前面也介绍过几期。为了完成他的博士学位，ralfj可能会缩减在Rust上面的精力投入，所以miri的进展后续又会变慢。本文介绍了Stacked Borrows的新的进展。Read Morehttps://www.ralfj.de/blog/2018/12/26/stacked-borrows-barriers.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Stacked Borrows中的屏障和两阶段借用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#osint公开资源情报计划（Open source intelligence ），简称OSINT。该库专门为IT安全专业人员和漏洞搜索者设计，用于收集威胁情报。sn0inthttps://github.com/kpcyrd/sn0int" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「安全」sn0int：一个OSINT框架和包管理器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli当开发者从一个代码库迁移到其他代码库时，这些工具及其版本会发生变化。每次更改代码库时在这些工具的不同版本之间切换都是一场噩梦。这就是alt为什么存在。当你移动到不同的代码库时，它会自动切换命令的版本。althttps://github.com/dotboris/alt" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "alt: 帮助你选择不同版本命令的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "还以为删库跑路了呢？目测下个版本要把crate中的Cargo.toml文件修改为新地址了apiraino/rust-dotenvhttps://github.com/apiraino/rust-dotenv/pull/1/files" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-dotenv已经迁移了GitHub仓库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "WIP状态，可以快速解压各种类型的压缩文档。支持很多压缩类型。unboxhttps://github.com/mitsuhiko/unbox" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "解压缩工具Unbox" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#azure目前Azure Function还不支持Rust（差评），但是作者用docker达到了目标。Read Morehttps://robertohuertas.com/2018/12/22/azure-function-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust编写Azure Functions" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nix #cargo作者在使用Rust时，遇到了Cargo包管理的一些问题，导致他脑洞一开，尝试使用外部包管理Nix和Cargo进行结合，来共同管理依赖。Read Morehttps://www.hadean.com/blog/managing-rust-dependencies-with-nix-part-i每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-27 14:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Nix来管理Rust的依赖 Part 1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust本文为之前我撰写的付费阅读文章之一，今天公开，祝读者们圣诞快乐！本文基于macOSX平台，通过对Rust 1.32 Nightly版本中rustdoc的一个ICE问题进行复盘，分析并记录整个Bug修复的过程。主要目的是，通过这个过程，来学习如何给Rust做贡献。（阅读时间：17m）\n缘起\nRust本地调试环境准备\nICE问题分析\n调试代码\n提交PR说明\nRead Morehttps://zhuanlan.zhihu.com/p/53247517" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-25 16:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何为Rust语言做贡献" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust已被合并的PR：\n稳定化Pin API： 意味着Pin API将在Rust 1.33稳定版中出现\n几个变化：\n\npinned方法变成了pin方法\n\n\nPinned变成了PhantomPinned\n\n\nget_mut_unchecked变成了get_unchecked_mut\n\n\nRust 1.33版稳定min_const_unsafe_fn\n\n\nrustdoc命令增加一个新参数可以指定静态文件加载路径\n\n\nRust 1.33版 稳定Vec(Deque)::resize_with\n\npinned方法变成了pin方法Pinned变成了PhantomPinnedget_mut_unchecked变成了get_unchecked_mutRust 1.33版稳定min_const_unsafe_fnhttps://github.com/rust-lang/rust/pull/57067rustdoc命令增加一个新参数可以指定静态文件加载路径https://github.com/rust-lang/rust/pull/57011Rust 1.33版 稳定Vec(Deque)::resize_withhttps://github.com/rust-lang/rust/pull/57002" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-25 16:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 动态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tower_webhttp_statichttps://github.com/arjsin/http_static" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-25 16:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tower-web案例：文件服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#queue #lockfree基于Arc结构实现的发布订阅模式无锁队列bus-queuehttps://github.com/filipdulic/bus-queue" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-25 16:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "无锁有界非阻塞Pub/Sub队列" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macro该库使用过程宏实现了一个derive属性，允许使用正则表达式语法来解析字符串。reformationhttps://github.com/hukumka/reformation每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-25 16:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "reformation：允许使用正则表达式语法来解析文本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#serde只需要在Cargo.toml中引入：然后在代码中导入Serialize和Deserialize即可。Read Morehttps://www.reddit.com/r/rust/comments/a8ykj8/til_you_dont_need_serde_derive_when_using_the/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在2018 edition中不在需要serde_derive" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#deeplearning本文通过实现一个简单的Kohonen-Grossberg神经网络，来比较Python和Rust。该神经网络用Python实现需要60行代码。然后作者使用Rust移植Python实现。性能比较：当然是Rust性能好啦。处理15w行数据，Rust只需要大约1751毫秒，而Python需要124274毫秒。按这个数据看，Rust大概比Python快71倍左右。有的人可能会有疑问：为什么要用Rust和Python比？怎么不和C++比？大概有三点原因：\npython在神经网络中应用比较广。\nRust的语言表达力和Python有得一拼。看看文章中代码实现就知道了。\nRust和C++的性能比拼，每天都有人做。\nRead Morehttps://blog.digital-horror.com/rust-python-comparison/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「深度学习」简单神经网络：Rust vs Python" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#xor可以在命令行对rotating-xor之类加密的数据进行解密。XORcismhttps://github.com/BenH11235/XORcism" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "XORcism：破解xor加密文件的Rust命令行工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#C #ffi* -sys是帮助Rust程序使用C（“System”）库的crate命名约定，例如： libz-sys，kernel32-sys，lcms2-sys。 sys crates的任务是向Rust（FFI）公开一个最小的底层C接口，并告诉Cargo如何与库链接。Read Morehttps://kornel.ski/rust-sys-crate" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "*-sys系列库使用教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmrust-simple-virtual-domhttps://github.com/richardanaya/rust-simple-virtual-dom" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WebAssembly和Rust实现的虚拟dom" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#erlangvm未来的目标也打算支持elixirenigmahttps://github.com/archSeer/enigma" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现的玩具版Erlang VM" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#specscomponent_group/https://docs.rs/component_group/1.0.0/component_group/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用于管理Specs中的组件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#bashbashdochttps://github.com/dustinknopoff/bashdoc/tree/master" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小项目」bashdoc： 可以为自定义的bash生成文档" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#array这篇文章罗列了Rust中几乎所有的数组初始化方法，并且介绍了自己实现的宏\narr_macro\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中数组的初始化方法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#scannerlachesishttps://github.com/ps1dr3x/lachesis每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-24 14:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「安全」 lachesis: web服务批量扫描工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#swift作者从2015年开始写这一系列博客，直到昨天才发布了一个整理页面。感兴趣可以看看。Read Morehttps://www.chriskrycho.com/rust-and-swift.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」Rust vs Swift" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#crate截止2018年11月，已经达到2w个crates，但很多crate版本发布都小于6次release版本，生态系统依然很年轻。另外一些crate有100多个发布版本，有很多crate都是零依赖，但有3000个crate都依赖serde，所以，serde当之无愧是最流行的crate。Read Morehttps://8-p.info/visualizing-crates-io/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "crates.io可视化报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macro\nrust-derivative\n指南\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-derivative: 提供了替代derive属性的宏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#probabilistic #bigdata概率数据结构（probabilistic data structures）通常用于大数据处理。pdatastructs.rshttps://github.com/crepererum/pdatastructs.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "简单概率数据结构库pdatastructs 0.5发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmRead Morehttps://speakerdeck.com/tsukushi/attractions-and-interests-of-wasm-bindgen" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Slides」魅力wasm-bindgen" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#babel #js据说比babel快16（无simd）~20（有simd）倍。swchttps://github.com/swc-project/swc" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "swc：1.0-alpha版发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#deeplearning #tvmTVM的Rust绑定。TVM介绍：有了 TVM，业界与学界开发者们可以快速、轻松地在各个系统（包括手机、嵌入式设备与低功耗芯片）上部署深度学习应用程序，同时无须担心资源与速度的限制。「TVM 作为神经网络和硬件后端之间的共同层，消除了为每类设备或服务器优化各自基础架构的需要。」TVM 项目负责人陈天奇表示，「我们的框架允许开发人员快速、轻松地部署和优化大量硬件设备上的深度学习系统。」tvm-rusthttps://github.com/ehsanmok/tvm-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「深度学习」运行时前端TVM支持（预发布）" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#p2p #libp2p群友漂流的作品，据说是libp2p的轻量版本。p2phttps://github.com/driftluo/p2p" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "p2p: 支持自定义协议的多路p2p网络库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jvmferrugohttps://github.com/maekawatoshiki/ferrugo每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-23 11:19" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ferrugo: JVM的Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust摘要未合并的PR：\n稳定化#[repr(packed(N))]\nrustc依赖的库：parking_lot升级到0.7版本\n代码优化(没想到Rust代码中也有乱用clone的情况)\n稳定化Vec(Deque)::resize_with\nRalfJung改进了miri的内存分配精准度\n为Arc<T>/Rc<T>增加Into<NonNull<T>>实现（引起了较多讨论）\n在Release版本中提供最基本的CTFE跟踪（为了Debug？）\n已合并的PR：\n修复trait对象的Bug\n更新LLVM子模块\nmanish在Rust发布工具中增加了一系列的emoji表情，用于在邮件列表中通过emoji来对信息分类，有意思\n来参观一下" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-22 11:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust动态跟进" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quizRead Morehttps://zhuanlan.zhihu.com/p/52986963" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-22 11:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读：Quiz 21" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macro官方博客介绍了Rust 2018 edition中过程宏的支持，重点介绍了过程宏基于TokenStream的工作机制，值得一阅。Read Morehttps://blog.rust-lang.org/2018/12/21/Procedural-Macros-in-Rust-2018.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-22 11:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust 2018中的过程宏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game基于wasm和Rust，可以在线玩，也可以下载到Windows、Mac和Linux平台。在Reddit贴中，还记录了感人的开发故事。\nReddit 介绍贴\n在线玩\n下载\n源码\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-22 11:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust编写的roguelike游戏发布了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#juniper #graphql作者用Juniper的过程中，发现需要Juniper缺少一个关键的东西：可以和客户端共享实际的Graphql架构的文件。虽然可以手工编写，但代码和scheme文件不会实时同步。作者用过程宏实现了可以自动生成scheme的库。juniper-from-schemahttps://github.com/davidpdrsn/juniper-from-schema每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-22 11:24" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "juniper-from-schema 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust修复了一些问题。Read Morehttps://blog.rust-lang.org/2018/12/20/Rust-1.31.1.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "通告Rust 1.31.1发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#websocketws-unix-framed-bridgehttps://github.com/Kixunil/ws-unix-framed-bridge" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用于将WebSocket消息转发到Unix套接字的代理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#error_handle\nchainerror\nReddit讨论贴\n指南\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "又一个错误处理库：chainerror" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "该库提供基准测试来判断同类型的crate哪个更快crate-racehttps://github.com/veniamin-ilmer/crate-race" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小工具」crate-race： 比较哪个crate更快" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embedded_hal #printerthermal_printerhttps://crates.io/crates/thermal_printer" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」可用于串行热敏打印机的embedded-hal驱动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#encoding这是WHATWG编码标准的高性能实现。被用于Firefox 56版本中，替代了uconv库。\nencoding_rs\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "encoding_rs: Web兼容字符编码库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#spec #ecs #nitricnitric是Specs作者新写的库，那么他为什么在苦心研究两年Specs之后，要革自己的命呢？在本文中他阐述了如下理由：\n并非是对specs的重构，也不是和specs竞争，也不会对Specs有任何影响，Specs也不会被弃用\nnitric是打算提供一个更通用的解决方案\nSpecs已经有了自己的生态，所以需要独立出另外一个库继续开发\nnitric是一个通用的数据处理库，一旦完成这个库，specs将成为nitric的前端\nnitric的愿景是提供一系列的crate，这些crate是解决数据处理问题的标准方案\n未来可以使用nitric的领域：游戏开发、游戏物理、模拟器、编译器、数据验证、图形用户界面等\nnitric的哲学是：1. 只能以合理的组合方式解决单个问题。 2. 公开一个通用、可组合和强大的API\nnitric会与其他数据结构兼容，比如ECS/CGS库等\n也可以使用nitric来作为ECS，比如通过nitric-entity库。文章里也介绍了几个计划中的其他nitric crate。\nAmethyst将继续使用Sepcs，未来是否会迁移到nitric，需要由RFC来推动\n大家也不要太亦可赛艇，他只是先分享了计划，还未动工。不过已经有了代码仓库：\nGitHub: nitric\nGitLab: nitric\nRead Morehttps://users.rust-lang.org/t/announcing-nitric-the-successor-of-specs/23388每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-21 12:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nitric: Specs的继承者" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quizRead Morehttps://zhuanlan.zhihu.com/p/52772684" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读： Quiz 20" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#leetcode中国版和美国版都支持了，另外了解到的消息是，目前是基于Rust stable 1.31版，而且还会持续跟进Rust Stable版本。在未来会逐渐加入常用的crate，这个看使用者反馈来持续改进。刷Leetcode Rust代码的碰到问题可以加QQ群反馈。qq群号： 950323896，进群以后可以加微信群，直接向官方反馈问题。Leetcode中国https://leetcode-cn.com/explore/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "LeetCode already supports Rust @rustlang @LeetCode" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tokio主要是两件事：一、 Async/Await支持Tokio预计在Rust语言async/await稳定之后，正式支持该语法。如果你想在nightly上面使用async/await，可以使用async-await-preview。目前tokio是以实验性功能来探索async/await的支持，比如一些特定的API会添加_async后缀，一旦async/await稳定了，Tokio将立马采取重大的更新并去除这些后缀。默认情况下，比如，会将tokio::run_async改成tokio::run。那么futures-rs 0.1怎么办？然而并不能立马放弃对0.1的支持。这是一个不断增长的生态系统，包括一些生产环境的应用，也使用了futures 0.1。Tokio会以向后兼容的方式来支持async/await，也就是说，同时支持async/await和futures 0.1。对于已经形成生态的系统而言，变革很困难，还需要和社区共同商讨过渡策略：关注此track issueshttps://github.com/tokio-rs/tokio/issues/804二、团队扩展是时候扩展Tokio的开发和维护团队了，准备像Rust团队学习，分成多个工作组，不同的组负责Tokio的不同方面。当然这个过程还在讨论中。同时也需要一些新手加入，帮助使用和发展Tokio。Read Morehttps://tokio.rs/blog/2018-12-recap-2018/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tokio 2019展望" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rtfm #CortexM嵌入式工作组的老大japaric发布的库，用于构建并发的实时系统，貌似基于RTFM语言。RTFM语言旨在促进并发编程或嵌入式实时软件的开发。www.rtfm-lang.orghttp://www.rtfm-lang.org/Read Morehttps://blog.japaric.io/rtfm-v4/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」实时消息框架RTFM发布0.4版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "structview提供了更安全的API来转换structview-rshttps://gitlab.com/ra_kete/structview-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "structview-rs: 用于将二进制数据转换为更高级的数据结构" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个「真香」的故事。作者在去年看到Rust语言的时候，心想：\"呵呵，继续吹，继续炒。呵呵，我用C++照样可以完成同样的事，而且还拥有更多的控制权\"。然而，今天这位作者写下了这篇博文，他说：“我之前的想法真是大错特错，错到底了！，当我潜下心来研究Rust，我发现，它是一门经过深思熟虑的语言，它的工作方式有别于我所知道的一切。”他变成了Rust传道者。Read Morehttps://hashnode.com/post/how-to-become-a-rust-super-developer-cjpv1ee7e000buhs2aqrdw2ym" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何成为一个超级的Rust开发者" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "神奇的库，但建议谨慎使用。\nenum_dispatch\nReddit 相关讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "enum_dispatch: 提升trait对象动态分发10倍速" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#python #json基于PyO3库orjsonhttps://github.com/ijl/orjson" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Rust扩展Python案例」快速JSON解析库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rustvideoshttps://www.youtube.com/c/rustvideos" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "油管Rustvideos帐号关注数已经突破了1W" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "该库参考了Rust的命名参数RFC中的一些伪代码实现，提供了一些宏，可以方便开发者定义命名参数的函数，包括设置默认值。rubber-duckhttps://github.com/samsieber/rubber-duck" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rubber_duck: 支持定义命名参数的宏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#book有人写了一本书，罗列了现在的解析工具，比如nom、combine、pest等，提供了一些文档和示例，帮助你选择适合使用场景的解析工具。目测还在完善中。Read Morehttps://freemasen.github.io/parsers_presentation/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "解析工具选择之书" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#dutree #disk该文是dutree的使用教程，dutree是Rust实现的磁盘分析工具。\ndutree\nRead More\n每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-20 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用dutree分析磁盘使用情况" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://zhuanlan.zhihu.com/p/52661087" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz解读： Quiz 19" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nllniko在users论坛发帖，征集NLL代码示例。如果你有曾经被折磨过但NLL缓解了你的痛苦的代码示例，就去提交吧。Read Morehttps://users.rust-lang.org/t/collecting-nll-examples-for-a-blog-post/23357" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」收集NLL示例代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macronymichttps://github.com/myrrlyn/nymic" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nymic: 一个可以打印类型名字的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustJosh Triplett是一个开源软件贡活跃献者，他最近正和另外一个匿名资助者，准备向非盈利性开源组织Conservancy捐赠9万美元，用于继续推动开源软件的发展。这是对他的采访。采访中，他提到Rust是他今年在开源社区看到的最激动人心的项目。他说：Rust给了我对计算未来的巨大希望。也许Conservancy在拿到这笔捐赠后，可能帮助Rust完成组织治理的工作。（猜想）Read Morehttps://sfconservancy.org/blog/2018/dec/18/JoshT/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「访谈」Josh Triplett访谈" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mqtt基于tokio，目前正在召人审核代码\nrumqtt\n讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新的MQTT异步客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#web #warpWary是另一个Rust Web框架，由Hyper作者开发。 新版本的功能简要：\nTLS支持\nCORS\nWebsocket检测助手\n依然计划和tower-web进行合并，但下一步主要是完善service trait。将来可以通过Service方便地添加tower式中间件。（那官方Tide框架的中间件协议呢？也许tower式中间件协议在官方中间件协议稳定以后也会支持吧）Read Morehttps://seanmonstar.com/post/181223452087/warp-v0110" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Warp 0.1.10发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#monero #blockchainmithrilhttps://github.com/Ragnaroek/mithril" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "纯Rust实现的门罗币矿工" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#float作者实现了一个库：rust-lexical，比Rust内置的浮点数解析器快4000倍，并且更加正确。而且支持no_std。https://github.com/Alexhuszagh/rust-lexicalRead Morehttps://www.reddit.com/r/rust/comments/a6j5j1/making_rust_float_parsing_fast_and_correct/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "加速并校准Rust的浮点数解析" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#fst使用有限状态机实现的有序集和映射集，可以更紧凑地存储密钥，也易于搜索。fsthttps://github.com/BurntSushi/fst" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fst: 基于有限状态机实现的大型有序集和映射集" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rerast好像是Google出品，不明白可以用在哪里，IDE？rerasthttps://github.com/google/rerast每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-19 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rerast：支持按规则搜索或替换Rust代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust审核中的PR：\n稳定化Pin API\nRust 1.31.1 Release Note已更新\n重构core::iter模块（值得一看）\n升级stdsimd子模块\n已合并的PR：\n扩展Pin文档并且将std::pin::Pinned改成了std::marker::PhantomPinned\nmiri得到了更新\nTokeStream得到了改进: 优化了TokenStream以及其他类型\n允许胖指针实现Hash\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-18 11:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust最新动态摘要" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nQuiz 16\nQuiz 17\nQuiz 18\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-18 11:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz解读：Quiz 16/17/18" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#devtool本文介绍了Rust 2018 edition包含的工具集\nRustfix\nClippy\nRustfmt\nIDE support\n未来：\n改进LLDB和GDB的Rust调试支持\n完善RLS\n让Cargo更强大\nRustdoc改进\nRead Morehttps://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-18 11:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust 2018 edition 工具集" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "之前介绍过，cargo crev是一个代码审查工具，旨在构建信任的生态网络。Read Morehttps://www.reddit.com/r/rust/comments/a6xp61/cargocrev_01_is_available_on_cratesio/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-18 11:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-crev 0.1发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async #tokio #mio #remiorust 异步 IO：从 mio 到 coroutinehttps://zhuanlan.zhihu.com/p/52538218每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-18 11:13" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「中文」博文：Rust异步IO" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#arduino因为Arduino使用的是AVR微控制器，但Rust目前还未支持AVR。但Rust嵌入式开发组已经有计划支持AVR。感兴趣的朋友可以关注此issues： AVR supporthttps://github.com/rust-embedded/wg/issues/3目前也有一个avr-project GitHub项目组独立fork了Rust，提供了对AVR的支持。在官方Rust未支持AVR之前，可以使用这个，看上去还非常活跃。avr-rusthttps://github.com/avr-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」Rust对Arduino支持进展调查" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#serverless #aws #lambda该文作者探索aws lambda平台的无服务器HTTP应用，并编写了一个crate，叫做lando，它以http crate为核心接口，以lambda为部署目标，来部署API网关。本文就是对lando的介绍。\nlando\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Serverless HTTP" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust2019官方核心团队成员无船同志在本文中阐述了他对Rust 2019的看法。该文主要谈到了组织治理，Rust自身作为一个开源项目，也可以把它看作一个成长中的初创「产品」，不免会遇到成长之痛。作为Rust团队的内部成员，无船同志以他的视角来分析了Rust组织内部产生的问题，对于我们也是一种警示和学习。首先，他肯定希望Rust会有更多的技术改进，而且他也会为之付出精力。但是，他认为2019最重要的问题不在于技术改进，而是组织债务（Organizational Debt）。什么是组织债务？它是和技术债务平行的一个名词。我节选一段infoq文章中的阐述：“组织债务”是在公司层面上是与技术债务平行的。如果技术债务是软件中妨害维护的问题，那么组织债务就是妨碍组织在日常运转中流畅运作的问题。他列举了如下几个组织债务的例子：更通俗一点的描述：所谓的组织债务就是初创公司为了「把事情搞定」而做出的所有人事/文化妥协。这些债务会在一定阶段爆发，比如公司融到了新一轮的钱/公司的战略方向调整/公司的人事扩张。这在一定程度上比「技术债务」更难处理，毕竟「技术债务」你面向的是工程/代码，而「组织债务」面向的是人。组织债务影响的是能否可持续发展的问题。无船同志认为，Rust项目在过去的几年里，一直想创业公司一样成长，虽然有很多好的方面，但也有一些糟糕的问题，如果这个项目想长期地维持下去，必须真正处理到目前已经积累起来的组织债务。以下是无船同志罗列出来要解决的问题：一 使用GitHub issues来讨论设计就像是从消防栓里喝水看这个图片感受一下无船同志统计了关于Pin API讨论的issues中评论数，一共有770条评论，还不算是reddit、irc或discord中的聊天记录。Rust虽然是他的全职工作，但是他发现还跟不上团队内其他人的设计讨论。其实Pin API虽然重要，但最终也是一个比较小的标准API添加，其中并没有包括关于异步、生成器或Futures的讨论。当这个主题高达770条评论的时候，谁有心思看完呢？包括参与评论的人也是，而且经常要对一个比较模糊的概念重新进行解释，这样每一条加入讨论的评论，都算是一种债务。更糟糕的是，将这些讨论再分解为更多的子问题，也无法解决问题。无论他们创建多少Github issues，似乎每一个issue都会变得越来越长。所有的这些讨论都会带来下面几个负面后果：RFC流程没有达到它应有的效果。在改革这个过程之前，无船同志对于发起新的共识讨论（比如提出一个语言的新特性）感到非常不满意。二 项目内部并没有顺利地协调为了保证连贯的用户体验，Rust需要在不同的方面拥有一致的设计愿景。在过去，团队成员低于30人时，共享愿景可以自然地在整个项目中传播。但是随着团队规模的增加，现在这种愿景在团队中共享起来就遭遇了很多问题。现在需要一个积极的专门用来处理和设计相关决策信息、模式和框架了。今年无船同志就遇到了因为没有统一的指导方针而发生的分歧的问题。所以现在可以考虑重新核心团队的组织，并认识到团队之间协调的重要性。三 团队正在经历成长之痛Rust项目管理主要由负责项目的各个领域的各个团队执行。无船同志是其中三个团队的成员。他感受到了这三个团队内部的成长之痛：四  工作组需要工具包需要将工作组的工作方式抽象为其他人可以使用的标准模板或流程，当然更重要的是需要有协调和领导力的人进入工作组。五 社区管理让人身心疲惫需要一个高于社区行为准则的标准来规范参与Rust项目的工作，用于强制性地进行专业意见的交流，让沟通更加高效。社区的行为准则只是规范社区内成员随意互动的标准。六  是时候讨论薪酬了并不是无船同志想涨薪了，而是他看到现在开源社区很多志愿者投入了大量时间但并没有报酬，完全是为了兴趣或学习而进入社区。但很多人应该用一种长远的眼光来看Rust，它在未来会带来就业发展的回报。但随着生活状态的变化，很多可以推动重要项目的志愿者已经退出，导致Rust的很多工作进展都不太顺利。只有拥有大量空闲时间和信心的人才能作为志愿者大力参与。现在的开源贡献者，其实都是资产阶级中的“无产”阶级。也许成立「Rust基金会」是一个办法。总结：在找到解决问题的办法之前，必须先正视这些问题，承认它们的确存在。还清组织债务，只需要重新设计决策过程，重新组织治理结构，建立新的沟通规范，并找到一种方法来将大量资金转向Rust贡献者。Read Morehttps://boats.gitlab.io/blog/post/rust-2019/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Withoutboats眼中的Rust 2019：组织债务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#fuchsia来自Google  Fuchsia 团队成员对Rust 2019的期望，也值得一看。Read Morehttps://raphlinus.github.io/rust/2018/12/16/rust-2019.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Raph Levien的Rust 2019" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#macroserde作者实现的新包，包括声明宏和#[derive]过程宏。是对rustc命令的包装：cargo-expandhttps://github.com/dtolnay/cargo-expand" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-expand：查看宏展开结果" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #wasm\nsandspiel.club\nCode: sandspiel\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "下沙：Rust+WASM+WebGL实现的游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ide关注Rust IDE相关进展的可以看看这篇文章Read Morehttps://ferrous-systems.com/blog/rust-analyzer-2019/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Analyzer 2019" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#memoryQADAPT库可以验证代码中何时分配或丢弃内存。作者写了篇文章，以构建自定义内存分配器为例来讲解如何使用QADAPT库提供的debug_assert!验证代码中内存分配情况。\nqadapt\nRead More\n每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-17 13:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小工具」验证代码中内存使用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "现在的topic： Design & Implementation of uCore Plus OS in Rust Langhttps://flypage.chinamcloud.com/h5/tpl/index.html?id=6469&tid=810日程： http://soft.cs.tsinghua.edu.cn/os2atc2018/rc.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "OS2ATC2018(第六届开源操作系统年度会议)会议现场直播链接" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Curve25519椭圆曲线加密/签名/密钥交换算法Curve25519的 #[no_std] 版本Read Morehttps://github.com/shekohex/curve25519-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "支持no_std的Curve25519加密库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #roboinstructRead Morehttps://blog.roboinstruct.us/2018/12/07/looking-good.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust开发的一款编程教学游戏预览" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#k8s本文作者使用Rust构建了一个用于管理k8s上运行的微服务声明格式和生命周期的标准化工具shipcat。它封装了k8s的API，目的是为了更加标准化、版本化、权限化、自动化管理k8s。本文阐述了k8s管理中的问题，以及shipcat的解决思路。\nshipcat\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust配置管理kubernetes" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust作者在实现自己项目的过程中遇到了一个需要返回空迭代器的问题，本文记录了问题的起源以及他的实现过程。作者尝试了多种方案，包括标准库中实现的std::iter::empty。但std::iter::empty无法使用impl Trait语法作为返回值，只能使用trait对象。所以最终他自己实现了一个OptionIterator<I>。Read Morehttps://www.freedomlayer.org/offst/option-iterator/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Rust中创建空迭代器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "以及，你为什么不应该用它。\nPPT\nRead More\n每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:59" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Slides」在Rust中使用C的va_list" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lualusterhttps://github.com/kyren/luster" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "[WIP] Rust实现的Lua解释器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quizRead Morehttps://zhuanlan.zhihu.com/p/52418867" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读： Quiz 14" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#guide该指南不是Rust语言教程，只是记录Rust开发应用程序过程中可能出现的「坑」，特别是开发一些对安全性要求较高的程序需要注意的地方。该指南还在持续更新中。\nrust-guide\nOnline Read\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust开发安全应用程序指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#trait本文介绍了dynstack的实现过程。dynstack可以存储未装箱的trait对象。https://github.com/archshift/dynstack并且，该文提到，从Rust 1.32开始，胖指针是用一个打包的元组(*mut Struct, *const Vtable)来表示。但不一定一直用这种形式。友情提醒：请谨慎使用该库。Read Morehttps://guiand.xyz/blog-posts/unboxed-trait-objects.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」在Stable Rust中存储未装箱(unboxed)的trait对象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustpythonRustPython是由Rust实现的一个Python解释器RustPython Demohttps://rustpython.github.io/demo/每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-16 14:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustPython在线Playground" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有“系统与RUST语言”的session，欢迎来浙大会场上交流（免费，开放）。由于我们对国内rust社区还不够了解，且是第一次办rust 相关session，所以有很多优秀和有意思的rust project没有邀请到，见谅。如果有感兴趣在会上发言，做10~15分钟的“闪电报告”（内容是对rust internal的分析，或相关rust项目介绍）。Read Morehttp://soft.cs.tsinghua.edu.cn/os2atc2018/rc.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」浙大开源系统交流会议征集Rust Topic" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#meetup视频地址是wayslog的分享，在列表里也能找到另外一场分享的视频。Bilibilihttps://www.bilibili.com/video/av38044021/?share_source=qq&ts=1544706808&share_medium=iphone&bbid=dd199f5b7049675783521db5317f49ba" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "2018.12.12杭州Meetup分享视频" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async虽然Rust 2018发布的时候没有稳定异步编程，但在今年，异步编程也取得了很大进展。网络工作组发文，介绍了几个促进Nightly生态中使用async/await的crate。async/await对Rust的重要性：\nasync/await在其他语言中已经证明了其可用性\n在Rust中引入async/await中需要多考虑一个元素：借用。所以，之前在编写异步代码的时候，必须使用'static限定，并且还经常要用到Arc和Mutex。\nasync/await语法稳定之后，将不会有「借用」相关的问题。但是在这之前，还有很多工作要做，比如稳定await语法。现在google的Fuchsia项目已经在大规模使用async/await语法了。\n标准库中支持Future等trait的工作也即将完成。\n确定了各种API，包括Waker、Pin、与tokio兼容的futures-rs 0.1等。\n发布了一些新的crate：\nromio，之前介绍过，是对tokio最小化包装，为了支持async/await。\nhttp-service， 一个基于字节的、http和新的futures API的crate，提供HTTP通用接口。是从Tide库中提取出来的API。\nTyger，即将推出的这个库是在Hyper上面构建的一个小的crate。提供直接的HTTP服务接口，因此可以直接使用async/await。Tyger也会对Hyper增加一些补充，提供一些更高级的抽象。也是从Tide中提取出来的包。\n官方希望在2019年上半年稳定async/await。官方所考虑的不仅仅是支持这个语法，而且还在为打造async/await生态做足了准备。这也是异步编程支持如此缓慢的原因。Read Morehttps://rust-lang-nursery.github.io/wg-net/2018/12/13/async-update.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方网络工作组」异步进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "由Rusta Rhymes推出的热门新单曲“Ferris Crab（Rust Raps 2018 Edition）”即将推出首张专辑“Drop for Mic”。在线听http://fitzgeraldnick.com/media/rust-raps.mp3Read Morehttp://fitzgeraldnick.com/2018/12/13/rust-raps.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Raps: Rust 2018 Edition首张单曲发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#svgRead Morehttps://www.reddit.com/r/rust/comments/a5vjql/resvg_04_an_svg_rendering_library/resvghttps://github.com/RazrFalcon/resvg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Resvg 0.4 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#k8s #dockerfileRead Morehttps://medium.com/docql/dynamically-generating-dockerfiles-for-k8s-d2baf7bfef5a" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust为Kubernetes动态生成Dockerfiles" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#crossbeamMsQueue和SegQueue会发生此Bug。即使从队列中弹出一个元素，crossbeam也会运行它，此问题来自于crossbeam-epoch的垃圾收集器内的析构函数。Read Morehttps://github.com/RustSec/advisory-db/blob/master/crates/crossbeam/RUSTSEC-2018-0009.toml每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-14 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「安全」Crossbeam发现double-free Bug" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quizRead Morehttps://zhuanlan.zhihu.com/p/52189029" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读： Quiz 13" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nasa #ikos #static_analysis虽然是为C/C++静态分析实现的工具，但据说也适用于LLVM IR，因此有助于检测Unsafe Rust的代码。\nikos\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "NASA开源的静态分析工具: ikos" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#zhihu #embededRead Morehttps://zhuanlan.zhihu.com/p/52235675" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」Cortex-M3 入门指南（一）：体系概述" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#simdyoutubehttps://www.youtube.com/watch?v=4Gs_CA_vm3o" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」如何在Rust/C/C++/.Net中使用SIMD" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#edge什么是边缘计算？ 边缘计算将数据的处理、应用程序的运行甚至一些功能服务的实现，由网络中心下放到网络边缘的节点上。属于一种分布式计算。一直以来，公共和企业设施的监测和维护消耗着大量的人力、物力成本；电力、制造等行业数字化转型中对海量数据的实时、智能处理也有着强烈需求。如果用常规模式构建物联网，所有数据都交给云端，那么会带来一系列的问题。边缘计算就是为了解决这个问题。fastlylabs公司，推出了一个产品Terrarium（看着像是用webassembly.studio改造的），是一个基于浏览器的多语言编辑和部署平台。据该公司描述，此产品是为了推进边缘计算。Terrarium是基于WebAssembly沙箱而构建。Terrarium可以将几种不同的编程语言编译为WebAssembly，然后将其编译为快速，安全的本地代码，并用于为Web服务提供动力。https://www.fastlylabs.com/本文介绍了如何用Rust和Terrarium进行编写边缘计算服务。Read Morehttps://www.fastly.com/blog/edge-programming-rust-web-assembly" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust和WebAssembly进行edge计算" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#peg #pom #pestpomhttps://github.com/J-F-Liu/pom" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pom：又一个peg解析器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#seed #wasm #fronted基于wasm-bindgen和js-sys创建。创建应用时需要依赖web-sys。seedhttps://github.com/David-OConnor/seed" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "seed: Rust+WebAssembly 前端框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aoc本文作者在用Rust玩Advent of Code 2018，并从中学到了8个知识点。Read Morehttps://sts10.github.io/2018/12/02/lessons-from-first-two-days-of-advent-of-code-2018.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从Advent of Code 2018 学到的8堂课" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#blockchainCOMIT是一个协议，以链接不同的区块链。以便将区块链生态系统打造地更大，更具有包容性。comit-network/comit-rshttps://github.com/comit-network/comit-rs每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-13 13:06" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「区块链」comit-rs：Comit协议的Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "活动时间：2018年12月12日，杭州，19:00 - 21:30主题：Error Handling in Rust分享嘉宾：钱林峰, 秘猿科技 CKB 开发工程师主题：Tokio 与 Rust 在服务端编程的应用分享嘉宾：赵雪松_wayslog , Bilibili 高级中间件开发工程师暂无直播地址" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-12 11:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」杭州Rust 线下Meetup" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quizRead Morehttps://zhuanlan.zhihu.com/p/52098828" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-12 11:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz解读： Quiz 12" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gfx-rs主要讲WebRender中gfx-rs的应用。也包含一系列meetup视频列表，也可以看看。Read Morehttps://www.youtube.com/watch?v=SK5iEOc57wQ&list=PL85XCvVPmGQiSCQWoM29cP5lxPR-mvJd_&index=8&app=desktop" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-12 11:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「老视频收录」WebRender团队在某大学的宣讲系列视频" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust2019摘抄一点来自社区的愿望：\n加快编译速度。\n继续完善针对特定领域的工具链，以及建设标准工作流。\n完善文档。比如过程宏之类的。\n支持特化\nconst泛型\n跨平台GUI库\n加强面向公司的营销\n支持更多的嵌入式target、简化嵌入式构建流程、完善和简化no_std\n继续加强WASM的优势\n完成GAT功能\n支持加强和其他语言沟通的工具，比如Helix\n加强社区代码审查，支持类似于crev这样的工具\n完善unsafe 内存检测模型\n等等" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-12 11:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "各种Rust 2019愿望清单出炉" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust2019思绪站在2022年，回望2019年，nrc同志得出一个结论：Rust 2021 edition的目标应该是跟「成熟度」相关，也就是说，2022年的开发者面对Rust做选择的时候，决不能是「高风险/高回报式」的选择，而应该是一个安全的选择。所以Rust 2021 edition的目标应该覆盖如下方面：\n可持续性。\n多样性。\n成熟的工具。包括Cargo、IDE支持等，从广度和深度上都要加强。\n异步编程。\n标准库的改进。主要面向生态系统的扩展。\n完成「宏」的功能。\n国际化。\n持续关注Rust已经被证明适用的领域（系统、网络、嵌入式、WASM、游戏），以及发现新的领域。\n所以2019年应该做什么呢？\n增强标准库和工具的可发现性。比如新用户如何了解serde和clippy？\n提升RFC流程\nRust项目的基础设施。如何改进和治理Rust代码结构，如何改进流程，如果让贡献者轻松更快地为Rust做贡献？\n继续维护「COC」，保证社区讨论的「基调」充满友善。\n提升Rust代码的安全性。\n应该更加关注游戏和图形领域的应用。这些领域是性能敏感区。\n继续推动异步编程进展。\nCargo需要更好地继承到IDE中。\n努力让RLS变得更好。\n更好的IDE体验。\n集成Rustdoc、docs.rs和cargo-src，获得最佳文档和源码探索体验。\n完善编译器的query API。\nRust语言团队应该考虑一下开发节奏，为下一版做准备。获得足够的开发时间和迭代时间。\n不管是GAT(generic associated types )或HKT或其他什么，需要确保有一个可以解决需要解决的问题的功能，并且不需要更多其他功能。也就是说，GAT可能是最后一个为trait系统增加的特性。\n特化。可能与宏结合来完善这一工作。\n继续推进未完善的功能（宏、impl Trait、const fn、nll等）\n命名和可选参数支持\nenum中增加类型变体\n继续推动编译器性能\n虽然这都是nrc自己的愿望，但他可是核心团队成员，他的想法是可以直接传达到Rust官方。Read Morehttps://www.ncameron.org/blog/rust-in-2022/每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-12 11:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "官方核心成员nrc对Rust 2021 Edition的思考：" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quiz考察要点：\n生命周期参数概念\n生命周期参数限定：Early bound vs Late bound\n生命周期子类型与协变\n函数指针及其比较\n不得不说，此Quiz代码中涉及一个隐晦的概念：生命周期参数Early bound vs Late bound。这两个概念是官方提供的书里没有过的，也是我做这个题首次遇到的概念。通过调查Rust源码，大概得出了它们的定义：Read Morehttps://zhuanlan.zhihu.com/p/52032027" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-11 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「付费阅读」 Rust Quiz 解读：Quiz 11" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm本文介绍了如何使用Rust编译wasm，并在浏览器中使用它。同时也包括了wasm的工作机制，值得一看。Read Morehttps://ljcode.org/blog/wasm-part1/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-11 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列博文」在浏览器中使用WASM Part 1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lambda本文以编写一个独立的crate为例，从代码编写到部署，介绍如何在AWS Lambda上面运行Rust库。Read Morehttps://kellenfujimoto.com/posts/dicers-rust-on-lambda/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-11 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在AWS Lambda上面运行Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#streaming并且不会打乱迭代器中元素的顺序。parstreamhttps://github.com/newpavlov/parstream" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-11 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小工具」parstream： 基于线程池以流方式计算迭代函数" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#clifehttps://github.com/ccheek21/fe" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-11 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「小工具」命令行使用频率跟踪工具fe" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gba #game\ngba\ngba book\n每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-11 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gba: 帮助你创建GBA游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#alexaAlexa是亚马逊基于云的智能化声音服务，Alexa Skill是定制亚马逊Alexa的开发者工具。本文介绍了如何使用Rust来构建Alexa Skill。Read Morehttps://medium.com/@amalec/building-alexa-skills-in-rust-4cf54a497ea4alexa_rusthttps://github.com/arienmalec/alexa_rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust构建Alexa Skill" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async本文介绍了Rust内部async/await的内部转换机制，包括generator、状态转换过程等。Read Morehttps://blag.nemo157.com/2018/12/09/inside-rusts-async-transform.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 异步函数内部转换流程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#spirit #daemonsspirit可以帮助开发者更容易地构建Unix守护进程。 文章里介绍了它的使用方法。\nspirit\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "spirit教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#no_overlaps但请谨慎使用该库，在Reddit讨论贴里，dtolnay大佬发现了该库代码存在线程不安全问题。详情查看： Reddit 讨论https://www.reddit.com/r/rust/comments/a4o5yf/region_buffer_an_array_that_safely_allows/但作为学习案例是不错的，包括dtolnay发现的问题等。region_bufferhttps://github.com/Aaronepower/region_buffer" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Region Buffer: 允许创建多个非重叠区域的可变借用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rocket它提供了两个宏：bad_request! 和 not_found! ，可以让代码更具可读性，增强语义。rocket_failurehttps://github.com/kpcyrd/rocket_failure" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rocket_failure: Rocket应用的语义化错误处理库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#libuilibui-rshttps://github.com/LeoTindall/libui-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "libui-rs: libui的Rust绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#crev #code_review提供了一个cargo工具：cargo-crevhttps://github.com/dpc/crev/tree/master/cargo-crev该工具可以判断你项目中依赖crate的安全性、质量和发现的问题。可以在公共的git仓库里发布可验证的review信息。通过这种方式期望在Rust生态系统中构建可信任的网络。将不会有人再受到未经审查和不受信任代码的困扰。想想npm因为依赖包出了多少次安全事故。这个工具ms不错，但是否真的可以解决问题？使用方法：其中id是可以通过crev gitter channel来共享给大家的，形成信任网络。然后可以通过 cargo crev trust <id>命令从你信任的人那里获取依赖crate。https://gitter.im/dpc/crev当然，这世界上没有绝对的安全，但也无法阻碍人们追求它的脚步。crevhttps://github.com/dpc/crev" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "crev: 代码审查工具箱" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quiz来自 @huangjj27Read Morehttps://huangjj27.gitlab.io/posts/rust-quiz-14" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "群友解读：Rust Quiz 14" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo #debug本文介绍了使用cargo test命令，结合单元测试来调试代码中的问题。Read Morehttps://www.wihlidal.com/blog/general/2018-12-07-debugging-cargo-test/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Cargo Test来Debug代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "来自某粒子物理实验室的软件性能工程师Hadrien坦言，相比于Cpp，Rust更适合高性能科学计算。并且对Rust能进入这个领域之前需要完善的工作提出了他自己的建议，同时也希望Rust 2019的目标之一可以是「高性能科学计算」。Read Morehttps://gist.github.com/HadrienG2/e9a875bdf98b528594f4e20f8176bb68每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-10 10:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust非常适合高性能科学计算" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#hashbrownhashbrown之前介绍过，是对Google的SwissTable算法实现。目前作者正在尝试将其整合到Rust标准库中（RustFest Roma 2018演讲）。本文是对hashbrown工作机制的研究报告。值得仔细阅读一下。Read Morehttps://blog.waffles.space/2018/12/07/deep-dive-into-hashbrown/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-08 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "HashMap界的瑞士军刀——深入研究hashbrown" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embedded这是「Rust 嵌入式开发」 知乎专栏第二篇文章，继上篇，讲了一些配置技巧和GDB的调试经验。Read Morehttps://zhuanlan.zhihu.com/p/51872048" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-08 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」日常除虫：Rust 嵌入式开发环境搭建指南 (二)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game提议将Amethyst作为旗舰项目。此议程应该是非官方发起的。Read Morehttps://medium.com/rustgamedev/a-simple-agenda-for-the-rust-game-development-wg-485cfc72b088" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-08 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust游戏工作组的简单议程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm #wasmerwasmer是一个跨平台的WASM-JIT运行时。wasmer团队尝试将nginx编译为nginx.wasm模块，并将其运行在wasmer之上。本文介绍了他们完成这项工作的历程，以及示例代码。\nwasmer\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-08 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "让Nginx运行于WebWebassmbly" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #hackernewsHN Domain Leaderboard排行榜，是根据Hacker News提交的内容进行质量和数量评分以后，对其对应域名做出的排行。这意味着，blog.rust-lang.org提交的内容质量和数量深受好评，也意味着Rust的关注度越来越高。Read Morehttps://hnleaderboard.com/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-08 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust官方博客荣登2018年HN Domain Leaderboard榜首" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#config #cliconfyhttps://github.com/rust-clique/confy每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-08 12:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「工具」零样板配置管理工具 Confy" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这标志着Rust迈向了成熟。\nWhy Rust？ 高性能/可靠/生产力。\n当你构建CLI、WebAssembly、网络、嵌入式可以考虑使用Rust。\nRust已经有了很多商业生产级应用\n如何开始呢？除了Rust book，还有很多其他资源。\n官网https://www.rust-lang.org/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust官网正式改版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在这个大版本里，新加入了很多内容：\n\nNLL（Non-lexical lifetimes）\n\n\n新的模块系统\n\n\n更多的生命周期省略规则\n\n\nconst fn：可以在编译时把const fn定义的函数用作常量值，但目前稳定的是最小化子集。\n\n\n新的工具：clippy、rustfmt等已稳定\n\n\ntool lint：像#![allow(clippy::bool_comparison)]这种属性。已经不再需要cfg_attr。\n\n\n文档：改进了文档，并且重写了TRPL（The Rust Programming Language）, TRPL 2018版\n\n\nCargo现在已经使用HTTP/2来并行下载crate。而且也不需要在代码里extern crate引入crate了。\n\n\nRead More\n\n\n1.31 Release Notes\n\nNLL（Non-lexical lifetimes）新的模块系统更多的生命周期省略规则const fn：可以在编译时把const fn定义的函数用作常量值，但目前稳定的是最小化子集。新的工具：clippy、rustfmt等已稳定tool lint：像#![allow(clippy::bool_comparison)]这种属性。已经不再需要cfg_attr。文档：改进了文档，并且重写了TRPL（The Rust Programming Language）, TRPL 2018版https://doc.rust-lang.org/beta/book/Cargo现在已经使用HTTP/2来并行下载crate。而且也不需要在代码里extern crate引入crate了。Read Morehttps://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html1.31 Release Noteshttps://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1310-2018-12-06" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust 2018 Edition首个版本 1.31.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文中，由Rust团队的Lin Clark，用很多漫画来帮你解释Rust 2018到底是什么？Read Morehttps://hacks.mozilla.org/2018/12/rust-2018-is-here/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」 Rust 2018 到底是什么？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 2019 Roadmap开始制定了，官方现在向社区征集一些博客，希望在博文中提出经过2018年对Rust的使用感受，以及希望Rust改进的目标和方向。去年的路线图RFC是在2018年1月29开放的。今年估计也差不多。另外一件事，是在考虑下一个大版本的目标：\nRust 2015：稳定性\nRust 2018：生产力\nRust 2021：？\n现在官方还不确定下一个大版本是2021，目前只是预估。Read Morehttps://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」征集Rust 2019 RoadMap意见的博客文章" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "官方wasm工作组成立之初提炼出一个核心价值观：Rust和WebAssembly用于扩充JavaScript，而不是替换它。这个核心价值观推动了2018年Rust在WebAssembly领域的发展。达成的目标：零成本与JavaScript交互。基于wasm-bindgen来完成这一目标，现在基本已经构建出了以wasm-bindgen为核心的生态。将Rust生成的WASM库分发给NPM。由wasm-pack来完成这一目标。不仅仅是生成wasm，还需要分发到npm生态中。快速提示开发效率。对wasm-pack进行了扩展。自动管理wasm-bindgen CLI二进制文件，且自动安装浏览器的WebDriver客户端。比如：wasm-pack test --headless --firefox来测试。并且增加了一些模板项目来提升开发者效率：\nwasm-pack-template用于方便创建NPM库\ncreate-wasm-app用于创建web应用\nrust-webpack-template用于使用webpack来创建应用程序\nrust-parcel-template用于使用parcel来创建应用程序\nRust生成的wasm应该是可测试和可调试的。\nconsole_error_panic_hook，可以将Rust代码产生的panic重定向到浏览器控制台\nwasm-bindgen-test，作为基础是测试架构，结合wasm-pack来测试dom、js异步事件等。\nTwiggy🌱，可以为Wasm分析代码大小。\n同样，也向社区征求Rust 2019 Rust和WebAssembly上的目标和建议。另外在感谢名单上，发现了群友：huangjj27。Read Morehttps://rustwasm.github.io/2018/12/06/reflecting-on-rust-and-wasm-in-2018.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」 反思Rust和WebAssembly在2018年的进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#JupyterJupyter是一个旨在“为数十种编程语言开发交互式计算的开源软件，开放标准和服务”的项目。 [资源]。 它通常以“笔记本”而闻名，通常用于数据科学和探索性数据分析。rust-jupyter-clienthttps://gitlab.com/srwalker101/rust-jupyter-client" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新的Jupyter客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#error_handleRead Morehttps://medium.com/learning-rust/rust-error-handling-72a8e036dd3" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」Rust错误处理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#magic_leapMagic Leap One设备为早期开发人员提供浏览器预览版。 该浏览器基于Servo引擎技术构建，并通过WebRender Web渲染库展示高质量的2D图形和字体渲染，并且很快将会有更多新功能。Magic Leap 高科技！Read Morehttps://blog.mozvr.com/a-new-browser-for-magic-leap/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Magic Leap用了Servo引擎技术构建浏览器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aoc现在支持Results和Option返回位置。Read Morehttps://github.com/gobanos/cargo-aoc/releases/tag/0.2.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-aoc 0.2发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustfestDeclarative programming in Rust这是RustFest 2018 Roma中的一个Topic，因为没有在youtube列表里，所以有人单独把它找了出来。视频https://media.ccc.de/v/rustfest-rome-5-declarative-programming-in-rust每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-07 11:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust声明式编程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://zhuanlan.zhihu.com/p/51683754" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读：Quiz 6" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async #romio #tokio无船同志新文：Wherefore art thou Romio?（ \"Romeo, Romeo, wherefore art thou Romeo? —— 莎士比亚《罗密欧与朱丽叶》）本文讲述了Romio的前世今生。主要目的是为了将Tokio接口移植到Future 0.3。\n处理显式的waker参数。 0.1和0.3的差异之一是对waker的处理。0.3中提供了一个唤醒当前任务的waker，而0.1则没有。0.1提供的是task::current这样的函数。现在统一使用LocalWaker。\n消除代码重复。Tokio中的AtomicTask内部类型，实际上在Futures 0.3已经演变为AtomicWaker类型。通过给Tokio发PR来消除这些重复。\ntokio-io到future::io的变化。这部分是最困难的一个部分。目前tokio-io中自定义了AsyncRead和AsyncWrite，而Futures 0.3也定义了AsyncRead和AsyncWrite，这两个版本的接口有很大变化。tokio-io是在unsafe代码上构建的AsyncRead和AsyncWrite，而Futures新的AsyncRead和AsyncWrite是构建于专门的poll_vectored_read扩展。\nPin。实际上Pin对于0.1到0.3的迁移工作影响很小。基本上就是用＆mut self：Pin <＆mut Self>来替换mut self。\n这次迁移有利于non-'static Future的应用。将来使用async/await将不必担心因为不是'static的Future而产生任何问题。\nRomio是fork自Tokio，但不打算和Tokio竞争。Romio旨在解锁async/await，因为现在Tokio使用futures 0.1已经阻碍了想用async/await人的步伐。毕竟Tokio在生态系统中占比太高。\n关于Romio的说明：\nRomio仅包含与异步网络API相关的代码 -  TCP，UDP和Unix域套接字。换句话说，Romio只是 futures + mio。\nRomio只暴露最小的API。\nRomio目前版本为0.3.0-alpha.1，配合futures 0.3来发布更新。\n文章中给出了一个echo server的示例。这一切工作都是为了尽可能快速地稳定async/await。Read Morehttps://boats.gitlab.io/blog/post/romio/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "汝为何是Romio？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#actix #sentry本文介绍了如何使用Actix创建Web服务，并使用Sentry对其进行监控。主要基于两个sentry平台相关的crate：\nsentry\nsentry-actix\nsentry是Sentry平台为Rust开发的SDK，详情：getting-started-with-rust-error-trackinghttps://blog.sentry.io/2018/10/22/getting-started-with-rust-error-trackingRead Morehttps://blog.sentry.io/2018/12/04/safe-web-services-actix-sentry?utm_campaign=rust&utm_source=social&utm_medium=twitter&utm_content=post&utm_term=actix" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Actix和Sentry构建安全web服务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#CRead More PPThttps://people.gnome.org/%7Efederico/blog/guadec-2018-presentation.htmlPDFhttps://people.gnome.org/%7Efederico/blog/docs/fmq-refactoring-c-to-rust.pdf" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "案例Librsvg：用Rust重构C项目值得遵循的模式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lucis #ray_tracerlucishttps://github.com/shaunbennett/lucis" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个简单的光线跟踪实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Hyperledger #blockchain #ursaUrsa主要是一个加密库，区块链开发人员可以通过简单的配置文件更改来选择和修改其加密方案。主要使用Rust语言编写，但也会包含Hyperledger中常用到的其他语言的接口。随着Hyperledger的成熟，Hyperledger中的各个项目已经开始需要复杂的加密实现。不是让每个项目都实现自己的加密协议，而是在共享库上进行协作要更好。Read Morehttps://www.hyperledger.org/blog/2018/12/04/welcome-hyperledger-ursa" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "超级账本新项目Ursa将使用Rust编写" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #ecs\n视频\nCode\nSlides\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」2018-12-04 RustAKL: ECS编程范例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#php #wasmphp-ext-wasmhttps://github.com/Hywan/php-ext-wasm" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "php-ext-wasm加入了新的功能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mcfly #shell这个工具不得了，自带小型神经网络（mall neural network），可以替换默认ctrl-r Bash历史搜索了，更加智能。mcflyhttps://github.com/cantino/mcfly" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「工具」更智能展示你shell历史的工具: mcfly" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jqljqlhttps://github.com/yamafaktory/jql" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "JQL: 命令行JSON查询工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#dataflow #data_parallel基于实时数据流实现的差分数据流框架，可以实现数据并行。differential-dataflowhttps://github.com/frankmcsherry/differential-dataflow" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "differential-dataflow：数据并行编程框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Passenger是一个Web应用服务器，常用于Ruby、Node、Python等语言，现在也支持Rust了。官方写了文章，介绍如何在Rust中使用Passenger作为应用服务器。Read Morehttps://www.phusionpassenger.com/docs/advanced_guides/gls/rust.html每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-06 12:52" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Rust中使用Passenger" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://zhuanlan.zhihu.com/p/51616607" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-05 12:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读：Quiz 5" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ls #clilsdhttps://github.com/Peltoche/lsd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-05 12:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「工具」LSD：拥有漂亮色彩和图标的ls命令" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cliddhhttps://github.com/darakian/ddh" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-05 12:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「工具」DDH： 快速查找重复文件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #wasm使用Rust编译为Wasm的在线小游戏。游戏的核心是一个非常标准的LL（1）解析器，其语法是在玩家的游戏中动态定义的。Read Morehttp://rickyhan.com/jekyll/update/2018/12/03/make-burgers-context-free-grammar.html源码：dyn-grammarhttps://github.com/rickyhan/dyn-grammar" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-05 12:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CFG Game: 利用你的计算机技能来制作汉堡包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rlsRLS（language server for Rust）马上会随着Rust 2018的发布而发布，并且会共享版本号。但其实RLS并未准备好，只是借用这次Rust 2018发版的机会强调RLS实际上是一个可用且有用的工具。官方核心人员nrc在这篇文章里，介绍了RLS目前哪些功能已经可用，哪些还不行，以及未来的走向。关注RLS的朋友可以看一下。Read Morehttps://www.ncameron.org/blog/more-on-rls-version-numbering/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-05 12:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」关于RLS的状态说明" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rsevent是对Windows中异步等待对象的模拟实现。但它和Rust目前实现的async/await其实是没关系的。rseventshttps://github.com/neosmart/rseventsRead Morehttps://neosmart.net/blog/2018/rsevents-manual-and-auto-reset-events-for-rust/每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-05 12:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rsevents： 用于Rust中手动或自动重置事件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文基于macOSX平台，通过对Rust 1.32 Nightly版本中rustdoc的一个ICE问题进行复盘，分析并记录整个Bug修复的过程。主要目的是，通过这个过程，来学习如何给Rust做贡献。（阅读时间：17m）缘起Rust本地调试环境准备ICE问题分析调试代码提交PR说明Read Morehttps://zhuanlan.zhihu.com/p/51479889" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「付费阅读」 如何为Rust语言做贡献" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo #inspect之前介绍过这个库，今天看到该库作者写了篇文章，更详细介绍它的用法。Read Morehttps://matthias-endler.de/2018/cargo-inspect/cargo-inspecthttps://github.com/mre/cargo-inspect" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-inspect: 探索Rust内部的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo #call_stack官方嵌入式组老大japaric写的库。可以对整个程序做静态调用栈的分析，可以最终生成svg图片。调用栈分析结果还包含了栈的具体使用情况（以字节为单位），以及包括Max最大值。在写一些对栈内存要求苛刻的程序，比如嵌入式，比较有用。cargo-call-stackhttps://github.com/japaric/cargo-call-stack#cargo-call-stack" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-call-stack: 分析程序中的静态调用栈" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRust 1.31.0版本代表Rust 2018 edition的首个版本。Release Loghttps://github.com/rust-lang/rust/blob/stable/RELEASES.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.31.0 预览版 测试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cpp长文预警!背景： Firefox有一个名为encoding_rs的新字符编码转换库。它是用Rust编写的，取代了1999年初发布的名为uconv的旧C++字符编码转换库。因为调用该字符编码转换库的都是C++代码，所以新的库，尽管用Rust编写，但是该库在C++调用者看来，应该像是一个现代的C++库。也就是说，提供给C++调用者的接口使它看起来和感觉就像一个真正的C++库。(啊哈？假装写C++，你学到了吗？)Read Morehttps://hsivonen.fi/modern-cpp-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」教你如何用Rust写C++" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli #indicatif #color #progressbar可生成各样且彩色的进度条，非常酷。就不上图了。indicatifhttps://github.com/mitsuhiko/indicatif" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「CLI」indicatif: 命令行进度条工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sval #serializationsvalhttps://github.com/KodrAus/svalRead Morehttps://www.reddit.com/r/rust/comments/a2kn7y/sval_a_prototype_nostd_objectsafe/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "另一个轻量级的序列化框架：sval" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ub未定义行为是C/CPP中用来描述任何事情都有可能发生的状况。UB历史上涵盖了现有C编译器以不可调和的方式行事的案例。标准委员会以其无限的智慧决定：不做任何决定。UB也适合标准未能定义的行为假设。然而，这个概念很快又有了新的意义：UB代表了优化的机会。C/Cpp开发人员真的很喜欢优化，他们非常坚持要求编译器尽最大的努力来让代码快速执行。文章里列出了很多C的未定义行为案例，告诫C/Cpp开发者应该尽量避免UB，或者，最好不要使用C/C++。Read Morehttps://cryptoservices.github.io/fde/2018/11/30/undefined-behavior.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "未定义行为确实是未定义的" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#C作者在rust-and-c，展示了如何从较大的C程序中获取数据结构并将其转换为Rust代码。该git仓库中的每次提交都对应一个转换步骤：https://github.com/bonzini/rust-and-c/commits/master\n将Cargo集成到makefile中\n创建C库的Rust绑定\n用Unsafe Rust实现替换掉C库\n用Rust包装C API\n最后，除了struct声明之外，实现是100％Rust。Read Morehttps://www.reddit.com/r/rust/comments/a2q32o/converting_c_data_structures_to_rust_in_4_steps/每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-04 11:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "C数据结构转换为Rust只需要四步" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tuitui-rshttps://github.com/fdehau/tui-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tui-rs: 用于构建丰富的命令行界面和DashBoard" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#hash #baoBao取自bough的谐音，可以为文件生成树形hash。\nRead More\nbao\n规范\nSlides\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bao: 也许是世界上最快的hash函数" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lambdaRead Morehttps://medium.com/@kkostov/rust-aws-lambda-30a1b92d4009" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust编写AWS Lambda" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#html #Deserializationunhtml.rshttps://github.com/Hexilee/unhtml.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从HTML反序列化为Rust类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustsimRustsim组织是一个GitHub组织，聚焦于提供各种数值模拟的库。包括\nalga， 抽象代数库\nnalgebra， 线性代数库\nncollide， 2D和3D的碰撞检测库\nnphysics， 2D和3D的物理模拟库\nrustsim.orghttps://rustsim.org/本月改进：\n可变形体的物理模拟\n改进ncollide\n改进nalgebra\nRead Morehttps://www.rustsim.org/blog/2018/12/01/this-month-in-rustsim/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rustsim 月报 #2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lifegame又一次证明了Rust的类型系统是图灵完备的primitive-recursive-functionshttps://github.com/gtestault/primitive-recursive-functions" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust类型级（Type Level）的生命游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm_bindgen文章里包含了一个PPTRead Morehttp://fitzgeraldnick.com/2018/12/02/wasm-bindgen-how-does-it-work.htmlppthttps://fitzgen.github.io/wasm-cg-wasm-bindgen/#1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasm-bindgen的工作原理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#docker #statically_linked #linuxrust-static-builderhttps://github.com/fornwall/rust-static-builder" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Docker镜像： 用于为Rust项目构建静态链接的Linux可执行文件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "有人发了issues，提议更改Rust的slogan。当前(beta.rust-lang.org)的口号是：The programming language that empowers everyone to become a systems programmer.他认为缺乏Rust的卖点，应该改成：The programming language that empowers everyone to become a systems programmer. Creating fast, safe and parallelized programs has never been easier.大家觉得呢？我个人倾向于第一句，这代表了Rust更大的愿景。至于Rust的卖点，已经宣传三年了，大家应该都知道了。issueshttps://github.com/rust-lang/beta.rust-lang.org/issues/419" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」你同意新版官网Rust的口号吗？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aoc另外两个GitHub仓库\naoc2018\nadventurous\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "各种 AOC 2018 解题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gametetrahttps://github.com/17cupsofcoffee/tetra" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个新的2D游戏引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#prettyprint #cliprettyprinthttps://github.com/mre/prettyprint每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-03 11:36" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "prettyprint: 让命令行拥有漂亮的输出" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cudaRustaCUDA是对CUDA API的Rust包装。允许分配和释放GPU内存，从GPU复制数据，加载CUDA模块和启动内核，所有这些都具有最安全，程序员友好的Rusty接口。 它可以加载和启动用任何CUDA兼容语言编写的内核，而不仅仅是Rust。该作者对Rust支持CUDA作出了很多努力。\nRead More\nRustaCUDA\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustaCUDA v0.1.0发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://www.jyotirmoy.net/posts/2018-12-01-rust-book.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "官方Rust Book现在有Epub版本下载" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#AOC\nAOC官网\nBurntSushi的解决方案\n历年谜题解决方案\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "AoC 2018谜题Rust解决方案" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rocketRead Morehttps://rocket.rs/v0.4/news/2018-11-30-version-0.4-rc-2/每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-02 11:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rocket v0.4 RC2版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read Morehttps://zhuanlan.zhihu.com/p/51304039" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-01 11:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Quiz 解读： Quiz 1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pin今天抽空看了下Pin API稳定化issues的讨论。发现现在的争议是关于Unpin这个名字是否需要重新命名。主要是alexcrichton认为Pin<T: Unpin>这个感觉很奇怪，既然是Pin，那为什么Unpin在里面呢？社区里很多人都表示赞同，然而，他们认为，就算要改，还有比Unpin更好的名字吗？Unpin已经深入人心了。所以Alex现在已经不提改Unpin这个名称了，退而求其次，他要求在文档上更加精准地表达出Unpin的意思。不管怎么说，Rust团队这种精益求精的精神，让人赞叹。并且加了同行审议流程，要处理的意见就多了，进程自然会慢。目测，Pin/Unpin这个名称是不会改了，且看后续发展如何。Read Morehttps://github.com/rust-lang/rust/issues/55766#issuecomment-443229660" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-01 11:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pin API稳定化进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust_flow这篇文章里，作者实现了一个库tap，该API构思来自于Ruby的tap方法。上面的代码可以使用tap改写为：Read Morehttps://myrrlyn.net/blog/misc/rust-flow-part-twotaphttps://git.myrrlyn.net/myrrlyn/tap" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-01 11:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Flow: 数据流与Rust中方法调用链 Part 2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pijulpijul开源了它们用的diff算法。pijul是基于Rust实现的类Git版本控制工具，用法介绍https://jneem.github.io/pijul/diffshttps://docs.rs/diffs/0.1.0/diffs/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-01 11:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "高效diff算法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo #aocaoc（Advent of Code） 是一个解题网站。https://adventofcode.com/2018/aboutCargo-aoc提供了一个命令行工具来方便你玩aoc。每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-12-01 11:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-aoc： Cargo代码助手" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust官网改版测试界面https://beta.rust-lang.org/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-30 15:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust官网界面改版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aws #lambda使用该库可以在AWS Lambda上运行Rust实现的函数aws-lambda-rust-runtimehttps://github.com/awslabs/aws-lambda-rust-runtimeRead Morehttps://aws.amazon.com/cn/blogs/opensource/rust-runtime-for-aws-lambda/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-30 15:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "AWS Lambda已经支持Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job这是去矿上工作啊。想用Rust构建大型的数字货币和大型采矿系统。没看到说可以远程的信息，应该是不能远程了。\n薪水 120k ~ 160k美刀 + 股权\n旧金山软件工程师的平均工资是134,000美元\n旧金山的失业率为3％\nRead Morehttps://functional.works-hub.com/jobs/rust-engineer-in-san-francisco-united-states-of-america-3a18b" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-30 15:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「招聘」位于美国旧金山市中心的公司招Rust工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#compression #algorithmscomprshttps://github.com/gcarq/comprs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-30 15:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用于压缩算法的实验性沙箱" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-30 15:41" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「投票结果」你主要用什么操作系统构建Rust代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#quiz #rustfest2018来自于RustFest 2018 大会的轻演讲主题：Rust Quiz\nrust-quiz源码\n在线练习和解答\n视频\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustQuiz: 26个在线Rust面试题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#toml从0.5开始，TOML规范趋于稳定。Read Morehttps://github.com/toml-lang/toml/blob/master/versions/cn/toml-v0.5.0.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TOML规范 0.5中文翻译发布了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#atomRead Morehttp://blog.atom.io/2018/11/28/atom-1-33.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Atom 1.33发布，内置Rust支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#romio无船同志写的 ：Mio + Future + Tokio = Romio。（ 八卦： tokio作者不原意跟进Futures最新版，所以官方派出无船同志完成这项推动Rust异步历史进程的艰巨任务。）romiohttps://github.com/withoutboats/romio" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "romio：异步网络原语" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#network_wg此次是网络工作组的报告，一共收到1000多条回复。在Web方面，流行的框架是Rocket和Actix，分别占比27%和24%。也有其他框架的选择，但是有20%的人不选择任何框架，而是在hyper上自行搭建服务。存在的问题：\n65%的人认为缺乏示例是目前生态系统中的问题，其次是缺乏文档。这也是Tokio Doc Push和Rust异步之书正在解决的问题。\n缺乏一个真正的框架，类似于Rails或Django那样的。这也是网络工作组正在考虑的事情。为此官方构建了Tide，为打算使用Rust构建Web应用提供一个良好的开端，另一个目标是想要深入挖掘并学习如何在Rust中编写Web框架的人提供一个文档。\n在构建应用程序时缺乏对框架和服务的一些绑定。包括绑定应用程序，比如各种NoSql数据库、支持在K8S上运行、编排容器框架和LDAP认证协议。以及对数据库的异步访问支持等，并没有一个惯用法的指南。\nRead Morehttps://rust-lang-nursery.github.io/wg-net/2018/11/28/wg-net-survey.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方网络工作组」2018调查报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmbeta版可预定。programming-webassembly-with-rusthttps://pragprog.com/book/khrust/programming-webassembly-with-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新书：用Rust编写WebAssembl" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ebookRead Morehttps://www.reddit.com/r/rust/comments/a17dqa/ebook_rust_programming_language_tutorial_basics/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust免费书：Rust基础指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jitRead Morehttps://github.com/CraneStation/simplejit-demo" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Cranelift实现的玩具语言JIT" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#atlasratlasrhttps://github.com/atlasr-org/atlasr" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Atlasr： 免费的地图预览器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#haskell本文对Haskell和Rust做了一些对比。Read Morehttps://www.fpcomplete.com/blog/2018/11/haskell-and-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「博文」Haskell vs Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo我们很高兴地宣布我们的第一个版本的RustPräzi，一个PoC（概念验证）项目，它从crates.io 3下载所有crate版本，构建LLVM调用图并将它们链接到一个大型版本的基于呼叫的依赖网络。与常规依赖关系网络不同，基于调用的依赖关系网络表示包内和包之间的函数调用链，支持图形分析/查询一个CG是表示整个程序中方法（函数）之间调用关系的图，图中的节点是方法，边表示调用关系。例如方法foo()调用了方法bar()，则CG中应有一条从foo()到bar()的有向边。Read Morehttps://users.rust-lang.org/t/announcing-rustprazi-a-tool-to-build-an-entire-call-graph-of-crates-io/22696" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「工具」宣布RustPräzi：为crates.io构建整个调用图(call graph)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #EffluxRead Morehttps://whitfin.io/writing-mapreduce-jobs-using-rust/effluxhttps://github.com/whitfin/efflux" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust和Efflux编写 MapReduce Jobs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tange“任务并行”是指一个或多个独立的任务同时运行。 可以用来做并行计算。用于：\n数据处理\n分布式机器学习算法\n一般的并行计算\ntangehttps://github.com/Refefer/tange" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tange：基于任务的并行框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "下载https://i.redd.it/206f9o60u0121.png" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "改进的Rust贴纸，超酷" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rfc新方案基于Itanium C ++ ABI的名称修改方案。新的改进有望让第三方工具更容易使用Rust二进制文件。RFC 2603 PRhttps://github.com/rust-lang/rfcs/pull/2603" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "新的RFC提交：改进符号命名" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm\nwasm-bindgen 发布0.2.28\nwasm-pack发布0.5.1\n原文还罗列了很多Rust和Wasm开发相关的博客Read Morehttps://rustwasm.github.io/2018/11/28/this-week-in-rust-wasm-009.html每日新闻订阅地址：\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n欢迎通过GitHub issues投稿。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2018-11-29 15:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "本周WebAssembly" }, "type": "text" }], "type": "title" } },]
