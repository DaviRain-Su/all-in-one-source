export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"改善了 await 語法相關的調整Read morehttps://intellij-rust.github.io/2019/06/06/changelog-99.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-08 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IntelliJ Rust Changelog #99"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"啊就rust太棒了，時勢所趨不得不用性能好又安全，剛好是 Prisma 最重視的兩個點都滿分Read morehttps://www.prisma.io/blog/prisma-2-is-coming-soon-mwwfhevie993#rewriting-prisma-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-08 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Prisma : GraphQL db 管理应用將會用rust來重寫第二版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人用rust寫了一個超簡單小遊戲，有興趣就來看看吧\nRead more\nsteam商店\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-08 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「點石頭保地球」小遊戲上线steam商店"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 HP7440A plotter 绘图仪來玩 lol\nRead more\nRepo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-08 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"plotty-bird: Flappy Bird的rust重製版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Grammarly的Rust扩展將會被程式檢查語法是否正確\nRead more\ncargo-grammarly\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-08 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-grammarly: 检查你的文档注释英文语法是否正确"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"actix 在 single query, multiple queries, fortunes, data updates 都拿第一名在fortunes 甚至擊敗好久沒有對手的h2o不過 Max Latency 在 28.9 ms 跟σ (SD) 0.4ms 差距很大是個大問題Read morehttps://www.techempower.com/benchmarks/#section=test&runid=52587667-bee1-4b9b-b34d-929b616d5e4c&hw=ph&test=db"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"actix 1.0 效能搶先看"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"俄羅斯方塊線上wasm版Read morehttps://www.reddit.com/r/rust/comments/bxewhz/tetris_clone_using_rust_and_webassembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasm-tetris"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"借用所有權是個不錯的概念，現在Ada也想要用了Read morehttps://www.reddit.com/r/rust/comments/bxjpxp/adaspark_is_intent_on_borrowing_ownership_from/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ada/SPARK 打算借鉴 Rust 的借用所有權"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以檢查你的 TOML 檔裡面用到的庫，是否都安全Read morehttps://www.reddit.com/r/rust/comments/bxl9ji/rustsec_rce_friendly_reminder_to_review_your/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustSec 檢查您的依賴庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"現在安裝時，不再有 thread 限制，會使用更多內存與線程來解壓縮Read morehttps://www.reddit.com/r/rust/comments/bxn7cy/rustuprs_threaded_io_testers_wanted/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustup.rs 不再有线程限制"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個字數統計的簡單的範例Read morehttps://www.reddit.com/r/rust/comments/bxo0ly/word_count_with_actix_kafka_and_redis/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"字數統計使用 Actix, Kafka, Redis"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"多通道带符号距离场（signed distance field, SDF是一种技术，它将具有距离信息的字形光栅化为低分辨率纹理，然后用于渲染高质量文本。用于三维空间渲染、计算机视觉之类的场景。Read morehttps://www.reddit.com/r/rust/comments/bxo1sb/multichannel_signed_distance_fields_font_tech_demo/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-07 16:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sdf-test 多通道带符号距离场"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"之前我们一直在用 lazy_static! 这个库和宏来初始化全局变量，现在不需要宏了。直接用 OnceCell 就可以，像下面这样：全局变量这玩意儿，有时候还是有用的，方便，对于初始化一次并只读的情况，没有什么问题。Repohttps://github.com/matklad/once_cell"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OnceCell - 用于初始化全局变量的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"网站在这里 bloom.sh。作者野心很大啊。云平台，serverless, 存储，下载，笔记，通讯录，游戏，音乐，画册。。。有这么大的能力？作者的背景来路不明。整个平台由Rust语言支撑。在这个网站上线之前，作者已经重写过2次了，也就是说，目前这一版Rust是第三次实现。第一次实现是用Js写的，写出来性能太弱，受不了。然后作者就受Google的市场推销所鼓动，用go写了第二版，速度是提上去了，但是作者觉得go太弱了。很多地方，写起来，不好用，不易扩展。然后第三次，他尝试了Rust，发现Rust太令他热爱了。除了编译时间太长（CI/CD等耗费资源较大），其它真的找不出太多缺点。构建这种大系统，Rust真是太适合不过了。Read MoreRead More 2Repohttps://www.reddit.com/r/rust/comments/bx5ajg/bloom_a_free_and_open_source_google_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"bloom.sh"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bloom.sh - 推出了一套（目标是）比肩 Google 服务的平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个新闻前几天报道过，现在正式被国外新闻网站报道了。看起来事儿小，bzip2 是 Linux 环境相当基础的设施，所以意义还是蛮重大的。Read Morehttps://www.phoronix.com/scan.php?page=news_item&px=Bzip2-Revival-2019"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bzip2 要被 Rust 重写了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个版本的Rust（及其相关库生态）代码，特性要求更严格，专门用于安全敏感领域。比如，汽车电子、工业设备、机器人、医疗设备、航空电子等领域。这是系列文章，第一篇见下面。Read Morehttps://ferrous-systems.com/blog/sealed-rust-the-pitch/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ferrous 系统公司提出要建立Rust更高级别的稳定发行版 Sealed Rust（密封 Rust）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"源码库https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust作为数据结构和算法的教程书要出版了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 在区块链中使用越来越多了，这里做了汇总，月更。另外，rustforce.net 上也有对相关的汇总。Read Morehttps://rustinblockchain.org/2019/06/06/rust-in-blockchain/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust in 区块链"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"给python用的。Repohttps://github.com/thedrow/fastuuid"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fastuuid - 对 Rust 的UUID 的CPython封装。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天作者又给出了一篇文章介绍。Read Morehttps://clux.github.io/probes/post/2019-06-04-towards-a-generic-kube-client/Repohttps://github.com/clux/kube-rs\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-06 17:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kube-rs - k8s 的 Rust 客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#officialRust的治理工作组（The Governance WG）即将公开，可以在其工作仓库中看到详细的工作章程。简单来说，治理工作组是「其他团队」，「Rust项目」和「整个社区」的推动者。它旨在改善社区中，团队和参与者之间，以及团队和参与者之间的流程和交互，以减少工作量和不必要的摩擦。在这样做的同时，它也试图取得平衡，以尽可能简化流程，尽可能透明。同时请记住，绝大多数人都是自愿参与项目的，因此解决方案必须切合实际，尽可能减轻负担。（个人看法： Rust项目本身一直算是开源界的一个典范，治理工作组的诞生，及其流程规范，必将引领开源社区，对开源感兴趣的朋友可以关注）\nRead More\n工作仓库\n工作组具体章程\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」Rust治理工作组即将公开"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blogosBlogOS系列课程在五月份的一些更新汇总Read Morehttps://os.phil-opp.com/status-update/2019-06-03/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust写操作系统系列文章五月份的状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#swift #ui在相关的Reddit评论区，发现了这样一个网站：areweguiyethttps://areweguiyet.com/也许SwiftUI的发布，可以给Rust在GUI生态上带来一些启示？\nRead More\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SwiftUI： 苹果新发布的UI框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tools0.5发布，persy是基于单个文件的存储，其中数据可以存储在称为“segment”的子容器中。persyhttps://gitlab.com/tglman/persy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"persy: 简单事务存储引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#udp使用该库可以向服务器发送大量UDP数据包，从而模拟最终用户或一组黑客可能产生的活动。aneviconhttps://github.com/Gymmasssorla/anevicon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Anevicon： 高性能UDP流量生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#video #newbieSean和Kait是来自于JS社区的全栈开发者，最近决定学习Rust，并且把他们的学习过程录成视频。Read Morehttps://www.youtube.com/playlist?list=PLywCmJ05v3PhlDgxPAW1ryxHZJ9Tjohpi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」「入门向」Sean和Kait学Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#concurrency该贴作者在用Rust实现一个Read-Log-Update无锁并发库的时候，总结了一些经验。\nRead More\nrlu-rs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「心得」如何改进一个棘手的并发接口"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#OxidizeConfYoutube列表https://www.youtube.com/playlist?list=PLXajQV_H-DxJPiJQK8gvou4SUZ8Zfvgm6"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OxidizeConf 大会视频已经全面上线"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustConAsiaRead Morehttps://mp.weixin.qq.com/s/VuyGsgIs-8oG4bBC6QiPTg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCon Asia 实录 | Rust 在国内某视频网站的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#learning有人记录了他在Rust学习过程中遇到的痛点，以及一些解释，需要的人可以参考Read Morehttps://github.com/zkat/rust-notes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust学习中的痛点"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#2D这是关于Rust在2D图形开发中的分享Read Morehttps://github.com/libregraphicsmeeting/slides-2019/blob/master/slides/2019-05-30-1740-rust-2d-graphics.pdf\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-04 18:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"来自Libre Graphics Meeting 2019大会上的Slides"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #AmethystEvoli是一款由Amethyst（紫水晶）制作的进化灵感模拟游戏，目前已经成功完成了2月份制定的MVP规范。Read Morehttps://amethyst.rs/posts/evoli-an-official-amethyst-showcase-game/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-03 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Evoli： Amethyst官方展示游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#openclEmu是用于GPU编程的高级语言，专门设计用于嵌入Rust代码中。它为编写函数提供了单个过程宏emu!。宏将编译时的函数转换为底层的代码（OpenCL代码），以便它们可以在GPU上运行。Emu还提供了一些旨在提升GPU编程的体验，例如内置了数学和物理常量，单元注释和隐式转换等。emuhttps://github.com/calebwin/emu/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-03 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"emu: 基于Rust实现的GPU的语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ProceduralMacros这个是Jon Gjengset录制的，Jon是号称东半球Rust第一的男人，照例，视频时长长达4小时视频https://www.youtube.com/watch?v=geovSK3wMB8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-03 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」过程宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Gopher与HTTP一样，Gopher是一种用于通过互联网检索信息的网络协议。一个关键的区别是，它尚未被广告公司商业化。这可能是因为它没有提供很多跟踪机会，也没有庞大的用户群。（Gopher曾经有可能成为当今互联网的基础来着）感兴趣的可以看看Read Morehttps://gkbrk.com/2019/06/gopher-server/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-03 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust实现Gopher服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"也就是 du 的翻版啦。这个用上了Rust的并行化技术。速度比原来的 du 更快，特别是在SSD下更快。比如像下面这样测试Repohttps://github.com/Byron/dua-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dua - 并行的文件统计工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo clean 之后，会重头开始编译，各种依赖会重新编译。那么如果只想重头编自己工程中的代码，不想把依赖全部重新编译呢？答案很简单：Read Morehttps://www.reddit.com/r/rust/comments/bvo0j9/how_to_cargo_clean_without_cleaning_compiled/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"小技巧：cargo clean的时候，不想重新编译依赖，怎么办？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是对之前的实现的Rust重写。可以在这里试玩。https://lichess.org/@/sunfish_rsRepohttps://github.com/Recursing/sunfish_rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sunfish 国际象棋游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nUserCity\nRobo Instructus\n还有没有？Read Morehttps://www.reddit.com/r/rust/comments/bvtfni/which_rust_games_have_made_it_to_steam/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Steam 上有哪些游戏是用 Rust 实现的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者为了对比，用以下框架分别写了同一个小游戏，以做出对比。\nggez\ntetra\nquicksilver\ncoffee\nPiston\nAmethyst\n文章比较长，内容非常详实，做游戏开发的同学值得一读。Read Morehttps://wiki.alopex.li/AGuideToRustGameFrameworks2019"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中最好的 2D 游戏开发框架一览"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 这里。https://github.com/rust-lang/rust/pull/60466const generics 就是“基于常量值的泛型”。简单来说，Rust 中的 [T; LEN]，它的很多特性在之前的版本中，只支持最多 [T; 32]，而且是人 [T; 0]，[T; 1], [T;2] ... 一直到 [T; 31] 这样，纯手撸实现的，丑不？https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md现在，有了 const generics，就可以把数组这种常用的类型从二等公民提升到一等公民来了。对于处女座来讲，简直要欢呼。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"libcore 已经开始尝试使用 const generics 进行重写啦"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"minisketch 是一种用于提升比特币网络的交易传输效率的技术。@sipa 是比特币开发者。Repohttps://github.com/eupn/minisketch-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"minisketch-rs - @sipa 的 minisketch 库的 Rust 绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者说 bzip2 最后一次提交是在 2010 年，到现在为止好多年都没人维护了。所以现在开始重写。从 CRC32 开始。这是 gnome 的项目。Read Morehttps://people.gnome.org/~federico/blog/bzip2-in-rust-basic-infra.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bzip2 开始用Rust重写啦"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者发布出来，说这是最快的 rust log 库。然后被打脸。后来改口说致力于达到最快。https://www.reddit.com/r/rust/comments/bvbbjb/my_new_crate_fastlogger_an_attempt_at_the_fastest/Repohttps://github.com/BourgondAries/fast-logger"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fast-logger 最快的 log 库？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比如，获取电池电量信息？Read Morehttps://svartalf.info/posts/2019-05-31-poking-the-macos-io-kit-with-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 来操作 macOS I/O"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是一个命令行工具。Repohttps://github.com/jsdw/weave"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Weave - 终端 http 路由/代理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库基于 gfx-hal 来做。这个库会同时支持 WebGPU 和 WebGL。不得了不得了。Rust 这是要全面攻占未来 Web 终端。以 wasm 为枪，WebGL/WebGPU 加持。不得了了。Repohttps://github.com/gfx-rs/wgpu/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-02 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wgpu - 用 Rust 实现 WebGPU 协议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"知乎开源了Rust实现的搜索引擎 rucene据@Chaos了解，目前开源的部分只包括 lucene library 部分，搜索引擎的部分太多业务内容而且跟内部的一个分布式框架有强绑定就没开源，等后续弄好了应该还会出一篇文章，详细介绍这个项目。未来估计还会有一次代码重构，可能会带来break change的修改，想要贡献的朋友可以缓一缓。Read morehttps://github.com/zhihu/rucene"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rucene"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust 實作可以做壓縮，也可以當CRC32的庫Read morehttps://www.reddit.com/r/rust/comments/bv6qnc/bzip2_in_rust_basic_infrastructure_and_crc32/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bzip2 in Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/bv7hv7/poking_the_macos_io_kit_with_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust 使用 macOS IO kit"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個二維加三維的剛體物理引擎Read morehttps://www.reddit.com/r/rust/comments/bv7zws/nphysics_a_2_and_3dimensional_rigid_body_physics/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nphysics"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個動態腳本語言直譯器，使用rust實作Read morehttps://www.reddit.com/r/rust/comments/bv8sth/haru_a_dynamic_scripting_language_interpreter/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"haru"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個動態腳本語言直譯器，使用rust實作，而且很像LispRead morehttps://www.reddit.com/r/rust/comments/bv9wf1/lambdacore_an_interpreted_language_written_in/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"LambdaCore"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/bv9ywi/pgen_commandline_passphrase_generator/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pgen 命令列密碼生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"盡可能快速的Rust loggerRead morehttps://www.reddit.com/r/rust/comments/bvbbjb/my_new_crate_fastlogger_an_attempt_at_the_fastest/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-06-01 17:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fast-logger"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這位寫C++的老兄想寫以前的Enumrust的近似方案1rust的近似方案2有個庫enum_dispatch可以達到類似的效果Read morehttps://www.reddit.com/r/rust/comments/buqgam/enum_variants_as_types/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Enum的值如何作为类型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在rust裡面建立 JvmBuilder 再调用 java 函數Read morehttps://www.reddit.com/r/rust/comments/bur020/announcing_j4rs_calling_java_code_from_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"j4rs 從rust调用java"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"只支援 x86_64 LinuxRead morehttps://github.com/xd009642/tarpaulin"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tarpaulin 一個計算代碼覆蓋率的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/bv41o9/a_pong_game_with_wasmbindgen_websys_and_jssys/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 wasm 重製骨灰级遊戲 pong"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"「台湾」找外包 預算6萬人民幣 有興趣的人請寄 t1238142000@gmail.com ，要求Rust实现。Read morehttps://hackmd.io/k0-2wJ4fToC2LQ9hHqDLbg?view"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"遊戲排隊系統尋找外包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"mononokehttps://github.com/facebookexperimental/mononoke"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Facebook开源的 Mercurial源码控制系统的下一代服务器 mononoke 最近升级到了2018 edition"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Blender是一个免费的开源3D创作套件。该文作者曾经在Blender工作过，编写过Python API。为了探索Blender二进制文件格式并提供读取和使用它们的工具，该文作者创建了一个Rust项目\nRead More\nrs_blender\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和Blender"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于Tui-rs实现。rust-battophttps://github.com/svartalf/rust-battop"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-battop: 交互式终端电量可视化工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SQIP 是基于SVG 的LQIO 方案，其能够用于生成可用的SVG格式。作者之前用Node.js中的SQIP包，但是不够稳定，然后又打算用Rust重新实现，又不打算重头编写，所以找到了SQIP的Go绑定库，想通过FFI在Rust中调用Go代码。但是和Cgo打交道，性能不知道如何。Read Morehttps://blog.arranfrance.com/post/cgo-sqip-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从Rust调用Go库：使用SQIP进行案例研究"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"与清华，交大等镜像不同的是，这个是专用的Rust仓库镜像，应该会更稳定。快来试试吧rustcc/lernaean-deployhttps://github.com/rustcc/lernaean-deploy/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-31 17:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust.cc社区提供了国内crates镜像"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如下面例子，直接传一个元组进去，不行。索引里面的元素，直接传，可以。为什么？问题在于，(usize, &mut usize) 没有实现 Copy，所以在循环中一传就报 ERROR: use of moved value。而 input.0 是实现了 Copy 的。input.1  &mut usize 没有实现 Copy，但是 Rust 编译器的规则会为这种情况自动做类似如下操作 &mut *input.1，相当于创建了一个新的借用（注意这里并非因为 usize 是 Copy 的，如果是一个非Copy的类型，也一样可以reborrow）。比如下面的代码：是可以编译的。Read Morehttps://www.reddit.com/r/rust/comments/bu3kg5/interesting_quirk/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个说明借用/Move细节的鲜活例子"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"设计这个库的目的是改进调试体验，对比 stringify!() 来说，有利于更方便地重构。示例：Repohttps://github.com/SilentByte/nameof"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nameof - 替代 stringify! 的一个宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sean Policarpio 在下面文章中详细讲述了如何用 bindgen 对 FUSE file system 框架进行绑定。看了之后，你可以学会如何用 Rust 做一个自己的 Fuse 文件系统。https://rust-lang.github.io/rust-bindgenRead Morehttps://dev.to/kdrakon/rust-s-bindgen-fuse-in-2019-2e8l"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个演示如何使用 bindgen 做 FUSE 绑定的例子"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"很多人在问有没有最新的写法的例子，小编搜罗了一些：\nRuntime\nRomio example\nzigbeer-rs\nwebdav-handler-rs\nfutures-conn-pool\n其它还有，只会越来越多，先看看这几个找找感觉。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用最新的 async/await 的一些例子"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pathfinder 是一个向量图形渲染器。下面这篇文章讲解了 Pathfinder 内部实现的原理。研究图形渲染的同学推荐关注。https://github.com/pcwalton/pathfinderRead Morehttps://nical.github.io/posts/a-look-at-pathfinder.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"深入 Pathfinder 原理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看未来能不能组织翻译成中文。Read Morehttps://www.manning.com/books/rust-in-action"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust In Action：面向初学者的教材"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"官方出品，此文档现在更新了。Read Morehttps://rust-lang.github.io/unsafe-code-guidelines/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编写Unsafe代码的指导文档"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"下面文章继续讲解如何用 Rust 创建一个Http 1.0 静态文件服务器。Read Morehttp://concisecoder.io/2019/05/27/creating-a-static-http-server-with-rust-part-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"创建一个Http 1.0 静态文件服务器，第二部分"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dotenv易主了，之前是diesel作者维护的，但是有段时间不维护了，连仓库都删了，现在有人接手它了，并且准备发1.0了，新仓库https://github.com/dotenv-rs/dotenv\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-30 11:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dotenv易主了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Python #mlOrkhon是用于机器学习的Rust框架，用于运行/使用用Python编写的推理/预测代码，冻结模型和处理未知（unseen）数据。orkhonhttps://github.com/vertexclique/orkhon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-29 12:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"orkhon: 机器学习框架和运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #await在这篇文章里，作者讨论了如果在应用中取消正在进行的异步任务，这非常有用，主要是因为对它们的结果不再有任何兴趣，所以继续操作就会成为资源占用。比如在超时范围内没有收到响应并且应该将错误发送回用户，则应该取消子操作。先来看看在同步中如何取消任务：例如在C＃中，使用CancellationToken类型的变量传递给每个方法，该方法是可取消工作流的一部分。这些方法可以不时地检查CancellationToken.IsCancellationRequested，以便发现父任务是否已请求取消。在这种情况下，子任务可以提前返回（例如通过抛出异常）。其他语言是这种方法的变体：Go使用Context结构将取消请求传播到子任务。在Go中，取消请求通过Channel发出信号，因为它可以轻松地使程序等待取消请求或来自其他来源的状态更新。Java利用线程局部中断状态。如果一个线程获得.interrupted()，那么如果不处理异常，某些操作将抛出并强制返回子任务。这可以被视为某种线程局部的CancellationToken，它在方法之间没有明确地传递。它具有不能在异步上下文中使用的缺点。这些行为具有一组特定的共性:\n取消始终只是通过取消请求来完成，它无法执行，即使请求已发出，子进程也可能运行一段时间。\n所有方法都可以观察是否发生了取消，如果子方法受到影响，并且能够对其做出反应\n在async/await异步中如何取消：Rust之外的语言，和同步取消任务的模式类似：\n通过专用参数或隐式任务本地参数请求取消\n需要方法来观察取消状态。\n即使取消后，异步方法也会完成。\n比如，C＃ async Tasks通过CancellationToken发出取消信号。许多.NET core框架函数支持此参数以传播取消请求。Kotlin协程标准库识别取消请求并允许操作在取消时提前中止。Javascript没有取消的标准化类型，由于异步Javascript函数将始终运行完成，因此该机制还需要遵循上述所描述的模式。C++协程可以使用cppcoro库中定义的CancellationToken。Rust对Cancellation的支持与其他支持async/await的语言有所不同。\n只需删除表示异步操作的Future即可触发取消\n不需要方法来转发取消请求或取消能力（例如，通过传递CancellationToken）\n取消是同步的 - 因为drop()是同步的\n取消不包括单独的取消请求并等待操作完成的步骤。只有一个取消/删除步骤。\n取消被强制执行 - 子方法不能忽视或推迟取消\n这些特性有优点也有缺点：\n取消任务将变得简单\n主要缺点是底层操作必须支持同步取消，比如处理操作系统底层IO的时候，会比较麻烦。但该文章中也给出了一些解决办法。\n更多内容请查看原文。\nRead More\n文章列表\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-29 12:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「异步系列文章」Part 2: Async/Await语法之外的挑战 : 取消（Cancellation）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#await官方核心成员无船大佬在博客上披露，异步await语法的最终提议是继续推进后缀关键字语法： future.await。另外无船大佬还针对Rust语言设计给出了两点说明：下一步：准备在Rust 1.37稳定版中引入async/await的最小稳定化版本， 1.37将于8月中旬发布，并于7月4日发布。这不会是async/await功能的结束 - 最小功能将会有很多扩展 - 但对于每个想要使用Rust进行高性能网络服务的人来说，这将是一个重要的里程碑。Read Morehttps://boats.gitlab.io/blog/post/await-decision-ii/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-29 12:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步await语法最终确定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#metrics基于trait抽象，提供稳定API，支持Prometheusmetricshttps://github.com/metrics-rs/metrics"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-29 12:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"metrics: 高性能metrics库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#audioRead Morehttps://rust-audio.discourse.group/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-29 12:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Audio论坛 - 讨论和询问有关Rust中音频开发的问题的地方"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clileghttps://github.com/jesusprubio/leg\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-29 12:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"leg: 用于美化命令行输出的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RaspberryPiRaspberry Pi提供了一组GPIO（通用输入/输出）引脚，允许您控制用于物理计算的电子组件并探索物联网（IoT）。相机模块是Raspberry Pi的绝佳配件，它允许用户拍摄静态照片并以全高清录制视频。HAWK是一个基于Rust的图像识别项目，它通过使用RFID卡进行用户识别和Image进行用户验证来实现双因素身份验证。本文展示了如何使用Rust程序触发树莓派的摄像头。\nRead More\nhawk\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式」Hawk-Rust系列：树莓派相机的驱动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasi本文来自于OasisLabs，介绍了WASI（Web Assembly System Interface ）在区块链上的应用。目前Oasis平台的技术架构目前正在围绕WASM、WASI和区块链来实施。（OasisLabs是来自加州大学伯克利分校的Dawn Song教授和同事们创立的区块链项目，基于区块链和可信硬件想构建高性能的可信云平台。）为什么他们想把WASI用于区块链？WASI用于区块链的目标是利用围绕WASI快速发展的社区和基础设施。 与创建另一个Wasm接口的替代方法相比，WASI允许区块链开发人员利用更广泛的开发人员社区的资源。 通过这种方式，可以想象未来区块链将成为云开发人员工具箱中的另一个工具。OasisLabs团队还专门提交了一个区块链WASI的RFC，想做成适合区块链上下文的WASI标注扩展。\nRead More\nBlockchain WASI RFC\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用WASI对区块链进行通用计算"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cpp #rayon有人针对Rust/Rayon（Rust实现的多线程并发库）和C++/OpenMP（c++的类似于rayon的库）在36核的机器上进行了性能测试。Rust 36个线程：CPP/OMP 36个线程：对于这个结果，可以看看Reddit讨论贴里的一些反馈。评论区有一半的人都认为Rust之所以慢，是因为rayon目前不支持NUMA感知（Numa aware）的原因。无论是Rust语言，还是Rayon目前都不支持该功能，除非等内存分配器稳定下来再做打算。（NUMA 用于 x86 和 IBM® POWER® 体系结构平台上的多处理器系统。在具有 NUMA 特性的系统中，每个处理器都具有可用的本地内存，也可以访问分配给其他处理器的内存。对本地内存的内存访问速度更快。NUMA 节点是相互紧密联系的处理器和内存的集合。 在节点内的内存访问速度比在节点外更快。如果程序能够感知NUMA，那就相关计算资源，将会被放置到一个不同的物理NUMA节点。尽管仍旧在两个NUMA节点之间扩展，但资源使用将会得到优化。）但未可知OpenMP的测试代码是否利用了NUMA感知来提升性能，但OpenMP好像是支持NUMA（不确定）。\nReddit 讨论\n相关代码\nrayon issues: Schedulling should be NUMA aware\n介绍NUMA的一篇文章\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust vs C++ ： 基于36核CPU的并行性能测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ml #statistical_computing该贴针对此问题展开讨论：ndarray和nalgebra这两个库有什么区别？优缺点？哪个库更有机会被机器学习和科学计算领域应用？评论摘要：Reddit讨论https://www.reddit.com/r/rust/comments/btn1cz/ndarray_vs_nalgebra/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」ndarray vs nalgebra"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#vecvecmergehttps://github.com/segeljakt/vecmerge"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"vecmerge：提供了方便合并Vec的宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust如果你想支持Rust的发展，有很多方法可以支持Rust：\n贡献代码。\n写文档、书、博客、视频等。\n在论坛，Stack Overflow，Reddit，Matrix或Discord上回答问题。\n财务支持。\n尤其是财务支持，可以帮助补偿这些重点贡献人员的时间，使得开源更具可持续性。如果你愿意，可以查看Aaron发起的捐助人员列表。\nRead More\nAaron发起的捐助人员列表\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"支持Rust的多种方式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#HttpRead Morehttp://concisecoder.io/2019/05/27/creating-a-static-http-server-with-rust-part-2/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-28 15:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」 使用Rust创建静态文件服务器 Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#activity #RustChina首批任务：Rust官网翻译这里有详细说明  https://github.com/rust-lang/www.rust-lang.org/blob/master/TRANSLATIONS.md欢迎加入Rust翻译小组参与，QQ群聊号码：716348056 ，QQ群是一个联络点，后续会组建微信群、tg群等。（有参与意愿和时间者进，吃瓜群众勿扰）"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中文社区翻译小组招募"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#chat #rocket #learning本文介绍了如何使用Rust和简单的JavaScript在本地机器上构建简单的聊天应用程序。主要的技术栈是Rocket/websocket/JavaScript（你也可以使用TypeScript）Read Morehttps://medium.com/@steadylearner/how-to-start-rust-chat-app-499a194d0820"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何用Rust实现一个Chat App"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#meap\nRust in Motion : 视频文字学习教程\nRust in Action ：书\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MEAP出的Rust相关学习资源介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ddos #lowSlow一种 Low&Slow 流量产生器Low&Slow 是一种DDos攻击方法，利用产生大量的慢请求来保持住对服务器资源的消耗，从而影响正常请求的访问。finshir 就是这样一种用Rust写的工具，基于协程（使用了May）。https://www.cloudflare.com/learning/ddos/ddos-low-and-slow-attack/finshirhttps://github.com/Gymmasssorla/finshir"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Finshir v0.3.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#task #docker当然你还可以用它完成更多更复杂的任务：交叉编译、监控文件变化等等。但是Toast不会并行运行任务，而必须使用顺序执行计划，这是受Docker限制的，但是在单个任务中使用并行。toasthttps://github.com/stepchowfun/toast"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"toast: 支持在docker容器中运行任务的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#servo标题仿自《禅与摩托车维修的艺术》。该文是servo的某个贡献者写的文章，他介绍了如何从并行系统中删除阻塞逻辑。长文预警！Read Morehttps://medium.com/@polyglot_factotum/programming-servo-zen-and-the-art-of-removing-blocks-from-your-system-51c1b7d404e3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"禅与从系统中移除阻塞（block）的艺术"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#plotter虽然在大多数情况下渲染图形并不需要太多的计算能力，并且诸如Python和Javascript的编程语言用于可视化目的。有时我们需要根据大量数据制作一个数字，例如，渲染一些人类基因数据可能需要对数万亿个数据点进行下采样，这对于许多高级编程语言来说甚至都不可行。在这种情况下，Rust是渲染数字的完美候选者，因为它具有高级抽象能力，但运行速度非常快。Plotter目前支持使用HTML5画布的后端，也支持wasm，在其项目demo里有plotters+wasm的示例。plottershttps://github.com/38/plotters"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Plotters：Rust的绘图库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#VSCode #highlighterRead Morehttps://marketplace.visualstudio.com/items?itemName=evgeniypeshkov.syntax-highlighter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"VSCode的另一个语法高亮插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#physics #vector #matrixCalcify是用于3-D和4-D矢量和矩阵代数的crate，被设想用于物理模拟。它基于一个基本的ThreeVec结构构建，包括内置的最常用操作。它包括物理常量，3和4-D向量和矩阵以及许多相关的操作，集合，直方图和输出树，可以在json或MessagePack中序列化。calcifyhttps://github.com/JTPond/calcify"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「物理模拟」Calcify 0.5.6 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #cliterminal-typeracerhttps://gitlab.com/DarrienG/terminal-typeracer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"terminal-typeracer: 命令行打字游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#slides  #dsl特性：\n可以编译为PDF\n完整的排版控制\n一流的检查和操作支持\nprishttps://github.com/ruuda/pris"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pris:一种用于设计幻灯片和其他图形的特定领域语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#i3statusi3status-rshttps://github.com/greshake/i3status-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"i3status-rs: i3status的纯Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#elasticsearchlimberhttps://github.com/whitfin/limber\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-27 12:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"limber: 用于备份Elasticsearch文档的简单（但快速）工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"长文预警。Tox 是一个安全的P2P核心服务，加密传输，易于使用的基于DHT的网络。是toxcore的Rust实现，toxcore目前被用来做P2P安全IM服务核心。https://github.com/tox-rs/toxTox 原来是个C项目，作者用Rust通过审视发现，实现里面有不少漏洞，易被攻击。所以他用Rust重写了它。就是上面那个项目地址。现在作者，开始整理这几年的工作，开始生成文档。有很多客户端可以使用，比如qTox。Read Morehttps://habr.com/ru/post/447994/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-26 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"漫游 Tox-rs，第一部分"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者发现下面这两片代码：性能有3倍左右的差距很奇怪。于是很多人给他建议。换种写法，跟unsafe差不多快。打开 -C opt-level=z 编译标志，按下面方式写：还有一种写法：跟 unsafe 差不多。Read Morehttps://www.reddit.com/r/rust/comments/bsvup3/300_performance_penalty_for_slice_index_checks/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-26 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"切片索引检查导致的3倍性能下降问题一例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ccl 目前包含一个并发hashmap和一个并发时限缓存，初步的评测很强力。Read MoreRepohttps://gitlab.nebulanet.cc/xacrimon/rs-hm-bench"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-26 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ccl - 据说是目前为止性能最高的并发哈希库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"什么，现在还有人喜欢打字比赛？确实有，这不，作者就做了一个打字竞速游戏。看看界面先：代码在这里Repohttps://gitlab.com/DarrienG/terminal-typeracer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-26 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"terminal-typeracer - 终端下的打字竞速游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用于物理模拟。Repohttps://github.com/JTPond/calcify"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-26 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"calcify - 3D/4D 矩阵代数库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文介绍了如何在Mac下对TiKV进行了性能测试。里面介绍了一个工具：DTrace，可以方便在Mac下对Rust项目进行性能测试，并可以支持生成火焰图等报告。Read Morehttps://www.jianshu.com/p/a80010878def\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-26 13:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 Mac 下面调优 TiKV"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人用rust寫了一個很像lf2(Little Fighter 2)的2.5D動作遊戲Read morehttps://azriel.im/will/2019/05/24/into-the-wild/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-25 14:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Into The Wild"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read moreRead morehttps://github.com/rust-lang/www.rust-lang.org/issues/798"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-25 14:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust官网的国际化支持，在找人翻译"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"楼主覺得 actix 和 rust-postgres 很棒但發現這兩個庫都只有一個大佬在當主力開發，他覺得庫只有一人維護對大公司來說不是問題但對無力繼續維護的小客戶來說是個問題，大家覺得呢？（其实很多项目都是单人在撑）Read morehttps://www.reddit.com/r/rust/comments/bsdnih/concerns_about_some_major_libs_being_onemanshows/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-25 14:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」对于单人主力维护的项目如何看待"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個類似 google search 找解答的工具howdoi 的 rust 實作版本比如你有個問題叫 \"how to parse json in rust\"使用下列指令得到解答Read morehttps://www.reddit.com/r/rust/comments/bsg9w4/hors_030_is_released_it_supports_google_search/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-25 14:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hors 0.3.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"對測試有需求的同學可以試試看Read morehttps://www.reddit.com/r/rust/comments/bshn0f/announcing_mockiato_a_strict_yet_friendly_mocking/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-25 14:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mockiato ：一個嚴格友好的Mock測試庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這個工具可以幫助你管理 ~/.cargo/ 或 ${CARGO_HOME}Read morehttps://www.reddit.com/r/rust/comments/bspb17/cargocache_021_released_conquer_your_cargo_home/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-25 14:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-cache 0.2.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人做了一個實際性的project\nvoik\n讨论 Read more\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-24 15:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「找帮手」Voik： 一個類似Kafka的项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"概要： Box<dyn Fn*>系列已经实现了Fn* traits支援將閉包強制轉換為unsafe函數指針dbg!() 支擾無参数调用得到 [src/main.rs:5]\nRange::contains\nRangeFrom::contains\nRangeTo::contains\nRangeInclusive::contains\nRangeToInclusive::contains\n\nRef::map_split\nRefMut::map_split\nRefCell::replace_with\nRead morehttps://www.reddit.com/r/rust/comments/bs7vw8/announcing_rust_1350_rust_blog/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-24 15:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.35.0 稳定版发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個好用的工具，讓你可以快速的編譯執行单个rust文件，并且可以支持第三方crate。不再需要把整個編譯项目目錄创建好Read morehttps://github.com/fanzeyi/cargo-play"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-24 15:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-play"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"支持await/async语法Read morehttps://www.reddit.com/r/rust/comments/bs9ann/intellij_rust_changelog_98/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-24 15:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IntelliJ Rust 更新 #98"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个使用Rust加速Ruby程序的案例，以i18n gem为示例讲述。Read Morehttps://medium.com/swlh/speeding-up-ruby-mri-with-rust-a7c914d2f9d0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-24 15:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust加速Ruby MRI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"他说的很对，Rust近两年确实是开启了一场轰轰烈烈的命令行大替换运动。但是不是悲剧呢？按他的说法：Rust产出的这个命令行工具大小基本是4MB以上，性能要59ms，所以，这个太悲剧了。拿Rust编写的替代ls命令的exa来说，brew安装大小是1.4MB，其实也没超过2MB。9012年了，你的磁盘空间就这么不够用吗，都干啥了？运行一次的时间我没测过，但我觉得就算真的是59ms我也是可以接受的，因为在我的反应时间之外，并没有多卡。我在本地尝试用exa列出TiKV（算得上一个大型项目了）的树形列表，也没有感觉到有卡顿。所以悲剧在哪？软件写出来是让人用的吧？exa的介绍第一句话就是：You list files hundreds of times a day. Why spend your time squinting at black and white text?你每天列出数百次文件，为什么你要花时间眯着眼睛看黑白文字？exa提供了很多功能，其中，高亮显示文本（区分各种元数据、文件、目录、或其他格式，比如symlinks），是大多数Rust编写的命令行工具的底线。这是Rust社区，Rust文化的体现，就是让大家感受到更好的「人体工程学」。除了高亮显示，还有很多功能，比如支持git、扩展属性等。所以，为什么要重写exa呢？是为了给大家节省时间，提升工作效率啊，同志们！同样，有很多优秀的Rust重写的命令行工具，比如ripgrep，你怎么不说说它的搜索性能呢？说了这么多，主要是想说明：用Rust重写或者新开发的命令行App，是为了让咱们这个世界更加安全、美好。这个重写，并不是盲目的。在需要安全、需要性能的地方，也不会含糊。大家都试试新工具吧。所以，到底什么是悲剧呢？大家想一想吧。From @Chaos\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-24 15:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对于一些人对「Rust编写命令行应用」产生误解的说明"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"1.35增加的一些特性摘要：\n为Box<FnOnce>, Box<FnMut>, 和Box<Fn>实现了FnOnce/FnMut/Fn。（来自社区 @crlf0710的贡献 ），相关PR：#59500\n支持将闭包转换为usnafe的函数指针。\n增加了wasm32-unknown-wasi Target。\n线程在Debug模式下将显示ID。\nalloc::System实现了Default。\ndbg!()支持无参数调用。\nASCII转换速度提升了4倍速。\n稳定了一些API。\nRust 1.35 release notehttps://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1350-2019-05-23"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.35 稳定版预发布测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#kakoune #IDE #editor（头一次听说kakoune这个编辑器，恕我无知）。期待其他编辑器也支持，最好是能支持自定义各种emoji。Read Morehttps://www.reddit.com/r/rust/comments/brf1yd/call_to_action_state_of_highlighting_asyncawait/不过VSCode又多了一个语法高亮的插件：Tree Sitter，号称可以提供更好的Rust高亮。Tree Sitterhttps://marketplace.visualstudio.com/items?itemName=georgewfraser.vscode-tree-sitter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kakoune编辑器已经支持了async/await关键字高亮"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#futures #async\nExplained: How does async work in Rust\nExplained: Futures in Rust for Web Development\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「异步Explained系列」Rust异步如何工作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate #cargo #security #PoC为了在crates.io中保持健康安全的包（crate），需要尽可能多地强制检测任何类型的漏洞。随着软件包之间依赖关系的使用增加，漏洞传播的风险也会增加。在NPM等其他平台上，我们已经看到了很多这样的安全问题。Rust开发人员需要一个工具来回答有关其依赖关系的问题：\n为什么png库使用网络层？\n为什么http库使用文件系统层？\n可能的场景（Possible scenarios）\n读取未授权文件\n请求不可信域名\n执行未授权代码\n盗取信息\n盗用CPU资源\n不安全地执行代码\ncargo-permissions是一个概念证明的库（PoC），基于通过查找代码中的特定路径来检测恶意代码的想法，来保证crate的安全。此项目的主要思想是拥有一组与某些特定标准包列表相关联的权限。另一方面，通过AST分析，检查crate中使用的标准库。例如，如果包A开始使用std::net库，则将获得net权限。所有使用包A作为依赖的crate都会间接获得net权限。遵循此方法，可以构建具有所有获取权限的依赖关系树。通过这组权限可以获取「超出控制范围的crate」尽可能多的信息。\n讨论\ncargo-permissions\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-permissions: 检测篡改依赖的Cargo权限"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#miri #unsafe_ub_check #stack_borrowralfj比较高产，他负责Unsafe下内存模型相关的工作，目的是用miri来检测unsafe中的UB行为。为了达成这个目标，他陆续研究出以下一些借用模型：栈借用模型1：他在去年引入了栈借用模型1用于定义在unsafe内存模型中允许哪种别名。建立合理的别名规则，才能基于miri来检查unsafe下的UB行为。该模型的核心思想是： 对于一个内存位置，逐步建立可跟踪的引用，形成一个栈结构。比如有一个&mut i32，可以对其重新借用获得一个新引用。这个新引用是必须用于此位置的引用，建立在旧引用之上。当新引用过期的时候，旧引用会被激活，就好像是栈结构push和pop。在Safe Rust中，通常有借用检查来保护内存。但是在编写Unsafe代码的时候，借用检查就无法提供帮助了。所以，Rust核心团队就必须要定义一组规则，即使对于Unsafe代码来说也是非常有意义的。栈借用模型2:在上一篇文章中，ralfj又带来了栈借用模型的升级，栈借用2。在栈借用1模型中，有一个概念叫做「frozen」，处于frozen位置的指针，只能读取，不能写入。它允许可变借用也能读取（检查粒度比较粗，把可变指针和共享指针同一化处理）。但是现在该模型被发现一个问题：当使用可变借用的时候，在该模型下可能会把某些未定义行为判断为合法。为了改进这个问题，栈借用模型2将精确跟踪允许访问的原生指针（更细粒度的检查，区分了共享指针和可变指针），而不是「frozen」。检查粒度比模型1更细。栈借用模型2还有很多已知的问题，比如其实并没有真正使用到「栈」，反而更像「树」。但这还不是最后的结论。本文比较长，去原文阅读更多信息。栈借用模型2.1:在今天这篇文章中，ralfj又发现了上次的栈借用2模型存在一些问题：结合内部可变性，行为并不总是他们想要的。在模型2.0中，说到其实没有真正使用「栈结构」是在读取访问的时候，事实上进行「写访问」的时候，还是可以维护一个「栈结构」。对于这段代码，之前是「合法的」，但是用栈模型2.1来处理的话，就是UB。UnsafeCell是一个内部可变性容器，栈借用模型2.1会在栈中维护SharedReadWrite指针。像上面代码第4行，如果在设置了inner_shr之后，又重置了c变量容器内的值，栈借用结构就会改变，最后一行再使用inner_shr指针就可以检测到非法了，它是一个UB。但是在栈借用模式2.0中，最后代码执行的时候，堆栈将改为[c：SharedReadWrite，inner_shr：SharedReadWrite]，从而允许最终访问，这就是问题所在。这样一来，相当于是栈模型1.0和栈模型2.0的结合？还可以在Unsafe代码导读中看到栈借用模型2.1的完整描述。后续：ralfj将会写一篇关于栈借用模型的完整论文，当然，可能还是他自己的博士论文更重要吧，毕业最重要了。\nRead More\nUnsafe代码导读：wip/stacked-borrows\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"### 「官方」Unsafe Rust安全检查：栈借用模型 2.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gfx #Amethyst #RenderRendy是基于gfx-hal的一个渲染引擎，属于Amethyst的项目。提供各种工具，如内存分配，资源管理，渲染图执行等。gfx-hal是99％的Vulkan API。 这就是Rendy存在的原因。而不是解决内存分配和纹理上传等低级任务，用户可以专注于创建令人敬畏的高性能渲染器。Rendyhttps://github.com/amethyst/rendy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rendy 0.2发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#learning #study该库展示了一些棘手的Rust代码示例，这些代码是dtolnay（syn作者，Rust宏的高手）在使用Rust（他自己和其他人）中的各种高级宏库时遇到的问题集合。该项目致力于对Rust宏开发的一个深刻洞察：擅长使用宏的人和宏专家之间的区别主要与他们擅长“宏”的程度是无关的。这也许是学习Rust宏的一个非常好的案例。case-studieshttps://github.com/dtolnay/case-studies"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"case-studies: Rust实例探究"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mozilla #webrenderWebRender使用与游戏相同的基于GPU的加速技术重写了Firefox渲染架构，现在适用于一些选定的Win10设备。WebRender使用的现代架构主要是：\n合成器中页面的表示不再是一组栅格化图层，而是现在的一个未经过图形化的显示列表。\n合成和光栅化步骤已加入到单个GPU驱动的渲染步骤中。\n有关更多详细信息，请参阅Lin Clark的Hacks系列文章。\nRead More\nLin Clark的Hacks系列文章：WebRender如何摆脱jank\nwebrender\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mozilla图像团队发布WebRender MVP"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nightlyRust的臭名昭著的mem::uninitialized方法在今天的每晚构建中已被弃用。它的替代品MaybeUninit已经开始稳定。如果你正在使用前者，则应尽快迁移到使用后者（可能在6周内达到稳定）。因为这是一个break change的修改。这篇文章主要讨论了未初始化内存的性质以及如何在Rust中使用它。并且探讨了mem::uninitialized为什么会被弃用，以及MaybeUninit是什么。\nRead More\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Nightly 1.36.0中已经弃用了mem::uninitialized"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ffi #C #Polyglot长文预警！作者在写自己的库bitvec的时候，开始考虑，如何将其用于其他语言，比如他如果在一个C++程序中想用bitvec怎么办？所以他开始设计一套针对为Rust crate编写FFI的惯用法。这篇文章记录了他从API设计到实现的一些经验，值得一读。\nRead More\nbitvec\nbitvec ffi branch\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-22 14:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"多语言混合项目的一些经验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asyncAdGear公司（一家实时广告平台）开源的库。这个库采用了与Rust中大多数其他异步IO库完全不同的方法：它实际上受到了Pony编程语言的启发。 因此，它不使用Futures，它不使用async/await，它只提供简单的trait。比如，你想要实现HTTP server，只需要实现TcpListenNotify trait。该trait包含了listening、connected等方法。然后按正常的方式使用就可以，最终使用该库提供的event loop中执行：event_loop.run()之前日报里介绍过Pony的并发特点：引用能力（Reference Capabilities），Pony 语言中每种变量的类型都包含了有关如何在 actor 之间分享数据的信息。有点像Rust的借用检查器，同样保证数据安全性。所以Pony的异步是actor模型，和actix差不多。坊间有这样的说法，「Pony，当Rust遇上Erlang」。所以，mini-aio也提供Handler trait，该trait允许接收从代码任何地方发来的消息并处理。但要注意，此库处于alpha阶段。该库作者也写了不少Rust项目，可以看看他的个人仓库。\nRead More\n一个用mini-aio实现的FTP服务器：ftp-server-mini-aio\nmini-rs\n作者antoyo GitHub仓库\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-21 12:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mini-aio: 新的异步IO库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#coreutils #learning该项目无意与GNU的coreutils 100％兼容，如Uutils的coreutils。瞄准最小但完整的实用程序集，只添加实用程序的几个实现和真正有用的函数之间通用的功能。目前该项目在寻求Review、贡献者、和建议。想要学习Rust的朋友，也可以从此项目入手。coreutilshttps://github.com/GrayJack/coreutils"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-21 12:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"coreutils: 为Unix和类Unix系统编写的Rust核心工具集"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargoCargo无法处理启用了不同feature的不同类型的依赖项，这对于no_std项目来说是一个大问题。所以有人写了一个cargo-5730库，来帮助解决此问题。\n#5730\ncargo-5730\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-21 12:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo 5730号issues的解决办法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gbdt #mlgbdt-rs提供训练和推理功能。 它可以使用xgboost训练的模型来完成推理任务。gbdt-rs论文已被IEEE S＆P'19接受！\ngbdt-rs\n相关论文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-21 12:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学术」gbdt-rs: 用纯Safe Rust编写的梯度提升决策树库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pythonpyo3-filehttps://github.com/omerbenamram/pyo3-file/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-21 12:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pyo3-file: pyo3的辅助库，方便处理类Python文件的对象"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actixweb-v1.0.0-rchttps://github.com/actix/actix-web/tree/web-v1.0.0-rc\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-21 12:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"actix-web已经发布了1.0 rc版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#scala对Rust感兴趣的Scala开发人员可以来看看，对比Scala和Rust的语法和思想。Read Morehttp://blog.madhukaraphatak.com/rust-scala-part-5/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」Scala开发人员的Rust之旅 Part 5: 领域模型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embedederkos是日本的一名Rust开发者编写的嵌入式操作系统原型项目，目标架构是Arm Cortex-M系列。他也写了一篇文章介绍该项目。感兴趣的可以看看。\nerkos\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」erkos: 用Rust编写嵌入式操作系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tips当应用程序需要迭代来自不同源的大量数组，那么具有C/C++背景的人可能会将所有数组复制到单个Vec中并迭代此Vec。在为连续Vec缓冲区分配堆内存方面，此策略将导致高成本。相反，将数据保留在原来的位置，使用Chain将它们链在一起去迭代会省不少成本。\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「小技巧」操作数组应该使用Chain而非Concat"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cross_compile该文作者的团队几年前用Rust重写了Python的特定后端服务，取得了巨大的成功。 现在，为了便于开发和测试，正在探索将部分C/C++代码库移动到Rust的想法。作为第一步尝试，他们先将Rust集成到现有代码中，而不是一次性重写所有项目。所以他们做了一系列实验，在C/C++中调用Rust。Read Morehttps://medium.com/csis-techblog/cross-compiling-and-statically-linking-against-rust-libraries-2c02ee2c01af"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"交叉编译和静态链接Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这位博主打算写一系列主题是Rust for OOP的文章，主要是针对有一定OOP语言开发经验的人来学习。这是第一篇，介绍了Cargo和crate、模块等知识。初学者可以看看。Read Morehttps://oribenshir.github.io/afternoon_rusting/blog/project-management"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」Rust for OOP系列 ：项目管理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#webrender今年5月21日，5％的稳定用户将开始启用WebRender。Read Morehttps://www.reddit.com/r/rust/comments/bqmyzm/after_3_years_and_8_months_of_work_webrender_will/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"经过3年零8个月的工作，WebRender将向稳定的用户发货！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustrust-lang 官网要移出SkeletonRead Morehttps://github.com/rust-lang/www.rust-lang.org/issues/780"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个Rust的贡献机会"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#frontend仿 elm 的风格做的。其实，也是基于 yew 之上的封装。目标是易用，好用。作者：ivanceras，是一位有趣的开发者。svgbob，spongedown等，都是他的作品。https://github.com/ivanceras"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sauron ： Web 前端开发框架发布0.7 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#course\nRead More\n视频\nSlides\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"俄罗斯的一家计算机夜校的Rust课程回顾记录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#event记录了从2018年12月到未来12月的一些活动。Read Morehttps://blog.rust-lang.org/2019/05/20/The-2019-Rust-Event-Lineup.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」Rust 2019年活动记录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Story该文作者在一年半之前加入了Avast公司，作者被雇佣的原因是因为他之前有「更大的嵌入式」编程经验，但他不喜欢C++，他为其他人员准备了Rust课程和研讨会，希望有更多的人可以了解Rust，作者也可以用Rust写项目。当时他进去的时候，没有任何一个人使用Rust。大多数Avast（该公司30年之久）后端软件都是用Scala编写的。还有一些Python和Perl，但主要是Scala。该文章记录了他们引入Rust的经历。长文预警！Read Morehttps://vorner.github.io/2019/05/19/rust-in-avast.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust在Avast公司的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tool一个非常简单的socket编程案例onlinehttps://github.com/jesusprubio/online"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"online： Rust编写的检查网络是否链接的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clippy作者在试用Clippy之后，把Clippy的输出结果分为四类：\n发现的实际错误\n有用的建议\n无用的建议\n适得其反的建议\n并且针对每一类建议都举了例子，感兴趣可以看看原文。Read Morehttps://codecs.multimedia.cx/2019/05/nihav-rust-clippy-experience/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-20 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-clippy 经验谈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于 crossterm 实现跨平台的终端输出。现在也可以输出成js，显示在web上。来看看效果。更炫酷的一个效果：demohttps://ecumene.xyz/sloth-demo/Repohttps://github.com/ecumene/rust-sloth/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sloth - 纯rust写的3D光栅化工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"练手项目Repohttps://github.com/dsouzadyn/cerebrallib"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cerebrallib - 使用Rust写的brainfuck语言的虚拟机库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是给不列颠哥伦比亚大学（在加拿大）的学生开的讲座。分别讲了 clang, swiftc, rustc, 和 gcc 等。文章有意思。Slide 在这里。http://venge.net/graydon/talks/CompilerTalk-2019.pdfRepohttps://thenewstack.io/rust-creator-graydon-hoare-recounts-the-history-of-compilers/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 最开始的作者 Graydon Hoare 在一个讲座中叙述了编译器的历史"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pushrod 是基于 piston_windows 的一个GUI库。这次发布增加了图片按钮等。看一下效果图Repohttps://github.com/KenSuenobu/rust-pushrod/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pushrod 0.2.11 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章在这里，不复杂。http://quickhack.net/nom/blog/2019-05-14-build-rust-environment-for-esp32.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【嵌入式】为ESP32构建Rust开发环境"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在单元测试/集成测试中，你经常会需要插入一些数据到数据库中。而 factory_bot 就是这样一种库，diesel-factories  是它基于 diesel 的实现。https://github.com/thoughtbot/factory_bot这个库像下面一样使用。Repohttps://github.com/davidpdrsn/diesel-factories"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"diesel-factories - 为测试要构建 factory_bot 的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 安全代码工作组https://github.com/rust-secure-code/wgcargo-reprohttps://github.com/rust-secure-code/cargo-reprocargo-sandboxhttps://github.com/rust-secure-code/cargo-sandbox"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"安全代码工作组正在为创建可重现的构建和构建时间沙盒化而努力"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"命令行自动补全可深可浅，深的可以对子命令，参数项等，都自动补全。文章可以借鉴。Read Morehttps://www.joshmcguigan.com/blog/shell-completions-pure-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何使用纯Rust实现命令行自动补全"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"内存调优工具，主要用来分析内存泄漏什么的。当然，还有很多其它更详细的特性。我们来先睹为快。Repohttps://github.com/nokia/memory-profiler\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-19 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"memory-profiler - Nokia 用 Rust 写了一个 Linux 内存调优工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Low&Slow 是一种DDos攻击方法，利用产生大量的慢请求来保持住对服务器资源的消耗，从而影响正常请求的访问。finshir 就是这样一种用Rust写的工具。有两点高光：https://www.cloudflare.com/learning/ddos/ddos-low-and-slow-attack/Repohttps://github.com/Gymmasssorla/finshir有下列特點 coroutines 驅動，底層、慢速、可自定義Read morehttps://www.reddit.com/r/rust/comments/bpor6b/finshir_a_coroutinesdriven_and_fully_customizable/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"finshir - 一种 Low&Slow 流量产生器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"利用下圖的方式加速Cargo在内部构建了一个DAG来表示crate之间的依赖关系，通常需要等待crate依赖关系构建完成才会启动编译，但是现在对Cargo进行了优化，现在只要得到编译器为了开始下一次编译而生成的“元数据”即可开始编译，这就是所谓的「流水线（pipeline，就像工厂流水线一样，节省加工时间）」加速编译技术。\nReddit 讨论\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust 1.36.0 加入了Cargo流水線加速編譯技術"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cloudflare出品serde-wasm-bindgenhttps://github.com/cloudflare/serde-wasm-bindgen"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"serde-wasm-bindgen：让wasm-bindgen支持serde"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"歡迎大家講一下自己的心得Read morehttps://www.reddit.com/r/rust/comments/bpukn7/submit_your_experience_for_newly_await_syntax/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"貢獻你的新版 await 使用經驗"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/bpvd5p/rust_creator_graydon_hoare_recounts_the_history/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust製作者 Graydon Hoare 帶你重溫編譯器的歷史"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者舉例現在可以使用 #[momo] 讓轉型更簡單，編譯更快Read morehttps://www.reddit.com/r/rust/comments/bpxg7w/momo_get_back_some_compile_time_from/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Monomorphization節省一些編譯時間"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"discord過去一直使用erlang來做為主要服務的程式語言現在他們使用了rustler讓rust為 elixir 加速。去年他们的业务有了一项新的变化，就是更新会员列表的方式：只发送更新的部分，而不是给每个会员发送更新。这个变化给服务器端造成了一个大问题：我们需要一个能够容纳数十万个条目的数据结构，以特定的方式排序，可以接受和处理大量的变动，并且可以报告添加和删除事物的位置索引。Elixir是一种函数式语言;它的数据结构是不可变的。这非常适合在编写elixir对代码进行正确性论证以及并可以享受的大量并发性。不可变数据结构的双刃剑是通过采用现有数据结构和操作以及创建全新数据结构来对变动建模。这意味着当有人加入服务器（内部称为公会）并拥有100,000名成员的成员列表时，他们必须构建一个包含100,001名成员的新列表。 BEAM VM非常快，并且每天都在变得更快。它试图在可能的情况下利用持久性数据结构，但在我们运营的规模上，这些大型列表无法足够快地更新。因此团队在erlang和elixir提供的各种高性能数据结构中寻找解决办法，试过MapSet、List、OrderedSet到他们自己实现的SortedSet，终于找到了一个解决方案，但是在超过250,000名成员的公会时性能达到了上限。于是Discord团队准备尝试使用Rust来加速。这不是Discord团队第一次使用Rust了，在他们的游戏商城里也大量用到了Rust，但Discord的核心服务是Elixir，主要是因为Elixir比较适合他们的场景。为了为Elixir加速，他们预留了一周时间使用Rustler（提供了安全的NIF绑定，方便为elixir编写rust扩展）进行概念验证，最终发现，Rust支持的NIF提供了巨大的性能优势，而无需牺牲易用性或内存（可以支持100w名成员）。从此以后，Discord团队便快乐地享受着Rust带给他们的「快感」。Discord也开源了他们的SortedSet库，点击原文看更多详细。\nReddit 讨论\nRead More\nrustler\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 來加速 Elixir 服務1100萬用戶"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"关于JavaScript二进制AST随着网站变得越来越复杂，JavaScript源代码的数量不断增加。依赖于大型JavaScript代码库会导致网站启动缓慢 - 通常速度慢得令人无法接受。这是因为存在两个瓶颈：解析和字节码编译JavaScript。不幸的是，浏览器几乎达到了两种操作的效率峰值。我们（Mozilla，Bloomberg，Facebook，CloudFlare）目前正致力于针对JavaScript的特定领域编码，称为“BinAST”（“JavaScript二进制AST”的缩写）。 JavaScript二进制AST旨在打破瓶颈。当前的高级原型已经在所有最常见的框架上显示了JS解析改进了30％-50％，只需更改格式，我们相信我们可以进一步提高这一改进。编码可以构建为webdev工具链的一部分，或者由代理或CDN注入，因此可以在不更改原始网站的情况下自动提高最终用户的性能。此编码目前在JavaScript TC39标准化过程中。它可以与现有的压缩技术（gzip，brotli等）一起使用，目前有cloudflare的一个Rust实现：binjs-ref。\nbinjs-ref\nRead More\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-18 16:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用BinaryAST快速加载脚本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"官方說明文件https://docs.rs/mio-extras/2.0.5/mio_extras/timer/index.html沒有範例程式碼，其實很難了解怎麼用回覆中有人給出了答案Read morehttps://www.reddit.com/r/rust/comments/bpbrux/could_someone_explain_to_me_how_mio_asynchronous/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-17 19:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」mio异步計時器如何使用？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"WASM 運行在kernel 會得到性能跟靈活性，作者覺得是一個很有前景的應用，我個人覺得WASM之後應該會加上一些IO函數變成一個跨平台的新標準。（文章里主要是说wasmer这个WASM运行时）中文介紹Read morehttps://mp.weixin.qq.com/s/F6yAE3-l_LI8l1ls5yLHqw"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-17 19:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「比原生更快：在 Linux 内核中运行 WebAssembly」"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前还只支持windows和st-link，长远目标是代替OpenOCD。目前比竞品好的地方是可以同时烧两个芯片，这样做双机通讯测试就不用插拔dongle了来自 @洛佳Read morehttps://github.com/luojia65/nihao"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-17 19:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个通用型嵌入式芯片烧录软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"官方核心团队无船同志的新博文，探讨了「零成本抽象」。零成本抽象在C++跟Rust是一個很重要的概念簡單來說就是：不希望有很大很重的runtime，並且可以在編譯時被優化。作者覺得 rust 有幾個很棒的 零成本抽象保證内存的正確使用可以輕鬆的串接 map, filter 等函數做處理當前的await語法雖然還沒有確定，但使用pinning 做到零成本抽象是確定的由於rust的語法複雜性，有很多實作會需要Unsafe的底層實作這些Unsafe函數實作了零成本抽象的底層讓我們在上層能安全的使用這些模块另外无船同志还表示：trait对象目前不是零成本抽象，他想花点时间（至少需要18个月）去研究这个问题，然而总是有更优先的事情。\nReddit 讨论\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-17 19:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"零成本抽象"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"wasm 已經可以使用 async了，快看看怎麼用吧\nReddit讨论\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-17 19:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasm-bindgen v0.2.44 开始支持futures 0.3和async/await"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"透過google map得到高度圖，再轉換成3D模形裡面影片是youtubeRead morehttps://www.reddit.com/r/rust/comments/bpkoyz/terraform_generate_3d_models_of_geographic_terrain/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-17 19:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Terraform 產生3D地形"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust从2015年5月15日Rust 1.0版发布至今，取得了如下成绩：\n连续四年StackOverflow的“最受喜爱的编程语言” （日报君感慨：近一年半看了很多社区内的各种动态，大家形容Rust用的最多的一个词是：Amazing，如果非要翻译成中文，我觉得「赞叹」比较好。）\n稳定了嵌入式Rust\nrustc成为第一个专注于支持WASM的编译器\nRust 2018 edition发布\nCrates.io通过了10亿次下载，拥有超过25,000个crate\n现在全世界有超过100个聚会，分布在42个国家\n6场新的大会在世界各地涌现（RustRush，RustCon Asia，Oxidize，Rust LATAM，Colorado Gold Rust，RustLab Italy）\n这个清单如果继续写下去会很长，Rust已经在众多领域陆续开花了。Rust社区感谢有你！Read Morehttps://blog.rust-lang.org/2019/05/15/4-Years-Of-Rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官宣」Rust四周年"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust社区@Mike写的一篇文章，侧重分享了为什么Rust适合区块链开发。Read Morehttps://mp.weixin.qq.com/s/DjQlyQeushrXM7QNxbY-cA"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么越来越多的知名项目用Rust来开发？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asyncRead Morehttps://zhuanlan.zhihu.com/p/66028983"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「中文」Rust Async: 标准库futures api解析"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#learning这位博主打算写一系列主题是Rust for OOP的文章，主要是针对有一定OOP语言开发经验的人来学习。可以先关注下。Read Morehttps://oribenshir.github.io/afternoon_rusting/blog/rust-for-oop"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」Rust for OOP系列介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#CPP这篇文章介绍了一些可以帮助自动生成C/C++ API的优秀工具。比如：\nbindgen， 可以根据给定的头文件自动创建Rust绑定代码。对C语言比较友好，但是对C++来说，用途有限。因为C++的继承处理比较麻烦。\ncbindgen，可以方便地为Rust项目生成C API。它还支持以C++风格输出数据类型和模板等。\ncpp，这是一个Rust crate，可以帮忙编写C++ API。它提供了一个cpp!宏，可以在其中嵌入c++代码。它可以方便和cbindgen搭配使用。\n作者还总结了一些在Rust中创建C/C++API的准则：核心逻辑和FFI层之间应该明确分离，最好把FFI代码置于一个单独的crate中，这样做的好处是设计Rust API不会受到FFI的太多影响。Read Morehttps://karroffel.gitlab.io/post/2019-05-15-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中创建C/C++ API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#dsl #parsing可用于语言设计，自定义格式和数据驱动开发。该库提供了一种叫做「meta语言」的规则，用来告诉程序如何阅读要解析的文档。这些文档都是人类可读格式的。最小化示例：输出：\"james\":truemetahttps://github.com/pistondevelopers/meta"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"meta: 用于解析人类可读性文本的DSL解析库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rOSRust比较适合机器人领域rplidar.rshttps://github.com/cnwzhjs/rplidar.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rplidar.rs : 思岚科技RPLIDAR产品的Rust SDK"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#staticFileseehttps://github.com/wyhaya/see\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-16 20:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"see: 静态文件服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不知不觉，Rust1.0发布已经四周年了。 Rust 1.0是2015年5月15号发布。所以，四年了，大家学会Rust了吗？Rust四周年Rust完全态所以我说，Rust还有两年就火了。。。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust四周年啦"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tipsRead Morehttp://blog.keiruaprod.fr/2019/05/11/optional-parameters-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「小技巧」利用Option<T>和From实现可选参数"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GNOMEgir是一个用于为基于glib的库生成Rust绑定和用户API的工具，可以生成sys级的crate和安全API。Read Morehttps://gtk-rs.org/docs-src/tutorial/gir_tutorial"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用gir crate生成GNOME库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#IDE本文是网络里的各种意见汇总，尝试阐明利弊，供大家参考：\nIntelliJ IDEA 中使用IntelliJ Rust插件。褒贬各一。\nCLion中使用Rust插件。 官方评论：可能是最接近「Rust专用IDE」的IDE。\nVSCode中使用Rust插件。好评比例比较多。\n(Neo)vim使用Rust插件。喜欢VIM的人用吧，也够用了。\nSublime。 抱怨比例比较多。\nAtom。没啥评论。\n你推荐哪个？Read Morehttps://medium.com/cloud-native-the-gathering/whats-the-best-ide-for-developing-in-rust-5087d46006f5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"开发Rust的最佳IDE是什么？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust该版本属于紧急发布，主要是修复CVE-2019-12083的安全问题：Error类型提供了一个向下转换函数(downcast_ref)，可以将指定的类型转换为Error::type_id对应的类型。 问题是，如果你自己的类型实现Error，并让type_id返回与实际类型不同的东西。然后，当有人在你的类型上调用downcast时，它将完全通过安全代码转换为你想要的任何东西。在Safe Rust中出现内存不安全的问题是无法容忍的。新版本的发布主要是将已经稳定的Error::type_id紧急改为了Unstable。后续再慢慢考虑Error::type_id的重新稳定化方案。\nCVE-2019-12083\nRead More\n安全问题演示demo：Playground\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.34.2发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#video本演讲视频将解释Linux for Chromebooks的架构以及使其易于使用的设计决策，包括使用Rust来构建安全的Linux沙箱环境。Reddit 讨论https://www.reddit.com/r/rust/comments/bokgxr/chromeos_uses_rust_to_build_a_secure_linux/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」ChromeOS使用Rust为在Chromebook上运行的Linux应用构建安全的Linux环境"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#intel #VMMintel又一个开源项目，目前还是实验性项目，基于rust-vmm实现。cloud-hypervisorhttps://github.com/intel/cloud-hypervisor"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cloud-hypervisor： 一个在KVM上运行的开源虚拟机监视器（VMM）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#k8s以便用于GKE（Google）和EKS（Amazon）kubernetes-rusthttps://github.com/ynqa/kubernetes-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kubernetes-rust: Kubernetes的Rust客户端最近又有了更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#git从gitignore.io中提取.gitignore模板，提供cli命令方便你管理。blisshttps://github.com/ajmwagar/bliss"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bliss: 帮助你管理.gitignore"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#api #web基于actix-web 1.0，开发Restful API。\nRead More\n代码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Web开发实践"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#debug这篇文章是关于编译Rust代码，可执行文件，相应调试符号和核心文件的处理。 它强调了调试符号在调试中的重要性，以及如何在发送给客户之前拆分二进制文件.Read Morehttps://frehberg.com/2019/05/rust-handling-executables-and-their-debug-symbols/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"处理可执行文件及其调试符号"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#demoscenedemoscene是一个国际计算机艺术亚文化，专注于制作演示：自成一体，有时甚至是极小的计算机程序，产生视听演示。 演示的目的是展示编程，视觉艺术和音乐技巧。 演示和其他demoscene制作在称为demoparties的节日上分享，由参加者投票并在线发布。引用一段文章里提到的谈话：It's a pretty good language. Better than C++, worse than C... Fucking awful learning curve, at least for me, but I'm having tons of fun with it, it kind of forces you to write better code, instead of crappy single use code.看来Rust很受这群极客的喜爱。Read Morehttp://www.pouet.net/topic.php?which=11664"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust在demoscene圈子中开始流行了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GEOS该库是GEOS（C库）的Rust绑定，新版本是线程安全的。GEOS是一个集合形状的拓扑关系操作实用库（可能这么说不太准确），简单得说，就是判断两个几何形状之间关系和对两个几何形状进行操作以形成新的几何形状的库。目前被各类开源空间信息软件项目广泛应用。Read Morehttps://blog.guillaume-gomez.fr/articles/2019-05-14+New+geos+release"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"goes 5.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#OS旨在探索parakernel OS架构。对于希望最大限度利用硬件的服务器应用程序而言，操作系统越来越成为瓶颈。当I/O明显慢于CPU时，设计了许多传统的内核接口（例如POSIX）。但是，今天I/O变得越来越快，但单线程CPU性能却停滞不前。例如，40 GbE NIC可以比CPU访问其最后一级缓存（LLC）更快地接收缓存行大小的数据包，这使得操作系统跟上来自网络的数据包变得棘手。类似地，非易失性存储器（NVM）访问速度越来越接近DRAM速度，这对存储器的OS抽象提出了挑战。为解决此操作系统瓶颈，服务器应用程序越来越多地采用内核旁路技术。例如，Seastar框架是在用户空间中实现的操作系统，它实现了自己的CPU和I/O调度程序，并尽可能地绕过Linux内核。 Parakernel是一种OS体系结构，它消除了许多操作系统抽象（类似于exokernel）并分区硬件资源（类似于多内核），以便通过增加应用程序级并行性和可预测的尾部延迟来促进高性能服务器应用程序。manticorehttps://github.com/manticoreos/manticore"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Manticore: 一个用Rust编写的研究性操作系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rssrsshttps://github.com/rust-syndication/rss"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rss: 用来读写RSS格式的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#couchbasecouchbase-rshttps://github.com/couchbaselabs/couchbase-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"couchbase-rs: Couchbase官方的Rust客户端发布了1.0 alpha版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GitHub期待后续支持RustRead Morehttps://zhuanlan.zhihu.com/p/65400275\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-15 15:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"完全免费！GitHub发布软件包管理服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Snips（一家做音频识别的创业公司） 出品。在神经网络领域，现在基本已经被 TensorFlow 和 PyTorch 给占了。但是对于移动设备或IoT这些性能受限的设备，还有很多空间可以尝试。TensorFlow组推出了 TensorFlow Lite，微软的 ONNX 看上去也很有前景。一些硬件厂商也推出了他们自己的方案 Android NN API, ARM NN SDK ， Apple BNNS 等等。但是它们都只能满足一些特定领域的需求。https://snips.ai/于是就有了 tract。在各个平台的性能评测，性能是 TensorFlow Lite 1.2 倍到 4.2 倍。看得人有点心动。Read MoreRepohttps://medium.com/snips-ai/snips-open-sources-tract-cdc50f437ef2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tract - 一个神经网络训练库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Deno 是一个 JavaScript/TypeScript 运行时，作者其实就是 Node.js 作者。他觉得 nodejs 生态已经没办法再提高质量了，就创建了这个新项目 deno。下面是 Rafał Pocztarski 的视频分享。Videohttps://www.reddit.com/r/rust/comments/bo0zk0/rafa%C5%82_pocztarski_from_nodejs_to_deno/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个视频，从 Node.js 到 Deno(v8+Rust)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是官方的 Rust SDK。Couchbase 是一个商业的 NOSQL 数据库。Repohttps://github.com/couchbaselabs/couchbase-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Couchbase Rust SDK 1.0 alpha.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章作者非常喜欢 Rust，分析了一下目前 Rust 中的机器学习生态的情况。比如：\nconst-generics\ngeneric-array\npacked_simd\nRustaCUDA\nrsmpi\nrayon\nndarray\nndarray-linalg\nndarray-stats\n最后，作者打赌 Rust 在 ML/DL 领域能大展宏图。进一步的讨论可以进 rust-ml 进行。https://github.com/rust-mlRead Morehttps://ehsanmkermani.com/2019/05/13/state-of-machine-learning-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一篇博文：Rust语言目前在机器学习领域的状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目的是研究 parakernel。http://penberg.org/parakernel-hotos19.pdfRepohttps://github.com/manticoreos/manticore"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"manticore - 一个用于研究目的的操作系统，Rust写了其中一部分"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"job linkhttps://www.linkedin.com/jobs/cap/view/1162802661用 Rust 开发机器人？好诱惑。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 职位：东京，机器人创业公司"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以在线玩儿：Online Play。https://ozkriff.itch.io/zemeroth这篇文章详细讲述了这个游戏的技术选型发展过程。目前，它综合使用了：ggez, WASM, itch.io, visuals, AI, campaign, tests 等技术。文章写得非常好，强烈推荐阅读。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"zemeroth - 一个六边形回合制游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"问题出在手动实现 Error::type_id 和 Error::downcast 家族函数的交互上。即将马上发布 1.34.2 进行修补。Read Morehttps://blog.rust-lang.org/2019/05/13/Security-advisory.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.34.1 标准库中发现一个安全漏洞"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要讲解了如何通过RESP实现一个redis client，并用rust实现了一个简单的demo，目前只实现了set和get命令，可以很方便的添加命令，项目地址如下redis-simple-rs欢迎大家完善。@readlnh 投稿Repohttps://github.com/readlnh/redis-simple-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[教程]如何用rust为redis写一个client"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Prhttps://github.com/rust-lang/cargo/pull/6934这个的意思是，以后可以指示 cargo 去本地找依赖包缓存。而不是每次都检查网络了。非常实用的进展。等等稳定版的发布，到时有使用说明。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"稳定cargo 离线模式 pr合并了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"听起来好像很厉害？Repohttps://github.com/abbychau/multiqueue"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"multiqueue2 - 支持广播能力的 mpmc 管道"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"link 在这里讨论的，现在我来整理一下，下面的都是零开销的抽象：https://www.reddit.com/r/rust/comments/bo13qq/what_specifically_are_all_the_zerocost/\ntuple\ngererics\ntraits\nOption - 编译器最后（视情况）会把这一层包装优化掉\nVec\nBox\nRange\nfor-loops\nmod\nzero-sized types (C++ can't do that because every value needs to have an address)\nenum discriminant optimizations which I hope are done for Option and friends (storing None as 0)\n链式迭代器可以产生更快的代码，有时比for循环还快\nawait和Futures的实现估计也会比C++的实现消耗更少的内存分配，await不是零开销的，但是会保持很少\n宏、构建脚本和常量初始化可以输出结构化的值，也是零开销\n...\n不是零开销的部分：\n&dyn Trait\n..\n有人总结得好：zero-cost does not mean no cost, it means no extra cost over manually writting code that does not use the abstraction, but emulates instead.零开销不是指没有开销，而是指与不用（Rust给出的）抽象而用手动直接模拟实现相比，没有额外的开销。In general: when Rust has a feature F which implements a programming aspect A, and your program requires implementing aspect A, just picking feature F is typically going to be the right choice; reimplementing A yourself (either in Rust or in C or ...) will not yield better performance通常来讲：当 Rust 有一个特性 F，它实现了一个编程的方面（解决了那样一种问题） A，现在你的程序要实现方面 A（解决那样一种问题），一般来说，只需要直接拿起 F 使用就对了，你手动重新实现（用 Rust 或 C 或其它语言），并不能带来更好的性能。C++ implementations obey the zero-overhead principle: What you don't use, you don't pay for [Stroustrup, 1994]. And further: What you do use, you couldn't hand code any better.-- StroustrupC++的实现遵从零开销原则：你用不到的东西，不会为其付出代价。更进一步：对于你用到的东西，你没法再做得更好。-- StroustrupIn the case of Rust, this applies even more since most of the optimization is offloaded to the compiler. In other words, in practice it is far easier to write slow C++ than slow Rust. In the case you are describing, tuples are slower because they are implemented above the compiler level and thus optimizations are left to the programmer. In Rust on the other hand, tuples are first-class citizens and they are optimized away by the compiler automatically.对于Rust的情况来说，编译器会承担大部分的优化工作，所以在这方面（相对于C++来说）走得更远。换句话说，实践中往往更容易写出慢的C++代码，而不是慢的Rust代码。对于你描述的情况，元组慢是因为它们实现在编译器的上面一层，因此优化工作留给了程序员来做。而在Rust中，元组是一等公民，它们会被编译器自动优"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-14 15:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个很有价值的问题：Rust中哪些特性是零开销抽象的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang_trendRead Morehttps://tools.wmflabs.org/pageviews/?project=en.wikipedia.org&platform=all-access&agent=user&start=2015-07&end=2019-04&pages=Rust_(programming_language)%7CPython%7CC%2B%2B%7CC%2B%2B11%7CC%2B%2B20%7CC"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个查看编程语言发展趋势的方法：Wikipedia Pageviews Analysis"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#videoRead Morehttps://www.youtube.com/watch?v=A3AdN7U24iU"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」Rust：后40年的语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ggez #game\n视频\nggezFlappyCrabby\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ggez制作的小游戏：ggezFlappyCrabby"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang（可能是个人玩票的语言）特点是使用了GCCJIT的静态语言，也就是libgccjit库，它提供了C接口，社区里也有它的Rust绑定库。Jazzhttps://github.com/jazz-lang/Jazz"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Jazz：又一个用Rust实现的编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#await有人做了个网页，可以实时关注async/await的动态，特别是await。Read Morehttps://await.pietroalbini.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Are we await!(yet)?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#google这个项目的gen目录下包含了很多相关组件google-apis-rshttps://github.com/Byron/google-apis-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"google-apis-rs: 适用于所有Google API的绑定和CLI生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pegcel #syn可以创建syn风格的语法树，配合syn库使用。pegcelhttps://github.com/CAD97/pegcel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pegcel: syn风格的PEG解析器生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#education来自斯坦福大学CS242课程的设计者Will Crichton发表的关于将Rust和WebAssembly应用于编程教育的论文。国内外高等学府，比如清华大学、斯坦福都在陆续开始将Rust应用于学生的编程教育中，国内最早教授Rust的大学没记错的话，还有新兴的上海科技大学。为什么呢？因为他们看到了Rust的教育价值。\nCS242\n论文pdf\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「论文」从理论到系统：编程语言教育的基础方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#archivesearhttps://github.com/iqlusioninc/sear"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sear：可提供加密和签名的tar-like打包工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gfx适用于Rust社区的通用图形和计算需求，未来还会支持wasm和emscripten。wgpu是WebGPU的Rust实现，基于gfx-hal。\nwgpu-rs\nwgpu\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wgpu-rs: wgpu的进一步封装"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang_trendRead Morehttps://tools.wmflabs.org/pageviews/?project=en.wikipedia.org&platform=all-access&agent=user&start=2015-07&end=2019-04&pages=Rust_(programming_language)%7CPython%7CC%2B%2B%7CC%2B%2B11%7CC%2B%2B20%7CC"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个查看编程语言发展趋势的方法：Wikipedia Pageviews Analysis"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#videoRead Morehttps://www.youtube.com/watch?v=A3AdN7U24iU"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」Rust：后40年的语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ggez #game\n视频\nggezFlappyCrabby\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ggez制作的小游戏：ggezFlappyCrabby"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang（可能是个人玩票的语言）特点是使用了GCCJIT的静态语言，也就是libgccjit库，它提供了C接口，社区里也有它的Rust绑定库。Jazzhttps://github.com/jazz-lang/Jazz"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Jazz：又一个用Rust实现的编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#await有人做了个网页，可以实时关注async/await的动态，特别是await。Read Morehttps://await.pietroalbini.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Are we await!(yet)?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#google这个项目的gen目录下包含了很多相关组件google-apis-rshttps://github.com/Byron/google-apis-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"google-apis-rs: 适用于所有Google API的绑定和CLI生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pegcel #syn可以创建syn风格的语法树，配合syn库使用。pegcelhttps://github.com/CAD97/pegcel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pegcel: syn风格的PEG解析器生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#education来自斯坦福大学CS242课程的设计者Will Crichton发表的关于将Rust和WebAssembly应用于编程教育的论文。国内外高等学府，比如清华大学、斯坦福都在陆续开始将Rust应用于学生的编程教育中，国内最早教授Rust的大学没记错的话，还有新兴的上海科技大学。为什么呢？因为他们看到了Rust的教育价值。\nCS242\n论文pdf\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「论文」从理论到系统：编程语言教育的基础方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#archivesearhttps://github.com/iqlusioninc/sear"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sear：可提供加密和签名的tar-like打包工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gfx适用于Rust社区的通用图形和计算需求，未来还会支持wasm和emscripten。wgpu是WebGPU的Rust实现，基于gfx-hal。\nwgpu-rs\nwgpu\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-13 14:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wgpu-rs: wgpu的进一步封装"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate #api_guidelines今天有个Reddit讨论贴，有人指出每个发布到crates.io的crate都应该加上Readme说明和Repository地址（GitHub、GitLab等），以方便用户。评论中有人提到Rust官方出品的「Rust API 指南(api-guidelines)」， Rust crate作者应该将它们视为开发Rust库时的一组重要参考因素（非必须遵守）。该指南还在完善中。该指南包含两部分：\n\nChecklist，用于发布crate时快速检查\n\n\n详细说明，对checklist中的内容做详细的说明\n\n\nRead More\n\n\napi-guidelines\n\nChecklist，用于发布crate时快速检查详细说明，对checklist中的内容做详细的说明Read Morehttps://www.reddit.com/r/rust/comments/bngvml/psa_please_put_readme_and_repository_links_in/api-guidelineshttps://rust-lang-nursery.github.io/api-guidelines/about.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方文档」Rust API 指南(api-guidelines)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#video #tcp我们的老朋友Jon Gjengset，他的视频通常都是5小时左右。Read Morehttps://www.youtube.com/watch?v=8GE6ltLRJA4"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」用Rust实现TCP Part3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ruby将添加一个新的构建器CargoBuilder，它将检测Cargo.toml文件并使用Cargo构建gem原生扩展。这减轻了为Ruby用户开发和发布Rust扩展的负担。现在希望找寻贡献者来落实这项计划。\nrubygems/issues/2726\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RubyGems将支持带有Rust内置扩展的gem"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#http该教程没有使用http等基础crate，而是从零开始构建http 1.0服务，可供学习使用。Read Morehttp://concisecoder.io/2019/05/11/creating-a-static-http-server-with-rust-part-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」使用Rust创建静态HTTP服务 Part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#howdoi #cliHowdoi是Go实现的通过命令行获取即时的编程问题解答的工具，hors是它的Rust实现版本。horshttps://github.com/WindSoilder/hors"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hors: howdoi的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ONNX #TensorFlow #deeplearntract是Snips.ai公司嵌入式自然语言语音处理系统SnipFlow中的重要组件。该公司两年前在TensorFlow Lite出现之前打算将TensorFlow嵌入到库中方便他们执行模型，但是后来因为TensorFlow太过庞大复杂，不得不更改了计划。新的计划就是使用Rust作为SnipFlow的主要语言，两年过去了，团队已经非常享受现代化软件环境带来的舒适感，而且比TensorFlow更容易交叉编译。(其实tract上个月就开源了，只是这篇文章最近几天才发布)\nRead More\ntract\nsnips.ai\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Snip开源神经网络推理引擎Tract"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pythonrust-py-comphttps://github.com/reuvenpo/rust-py-comp/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-py-comp: 使用Rust宏模拟Python的生成器表达式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm日报Chaos君向你问好：(很有意思，小图可以展示的比较清晰，但是放大以后就模糊了，感觉可以用来保护头像隐私)swirlr可以将采集的图像沿阿基米德螺线路径的采样点渲染SVG。\ndemo\nswirlr-wasm\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"swirlr-wasm：Swirlr的wasm版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli #RustCLI为了使Rust开发Cli应用的体验更加一流，更方便地解析命令行参数，官方Cli工作组开发了这个Paw库，目前还是WIP状态。paw::main宏允许fn main接受任何实现paw::ParseArgs trait的参数，所以，支持将std::env::Args传递给main，还允许传递structopt实例。假如paw的反响比较好，官方还将走RFC流程，将它引入标准库中。\nRead More\npaw\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"paw: Rust Cli工作组新工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Recursive问题：有这样一个结构体Node，它展现了一个树结构：现在想以递归的方式迭代其根结点和所有子结点的值，以便得到[1,2,3,4,5,6,7]。在最初实现碰到挫折之后，作者想到自己实现了一个迭代器来解决这个问题，但不是一个更好的方案。Bad Solution Playgroundhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c2cf6a965c3637553edd95eecc1993cd一个更好的解法：Better Solution Playgroundhttps://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d25e10b70559d24ea0768b9197a938b1Read Morehttps://amos.me/blog/2019/recursive-iterators-rust/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-12 13:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的递归迭代问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该贴的作者认为，在async趋于稳定之前，还有个重要的讨论，就是支持异步函数的返回类型的自定义命名。Read morehttps://internals.rust-lang.org/t/naming-the-return-type-of-an-async-function/10085"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「社区讨论」命名异步函数的返回类型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個替換舊版 await! 宏實作改成新版await 語法的工作Read morehttps://www.reddit.com/r/rust/comments/bmwcgb/replaceawait_migration_tool_for_replacing_await/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"replace-await"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"為每個庫增加權限控管。有了這些權限，我們可以回答這些問題：\n為什麼png庫使用網絡層？\n為什麼http庫使用文件系統層？\nRead morehttps://www.reddit.com/r/rust/comments/bmy5ch/cargo_permissions/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo 權限控制"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在嵌入式系統AMP systems上的一個 framework可以寫各種原生的嵌入式程式Read morehttps://www.reddit.com/r/rust/comments/bmyeah/%CE%BCamp_asymmetric_multiprocessing_on/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」μAMP: 微處理器上的非對稱多處理庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個全局的分配器追踨器，可以追到wasm内存分配的情況wasm-tracing-allocatorhttps://github.com/rustwasm/wasm-tracing-allocator"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Wasm工作组发布：wasm-tracing-allocator"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"intel出品，代码不多，看上去确实简单，可以学习如何用rust实现一个kvm。\nRead more\nintel/rust-hypervisor-firmware\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-hypervisor-firmware: 一個簡單的 kvm firmware"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/bn3ym5/yet_another_ray_tracing_implementation_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"另一種 ray tracing 实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"支持GZIP，ZLIB和DEFLATE压缩和解压缩wasm-flatehttps://github.com/drbh/wasm-flate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasm-flate: 使用WASM对客户端文件进行超快压缩的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"输出context-attributehttps://github.com/yoshuawuyts/context-attribute\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-05-11 14:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"context-attribute: 使用文档注释设置错误上下文"},"type":"text"}],"type":"title"}},]
