export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "为 GitHub Game Off 2022 开发的基于光线追踪的游戏！整个游戏，包括手工制作的光线追踪器，都是用 Rust 实现的。tl;dr 游戏是 Doom meets Portal meets The Stanley Parable，具有实时光线追踪图形，即使在 CPU 上也能快速运行，并有10分钟的故事情节！游戏网址：https://dzejkop.itch.io/doome游戏GitHub链接：https://github.com/patryk27/doome" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-04 00:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Game Off 2022 光线追踪游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "使用 SIMD 将数字解析为以 10 为基数的小数。在解析数字密集型 JSON 时，大部分开销是解析数字而不是解析 JSON 本身。 对于典型情况，数字解析中的大部分开销是转换为尾数 * 10^指数形式，而不是转换为适当的浮点值。全文链接：https://vgatherps.github.io/2022-11-28-dec/完整代码链接，https://github.com/vgatherps/simd_decimal" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-04 00:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 SIMD 加速小数解析" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Privaxy，是用 Rust 实现的广告拦截代理。主要功能有：\n支持 Adblock Plus 过滤器，例如 easylist\n具有统计显示和实时请求浏览器的 Web 图形用户界面\n支持 uBlock origin 的 js 语法\n支持 uBlock origin 的重定向语法\n支持 uBlock origin 的 scriptlet\n支持自定义过滤器\n。。。\nGithub 链接：https://github.com/Barre/privaxyhttps://github.com/lesterli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-04 00:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Privaxy，广告拦截代理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个与 WebAssembly Package Manager 和 WebAssembly Interfaces（\"WAI\"）整合的工具，可以创建可以从其他语言导入的包。WebAssembly 软件包管理器的 WAI 附加功能，通过为你选择的语言自动生成可安装的软件包，简化了开发者在其应用程序中使用 WebAssembly 的方式。详情请看：https://wasmer.io/posts/wasmer-takes-webassembly-libraries-manistream-with-wai" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://wasmer.io/posts/wasmer-takes-webassembly-libraries-manistream-with-wai" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-03 18:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasmer 推出 Wasmer Pack" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "WasmEdge 成功地移植了 tokio（一个 Rust 异步运行时）到 Wasm：https://github.com/WasmEdge/tokio。其秘诀是使用了自家基于 wasi-socket 开发的 non-blocking socket 和 poll 系统调用，替换掉了 tokio 自己的 non-blocking IO 实现。代码实现：https://github.com/tokio-rs/mio/commit/c365b7c15b26bf1b4ee76b88b830fbb5054fd35b#diff-e56b51343750c5afbcc6759883c7834d510abb433f1f3fb404bedad21f24b5d7" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/tokio-rs/mio/commit/c365b7c15b26bf1b4ee76b88b830fbb5054fd35b#diff-e56b51343750c5afbcc6759883c7834d510abb433f1f3fb404bedad21f24b5d7" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-03 18:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tokio 增加了 WasmEdge 支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-03 18:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Hyper 的 11 月报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详情请看：https://www.reddit.com/r/bevy/comments/za93oo/bevy_atmosphere_05_is_now_released/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-03 18:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "bevy_atmosphere 0.5 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Leptos 是一个全栈、同构的 Rust Web 框架，利用细粒度的反应性来构建声明式用户界面。使用示例：项目地址：https://github.com/gbj/leptoshttps://github.com/Jancd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/gbj/leptos" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-03 18:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Leptos 项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "随着进入 Android 的内存不安全代码的数量减少，内存安全漏洞的数量也随之减少。从 2019 年到 2022 年，安卓系统漏洞的比例从 76% 下降到了 35% 。在 Android 13 中，大约 21% 的新本机代码是由 Rust 编写。AOSP 中有大约 150 万行 Rust 代码，跨越很多新的功能和组件，如 Keystore2 、UWB 栈、 DNS-over-HTTP3、Android 虚拟化框架等，以及各种其他组件和它们的开源依赖。迄今为止，在 Android 的 Rust 代码中还没有发现任何内存安全漏洞。Memory Safe Languages in Android 13:  https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-02 10:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Android 13 上的内存安全语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Exism 是一个通用的插件系统。在过去的几个月中，Exism 的团队致力于构建一个可嵌入的、安全的、性能良好的运行时，为任何规模的软件带去可扩展性。GitHub - extism: https://github.com/extism/extismExtism: make all software programmable: https://extism.org/blog/announcing-extism/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://extism.org/blog/announcing-extism/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-02 10:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Extism - 使所有软件都可编程扩展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week In Rust 471: https://this-week-in-rust.org/blog/2022/11/30/this-week-in-rust-471/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2022/11/30/this-week-in-rust-471/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-02 10:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week In Rust 471" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "dora是一个使用 tokio 用 Rust 编写的 DHCP 服务器。dora 支持重复地址检测、ping、绑定多个接口、静态地址等在综合测试中，能够达到大约 5000 个租约/秒，但远远不到的 CPU 的峰值。它依赖于数据库来确定要在哪个范围内分配的下一个 IP。ReadMore: https://github.com/bluecatengineering/doraNushell，或简称Nu，是一种新的shell，它采用现代的，结构化的命令行方法。它可以与来自文件系统、操作系统和越来越多的文件格式的数据无缝协作，以便轻松使用功能强大的命令行管道。Nu 0.72 可用作预构建的二进制文件或从crates.io.如果你安装了 Rust，你可以使用它来安装它。cargo install nu作为此版本的一部分，我们还发布了一组可选插件，您可以安装和与 Nu 一起使用。要安装，请使用。cargo install nu_plugin_<plugin name>从 0.72 开始，现在运行可能失败的命令，然后在发生故障时处理失败要容易得多。\nTry/catch\n\n自动扩展数据视图\n更多特性请看 ReadMoreReadMore:https://www.nushell.sh/blog/2022-11-29-nushell-0.72.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.nushell.sh/blog/2022-11-29-nushell-0.72.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-12-01 09:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Dora - 一个 Rust 写的 DHCP 服务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者 stefanodevenuto 通过 Rust + Tauri 实现，构建了一个类似 Wireshark 的跨平台数据包嗅探器。这个应用离生产阶段当然还很远，功能和页面上还有很多改善的空间，但是代码组织良好，并有完善的文档记录，对 Rust 跨平台应用和网络数据包技术感兴趣的小伙伴，不妨通过这个项目学习一下，也欢迎贡献。代码仓库链接https://github.com/stefanodevenuto/wirefish" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-29 21:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Wirefish：基于 Tauri 的跨平台数据包嗅探器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者 Hiro 想到了一个点子，将 The Rust Programming Language 这份官方文档，转换到了命令行中。https://doc.rust-lang.org/book/他创建了 thebook 这个命令行工具，能够让你在命令行中阅读、搜索 The Rust Programming Language 一书中的内容（同时也支持在浏览器中打开该书的页面），只需要通过 cargo install thebook即可一键安装。https://github.com/0xhiro/thebook不过，也有评论指出，rustup doc 似乎是一种更好的解决方式，其会根据你当前使用的 Rust 版本，在浏览器中打开 Rust 官方文档，无需安装任何命令行工具。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-29 21:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "将 \"The Book\" 变成一个命令行工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Shuttle 是一个 Rust 原生云开发平台，可让您免费部署 Rust 应用程序。https://www.shuttle.rs/其与 fettblog.eu 合作举办了一个名为 \"Rust for Javascript Developers\" 的免费研讨会，在会上，将通过 Axum 框架和 Shuttle 平台，重新实现一个原本基于 Express.js 和 websocket 的 Javascript 聊天应用。更多信息可以参考以下资料https://fettblog.eu/\n说明文档\nShuttle github 链接\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-29 21:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "\"Rust for Javascript Developers\" 研讨会" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一本关于使用 Rust 来编写解释型语言的指导书.从理论基础, 内存分配, 真实实践, GC 等方面循序渐进的指导如何使用 Rust 来编写解释型语言.原文链接https://rust-hosted-langs.github.io/book/introduction.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-28 18:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rust 编写解释型语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一篇从语言级别上介绍 Rust 的所有权和生命周期的文章.原文链接https://blogs.harvard.edu/kapolos/rusty-ownership-and-the-lifecycles-stone/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-28 18:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust的所有权和生命周期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust的设计之一是可以与其他语言互操作，但这种互操作主要基于C数据结构和函数. 这对C++应用程序是有限制的, 因为 C++类的实例在C中没有标准化的表示. 我们如何将Rust接口公开给 C++, 反之亦然呢?Slint 为 Rust 开发了一个UI工具包. 并且提供高质量的c++绑定, 并与现有的 C++ 库集成.油管视频https://www.youtube.com/watch?v=WQAMJDS1tv4" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-28 18:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 和 C++" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "warpgate是一个智能的 SSH, HTTPS和 MySQL的Linux堡垒机.github地址https://github.com/warp-tech/warpgate" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-28 18:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "warpgate: SSH, https, MySQL堡垒机" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "swing 是一个日志库,可以打印五颜六色的日志.github地址https://github.com/diffuse/swing--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-28 18:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "swing: 打印五颜六色的日志" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "ESLint 是一个 JS 和 TS 语言的静态分析工具。作者打算重写，期望在其中更多地使用 WebAssembly 和 Rust 来提高性能。网址：https://tomaszs2.medium.com/nicholas-c-zakas-announced-the-end-of-eslint-code-line-f72c18211666GitHub：https://github.com/eslint/eslint/discussions/16557" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-27 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust重写ESLint" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个手动展示将场景从 bevy 0.8 迁移到 0.9 所需的步骤。示例代码：https://github.com/PhaestusFox/BevyBasics视频地址：https://www.youtube.com/watch?v=M3ctrGAa2yw" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-27 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bevy 0.8到0.9迁移指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Anki 桌面版源代码。官网：https://apps.ankiweb.net/GitHub：https://github.com/ankitects/anki" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-27 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Anki：卡片记忆工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "faer 是一个用 Rust 实现的低级别线性代数例程的 crates 集合。目标是为线性代数提供一个功能齐全的库，重点关注可移植性、正确性和性能。看一个矩阵乘法的对比 Benchmark：还有一些矩阵运算的 Benchmark 可以进一步阅读 GitHub。GitHub：https://github.com/sarah-ek/faer-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-27 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "faer-rs：线性代数库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个 #[no_std] 红黑树，打包在单个字节切片中。允许不反序列化整个树来访问树节点。当内存中有一棵巨大的树，但一次只想与几个值交互时会很有用。一共有两个核心类型：RBTree 和 RBForest，以前者为例：与 BTreeMap 的 Benchmark：GitHub：https://github.com/solcery/slice-rbtree" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-27 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "slice-rbtree" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个旨在说明如何使用 Rocket，Diesel 和 rocket_opapi 的项目。GitHub：https://github.com/DilecPadovani/rocket_diesel_demo" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-27 23:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Web API模板" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Yew团队很高兴地宣布一个迟来的新版本Yew：V0.20。Yew是一个用于创建可靠和高效的Web应用程序的框架。这个版本带有旨在改善用户体验的新功能。文章链接，https://yew.rs/blog/2022/11/24/release-0-20Github 链接，https://github.com/yewstack/yew" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/yewstack/yew" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 21:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "yew发布0.20" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "如果你想知道如何用Rust写前端，那么你可以看看这个工具。crypto-helper是一个在线应用程序，可以帮助使用不同的加密算法。这个应用程序可以对数据进行hash/hmac，加密/解密，以及签名/验证。所有的计算都在客户端进行。这个工具从不向任何服务器发送数据。提示：如果你的输入不是十六进制编码，那么你可以使用一个字节格式化器将输入转化为十六进制格式。文章链接，https://www.reddit.com/r/rust/comments/z54wzr/frontend_that_is_written_in_rust/Github 链接，https://github.com/TheBestTvarynka/crypto-helper" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/TheBestTvarynka/crypto-helper" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 21:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "crypto-helper" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个用Rust编写的Gameboy模拟器。我决定只关注原始的Game Boy，以达到我可能做到的最高程度的准确性。仓库中还包含100多个不同的测试ROM，用来验证正确性。Github 链接，https://github.com/nicolas-siplis/feboyhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/nicolas-siplis/feboy" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 21:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "feboy：一个用Rust编写的Gameboy模拟器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Gama 将发射太阳帆宇宙飞船，并且是公开将 Rust 送入太空的公司之一。是的，我们在太空中！详情：https://twitter.com/AeroRust/status/1596052251650686976" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://twitter.com/AeroRust/status/1596052251650686976" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 15:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 真的要上天了！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "自从 0.7.0 版本发布以来，我们有很多东西可以展示！在这个版本中，我们注意到了对 i686 的支持。在这个版本中，我们小心翼翼地确保真实的硬件工作，增加了对 i686 的支持，启用了音频和初步的多显示器支持等功能，并简化了启动和安装基础设施，使其更加强大。更多请看：https://www.redox-os.org/news/release-0.8.0/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.redox-os.org/news/release-0.8.0/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 15:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Redox OS 0.8.0 现已发布！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "早在 8 月，我们就宣布了axumrc1，今天我很高兴地报告，预发布期已经结束，axum 0.6.0 已经出来了axum 是一个符合人体工程学的模块化网络框架，由 tokio、tower 和 hyper 构建。更多请看：https://tokio.rs/blog/2022-11-25-announcing-axum-0-6-0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tokio.rs/blog/2022-11-25-announcing-axum-0-6-0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 15:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "axum 0.6.0 版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "n 维数组的快速傅里叶变换卷积和相关的 Rust 实现二维示例：项目地址：https://github.com/rhysnewell/fftconvolvehttps://github.com/Jancd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rhysnewell/fftconvolve" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-26 15:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中的快速傅里叶变换卷积" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作为一个Rust程序员，你可能相当熟悉Rust中引用的工作方式。如果你有一个T类型的值，你通常可以通过使用安培号（&）操作符来获得对它的各种引用。在最微不足道的情况下，&T给你的只是：对T的引用。然而，在有些情况下，你可以得到其他东西。例如，String实现了Deref<Target=&str>，让你也可以从它那里得到一个&str，而且这个系统也可以扩展到可变的引用。详情: https://lucumr.pocoo.org/2022/11/23/stack-tokens/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://lucumr.pocoo.org/2022/11/23/stack-tokens/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-24 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个更好的方式在Rust中使用引用：Stack Tokens" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "今天，我们非常兴奋地推出Wasmer 3.0，自我们的第一个alpha版本以来，经过三个月的工作。那么，Wasmer有什么新功能？\nWasmer现在能够直接通过wasmer运行WAPM包了。\n更好的API和内存管理\n我们已经简化了引擎的工作方式。现在，只需要一个引擎（尽管引擎可能使用不同的工件来加载/存储代码）。\nartifacts的零拷贝反序列化\n支持为任何平台创建本地可执行文件\n在单通道编译器中启用多值\nWASI的改进\n详情: https://wasmer.io/posts/announcing-wasmer-3.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://wasmer.io/posts/announcing-wasmer-3.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-24 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Wasmer 发布 3.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "失去了对warp的爱在我写这些的时候，warp是在hyper之上的相对高级的东西的最好/唯一的选择。我从来都不喜欢warp的模型--它是一个很好的crate，只是不适合我。详情: https://fasterthanli.me/series/updating-fasterthanli-me-for-2022/part-2#falling-out-of-love-with-warp" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://fasterthanli.me/series/updating-fasterthanli-me-for-2022/part-2#falling-out-of-love-with-warp" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-24 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从 warp 迁移到 axum" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust周报670期This Week in Rust 470: https://this-week-in-rust.org/blog/2022/11/23/this-week-in-rust-470/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2022/11/23/this-week-in-rust-470/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-24 22:05" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 470" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个合适的链表可以让你查找并保存一个元素，并以低廉的成本插入和删除那里的元素。因为 Rust 生命周期和所有权问题，写一个链表不像其他常用语言那样轻松，因此基于 Rust 的链表库层出不穷，详情请看这里, 但是作者对大部分库都表示不尽人意并阐述了为什么有这么多糟糕的 Rust 链表库的分析结论，以及如何用各种替代方案来写一个可用链表。https://www.chiark.greenend.org.uk/~ianmdlvl/rc-dlist-deque/#other-doubly-linked-list-libraries\nhttps://diziet.dreamwidth.org/13476.html\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-23 23:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "停止编写 Rust 链表库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\nhttps://dev.to/kgrech/five-simple-steps-to-use-any-arduino-c-library-in-a-rust-project-1k78\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-23 23:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在 Rust 项目中使用任何 Arduino C++ 库的五个简单步骤" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "CnosDB Paper Reading 系列为大家带来论文导读\n主题：\n时间序列数据库的高效无损浮点数据压缩\n内容提要：\n基于目前最常用的时序数据压缩算法 Gorilla，并根据当前的需求提出的新式压缩算法，显著提高了压缩效率及压缩比\n本周四，11.24晚7点，B站直播间 https://live.bilibili.com/23768194" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-23 23:46" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CnosDB Paper Reading -- 时间序列数据库的高效无损浮点数据压缩讲座预告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个简单的基于终端的蛇形游戏，用Rust实现，没有任何依赖。尽管这是一个简单的游戏，但它涵盖了Rust的许多核心功能，如使用通道的多线程，FFI重新配置终端，单元测试等等，适合用来学习参考。ReadMore: https://github.com/flo-at/rustsnake" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/flo-at/rustsnake" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-22 18:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 编写的命令行贪吃蛇游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇文章简要分析了 Rust 中 enum 的代码经编译之后在内存中的布局以及相关的内存指令。ReadMore: https://www.eventhelix.com/rust/rust-to-assembly-enum-match/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.eventhelix.com/rust/rust-to-assembly-enum-match/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-22 18:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 中 Enum 的汇编生成分析" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust Search Extension 是一个浏览器拓展，方便用于搜索 Rust 相关的文档等。v1.9.0 已发布，快来看看新增什么功能吧。ReadMore: https://rust.extension.sh/changelog/#v1-9-0-2022-11-20" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://rust.extension.sh/changelog/#v1-9-0-2022-11-20" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-22 18:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Search Extension v1.9.0 已发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "相信很多人在选择crate的时候，都有自己对crate的评估标准，本文从下面十个方面给出评估指导：原文链接https://gist.github.com/repi/d98bf9c202ec567fd67ef9e31152f43f" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-21 18:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "第三方crate评估指导" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "该网站给出了由Rust编写的数据库 star 的排名数据. 各种常见的或者小众的数据库基本都能在此看到，例如 meilisearch/meilisearch, tikv/tikv 等。原文链接https://ossinsight.io/collections/rust-database/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-21 18:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust数据库排名" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "InFur 是一个跨平台图像分割工具github地址https://github.com/ahirner/infur" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-21 18:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "InFur: 跨平台的图片分割工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Yew server的 VSCode插件目前已经预发布了注意： 需要在VScode 安装预发布版本。Yew server github地址VSCode Rust-Yew 插件地址https://github.com/TechTheAwesome/code-yew-server" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-21 18:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Yew VSCode 插件预发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个油管视频， 非常详细的讲解如何将 Bevy 0.8升级到 0.9.油管视频地址https://www.youtube.com/watch?v=mB-lVxnhC_I--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-21 18:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bevy: 0.8迁移0.9指导" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "SeaORM 0.10.0 发布，新功能包括：\nRust 1.65 的 GAT\nPostgres 支持数组类型\n更好的错误类型\n在任意 Postgres Schema 上执行 Migration\n其他一些重要更新和优化增强\n链接：https://www.sea-ql.org/blog/2022-11-10-whats-new-in-0.10.x/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-20 20:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "SeaORM 0.10.x" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://regex101.com/ 目前没有 Rust 语言的支持，网站维护者在添加时发现很难将 wasm 的大小降低到理想的 <500KB（事实上有接近 3MB）。最新的消息是有人已经做了一些成功的尝试，相关消息和相关讨论可查看这个 Issue：https://github.com/firasdib/Regex101/issues/1208" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-20 20:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Regex WASM 优化" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文详细记录如何在 Rust 项目中使用任何 Arduino 的 C++ 库。步骤包括：\n准备使用 Rust 编程 Arduino 板的环境\n创建基于 avr-hal 的 Rust 项目并使 LED 闪烁\n编译 Arduino SDK 和第三方库，链接到 Rust 工程\n为 Arduino 库生成 Rust 绑定\n编写代码并在开发板上运行\n文章链接：https://dev.to/kgrech/five-simple-steps-to-use-any-arduino-c-library-in-a-rust-project-1k78" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-20 20:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "五步使用Arduino C++库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者发现阅读嵌入式 HAL 文档会很困惑，好像总是在绕圈子。因此有了这么一篇如何浏览嵌入式 HAL 文档的文章，主要分为四个步骤：\n识别任务\n寻找核心驱动的 Struct\n寻找构造方法或 Trait\n回到核心驱动 Struct\n文章链接：https://apollolabsblog.hashnode.dev/4-step-primer-on-navigating-embedded-rust-hal-documentation" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-20 20:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "嵌入式四步入门" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "简单来说三点：\n不要写 Rust 链表库，它们很难写好，而且通常也没用。\n使用 VecDeque，如果需要比 VecDeque 更多的功能，使用少数几个实际提供更有用 API 的库之一。\n如果正在编写自己的数据结构，先检查是不是已经有人做过了，并考虑 slotmap 或 generation_arena（或者可能是 Rc/Arc）。\n链表库整理（附带使用建议）：https://www.chiark.greenend.org.uk/~ianmdlvl/rc-dlist-deque/文章链接：https://diziet.dreamwidth.org/13476.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-20 20:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "不要再写Rust链表库了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个用 Rust 编写的 Lisp 解释器，并实现了 Scheme 的一个子集。GitHub：https://github.com/long-long-float/lisp-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-20 20:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "lisp-rs：lisp解释器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "YTerMusic 是个由 Rust 实现基于终端的 Youtube 音乐播放器，其专注于隐私、简单和性能。主要功能包括：\nYoutube 音乐播放列表\n缓存所有下载并储存\n自动后台下载管理器\nGithub，https://github.com/ccgauche/ytermusic" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/ccgauche/ytermusic" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 21:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "YTerMusic v0.0.6" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "mold linker 旨在通过减少构建时间来提高开发人员的工作效率，尤其是在调试-编辑-重建快速周期中，是现有 Unix linker 的替代品，它比 LLVM lld linker 快几倍。mold linker 项目作者创建了一个网站bluewhale.systems，用户可以购买非 AGPL 许可的 mold linker，并且作者正在考虑更改 mold/macOS 的许可。https://bluewhale.systems/Github v1.7.1发布链接，https://github.com/rui314/mold/releases/tag/v1.7.1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rui314/mold/releases/tag/v1.7.1" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 21:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "mold linker 项目发布v1.7.1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在 Rust 中实现链表时，一个众所周知的陷阱是默认的递归删除实现会导致长列表的堆栈溢出。 树数据结构也存在类似的问题。 这篇文章描述了几种可能的解决方案。博客原文链接，https://matklad.github.io/2022/11/18/if-a-tree-falls-in-a-forest-does-it-overflow-the-stack.htmlhttps://github.com/lesterli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://matklad.github.io/2022/11/18/if-a-tree-falls-in-a-forest-does-it-overflow-the-stack.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 21:57" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "[博客] Rust 树数据结构" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "async 工作组很高兴地宣布 async fn 现在可以在 nightly 版本的 traits 中使用。在  playground 上有一个完整的工作示例。我们将介绍一些限制，还有一些已知有待解决的错误，但我们认为它已经准备好供一些用户尝试。https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=6ffde69ba43c6c5094b7fbdae11774a9使用示例如下：更多请看官方blog：https://blog.rust-lang.org/inside-rust/2022/11/17/async-fn-in-trait-nightly.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2022/11/17/async-fn-in-trait-nightly.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 17:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在 trait 中使用 async fn" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "由 Rust 基金会发起的系列活动，认识 Sebastian Thiel：Gitoxide 核心开发人员和我们新的 Rust 基金会社区受助人聚焦系列的第一个主题。更多请看原文：https://foundation.rust-lang.org/news/community-grantee-spotlight-sebastian-thiel/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://foundation.rust-lang.org/news/community-grantee-spotlight-sebastian-thiel/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 17:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "社区受助人聚焦：Sebastian Thiel" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "sapling 项目是由 Facebook 发布的，一个跨平台、高度可扩展、兼容 Git 的源代码控制系统。它旨在为用户提供用户友好且功能强大的界面，以及极大的可扩展性以处理包含数百万个文件和数百万次提交的存储库。项目地址：https://github.com/facebook/sapling" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/facebook/sapling" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 17:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sapling 项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Impalabs 发布了 Hyperpom，这是一个用 Rust 编写的 64 位 ARM 二进制模糊器，基于 Apple Silicon 的 hypervisor。它是基于突变和覆盖引导的。本文概述了它的内部结构，介绍了它由不同的组件组成，以及它们之间的关系。最重要的是，它还收集了开始和开始模糊自己的64位ARM目标所需的所有资源。更多请看：https://blog.impalabs.com/2211_hyperpom.htmlhttps://github.com/Jancd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.impalabs.com/2211_hyperpom.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-19 17:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Hyperpom 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "GreptimeDB 是一套优秀的数据处理系统，可以实时地从时间序列中获取价值，使用 Rust 构建。GitHub - GreptimeTeam/greptimedb: https://github.com/GreptimeTeam/greptimedbThis Time, for Real - GreptimeDB is Now Open Source: https://www.greptime.com/blogs/2022-11-15-this-time-for-real" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.greptime.com/blogs/2022-11-15-this-time-for-real" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-17 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GreptimeDB - 使用 Rust 构建的时序数据库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "包含以下特性：\nGame Boy 模拟\n简单可导航的源代码\nWeb 和 SDL 前端\n支持多种MBC：MBC1，MBC2，MBC3 和 MBC5\n可变 CPU 时钟速度\nGitHub - joamag/boytacean:  https://github.com/joamag/boytacean在线体验:  https://boytacean.joao.me" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://boytacean.joao.me" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-17 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Boytacean - 使用 Rust 构建的 Game Boy 模拟器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "futures-concurrency 是一个基于 async/.await 的并发操作原型库，旨在成为 Rust stdlib 的一部分。这项工作是由 Yosh 领导的，作为 Rust 异步工作组的一部分。贡献者围绕这个库进行了大量的工作，对内部进行了彻底的改造，使开发者能够在生产中实际使用它，而不仅仅是作为 stdlib API 的原型。GitHub - futures-concurrency: https://github.com/yoshuawuyts/futures-concurrency" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/yoshuawuyts/futures-concurrency" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-17 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "futures-concurrency 7.0.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 469: https://this-week-in-rust.org/blog/2022/11/16/this-week-in-rust-469/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2022/11/16/this-week-in-rust-469/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-17 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 469" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "mook" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Quilkin 是一种非透明 UDP 代理，专门设计用于大型多人专用游戏服务器部署，以确保安全性、访问控制、遥测数据、指标等。它旨在用于游戏客户端后面以及专用游戏服务器前面。主要更新：\n改进的命令行界面\n内置 xDS 集成\nGeoIP 集成\nReadMore: https://github.com/googleforgames/quilkin/releases/tag/v0.4.0ReadMore:https://itnext.io/using-rust-and-ptrace-to-invoke-syscalls-262dc585fcd3" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://itnext.io/using-rust-and-ptrace-to-invoke-syscalls-262dc585fcd3" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-16 21:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "quilkin 0.4.0 - 非透明 UDP 代理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 的 Github 仓库合并一个 PR本PR将 crossbeam-channel 作为私有模块导入标准库，即 sync::mpmc，现在 sync::mpsc 被实现为 sync::mpmc 的一个简单封装以后 crossbeam-channel 开箱即用！正式发版还得等一段时间。ReadMore: https://github.com/rust-lang/rust/pull/93563" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rust-lang/rust/pull/93563" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-15 22:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "标准库 mpsc 现已使用 crossbeam-channel 实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文为 EuroRust 2022 大会上 slint 团队的分享，主题为 Rust and Cpp ，介绍 Slint 中 Rust 和 Cpp 的交互方案和工具 。原视频链接：https://www.youtube.com/watch?v=WQAMJDS1tv4，视频也被搬运到了 B 站：https://www.bilibili.com/video/BV1kG4y1t7xs/。本次演讲文稿：https://slint-ui.com/blog/rust-and-cpp.html。ReadMore: https://mp.weixin.qq.com/s/DQVu9bkHTTUT7X6iNTlAkA" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://mp.weixin.qq.com/s/DQVu9bkHTTUT7X6iNTlAkA" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-15 22:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 欧洲之声 | Rust 和 Cpp 互操作" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Koalr" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "支持的模板：\n\niOS / MacOS:\nxcframework/Swift Package 的苹果平台的 Rust 包\n\n\nAndroid: # TODO\n\niOS / MacOS:xcframework/Swift Package 的苹果平台的 Rust 包Android: # TODOReadMore: https://github.com/zsmatrix62/rust-ffi-boilerplate" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/zsmatrix62/rust-ffi-boilerplate" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-15 22:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 uniffi-rs 创建多平台通用 lib" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust enum 是一个非常强大的特性, 很多人好奇他内部是如何实现的, 这里作者从生成的汇编代码来帮你深入理解 Rust 的 enum.一些关键结论:原文链接https://www.eventhelix.com/rust/rust-to-assembly-enum-match/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-14 19:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从汇编代码来理解 enum" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在这篇博文中, 作者探讨 Rust 和 c++ 集成的两个方向，并介绍作者在工作中使用的一些工具,并且详细描述了这些工具在何时使用才是最有效的.\nbindgen: 解析 c header文件并且生成 Rust 的 binding.\ncbindgen: 解析 Rust 代码,并且生成 c和 c++的 header 文件\ncxx crate: 半自动的 c++绑定.\ncpp crate: 在 Rust 中写 c++的代码.\n原文链接https://slint-ui.com/blog/rust-and-cpp.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-14 19:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 和 C++ 的相互集成" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这里整理了新手如何开始 Rust 之旅的一系列问题:从个人对 Rust 的预期, 到学习主线, 新手使用 各种第三方库 以及项目理念等等均有涉及.原文链接https://github.com/jondot/rust-how-do-i-start" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-14 19:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何开始学习 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "对于那些不知道的人来说，Bevy是一个基于Rust的数据驱动游戏引擎。目前 0.9 版本刚刚发布, 加入了非常多的新特性原文链接https://bevyengine.org//news/bevy-0-9/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-14 19:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Bevy 0.9 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Cork 是一个命令行工具, 可以帮助你处理十六进制数据, 还支持一定的表达式运算.原文链接https://github.com/RedDocMD/cork/releases/tag/v0.2.6--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-14 19:22" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Cork: 一个十六进制辅助工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-13 21:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Aero，一个用 rust 制造的新的现代操作系统，现在可以运行 Xorg" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Aero 是一种新的现代、实验性、类 unix 的操作系统，采用 rust 设计，遵循单片内核设计。支持现代 PC 功能，例如长模式、5 级分页和 SMP（多核）等。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-13 21:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "什么是Aero？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Aero 已经可以运行 Xorg、DWM（作为窗口管理器的示例）和其他命令行应用程序，例如 GCC、GNU/coreutils 等等。目标\n打造现代、安全、美观、快速的操作系统。\n针对现代 64 位架构和 CPU 功能。\n与 Linux 良好的源代码级兼容性，因此我们可以轻松地移植程序。\n制作一个可以在真实硬件上运行的可用操作系统，而不仅仅是在模拟器或虚拟机上。\nGitHub ：https ://github.com/Andy-Python-Programmer/aerohttps://github.com/Andy-Python-Programmer/aero" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-13 21:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "它可以运行什么？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "​     不久前，我写了一个 crate，其中包含一些帮助程序来编写 rust 单元测试。刚刚发布的 0.9.0 版本包含一些错误修复、改进和小功能。希望你们中的一些人觉得它有帮助。将来会尝试找到更多的时间来进一步开发这个库。GitHub: https://github.com/becheran/ntest" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-13 21:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "发布 ntest 0.9.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在 Async-graphqlv5.0.0-alpha中，完全支持动态模式，我相信你可以用它做一些有趣的事情。GitHub: https://github.com/async-graphql/async-graphql" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-13 21:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Async-graphql 已经完全支持动态模式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "baymax-xhl" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是我使用 Rust 的第一个项目，它在过去几个月里帮助我很多次，在工作中非常快速地共享一些文件。特征：\n快速将文件共享到 Transfer.sh 服务器\n将您之前共享的所有链接保存在 sqlite 数据库中\n轻松删除链接\n查看链接到期的日期\n我希望你们中的一些 Rustaceans 也可以利用它。Github: https://github.com/OLoKo64/transfer-sh-helper-rusted" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-13 21:07" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个简单的基于 cli 的 Transfer.sh 助手" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "几年前，我用Python做了我的第一个开源工具，用PyQt做GUI。它能正常工作，但这个工具有一些问题。每当你点击提交按钮时，整个工具就会冻结，进入 \"无响应 \"状态，直到它完成。我曾试图在Python使用一个后台的工作线程，但我根本无法让它工作。我不得不说，使用egui让我对GUI有了一个完全不同的思考方式...文章链接，https://www.reddit.com/r/rust/comments/yt6vo7/i_rewrote_one_of_my_old_tools_in_rust_using_egui/Github 链接，https://github.com/Crypto-Spartan/unifi-search-tool" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Crypto-Spartan/unifi-search-tool" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-12 23:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "我用rust重写了我的一个旧工具，使用egui" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个用Bevy构建的WASM贪吃蛇游戏，在浏览器中运行。我做这个项目的目的是先了解bevy，以及如何在Rust中制作简单的游戏。我必须说bevy是一个相当容易使用的（至少对于2D游戏来说）游戏引擎。Github 链接，https://github.com/nag763/texas-snake" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/nag763/texas-snake" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-12 23:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "texas-snake" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "binarytom" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "前一阵子，我写了一个crate，包含一些帮助编写rust单测的工具。刚刚发布了0.9.0版本，其中包含一些bugfix、改进和小功能。希望你们觉得它有帮助文章链接，https://www.reddit.com/r/rust/comments/yso9c9/released_ntest_090/Github 链接，https://github.com/becheran/ntesthttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/becheran/ntest" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-12 23:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "发布ntest v0.9.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前 Github 的这个新功能处于测试阶段，关于该功能的更新信息记录可以看 Github 的 blog：https://github.blog/2021-12-15-a-brief-history-of-code-search-at-github/。功能预览地址：https://github.com/features/code-search，" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/features/code-search" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-12 02:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "GitHub 代码搜索用 Rust 实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Fornjot 是一个早期项目，用于在 Rust 中创建下一代、代码优先的 CAD 应用程序。它还使用 Rust 作为定义 CAD 模型的语言。这份进度报告涵盖了自 7 月左右以来该项目发生的情况。欢迎大家交流讨论，博文：https://www.fornjot.app/blog/progress-report-2022-11/一个简单的 Fornjot 模型示例：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.fornjot.app/blog/progress-report-2022-11/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-12 02:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Fornjot 项目进度报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在 Async-graphql  v5.0.0-alpha 中，完全支持动态模式，我相信你可以用它做一些有趣的事情。项目地址：https://github.com/async-graphql/async-graphqlhttps://github.com/Jancd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/async-graphql/async-graphql" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-12 02:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Async-graphql v5.0.0-alpha 版本更新" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "大家好! 我很高兴地宣布 statig，一个帮助你编写分层状态机（也称为 HSM 或statecharts）的crate。这些是由《Practical UML Statecharts in C/C++》一书介绍给我的（不要让UML吓到你），从那时起，我就在思考如何在Rust中最好地实现它们。https://statecharts.dev/HSM最重要的优点是它允许你添加超级状态，定义底层状态的共享行为。随着状态机规模的增长，我发现这个功能在控制复杂性和避免状态爆炸方面变得非常有价值。除此之外，HSM还包括一些概念，如进入/退出动作、状态本地存储和共享上下文，这有助于避免代码重复，反过来也使系统更容易维护。我在设计上经历了多次迭代，最终得出了一个（至少对我来说）感觉干净且易于维护的设计。但当然我带有我的偏见，我很想听听其他人的看法。所以，如果这一切听起来你很感兴趣，请一定要看一下它的代码。一个简单的闪烁状态机:Github: https://github.com/mdeloof/statig" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/mdeloof/statig" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-10 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "statig发布，事件驱动系统的分层状态机（使用GAT开发）" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Iced 0.5版本在今天正式发布了，具体的改动可以看这里：改动: https://github.com/iced-rs/iced/pull/1520最后，值得特别一提的是，System76已经决定在Pop!_OS的桌面环境中使用iced而不是GTK🎉。这是该库成立以来最重要的被使用事件之一。System76的工程师们已经为iced做出了很多伟大的改进，同时也在长期存在的问题上取得了突破，这些问题可以使Rust的整个GUI生态系统受益（比如正确的文本渲染！）。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/iced-rs/iced/pull/1520" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-10 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Iced 0.5版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Cupnfish" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust周报648期This Week in Rust 468: https://this-week-in-rust.org/blog/2022/11/09/this-week-in-rust-468/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2022/11/09/this-week-in-rust-468/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-10 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 468" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "当我们看了很多哈希函数的介绍并切换到一个你认为更快的哈希函数上面时，大部分代码都获得了预期的速度提升，但有些部分却莫名其妙地变慢了很多，尤其是在处理大型 hashMap 时。如果这听起来很熟悉，那么您可能遇到了稳定复现的 HashMap 陷阱。Google SwissTable 是 2017 年 CppCon 上被发表的一个高性能的 hashTable 。从 Rust 1.36 开始，SwissTable 就是 Rust HashMap 的标准库实现。虽然它有不错的性能，但 SwissTable 旨在以性能为代价抵御一类 HashDoS 攻击。如果您关心性能并且不关心安全问题，切换到类似 FxHasher 或者 ahash 可以显着提高性能。然而，这个建议的代价却很少有人提及 —— 一些 O(n) hashTable 操作，包括反序列化，在一些 case 下它的时间复杂度有可能会升级到 O(n**2)。下面博文会给大家带来测试 case 以及为什么会发生如此大的性能差距https://abseil.io/blog/20180927-swisstables\nhttps://morestina.net/blog/1843/the-stable-hashmap-trap\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-09 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "稳定复现的 HashMap 陷阱" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "EAHITechnology" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n专为时序数据设计的存储引擎，优化写操作，支持删除和更新操作；\n压缩算法由用户灵活指定，压缩比可调；\n基于 Apache Arrow 及 DataFusion 实现了查询引擎；\n支持标准 SQL，支持 Schemaless 写入；\n多索引优化了查询效率；\n生态友好，支持 RESTful 接口，支持 Telegraf、Grafana 等通用第三方生态组件。\n快速上手指南：http://docs.cnosdb.comGitHub仓库: https://github.com/cnosdb/cnosdbhttps://live.bilibili.com/h5/23768194?broadcast_type=0&is_room_feed=1&spm_id_from=333.999.0.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-09 20:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CnosDB 2.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "与 Python 和 Go 等其他编程语言相比，Rust 的标准库非常小，仅包含一些核心数据结构，所有其他功能都交给第三方 crate 去完成，Rust 新手的一个常见抱怨是，他们不知道从哪里开始：应该使用哪些 crate，应该信任哪些 crate。bless.rs这个网站旨在回答这些问题。bless.rs 列举了 Rust 开发中最常用的一些库，包括了网络开发、并发、日志、命令行、错误处理等各个方面，将它作为你的 Rust crate cheat sheet 再合适不过了。bless.rs 网址https://blessed.rs/crates" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-08 20:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "bless.rs: 带你走入 Rust 生态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RustFFT 是用纯 Rust 编写的高性能、SIMD 加速的快速傅氏变换库，6.1.0 版本将 SIMD 的支持扩展到 AArch64 的 Neon 指令集，也就意味着可以在 Apple M1 上运用新的 Neon 加速代码。至此，RustFFT 已经支持了 AVX、AVX2、SSE4.1 和 Neon 指令集。https://en.wikipedia.org/wiki/Discrete_Fourier_transform" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-08 20:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustFFT 发布 6.1 版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "rust 日报 babpstep" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Hurl 是一个开源的命令行处理工具，能让你通过普通的文本文件，测试 REST API 和 HTML 内容。其基于 curl 实现，具有轻量，跨平台的优点，能够很好地集成到 CI/CD, Github Action 等环节中。下面是 Hurl 的一个示例通过 hurl /path/to/file 即可执行 API 测试。1.8.0 版本中，Hurl 新增了请求重试、URL断言、Debug日志等特性，给开发者带来了更好的体验，详细内容可以阅读以下资料：\nyour-first-hurl-file 示例\n1.8.0 changelog\ngithub 仓库地址\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-08 20:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Hurl 发布 1.8.0 版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文对 Tauri 和 Electron 做了简单对比, 并且, 使用 Tauri 来开发一个桌面托盘应用.文章中不仅有 关键概念的解读, 还有核心流程的实现讲解, 同时还配有流程图和代码,想了解 Tauri 开发的同学可以看看.原文链接https://betterprogramming.pub/tauri-vs-electron-for-tray-apps-ed15974f35ce源代码地址https://github.com/jondot/tauri-tray-app" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 19:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Tauri 构建桌面托盘应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Burn 是一个新的深度学习框架，支持CPU和GPU，使用新的 stable 特性: GAT.这个库旨在成为一个用 Rust 编写的具有极高灵活性的且完整的深度学习框架。目标将是满足研究人员和从业者，使实验、训练和部署您的模型更容易。github地址https://github.com/burn-rs/burn" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 19:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Burn 发布: 新的深度学习框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "gitoxide 是一个 简洁, 快速, 安全的 纯 Rust 编写的 git 实现.这里和 git 做了一些对比, 同样 clone Linux 内核代码.原文链接https://github.com/Byron/gitoxide/discussions/579" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 19:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一分钟内 clone Linux 内核代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者使用了 Rust 大概两年左右, 有吐槽, 也有感叹. 总的来说, 作者还是非常享受 Rust 编程带来的乐趣.详细见原文,看看是否和作者有相同的感触.原文链接https://n-eq.github.io/blog/2022/11/01/rust-fiddling-2-years" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 19:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 Rust 的两年感受" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "gensmusic" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是一个油管视频, 在视频中, Dave 和 Felipe 展示了他们对机器学习的探索和最终创造HATETRIS世界纪录的 Rust 程序。他们关注于特定于rust的实现细节、困难和设计决策。这些细节和设计决策应该对大部分的 Rust 使用者都会有所帮助.油管视频https://www.youtube.com/watch?v=UgQUvD9gyMk--" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 19:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust程序创造的 HATETRIS 世界纪录" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "fast_qr 比 qrcode 快大约 6-7 倍。使用示例：WASM 也有支持：Benchmark：官网：https://fast-qr.com/GitHub：https://github.com/erwanvivien/fast_qr" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fast_qr：超快速二维码生成" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "特点：\n交互式生成 VCard 二维码。\n免费开源。\n离线工作。\n看起来比上一个好像更卡通一些？GitHub：https://github.com/SomewhereOutInSpace/vcard-qr" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "vcard-qr：VCard二维码生成" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "burn 是一个用 Rust 编写的深度学习框架，使用最新稳定的 GAT 功能支持多个后端作为插件。关于 GAT，我们强烈推荐阅读张汉东老师的最新文章：https://mp.weixin.qq.com/s/XYRfxRGEGN1a5Yu302ErwQ该库旨在成为一个完整灵活的深度学习框架。目标是满足研究人员和从业者的需求，让模型更容易实验、训练和部署。GitHub：https://github.com/burn-rs/burn" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "burn：使用GAT支持多个后端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "print 是简单但强大的 debug 方法，但有时我们无法访问 stdout/strerr 流，dirty-debug 提供了一种快速简便的方法将消息记录到文件（或 TCP 端点）以进行临时调试。需要注意的是，这并不是正常的日志记录形式，只能在调试期间临时使用。GitHub：https://github.com/orium/dirty-debug" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dirty-debug：消息记录调试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "特点：\n任何 registry 直通缓存，而不仅仅是 docker.io：包括私有的、经身份验证的 registry。\n两个存储后端：S3 和本地文件系统。\n轻量。\nhelm chart：https://artifacthub.io/packages/helm/cronce/oci-registry\nGitHub：https://github.com/mcronce/oci-registry" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "oci-registry：OCI Registry规范的轻量级实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Sage 通过数据库搜索和光谱匹配将来自蛋白质组学实验的原始质谱转换为肽识别。除此之外，还包括各种高级功能：色谱保留时间预测、量化（等压和 LFQ）、肽谱匹配重新评分和 FDR 控制等。GitHub：https://github.com/lazear/sage" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Sage：蛋白质组学搜索引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "长琴" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "fframes 是第一个 Rust 视频创建框架，现在已正式进入测试版。官方网站：https://fframes.studio/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-07 00:02" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fframes进入测试版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Slint 语言的设计结合了新旧元素：在 QML 方面的丰富经验和全新 Canvas 的可能性，现代 HTML/CSS 提供的功能使 UI 设计的某些方面非常方便。\n声明组件\nInput/Output 属性\n表达式中查找顺序的变化\n原文链接，https://slint-ui.com/blog/changes-to-the-slint-language.htmlGithub 讨论区，https://github.com/slint-ui/slint/discussions" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/slint-ui/slint/discussions" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-05 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Slint语言的新变化" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "TL; DR 作用域线程在循环中等待线程完成，异步版本则不能等到任务完成。博文主要内容包括：\n作用域线程的“无畏”并发\n控制线程的生命周期\n作用域线程的异步版本\n博客原文链接，https://wishawa.github.io/posts/thread-scoped-async/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://wishawa.github.io/posts/thread-scoped-async/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-05 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中的作用域线程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "“事实上的标准”是指大多数项目都在使用的crate，但它不是 std 的一部分，尽管它们最终可能会进入，比如：\n错误处理 - thiserror, anyhow\n命令行参数解析 - clap\n异步 - tokio\nRust 生态系统的非官方指南 Blessed，https://blessed.rs/crates" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-05 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "哪些 crate 是事实上的标准？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Prop，是 Rust 中的一个库，用于使用直觉命题逻辑进行定理证明。支持经典命题逻辑中的定理证明，由 AdvancedResearch 社区提供用于路径语义研究。Github 链接，https://github.com/advancedresearch/prophttps://github.com/lesterli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/advancedresearch/prop" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-05 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Prop，Rust中带有类型的命题逻辑" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 1.65.0 stable 正式发布，赶快升级到最新稳定版本体验 Rust 带给你的强劲动力吧 :)一起看下新版本有哪些值得关注的特性吧：\n泛型关联类型（Generic associated types, GATs）\nlet-else 语句\n拆分 linux 调试信息\nAnnouncing Rust 1.65.0: https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-03 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.65.0 stable 正式发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "RustSBI 是 RISC-V 下 SBI 标准的实现，旨在为裸机平台、虚拟化和模拟器软件提供良好的 SBI 接口支持。它有机结合了 Rust 嵌入式生态与 RISC-V 系统软件，加快开发速度的同时，保证 Rust 语言具备的良好安全性和运行性能。本次 0.3.0 版本主要包括增加了实例化的 SBI 接口支持及相关的构造器结构，可以在 stable Rust 编译，去除了对堆内存和全局变量的依赖，完善了相关文档，以及若干的小修复。0.3.0 版本更新将为 Rust 编写的 RISC-V 虚拟化软件和 RISC-V 模拟器提供良好的支持，并进一步完善裸机 RISC-V 开发的实用性，可以启动 Linux 等在内的成熟操作系统和 zCore 等在内的科研操作系统。RustSBI 0.3.0 正式版现已发布: https://rustcc.cn/article?id=18318ed2-d6b3-461c-a599-fe140ef41713GitHub - rustsbi/rustsbi: https://github.com/rustsbi/rustsbi" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/rustsbi/rustsbi" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-03 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustSBI 0.3.0 正式版现已发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 使得引入一些最常见的安全漏洞变得不可能。但是它的采用还不够快。The ‘Viral’ Secure Programming Language That’s Taking Over Tech: https://www.wired.com/story/rust-secure-programming-language-memory-safe/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.wired.com/story/rust-secure-programming-language-memory-safe/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-03 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "《连线（Wired）》杂志：接管技术的“病毒式”安全编程语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Ballista 是一款用 Rust 实现的 Arrow 原生的分布式 SQL 查询引擎。Ballista 0.9.0 现已发布，是自 2021 年该项目捐赠给 Apache Arrow 以来最重要的版本。值得关注的重要特性包含：\n支持 Flight SQL & JDBC\n支持 HDFS & S3\nPython 绑定（可通过 DataFrame & SQL 进行查询）\nHelm Chart\n全新调度器 UI & REST API\nApache Arrow Ballista 0.9.0 Release: https://arrow.apache.org/blog/2022/10/28/ballista-0.9.0/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://arrow.apache.org/blog/2022/10/28/ballista-0.9.0/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-03 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Apache Arrow Ballista 0.9.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "PsiACE" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 467: https://this-week-in-rust.org/blog/2022/11/02/this-week-in-rust-467/https://github.com/PsiACE" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://this-week-in-rust.org/blog/2022/11/02/this-week-in-rust-467/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2022-11-03 23:53" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 467" }, "type": "text" }], "type": "title" } },]
