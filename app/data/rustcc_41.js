export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #toolvim党请收下，一个在Vim中查找Rust文档，然后在浏览器打开的插件。Read Morehttps://github.com/rhysd/rust-doc.vim" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-08 23:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-doc.vim" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "@snoyberg和Miriam Snoyman正在写一本关于Rust的书，现在可以填写表单申请试读。https://twitter.com/snoybergRead Morehttps://docs.google.com/forms/d/e/1FAIpQLSeBgnFFXK22-HqP9rub59oHI4pZ1rAdBdsxRAJ23GyEAAd6eQ/viewform" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-08 23:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一本关于Rust初学者的书" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust@pauldix是InfluxDB的CTO，他在 2014 年的预测是：许多用 Java 编写的基础结构项目将在 Go 中重写。2020年的预测许多在Go编写的基础设施项目将在Rust中重写。点击下面的链接参与讨论。https://twitter.com/pauldixRead Morehttps://twitter.com/pauldix/status/1234563709957296131" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-08 23:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "关于Rust的预测" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #gamedev@ozkriff正在创建Rust Gamedev 的newsletter，欢迎各位参与共享，下面是一些issue，你可以找到你感兴趣的解决它。https://twitter.com/ozkriffRepohttps://github.com/rust-gamedev/rust-gamedev.github.io/issues\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-08 23:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Gamedev newletter" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Crabler，Rust语言开发的基于异步的Web爬虫。Docs，Githubhttps://docs.rs/crabler/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-07 21:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Crabler" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "正在开发中的用Rust语言开发的Java虚拟机Githubhttps://github.com/douchuan/jvm" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-07 21:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust语言开发JVM" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Yew Form，它是Yew的HTML表单的模型绑定器。支持：\nRust结构体和HTML表单控件之间的双向绑定\n使用Keats验证器（https://github.com/Keats/validator）进行验证\n支持通过#[derive(Model)]定义结构体\nDemohttp://chronogears.com/yew-form/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-07 21:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Yew Form" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "越来越多的公司正在考虑是否应该将Rust添加到其技术栈中，这个演讲希望可以帮助做出决定。YouTubehttps://youtu.be/DnT-LUQgc7s--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-07 21:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "考虑使用Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read morehttp://bit.ly/2VNlVyV" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: 實時3D Nbody模擬" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Nannou是Rust的開源，創新的程式框架。自發布以來，今天標誌著該項目最大的里程碑之一-版本0.13的發布。WebGPU是一個GPU使用的跨平台標準WebGPU正在所有主要瀏覽器中實現代表以後Nannou也可以利用瀏覽器來畫出各種畫面文章裡有例子Read morehttp://bit.ly/32Squtg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: Nannou 更新了 WebGPU" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "說明https://github.com/berkowski/rust-target-cmake範例stm32l0xx-halhttps://github.com/berkowski/stm32l0xx-hal/CLion embedded debuggerhttps://www.jetbrains.com/help/clion/embedded-gdb-server.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在嵌入式GDB除錯Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "该项目是一个 flutter 的插件模板，它对所有可用的 iOS 和 Android 架构提供了交叉编译原生 Rust 代码的开箱即用支持，Dart 语言可以通过 FFI(Foreign Function Interface) 调用它。该项目提供了一流的FFI支持，表现如下：\nNo Swift or Kotlin wrappers\nNo message channels\nNo async calls\nNo need to export aar bundles or .framework's\n更多了解更看项目地址:https://github.com/brickpop/flutter-rust-ffireddit上参与讨论：https://www.reddit.com/r/rust/comments/fdzgc8/found_this_to_be_extremely_interesting/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/fdzgc8/found_this_to_be_extremely_interesting/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在 Flutter 插件上运行原生 Rust！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "chip8.rs 博文主要讲述如何使用 Rust 实现 PineTime 智能手表的 CHIP-8 游戏模拟器。原文地址：https://lupyuen.github.io/pinetime-rust-mynewt/articles/chip8" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "chip8.rs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "I lightly documented my experience with Rust serverless using Cloudflare Workers.TL;DR There is a lot of promise, but the overall state of Rust on serverless is pretty immature. This is likely to change in the next 12 months.UPDATE: For Cloudflare workers you can access the Workers KV API directly using wasm_bindgen. This improves performance significantly. A full example can be found here: https://github.com/jRiest/the-best-goats/reddit: https://www.reddit.com/r/rust/comments/fdmzyh/serverless_rust_i_tried_it_with_cloudflare_workers/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Serverless + Rust 的尝试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 学起来不是很难么？半小时怎么可能...让我们一起来看看这位小哥写的博客，30 分钟速览 Rust 语法的概要，博客地址：https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "半小时学习 Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "timetill.rs 是一个社区项目，致力于收集来自世界各地的 Rust 会议。 Timetill.rs 是一个开放项目，社区中的任何人都可以参与。详情请看：https://timetill.rs/#/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-06 11:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "timetill.rs 项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇博客中讨论了为什么\"async/await\"对于嵌入式开发来说是比较重要的一个功能.文章从一下几个角度来分析：https://ferrous-systems.com/blog/async-on-embedded/\n从阻塞到非阻塞\n多任务处理\n线程\n数据共享\n...\n详情：https://ferrous-systems.com/blog/async-on-embedded/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://ferrous-systems.com/blog/async-on-embedded/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-05 01:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "嵌入式开发中的 async/await" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "不用改动代码，只通过几个技巧就能提高你的 Rust 项目运行速度，比如在`Cargo.tom` 文件中 [profile.release] 下根据情况更改一些字段或许就可以提升你的项目性能：\nlto = \"fat\"\ncodegen-units = 1\ntarget-cpu = \"native\"\n...\n详细介绍：https://deterministic.space/high-performance-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://deterministic.space/high-performance-rust.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-05 01:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "几个小技巧让你的 Rust 代码性能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详情： https://blog.acolyer.org/2020/03/02/firecracker/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.acolyer.org/2020/03/02/firecracker/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-05 01:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Firecracker: serverless 应用的轻量级虚拟化" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 官方博客介绍了即将了即将应用于stable Rust  的模式匹配新特性.. 意味着可变间隔，例如其中 [x0, .., xn] 就表示匹配第一个以及最后一个元素而忽略中间的所有元素.另一种用法是可以将subslice约束为一个变量，比如如果我们希望某个函数除了最后一个参数之外的参数不能为 ... 那么可以这样写：这里的 ps @ .. 就表示忽略参数的最后的一个元素而将剩下的元素转化为 变量 ps其他还有\nNested OR-patterns\nBindings after @\nCombining by-move and by-ref bindings\n详情： https://blog.rust-lang.org/inside-rust/2020/03/04/recent-future-pattern-matching-improvements.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2020/03/04/recent-future-pattern-matching-improvements.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-05 01:20" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust blog：近期以及未来的模式匹配改进" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Yew是使用Rust＆WebAssembly构建客户端Web应用程序的框架。在此版本中，增加了对使用Rust与Web Assembly Working Group的基础web-sys插件构建Web应用程序的支持。我们也已经开始为事件监听器集成gloo插件（也来自rust / wasm工作组）。https://github.com/yewstack/yew/releases/tag/0.13.0此版本中的另一个重大变化是对Component属性指定方式的更新。对于上下文，Yew 在使用“ JSX”样式语法声明组件时允许在编译时属性检查。在此版本之前，默认情况下将属性视为可选属性，并且如果要按要求将struct字段注释为struct属性，则可以使用宏属性对其进行注释（忘记传递必需的属性会导致编译错误）。对于此版本，我们翻转了默认行为。默认情况下，将属性视为必要的属性，如果使用此类注释，则将其视为可选属性。新语法利用了Rust 1.34中发布的令牌自定义属性，如下所示：https://blog.rust-lang.org/2019/04/11/Rust-1.34.0.html#custom-attributes-accept-arbitrary-token-streams详细发布文档：https://github.com/yewstack/yew/releases/tag/0.13.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/yewstack/yew/releases/tag/0.13.0" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-02 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Yew v0.13发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "以下是Neovim的简单图形用户界面。在可能的情况下，可以进行一些图形上的改进，但其功能应类似于终端用户界面。标准的全功能Neovim GUI。除此之外，还有一些视觉效果：表情符号支持前往Github仓库获取源代码：https://github.com/Kethku/neovide" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/Kethku/neovide" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-02 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "编写Rust的 Neovim 客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "git-trim自动修剪合并或消失的git远程跟踪分支。按常规的操作，Git的PR工作流程有些繁琐。但现在只需键入git trim并按下y一次键就足够了。这就是git-trim。它知道分支是否合并到默认基础分支中，或者是否被拒绝。甚至push --delete在您需要时忘记删除远程分支时也可以。前往GitHub仓库了解更多：https://github.com/foriequal0/git-trim\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/foriequal0/git-trim" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-03-02 22:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "git-trim：一个用于修剪用Rust编写的合并的本地/远程分支git工具。" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "xworks，简单，没有框架，没有额外的样式表。它生成一个HTML文件，其中包含60行漂亮的内联CSS。Githubhttps://github.com/t1ra/xworks" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-29 21:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "xworks，静态站点生成器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "FFI模式一，将复杂的Rust数据结构无缝地暴露给C++。博客文章https://crisal.io/words/2020/02/28/C++-rust-ffi-patterns-1-complex-data-structures.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-29 21:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "FFI模式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "基于sled和tantivy的可搜索文档数据存储。https://docs.rs/sled为sled数据库提供类型树（typed-tree）接口，并带有标准的数据存储操作（查找，创建，更新，删除），还提供Lucene/Elasticsearch方式的搜索。docs.rs和Githubhttps://docs.rs/pallet/0.4.1/pallet/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-29 21:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pallet，基于sled和tantivy的可搜索数据存储" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "arcs，Rust语言开发的CAD系统，用于构建2D计算机辅助设计应用程序的库。v0.3.0，具有更多的算法和更良好的文档。docs.rshttps://docs.rs/arcs/0.3.0/arcs/--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-29 21:51" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "arcs v0.3.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Read morehttp://bit.ly/2VsjCB9" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-28 13:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust week 327" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Rust 1.41.1解決了Rust 1.41.0中引入的兩個關鍵問題：一個與靜態生命週期相關的健全漏洞一個導致分段錯誤的錯誤編譯Read morehttp://bit.ly/2T7XAC4" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-28 13:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.41.1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "StreamMap 把多個channel 組合起來聽事件Notify 提供async / await下一步的通知用Read morehttp://bit.ly/32AKl0c" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-28 13:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Tokio v0.2.12" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Authenticated Encryption with Associated Data提供多個加密選項但不相容openssl不建議使用Read morehttp://bit.ly/2weJBS0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-28 13:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustCrypto: AEADs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "支援 rust, C++, windows, Xbox可在windows上運行Read morehttp://bit.ly/3a9DTzC\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-28 13:16" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "superluminal: 強大的profiler" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "UTC 时间 2020 年 2 月 20 日 21:28，我们收到了来自 crates.io 用户的报告，即使自上传 10 分钟后，索引中的仓库仍不可用。这是由于 GitHub 中断导致 crates.io 网站 web 程序中的 bug 被触发。在 Rust 官方博客查看报告原文:https://blog.rust-lang.org/inside-rust/2020/02/26/crates-io-incident-report.html此外 Reddit 上关于此事讨论：https://www.reddit.com/r/rust/comments/f8ney8/hey_rustaceans_got_an_easy_question_ask_here_92020/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/f8ney8/hey_rustaceans_got_an_easy_question_ask_here_92020/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 19:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "crates.io 2020-02-20 事件报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是个很有意思的博文。保护个人的安全和隐私是 Mozilla 使命的核心原则，因此 Mozilla 不断努力使用户在线更加安全。 对于像 Firefox 这样的复杂且高度优化的系统，内存安全是最大的安全挑战之一。Firefox 主要是用 C 和 C++ 编写的，而尽管 Firefox 中广泛使用沙箱（sandboxing）和 Rust，但它们都有其局限性。流程级沙箱可很好地用于大型的现有组件，但会消耗大量系统资源，因此必须谨慎使用。Rust 是轻量级的，但是重写数百万行的现有 C++ 代码是一个极其劳动密集型的过程。所以 Mozilla 是如何使用 WebAssembly 和 Rust 保护 Firefox 的呢？ 请看原文：https://hacks.mozilla.org/2020/02/securing-firefox-with-webassembly/Reddit 上参与讨论:https://www.reddit.com/r/rust/comments/f9qk28/securing_firefox_with_webassembly_and_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/f9qk28/securing_firefox_with_webassembly_and_rust/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 19:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用 WebAssembly 和 Rust 保护 Firefox" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这是博主关于 Rust 嵌入式开发系列博文的开题文章，博客地址：https://josh.robsonchase.com/。目前相关的系列博文有：\nBootstrapping My Embedded Rust Development Environment\nEmbedded Rust Frustrations\nBuilding an Embedded Futures Executor\nBuilding an Embedded Futures Executor II\nReddit 上相关近期讨论:https://www.reddit.com/r/rust/comments/f9tjeu/embedded_rust_frustrations/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/f9tjeu/embedded_rust_frustrations/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 19:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "搭建我的嵌入式 Rust 开发环境" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "4万/月招资深 Rust 后端开发工程师！！！详情请看：https://rust-china.org/article?id=0cac0b1f-b721-4b6a-85b6-48c7481836ba\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 19:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "高薪招聘 Rust 工程师" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "簡單好用的小技巧https://medium.com/adobetech/filtering-duplicates-on-the-command-line-30x-faster-than-sort-uniq-96ca5f7b4277" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://medium.com/adobetech/filtering-duplicates-on-the-command-line-30x-faster-than-sort-uniq-96ca5f7b4277" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 01:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: 教你如何比sort|uniq快30倍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "profiler教學搭配官方維護的profiler分別是 crox flamegraph summarize有時間比較、火焰圖、函數時間圖https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 01:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: rustc profiler" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "看起來像內建blockchain的Protocol Buffershttps://github.com/iqlusioninc/veriform" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/iqlusioninc/veriform" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 01:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: Veriform 安全面向的序列化庫" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://github.com/ClementTsang/bottom\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/ClementTsang/bottom" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-27 01:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: bottom 跨平台工作管理員" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "joshsulin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "KAS 0.3 版本发布, 此版本已经在主题，图形和绘图API上进行了大量工作，包括用于Mandlebrot分形的交互式查看器（通过WebGPU着色器），模拟钟面（通过某种程度上可用的绘图API），可切换的主题和不起眼的单选按钮小部件。该项目的目标是：1、功能齐全的直观GUI2、可嵌入游戏或任何窗口管理器中3、花式/高度灵活的硬件加速渲染（但理论上也可以支持软件渲染）4、代码内的简单，表达规范（目前受Rust语言限制的束缚，希望将来能解决）6、用户代码中的自定义小部件不受限制7、无错误，带有API，可简化编译器正确性8、高性能/低资源使用率（可选的精美图形除外）该项目的状态为Alpha：在实现所有目标方面均取得了进展，但功能和愚蠢的图形存在明显的局限性。 可移植性是有限的，需要每晚的Rust和wgpu支持。了解其更多 请访问 GitHub仓库https://github.com/dhardy/kas" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-25 22:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "KAS GUI 0.3 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "joshsulin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "1、从HTTP URL检索源图像2、将图像编码为PNG，JPEG，WEBP或HEIC3、调整图像大小4、旋转影像5、将水印图像应用于图像这篇文章介绍了 Dali 诞生的背景. https://tech.olx.com/presenting-dali-an-image-processor-service-514e6be00de8, 强烈推荐阅读这段文章.了解其更多 请访问 GitHub仓库https://github.com/olxgroup-oss/dali" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://tech.olx.com/presenting-dali-an-image-processor-service-514e6be00de8" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-25 22:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dali是一项执行图像转换的服务, 该应用程序支持:" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "joshsulin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这篇博客的目的是研究Rust的Type-Driven开发。Type-Driven开发是一种使用类型系统开发强大且经过验证的软件的方法。博客原文：https://medium.com/@11Takanori/introduction-to-type-driven-development-with-rust-6f8a767cc3df\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://medium.com/@11Takanori/introduction-to-type-driven-development-with-rust-6f8a767cc3df" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-25 22:21" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust的 Type-Driven 开发简介" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "在过去五个月左右的时间里，团队一直在疯狂地研究Rust / WinRT，因此我团队在rust方面的努力仍在继续。我期待着尽快向社区开放。即使那样，这仍将是早期的日子，但仍有很多工作要做，我们基本上同意建立语言投影大约需要三年。自然地，这其中蕴含着十分大的价值。仍然可以使用Rust / WinRT进行API调用，并且看到它们结合在一起非常令人满意。因此，我将带给您一些先睹为快的信息，以使您了解Rust中调用Windows API的外观。这是古老的Windows.Foundation.Uri类：这是使用Windows.ApplicationModel.DataTransfer命名空间将一些值复制到剪贴板的另一个示例：这里我们调用了DataPackage的默认构造函数，但是Rust当然没有构造函数。因此，默认构造函数被常规的new方法替换。最后，这是使用Windows.UI.Composition API的示例：在这里您可以看到我们正在创建一个合成器。我们使用合成器使用红色笔刷创建一个精灵视觉效果，然后设置视觉效果的偏移量。这看起来很简单，但这证明了Rust / WinRT的开发已经进行了大量工作，以使其看起来像Rust一样自然和原生。Composition API是Windows API中仅有的两种类型层次结构之一，需要特别注意才能正确使用任何语言，更不用说缺乏传统继承的语言了。Rust / WinRT允许您使用直接从描述API的规范元数据中即时生成的代码调用，现在和将来的任何 Windows API，然后直接进入您的Rust包，在其中您可以像调用另一个一样调用它们的rust模块。博客原文：https://kennykerr.ca/2020/02/22/rust-winrt-coming-soon/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://kennykerr.ca/2020/02/22/rust-winrt-coming-soon/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-24 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust/WinRT即将到来" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "由Plotly JS支持的Rust绘图库。绘制折现与散点图了解其更多用法与工程源码请访问GitHub仓库。https://github.com/igiagkiozis/plotly/tree/master" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-24 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Plotly for Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n管理和协调JWT以进行用户登录、注销和续订\n异步就绪\n轻松启动\n没有不安全的代码\n在稳定的rust下运行\n库方法（不需要运行时调用）\n支持可插拔组件\n更新新的刷新令牌后使旧的刷新无效\n更新新的身份验证令牌后使旧的身份验证无效\n在身份验证令牌到期时处理Thundering herd问题\n目前工程需要添加更多示，并提高覆盖率。前往GitHub仓库了解更多。https://github.com/sgrust01/jwtvault\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-24 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "高度灵活的可用于管理和协调JWT工作流的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #toolnix是一个纯粹的功能包管理器，Nix将Package保存在Nix-Store，通常保存路径是/nix/store，每个Package都有自己独一无二的子文件夹，比如https://nixos.org/nix/manual/#ch-about-nixb6gvzjyb2pg0…是该包的唯一标识，可以捕获其所有依赖项目。nix-query-tree-viewer是一个对nix store --query --tree命令结果可视化展示的工具。它提供了树形视图模式，可以展开折叠某一项，并提供多种排序方式和搜索功能。https://github.com/cdepillabout/nix-query-tree-viewerRead Morehttps://linuxwit.ch/blog/2020/02/the-future-of-rusoto/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-23 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nix-query-tree-viewer —— nix store可视化工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustDHAT（A dynamic heap analysis tool）是用于检查程序如何使用其堆分配的工具，它跟踪已分配的块，并检查每个内存访问以查找要访问的块（如果有）。 它在分配点的基础上提供有关这些块的信息，例如大小，生存期，读写次数以及读写模式。它可以帮你找到能够尽量避免掉的short-lived内存分配，如果要使用这个工具，需要在valgrind命令后加上--tool=dhat。Read Morehttps://valgrind.org/docs/manual/dh-manual.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-23 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "DHAT 一个动态堆内存分析工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRead Morehttps://fasterthanli.me/blog/2020/working-with-strings-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-23 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么Rust同时有String和&str?" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "@QuietMisdreavus在3年半前加入rust，在这段时间他参与领导docs.rs，并且是Rustdoc和Document小组的成员，如今他退出了小组，这篇文章说明了他这段时间的心路历程以及团队的变动。又是一个在开源中筋疲力尽的人。https://twitter.com/QuietMisdreavusRead Morehttps://quietmisdreavus.net/self/2020/02/17/rust-ghost-signing-off/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-23 21:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "docs.rs团队负责人离开" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "dua crate 链接https://crates.io/crates/dua-cli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dua，Macbook 磁盘使用情况分析器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "dtool是有助于开发的命令行工具集合。新的功能：\n添加EdDSA（ed25519签名）模块\n添加sr25519签名模块\nGithubhttps://github.com/guoxbin/dtool" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dtool v0.8.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Docker tagshttps://hub.docker.com/r/jdrouet/rust-nightly/tags" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust nightly版本多种架构的docker image" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "cargo-casperlabs，用于创建和测试Wasm智能合约，在CasperLabs网络上使用的命令行工具，为Rust开发人员提供开发区块链合约的无缝体验。crate 链接https://crates.io/crates/cargo-casperlabs--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CasperLabs进入Rust生态" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "大图或者原图请戳这里：https://www.reddit.com/r/rust/comments/f796ds/made_a_rusty_rust_wallpaper_the_other_image_was/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 14:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "福利！Rust 高清壁纸来啦！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Pangolin 是用于 K8s 的增强型水平 Pod 自动缩放器，用 Rust 实现，它可以使用多种高度可配置的控制策略，根据 Prometheus 指标扩展部署。而且它使用起来还是挺便捷的，仓库地址：https://github.com/dpeckett/pangolinreddit 上参与讨论：https://www.reddit.com/r/rust/comments/f7ewtn/pangolin_a_kubernetes_autoscaler_written_in_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 14:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pangolin" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "地址直达：https://github.com/sn99/wasm-template-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 14:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "github pages 上托管 Rust + Wasm 项目教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "CrabQuery 是一个小型、简单的库，可查询 HTML 标记来满足您 Web 抓取需求。使用示例\b:reddit 上参与讨论：https://www.reddit.com/r/rust/comments/f7dir1/crabquery_like_jquery_but_for_crabs/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-22 14:44" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "CrabQuery - like JQuery, but for Crabs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "現在0.12版了Read morehttp://bit.ly/2P8d5ru" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-20 09:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: Tantivy是一個受Apache Lucene啟發的全文搜尋引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一個功能齊全的框架，使您能夠使用Rust中的async / .await語法輕鬆構建Telegram機器人。Read morehttp://bit.ly/2T1HLeX" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-20 09:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: teloxide Telegram機器人Framework" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Fast State-of-the-Art Tokenizersoptimized for Research and Production可以訓練新的詞語每1GB的資料可以在他們的Server上以少於20秒的時間內分完有需要的人應該會覺得好用Read morehttp://bit.ly/2V5b2YV" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-20 09:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: Tokenizers 快速的分詞器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "專門讀取 Microsoft's OfficeOpen XML 的庫Read morehttp://bit.ly/3bNVRJP\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-20 09:39" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: oox-rs Office Open XML讀取庫" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详情https://intellij-rust.github.io/2020/02/18/changelog-116.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-19 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "IntelliJ Rust 更新日志 #116" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "are we game yet  此网站聚合了有关Rust游戏开发的资讯、开发工具包索引、Rust 游戏索引、学习资源索引等内容https://arewegameyet.com/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-19 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 游戏开发聚合网站" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "用不超过 1024行 Rust 代码写的文本编辑器， 支持 UTF-8、增量搜索、语法高亮、行号等，欢迎贡献. 详情https://github.com/ilai-deutel/kibi" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-19 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "kibi 文本编辑器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "全文https://leshow.github.io/post/rust_for_java_devs/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-19 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "给 Java 程序员的 Rust 教程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Redis 图形化数据库，详情https://github.com/malte-v/redisgraph-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-19 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "redisgraph-rs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详情https://quietmisdreavus.net/self/2020/02/17/rust-ghost-signing-off/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-19 22:50" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Docs.rs 团队 leader 卸任" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个用于通过WASM渲染SVG图形的Rust库它提供了快速有效的方法，可以使用WebAssembly与SVG进行交互。它能够：\n声明形状和样式以用于这些形状\n使用SVG 标签将这些形状渲染到DOM\n自动检测两个形状是否相同，因此只有一个SVG 将添加到DOM中\n声明已命名的项目/容器，以便以后进行例如隐藏，重新显示和重新放置之类的调整。\n开发团队已测试版本0.3.0的稳定性，并且可以在开发中使用。此软件包仍在开发中，但大多数对1.0.0的API调用已完成。如果发现任何错误，请在GitHub上提交问题或诉求。https://github.com/coastalwhite/WasmSVGGraphics原文请查阅crates.io网站https://crates.io/crates/wasm_svg_graphics" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-17 23:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WASM向量图形 --wasm_svg_graphics 0.3.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一周前，作者对改进客户端代码体系结构的所有细节感到有些不知所措，但是从那时起，作者就为所有主要部分布置了数据结构和测试，并对所有组件的安装方式有了很好的认识一起。因此，现在正在努力的只是编写和实施更多测试，直到所有内容都准备就绪。在进行这种重构方面，似乎需要多花1~2周的时间，然后我们才能重新投入实际游戏的开发工作中。\n地形加载和渲染\n输入事件处理器系统\n用户界面元素\nWebGL渲染器\n详情前往作者博客查看。https://devjournal.akigi.com/february-2020/2020-02-16.html#input-event-processor-system" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-17 23:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用wasm-bindgen-test测试Rust + WebGL渲染器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Krabs是用Rust编写的实验性x86 / x86_64引导程序。Krabs可以引导用bzip2压缩的ELF格式的内核、解压缩bz2映像并重新定位ELF映像，然后引导内核。一些源代码使用libbzip2 C库进行解压缩，但其余的完全使用Rust。Krabs正在致力于在32位/ 64位PC上引导以ELF格式格式化的vmlinux和其他内核，并且正在开发中。Krabs还旨在仅支持最小的Linux启动协议。这使您可以指定内核命令行并在启动时操纵内核的行为。另一个功能是，为了节省空间，ELF格式内核在使用前先使用bzip2进行了压缩，并使用libbzip2库进行解压缩。下面是一个例子：工程详情与构建方法前往GitHub查看。https://github.com/ellbrid/krabs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-17 23:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Krabs：可以引导vmlinux的x86引导程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "LacneQin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一些str方法执行的转换具有破坏性，因此String即使不需要修改，它们也可以分配，复制并返回新的方法 中。此软件包提供了一种具有辅助特性的CowUtils，其中包含此类方法的直接插入变体，它们的行为方式相同，但是在不需要修改时避免额外的副本和分配。目前，它仅针对&str和返回 实现std::borrow::Cow<str>，但将来可能会扩展到可能进行更有效处理的其他类型（例如，对可变字符串进行就地修改）。这个箱子的主要动机是在没有找到匹配的情况下执行零分配替换的功能，因此现在仅显示.replacevs的结果.cow_replace。实际结果将根据输入而有所不同，但这是一个品尝者，基于\"a\".repeat(40)输入和各种模式（不匹配，匹配和替换的所有内容，从开始到删除的所有匹配项）：关于项目详情访问GitHub。https://github.com/RReverser/cow-utils-rs\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-17 23:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cow-utils：用于Rust写入时复制字符串实用程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Githubhttps://github.com/Hexilee/roa" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-15 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Roa，异步web框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Boa是用Rust编写的可嵌入的和实验性的Javascript引擎。Githubhttps://github.com/jasonwilliams/boa" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-15 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Boa v0.6" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Aleksey Kladov，是一位喜欢简单代码和编程语言的程序员。他写的一篇博客文章，小编这里简单列几个文章中提到的理由：\n跨平台二进制文件\nOrd，Debug & Display\n详细的数据类型\n详细参见Aleksey Kladov的博客文章https://matklad.github.io/2020/02/14/why-rust-is-loved.html--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-15 22:54" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么Rust是最受欢迎的编程语言？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "發現昨天看的英文新聞有人翻譯成簡中了分享一下read morehttp://bit.ly/2SLA7Fo" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-14 11:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么你写的代码糟透了？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Sealed Rust是Ferrous Systems 的努力的目標希望從理論上驗證軟體的安全性，並以實作即規範的方式來開發。目標是通過將Rust編程語言用於安全關鍵軟件開發，從而改善安全關鍵領域中質量和正確性的現狀。他們目前制定了一些計劃read morehttp://bit.ly/2UOPpvZ" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-14 11:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Sealed Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "他利用Callgrind來看程式碼的執行時間一步一步的迭代 最後優化了11~13%read morehttp://bit.ly/2OTrffR" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-14 11:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "看nnethercote怎麼優化程式的" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Alex Crichton：減少對Rust的參與。將異步/等待帶入嵌入式Rust。Rust宣布成立ICE-breaker組。Rust遊戲開發生態系統調查的結果。std::future::Rusoto的未來。在VSCode中調試Rust。從React的角度來看Rust和GTK。Rust Async入門。解決Rust中的稀疏矩陣系統。Markedit。創建交互應用程式。Async採訪6：Eliza Weisman。read morehttp://bit.ly/38qmvX5\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-14 11:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "這禮拜的Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "它是用 Rust 编写的实验性 Javascript 词法分析器，解析器和编译器。示例：项目地址：https://github.com/jasonwilliams/boa" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 23:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Boa" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者的这个博文基于上文提到的 Boa 项目。我们可以有多种方法调试 Boa 的操作，以此去了解它是如何工作的，甚至测试一些 javaScript 的代码。https://github.com/jasonwilliams/boa了解具体的配置方法以及具体实现请看 博文地址：https://jason-williams.co.uk/debugging-rust-in-vscode" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://jason-williams.co.uk/debugging-rust-in-vscode" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 23:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在 VSCode 中调试 Rust 程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "git-trim 是 Rust 编写的项目，他可以自动修剪合并或消失的 git 远程跟踪分支。仓库地址：https://github.com/foriequal0/git-trim" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 23:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "git-trim" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "水友请看：https://www.reddit.com/r/rust/comments/f2uqa7/parallel_programming_in_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 23:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "关于 Rust 并行编程的讨论" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Jancd" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "当然，标题是开玩笑的orz，实际上这个项目是 hotpot-db，它是围绕 SQLite 的 JSON 扩展的 API，它使您能够以 NoSQL 的方式（像DynamoDB这样）存储数据。使用示例：项目地址：https://github.com/drbh/hotpot-dbreddit 上参与讨论：https://www.reddit.com/r/rust/comments/f2vbji/github_drbhhotpotdb_hottest_way_to_store_data_on/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 23:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "麻辣火锅-DB？？？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "NLP 模型 BERT 的 Rust 版，使用了 tch-rs crate并用 rust-tokenizers 进行了预处理，支持多线程分词以及 GPU 接口. 详情https://github.com/guillaume-be/rust-bert" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 01:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-bert" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这个小项目介绍如何用 Bazel 将 Rust 编译成 wasm 并部署成为 Azure 云函数. 详情https://github.com/manekinekko/bazel_rust_wasm_azure_functions" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 01:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "bazel_rust_wasm_azure_functions" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个使用 Rust 固件的 ergo 键盘" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 01:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ergo 键盘" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Alex Crichton 是 Mozilla Rust 的开发人员，他对 Rust 做出了很多贡献。几天前他宣布将减少对 Rust 的参与，原因是觉得有点累，想歇一歇详情https://internals.rust-lang.org/t/scaling-back-my-involvement-in-rust/11754\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-13 01:49" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "减少我对 Rust 的参与" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "joshsulin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "零成本抽象的概念对于某些编程语言非常重要，比如 Rust 和 C++，这些语言的目的是使用户能够用相对较少的努力编写具有出色性能的程序。作者认为他写的这篇文章正确地反映什么是零成本抽象.  实际上，零成本抽象(即“零开销”)是很难理解的, 也很难与其他编译器优化分离开来，并且很容易被误解. 这篇博客文章中，讨论了这个特性，并给出了 Rust 如何使用它来交付您的抽象项目的优化代码的示例.https://carette.xyz/posts/zero_cost_abstraction/https://carette.xyz/posts/zero_cost_abstraction/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://carette.xyz/posts/zero_cost_abstraction/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 零成本的抽象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "joshsulin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "本文并不全面介绍Rust异步主题，但如果您不了解Rust中的异步编程或一般的异步编程，则可能是一个简单的概述.推荐大家阅读这篇文章: https://omarabid.com/async-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://omarabid.com/async-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust异步入门" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "joshsulin" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详情请阅读这篇文章: https://github.com/lupyuen/blockly-mynewt-rust\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/lupyuen/blockly-mynewt-rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 22:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust代码生成器几乎完成了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Reddit /r/rust 应该是全世界最活跃的Rust主题公告和讨论板了。现在订阅数已超9w了。https://subredditstats.com/r/rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://subredditstats.com/r/rust" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "reddit /r/rust 订阅已过9w" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Seed是使用Rust+Wasm进行前端Web开发的框架。小编个人非常喜欢。这次主要是内部的大量重构。https://seed-rs.org/guide/changelog" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://seed-rs.org/guide/changelog" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Seed 0.6 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "a collection of crates, providing simple custom DSTs, pointer unions, borrowed reference counts, and more!https://github.com/CAD97/pointer-utils/blob/master/blog/Announcement.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/CAD97/pointer-utils/blob/master/blog/Announcement.md" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pointer-utils: 指针工具集" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者做了4年scala开发，然后学了半年haskell，然后看了两周Rust，就 fall in love 了。准备今年开始用Rust做一个 MVP 项目。https://www.reddit.com/r/rust/comments/f1c3v6/a_rustacean_change_of_heart/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/f1c3v6/a_rustacean_change_of_heart/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个 Rustacean 的心路历程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Pushrod GUI 框架的作者一个人开发了一年多，想邀请更多的开发者参与进来开发。有兴趣的可以了解一下哦。https://www.github.com/KenSuenobu/rust-pushrod/issues/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.github.com/KenSuenobu/rust-pushrod/issues/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pushrod 0.2.27: SDL2-based GUI for Rust - Call for Help!" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/f12plt/got_redox_booted_on_a_t520/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://www.reddit.com/r/rust/comments/f12plt/got_redox_booted_on_a_t520/" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Redox 已经可以在 T520 笔记本上启动了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "灵感来自：https://github.com/johanhaleby/kubetail作者通过这个异步工具解决了他们CPU使用率过高的问题。https://github.com/ericmcbride/wufei" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "https://github.com/ericmcbride/wufei" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WUFEI - Async Kuberenetes Namespace Log Recorder / Streamer" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "Mike Tang" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "看了一下，效果挺不错的。http://shafiqahmad.com/#blog" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "http://shafiqahmad.com/#blog" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-11 11:10" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个 Yew 个人博客样例" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRusoto 是一个 Rust 实现的 AWS SDK，目前在 beta 版本 v0.43.0-beta.1 中兼容了std::future::Future.Read Morehttps://linuxwit.ch/blog/2020/02/the-future-of-rusoto/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-09 22:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rusoto 兼容了 std::future::Future" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #crateimage.rs 是一个用来处理图片的包，新版本ChangeLog:\n改进了异常捕获机制\n新的解码器接口\n更新了依赖\n寻求更好的色彩空间处理\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-09 22:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "image.rs 发布了0.23版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "makeco" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust #crateKrabs可以引导用bzip2压缩的ELF格式的内核。Krabs解压缩bz2镜像并重新定位ELF镜像，然后引导内核。一些源代码使用libbzip2 C库进行解压缩，但其余的完全仅是Rust。Krabs 目前还不能运行vmlinux。尚未测试。Repohttps://github.com/ellbrid/krabs\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-09 22:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "krabs —— 一个x86引导程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "wasm-pack，该工具旨在成为一站式平台，用于构建Rust生成的WebAssembly，希望使用它与JavaScript，浏览器或Node.js进行互操作。同时该项目是rust-wasm工作组的一部分。Github wasm-pack release 0.9.1https://github.com/rustwasm/wasm-pack/releases/tag/v0.9.1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-08 21:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasm-pack 0.9.1发布了！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Prometheus的Unbound DNS解析器已基本完成。Githubhttps://github.com/svartalf/unbound-telemetry" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-08 21:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "unbound-telemetry" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "actix-ratelimit，Actix-Web的速率限制中间件框架。Githubhttps://github.com/TerminalWitchcraft/actix-ratelimit" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-08 21:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "actix-ratelimit" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "洋芋" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "sheevink的博客文章，如何将async/await引入嵌入式Rust。博客文章https://ferrous-systems.com/blog/embedded-async-await/--https://rust.cc/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-08 21:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "嵌入式Rust与async/await" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "今天來講的更詳細一點他們發現go程式每兩分鐘就會有一個延遲高峰這個延遲高峰是因為go每兩分鐘就要清一次記憶體垃圾這個問題出現在 go 1.9.2 也許最新版修掉了不過已經對Discord沒有意義了這次的測試是在 2019年5月進行的結論：有GC的語言不代表你可以不用處理記憶體問題他會在未來轉化成另一種成本更高的問題，如果你有做起來的話但有GC的開發速度的確快，可以先用有GC的語言先開發個雛形驗證商業模式在你的商業模式短時間不會改變的情況下，再用其它高效安全沒GC的語言去重寫read morehttp://bit.ly/38dIGQd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-07 09:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "為什麼 Discord 要從go轉換到rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者試了幾種能讓React跨平台的方案都失敗後決定來用native的UI最後他選擇了 Rust + GTK這種轉換對過去都寫前端的他並不容易所以他整理了一些方向方便之後有寫過React的Web前端快速上手Rust + GTK來做Native前端read morehttp://bit.ly/31DBp9F" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-07 09:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "從React的角度來看Rust和GTK" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "去年八月，我們對Rust gamedev生態系統進行了一項調查。現在終於可以展示結果了。75%是業餘愛好者 20%是商業遊戲開發人員45% 考慮使用 50%正在用專業人士和業餘愛好者的工作重點基本相同。最大的區別是：愛好者希望將生態系統成熟度提高兩倍。愛好者更關心手機、網路的支援程度專業人士更關心console(Xbox, PS4)支援專業人士更關心C++互相溝通無法正確除錯，例如hashmap絕對無法查看內容。不知道它在Rust是如何運作的。缺少像Visual Studio這類強大的IDE支援會Rust的人太少，不好找Sony或Microsoft尚未正式在console(Xbox, PS4)上支援Rust沒有專業的遊戲引擎（UE4，Unity）與Rust集成。程式碼以及引擎都是C++。一起使用Rust和C++會很痛苦，而將現有技術完全重寫為Rust將成本太高。read morehttp://bit.ly/31wmqyg" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-07 09:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust遊戲開發-生態系統調查" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "什麼是Cleaning Crew ICE-breaker組？“ Cleanup Crew”專注於改進錯誤報告。具體而言，目標是嘗試確保每個錯誤報告都包含修復它所需的所有信息：一個錯誤的最小程式範例。連接錯誤報告到重複錯誤報告或相關錯誤報告如果錯誤是重新出現（曾經有用，但不再有效），把修正的PR的分為stable, nightly誰應該加入？熟悉Rust的任何人都可以完成此工作，而無需特別了解編譯器。您可以在rustc-guide部分找到有關該組的更多信息。read morehttp://bit.ly/2UvNood\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-07 09:15" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "成立LLVM ICE-breaker小組| Inside Rust博客" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "NLnet Labs 是一家为 DNS 和 BGP 提供开源架构工具的公司。两年前因为怕招不到人而不太敢用 Rust，但是他们最近发现现在招一个 C 程序员有点困难，但是却有一些符合要求的 Rust 的程序员在申请他们的岗位" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-06 01:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "NLnet Labs 招聘情况变化" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "详情https://interrupt.memfault.com/blog/rust-for-digital-signal-processing" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-06 01:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 实现低功耗数字信号处理" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "此系列博客的目的是描述怎样用 Rust 来完成一个开源的多人在线RPG游戏，详情https://medium.com/@ryan.cjw/adventures-with-rust-game-development-1d998c45381c" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-06 01:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 游戏开发系列博客" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "挺肥" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "DIscord 是一款实时互动的在线社交应用，主要使用场景是玩游戏的时候可以找队友聊天。官方博客中讲了为什么DIscord 正在从 Go 切换到 Rust，详情https://blog.discordapp.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-06 01:35" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么 DIscord 正在从 Go 切换到 Rust？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "chirsz-ever" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "Starship：可用于各种 Shell 的提示符https://starship.rs/zh-cn/Starship 是支持各种 shell（包括 bash、zsh、fish、powershell 等）的提示符配置工具，使用 Rust 编写，轻量高效而且高度可定制化。目前其官网、github README 页面、配置文档的简体中文翻译工作已经完成并发布，可访问 starship 官网 查看，欢迎对翻译提出意见和修正，欢迎直接到项目的 crowdin 页面 参与翻译工作。https://starship.rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-05 15:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "https://i.imgur.com/msv73e8.pngread morehttp://bit.ly/2UnmKOf" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-04 11:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "有人用WASM寫了GameBoy模擬器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "目前只能做簡單的轉換read morehttp://bit.ly/2uXaOIm" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-04 11:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "grex 把文字規則轉成正則表達式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "查LOL戰績可以用？read morehttp://bit.ly/2Scobwj" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-04 11:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Riven: Riot API Library for Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "更新了async-std之前的BUG改進效能、穩定性以及各種附加功能並且在許多情況下，在內部實作中使用Clone取代Arc。read morehttp://bit.ly/3b6PZLa" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-04 11:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust的 async-std 1.5.0 了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "rust-analyzer是補助支援Rust IDE分析程式碼的庫像是Emacs, Visual studio code等增加了自動 import 的功能read morehttp://bit.ly/2GNPLL9" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-04 11:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Analyzer更新了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "damody" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "read morehttp://bit.ly/31ouNMi\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2020-02-04 11:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust: markedit : 一個編輯Markdown文檔的庫" }, "type": "text" }], "type": "title" } },]
