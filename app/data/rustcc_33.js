export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"CXX是一个非常棒的 crate,他可以实现 Rust 中调用 C++, 也可以实现在 C++ 中调用 Rust.本文是 Info 采访CXX的作者 David Tolnay 的记录文章.原文链接https://www.infoq.com/news/2020/12/cpp-rust-interop-cxx/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 CXX 实现 Rust和 C++ 的安全互操作性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rpt是一个基于物理的CPU 渲染引擎. 使用路径最终来生成真实的 3D 场景.特性:\n简单的声明式 API, 100% 的 safe Rust.\n支持 .OBJ, .MTL 和 .STL格式.\n使用无偏执的路径追踪来做物理的光传输.\n使用 kd-trees 来加速管线交叉.\n支持属性的深度.\n支持 CPU 并发使用,最高可以线性提高到 96 核.\n等等更多\ngithub地址https://github.com/ekzhang/rpt/下面是一些渲染的图例:"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rpt: 基于物理的 CPU 渲染引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文记录了一个可以加快集成测试的一个方法. 如果你也有很多集成测试需要跑,可以参考一下.原文链接https://rune-rs.github.io/posts/faster-tests/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"更快的集成测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文是受 reddit 的 GATs on Nightly 这篇 POST 的启发而写. 但是作者更加深入的讨论一些关于 GATs 的可能性和非可能性.原文链接https://www.fpcomplete.com/blog/monads-gats-nightly-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Monads and GATs in nightly Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"resvg是一个 SVG 的渲染库, 0.12版本正式发布, 从该版本之后, resvg再也没有非 Rust 的依赖了.github地址https://github.com/RazrFalcon/resvg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"resvg: 0.12 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rustybuzz 是一个完整的 harfbuzz 算法的 Rust porting.对应 hardbuzz v2.70 版本."},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustybuzz: Rust 版本的 harfbuzz 算法实现."},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-07 19:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"github地址"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"快来学Rust吧，使用Rust构建可靠并高效的软件。Empowering everyone to build reliable and efficient software.Repohttps://github.com/rust-lang/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-06 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"🎉 Rust 仓库突破 5W star！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"祝贺 r/rust 社区 成立十周年！Rustcc 日报素材大多搜集自 r/rust 。Posthttps://www.reddit.com/r/rust/comments/k5iatt/happy_cakeday_rrust_today_youre_10/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-06 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"r/rust：Rust Reddit社区 成立十周年！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ucz-dfs 是一个基于hdfs / gfs的分布式文件系统。注意：Just for fun and learning.Repohttps://github.com/radogost/ucz-dfs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-06 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ucz-dfs：用Rust编写的分布式文件系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"倒计时！一年一度中国 Rustaceans 最盛大的节日，RustConf China 2020 中国大会来啦！🦀期待您的到来~😀👉阅读原文https://rustcc.cn/article?id=78d06c6b-7ea3-44c5-bb48-8eb547be357a"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-06 21:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"劲爆：首届中国Rust语言大会终于来了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前可以编译并运行非常简单的着色器，而且核心库的很大一部分也可以编译。但是，很多功能还没有实现：例如，还不支持循环和开关！ 这意味着，尽管该项目在技术上可用，但远未达到可以投入生产使用。v0.2的 Github Release 链接：https://github.com/EmbarkStudios/rust-gpu/releases/tag/v0.2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/EmbarkStudios/rust-gpu/releases/tag/v0.2"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-05 23:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-gpu 发布 v0.2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章记录了在 rust-analyzer 中用于测量内存消耗的一些有趣技巧。通常，有两种广泛的方法可以分析程序的内存使用情况。第一种方法是基于堆的解析（heap parsing），第二种方法是基于对分配和释放进程的调用检测。详细可以参见原文。文章链接，https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-analyzer.github.io/blog/2020/12/04/measuring-memory-usage-in-rust.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-05 23:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer 测量 Rust 的内存使用情况"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RAUI，受到 React 声明式 UI 组成和 UE4 Slate 小部件组件系统的极大启发。RAUI 体系结构的主要思想是将 UI 视为另一种数据，你可以将其转换为目标呈现引擎选择的目标可呈现数据格式。Application 的示例：Github 链接，https://github.com/PsichiX/raui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/PsichiX/raui"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-05 23:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RAUI，将 UI 视为另一种数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本书旨在通过示例驱动的方法来解释 Rust 中的 Futures，探索为什么它们被设计成这样，以及它们是如何工作的。还介绍了一些在编程中处理并发时的替代方案。英文原版链接，https://cfsamson.github.io/books-futures-explained/introduction.html中文版本链接，https://stevenbai.top/rust/futures_explained_in_200_lines_of_rust/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://stevenbai.top/rust/futures_explained_in_200_lines_of_rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-05 23:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"200 行 Rust 代码解释 Futures"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Glommio是一个基于Linux io_uring的高效多核线程调度库，它可以让你的程序做到thread-per-core级别的线程调度，每个线程只分配给一个单独的核，避免线程调度时候的context switch开销。它甚至可以把线程手动pin到某个核上。这个库还在比较早期的阶段，依然存在unsafe代码（但作者声称以后可以去掉），而且还有两个关键特性没有实现：\n\ncommunication channels between executors so we can pass Send data.\n\n\nper-shard memory allocator.\n\ncommunication channels between executors so we can pass Send data.per-shard memory allocator.链接：https://www.datadoghq.com/blog/engineering/introducing-glommio/Github:https://github.com/DataDog/glommio"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/DataDog/glommio"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-04 17:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Glommio - a Thread-per-Core Crate for Rust & Linux"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://ilyabylich.svbtle.com/lib-ruby-parserGithub: https://github.com/lib-ruby-parser/lib-ruby-parser"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lib-ruby-parser/lib-ruby-parser"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-04 17:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lib-ruby-parser - Rust写的ruby解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"《Rust Performance Book》的作者 Nicholas Nethercote 在Mozilla工作了超过12年，其中部分工作 负责rustc的性能监控和优化（rustc-perf项目）。Nicholas离职后去的新公司是Apple。链接：https://blog.mozilla.org/nnethercote/2020/12/04/farewell-mozilla/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.mozilla.org/nnethercote/2020/12/04/farewell-mozilla/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-04 17:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust Performance Book》作者从Mozilla离职"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://www.getblades.org/Rustcc论坛: 支持rss微信公众号：Rust语言中文社区"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.getblades.org/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-04 17:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Blades - 又一个 Rust 写的静态网站生成器，速度极快，号称比 Hugo 快10倍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-gpu现在可以直接在SHADERed网站上在线编辑了。Read More: https://shadered.org/blog?id=4rust-gpu book (Wip): https://embarkstudios.github.io/rust-gpu/book/introduction.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://embarkstudios.github.io/rust-gpu/book/introduction.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SHADERed可以在线编辑rust-gpu！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rga是ripgrep的一个扩展版本，和ripgrep用法类似，但是可以搜索的文件格式更多，目前有：pdf, docx, sqlite, jpg, 视频格式(mkv, mp4), 等等。Github: https://github.com/phiresky/ripgrep-all"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/phiresky/ripgrep-all"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ripgrep-all"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此项目希望实现David Tolnay发布的crate async-trait 的功能，让trait中也可以声明async fn。不同于async-trait，这个crate生成的代码不使用Box，直接使用GAT实现async trait的功能，避免了在trait中实现异步函数需要额外多一次内存分配的问题。现在的版本实现时GAT只支持生命周期参数，因此很多功能还有缺失，现在GAT已经可以使用类型参数了，这边会继续把缺失的功能完善。用法：Github: https://github.com/tiannian/async-trait-static"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tiannian/async-trait-static"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【大家的项目】无动态内存分配版的async-trait"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Supertag，一个用rust写的基于标签的文件系统。Read More: https://amoffat.github.io/supertag/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://amoffat.github.io/supertag/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Supertag"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dimforge上个月的开发成果总结。新版本Rapier发布的同时也更新了官网的教程，十分友好。Read More: https://www.dimforge.com/blog/2020/12/01/this-month-in-dimforge/Rapier book: https://rapier.rs/docs/user_guides/rust/getting_started"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rapier.rs/docs/user_guides/rust/getting_started"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dimforge月总结"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近的更新汇总。Read More: https://blog.jetbrains.com/clion/2020/12/intellij-rust-updates-for-2020-3/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.jetbrains.com/clion/2020/12/intellij-rust-updates-for-2020-3/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IntelliJ Rust: 更新2020.3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"367。Read More：https://this-week-in-rust.org/blog/2020/12/02/this-week-in-rust-367/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2020/12/02/this-week-in-rust-367/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 367"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Bevy自发布以来，获得了大量的关注，小编在Bevy群里潜水时候，也看到了大家对Bevy的一些讨论。正如大家所说的Bevy现在仍然是很早期阶段，需要大量的迭代更新。本期游戏引擎专栏将会介绍一些有趣但是比较冷门的游戏引擎供大家参考学习，以便有能力的小伙伴获取灵感，去Github上做贡献。。\nmacroquad: https://github.com/not-fl3/macroquad\nDotrix: https://github.com/lowenware/dotrix\n除了这两个之外大家比较熟悉的还有Amethyst、ggez、rg3d等游戏引擎，提到上述两个的原因是在某些方面，这两个游戏引擎有不少值得学习的地方，首先是macroquad，在2d绘制方面提供了很多方便好用的api（由miniquad渲染后端提供），粒子系统也很不错，同时在多平台支持这点上也是目前rust游戏社区里支持最好的（包括安卓和ios，Bevy这方面还在开发中），以及egui（https://github.com/emilk/egui）也有macroquad的集成。其次是Dotrix，有一个还不错的ECS架构（个人感觉人体工程学方面还是没有Bevy舒服），最重要的是，支持骨骼动画。macroquad粒子系统演示：https://gitee.com/downtime/pictures/blob/master/12-3/m.gif（图片比较大）恰逢昨天是reddit rust频道（创建于2010年12月2日）建立十年的日子，有个生日帖，将今年十个热点帖子都列在了上面，Bevy发布的帖子赫然在列:\n\n\"Why Discord is switching from Go to Rust\" by u/deltaphc\n\n\n\"Rust Memory Container Cheat-sheet, publish on GitHub\" by u/usagi-network\n\n\n\"Introducing Bevy: a refreshingly simple data-driven game engine and app framework built in Rust\" by u/_cart\n\n\n\"Here's a fun little crate I made that generates an interactive ASCII globe in the terminal\" by u/adamadamsky\n\n\n\"Rocket can now compile on stable Rust\" by u/theZcuber\n\n\n\"A sad day for Rust\" by u/steveklabnik1\n\n\n\"Microsoft: Rust Is the Industry’s ‘Best Chance’ at Safe Systems Programming\" by u/natan-sil\n\n\n\"Reddit on Rust\" by u/fuzzypercentage\n\n\n\"2020 Stack Overflow Developer Survey: Rust most loved again at 86.1%\" by u/dochtman\n\n\n\"Laying the foundation for Rust's future\" by u/steveklabnik1\n\n\"Why Discord is switching from Go to Rust\" by u/deltaphc\"Rust Memory Container Cheat-sheet, publish on GitHub\" by u/usagi-network\"Introducing Bevy: a refreshingly simple data-driven game engine and app framework built in Rust\" by u/_cart\"Here's a fun little crate I made that generates an interactive ASCII globe in the terminal\" by u/adamadamsky\"Rocket can now compile on stable Rust\" by u/theZcuber\"A sad day for Rust\" by u/steveklabnik1\"Microsoft: Rust Is the Industry’s ‘Best Chance’ at Safe Systems Programming\" by u/natan-sil\"Reddit on Rust\" by u/f"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/emilk/egui"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"游戏引擎专题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"【翻译】编写Rust的23条通用规则及建议Read More: https://rustcc.cn/article?id=b9c63f24-4aab-4d16-976b-30146efdfa48"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rustcc.cn/article?id=b9c63f24-4aab-4d16-976b-30146efdfa48"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-12-03 20:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"最后，小编私货"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Seed 是一个优秀的 Rust 前端框架, 但是, 这里我们不讨论 Seed 本身, 而是隐藏在这个优秀项目里的一些优秀的建议.在他的文档中,Seed给出了 如何编写 Rust 的 23 条基本规则和建议, 无论新手老手都会有所收获.原文链接  请查看How to write in Rust章节.https://seed-rs.org/0.8.0/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-30 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编写 Rust 的 23 条基本规则和建议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 中的 HashMap (Hash?Set, Vec)等都提供了一个初始化的方法 with_capacity(capacity: usize). 但是为什么 BTreeMap(以及 BTreeSet) 没有这个方法呢?本文讲述了这两种数据结构的区别,并且解答了上述的问题.原文链接https://www.nicolas-hahn.com/2020/11/30/btreemap-with-capacity/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-30 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么 BTreeMap 没有 with_capacity() 方法 ?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pijul 是一个使用 Rust 编写的版本控制系统(VCS).我们已经有了 Git, Darcs 等版本控制工具了,为什么还需要 Pijul呢?原文链接https://initialcommit.com/blog/pijul-version-control-system"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-30 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pijul: Rust 写的版本控制工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"monad 主要是函数式编程中的概念. 本文通过代码例子展示了如何在 rust 中来实现 moands.原文链接https://medium.com/swlh/monad-interface-rust-edition-bd6486b93607--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-30 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Monad interface"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"🎉 cargo-chef是一个cargo子命令，旨在缓存依赖项以加快Docker构建Rust项目的速度。Repohttps://crates.io/crates/cargo-chefPosthttps://www.lpalmieri.com/posts/fast-rust-docker-builds/#caching-rust-builds"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-chef 0.1.9 is out!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sapling 是一个代码编辑器，是否想起了 Xi editorSapling Repohttps://github.com/kneasle/sapling"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sapling：在Rust中构建更好的代码编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ownership？Yeah.  CallOfFerris 是一个Rust写的小游戏Reophttps://github.com/Andy-Python-Programmer/CallOfFerris"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust小游戏：CallOfFerris"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"现在，Rustup在本机上可用于新的Apple M1设备，使您可以像在其他平台上安装它一样在新的Mac上安装它！Posthttps://blog.rust-lang.org/2020/11/27/Rustup-1.23.0.html#support-for-apple-m1-devices"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustup 1.23.0 支持 Apple M1设备"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Giles 是一个可以从您的有声书文件夹中创建API的工具集。Linkhttps://bitbucket.org/ThasLegendary/giles-api/src/master/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Giles - Audiobook library to API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"张汉东老师的文章，点击👇链接阅读原文。阅读原文https://mp.weixin.qq.com/s/F_38SD34nDl7cZYJqZFNww"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【好文推荐】篇一 | 想全面了解 Rust 语言 ？ 你想知道的都在这里"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"倒计时！一年一度中国 Rustaceans 最盛大的节日，RustConf China 2020 中国大会来啦！🦀RustConf China 2020 由 Rust 语言中文社区主办，WebAssembly 中文社区协办，将于12月26、27日在深圳举办。期待您的到来~😀"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-29 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【活动情报】Rust 中国大会的议题顺次表已排完"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是我的背景，我以前用c开发嵌入式系统项目；C++/Qt/Python用来开发桌面应用；javascript和Node.js来做Web开发。当我知道了rust可以做到所有这些，尤其是嵌入式系统。我开始学习rust...文章链接，https://www.reddit.com/r/rust/comments/k2nige/how_could_i_get_advanced_on_rust_road/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/k2nige/how_could_i_get_advanced_on_rust_road/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 23:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在rust的路上前进"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这项工作是我关于行为类型的论文的一部分，任何类型的反馈都是受欢迎的，并且可以作为问题提交给rustype组织中的任何存储库。如需进一步讨论，请通过Twitter或Keybase与我联系。本系列的目标是成为一种开发日志，我在其中探索类型状态（可能还有其他类型）及其使用Rust类型系统的实现。文章链接，https://rustype.github.io/notes/notes/rust-typestate-series/rust-typestate-index"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rustype.github.io/notes/notes/rust-typestate-series/rust-typestate-index"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 23:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust类型状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ZLUDA是在Intel GPU上的一个CUDA替代品。ZLUDA允许使用具有近乎本机性能的Intel gpu运行未经修改的CUDA应用程序（更多信息见下文）。它与当前集成的Intel UHD GPU一起工作，并将与未来的Intel Xe GPU配合使用Github 链接，https://github.com/vosen/ZLUDA"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/vosen/ZLUDA"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 23:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ZLUDA"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rustup工作组很高兴地宣布rustup版本1.23.0的发布。Rustup是安装Rust的推荐工具，Rustup是一种编程语言，它使每个人都能够构建可靠和高效的软件。如果安装了早期版本的rustup，那么获得rustup 1.23.0就像关闭IDE并运行一样简单。文章链接，https://blog.rust-lang.org/2020/11/27/Rustup-1.23.0.htmlhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2020/11/27/Rustup-1.23.0.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 23:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustup1.23.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"broono"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"“我决定停止维护imgui-rs项目，因为老实说，这时感觉就像100％的琐事，没有任何乐趣。以前，在遇到有趣的技术挑战时，该比率有所不同🙂，但现在许多挑战已经解决，而且我主要面对烦人的技术挑战，这些挑战是我无法影响的选择所致，因此我不得不花时间努力捍卫我所做的选择。”作者还在讨论中提了几个问题，有意向的童鞋们可以试试:\n你为什么想要维护imgui-rs项目？\n你当前在使用imgui-rs吗？\n你拥有什么样的技能来维护这样的crate？\nGithub讨论: https://github.com/Gekkio/imgui-rs/issues/392"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Gekkio/imgui-rs/issues/392"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"imgui-rs项目正在寻找新的维护者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"broono"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此cargo扩展用于使用WebAssembly开发前端应用。使用它的子命令生成Rust项目，即可立即开发WebAssembly，并使用该工具运行本地开发服务器以在工作时查看它。该项目目前处于测试阶段，但功能齐全！后续步骤包括：\n清理代码以减少unwrap使用\n使用更好的开放网址库（当前的网址库有一些怪异的行为）。\n支持项目文件的观察和重新编译\n讨论地址: https://www.reddit.com/r/rust/comments/k1shbm/cargowebassembly_the_easiest_way_to_get_started/原文地址: https://wasm.js.org/crates/cargo-webassembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/k1shbm/cargowebassembly_the_easiest_way_to_get_started/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-webassembly: 用于开发WebAssembly的cargo扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"broono"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"“今天是美国的感恩节，那么有什么更好的时间要求您对自己在Rustlang世界中最感谢的项目（库，可执行文件）进行反思？”讨论地址: https://www.reddit.com/r/rust/comments/k1q2pw/which_rust_projects_are_you_thankful_for/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/k1q2pw/which_rust_projects_are_you_thankful_for/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-28 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"你感谢哪些Rust项目？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 AWS 开源博客的文章，尽管 AWS 已从 Rust 受益多年，但我们正在寻找以有意义的方式做出贡献的方法。正如 AWS 高级软件工程经理 Shane Miller 所说：“Rust 帮助我们为 Amazon 规模的 AWS 客户提供了快速，强大的服务”，并且我们致力于进一步加强一个社区，该社区极大地使我们和我们的客户受益。这一承诺包括对 Rust 和 Tokio（用于使用 Rust 编写异步应用程序的运行时）的代码贡献，但是我们对 Rust 社区的承诺不仅仅限于代码。通过与超过 5500 个 Rust 贡献者的合作，我们以多种方式做出贡献，所有这些都旨在使 AWS 和 Rust 社区中的其他人充满信心地构建系统。在本文中，我将解释AWS在何处（以及为什么）使用 Rust，以及我们的贡献将如何继续发展。原文请看：https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-26 22:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么 AWS 喜欢 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gRPC是用于各种场景的高性能Rpc框架。 它的主要功能之一是能够编写高效的客户端库。Rust是过去五年来开发人员最喜欢的编程语言，它有助于编写高效，安全的代码。Tensorflow 最受欢迎的开源机器学习平台之一，TF服务向客户端提供模型服务，以便使用 REST/gRPC 进行开发。本文旨在演示使用 Rust 通过 gRPC 与TF 交互。原文请看：https://arjunchitturi.medium.com/rusty-predictions-using-grpc-e00f73c95c67"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://arjunchitturi.medium.com/rusty-predictions-using-grpc-e00f73c95c67"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-26 22:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 与TF 交互"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情请看：zdnet.com/article/amazon-were-hiring-software-engineers-who-know-programming-language-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-26 22:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amazon 招聘Rust工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Persy是用rust编写的事务性存储引擎。项目地址：https://gitlab.com/tglman/persy使用示例"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-26 22:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"persy 0.11版本更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Bevy 0.3 发布以来，社区有很多朋友都在关注 Bevy 的发展，欢迎加入微信交流群："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Bevy交流群欢迎大家"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一篇用 Rust 来学习 《Ray Tracing in One Weekend》系列的仓库，目前已经实现了基本类型与初步的并行化渲染等需求，对光追感兴趣的朋友可以看看~repohttps://github.com/7sDream/remda"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用一个周末学习光线追踪"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"同样是基于 Bevy 编写的 demo,这次借助于 Rust -> WASM 的能力，在 Bevy 框架基础上将 MNIST 搬到了浏览器中repohttps://github.com/vleue/bevmnist"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-24 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于 WASM 在浏览器里运行MNIST推理（转自 Rust 视界）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Enum 在不存储真正数据的时候,仅仅需要1byte就可以代表多种状态. 根据这个特性, 作者把一些特殊场景下的内存使用大大降低了.原文链接https://dom.events/2020/11/21/decrease-memory-using-structs-in-rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-23 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Enums 来减少内存使用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者对比了三种可以编译成 WebAssembly 的方式:\nRust\nGo\nAssemblyScript\n文中提供了各个语言的简单 demo 代码, 并且分别从 binary size, 执行速度等进行了简单的对比测试.原文链接https://www.ianmccall.codes/post/2020/10/11/webassembly-three-ways.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-23 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebAssembly Three Ways"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Crust of Rust 作者最新一期视频, 在此视频中, 作者会演示如何抽象出一个可复用的泛型版本的高性能无锁并发基础类型.油管视频链接https://www.youtube.com/watch?v=eLNAMEoKAAc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-23 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"A Cool Generic Concurrency Primitive in Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"inline-c是一个小巧的 crate, 使用该 crate 你可以在 Rust 中书写 c/c++代码. c 代码会被写入到临时文件中然后编译和执行.该 crate 的主要目标是减轻 C API 的测试. 有这方面需求的小伙伴可以看一下.示例代码:github 地址https://github.com/Hywan/inline-c-rs--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-23 20:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"inline-c: 在 Rust 中写 C/C++"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust为Vec支持自定义内存分配器的PR已经被合并。Read Morehttps://github.com/rust-lang/rust/pull/78461"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-22 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Vec即将支持自定义的内存分配器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustRepohttps://crates.io/crates/cargo-bom"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-22 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-bom 一个收集依赖License的命令行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust几乎含有所有的vim特性，文本对象、语法高亮、vim脚本等等，还有最新的特性\"弹出窗口“，附在线演示地址。Read Morehttps://rhysd.github.io/vim.wasm/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-22 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用wasm实现vim编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cliWebsocat 是一个用于websocket的Netcat、curl、socat工具。Examples:\n连结一个公众的echo服务 websocat ws://echo.websocket.org\n运行一个服务 websocat -s 1234\n在chromium中打开一个远程调试工具\n后台代理TCP到websocket\n在所有websocket客户端广播信息\nRepohttps://www.github.com/vi/websocat"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-22 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"websocat"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust本文介绍了从升级仅Micrio JavaScript客户端到使用WebAssembly的过程，希望能够提高性能并将代码提高到一个新的水平。Read Morehttps://engineering.q42.nl/webassembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-22 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从Javascript到WebAseembly"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"const_unit_poc就像一个具有更好的错误消息的 uom！https://github.com/iliekturtles/uomconst_unit_poc crate 链接，https://docs.rs/const_unit_poc/1.0.0/const_unit_poc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/const_unit_poc/1.0.0/const_unit_poc/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-21 19:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 const 泛型的物理单位"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Knurling-rs，是用于开发和调试用于嵌入式系统的 Rust 软件。第七次的 changelog：\ndefmt-test进入 crates.io，是no_std测试工具，可以用于编写在微控制器上运行的单元测试。\n发布了defmt v0.1.1 和 probe-run v0.1.5\nGithub链接，https://github.com/knurling-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/knurling-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-21 19:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Knurling-rs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Lunatic，用于构建使用 WebAssembly 实例作为 actors 的 Actor 系统平台。它在很大程度上受到 Erlang 的启发，可以从可编译为 WebAssembly 的任何语言中进行定位。当前只有 Rust 的绑定可用。示例：该应用程序产生1000个子进程，并在每个子进程中计算从0到i的数字总和，然后将结果发送回父进程并进行打印。Github链接，https://github.com/lunatic-lang/lunatic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lunatic-lang/lunatic"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-21 19:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lunatic"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Rust GitHub 模板，可以立即创建一个托管在 GitHub 上的 Rust 项目。包括持续集成，持续部署和文档！视频链接，https://www.youtube.com/watch?v=meAz2RQMHvM介绍文章链接：https://rust-github.github.io/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-github.github.io/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-21 19:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【视频】Rust Github 模版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 1.48.0 版本在11月19日发布了。\n\npending和ready两个future稳定了\n\n\n新版本rustdoc可以直接使用内部文件链接语法了 E.g. /// Uses [std::future]将自动生成一个链接到std::future的文档。从这里可以了解相关更多信息\n\npending和ready两个future稳定了新版本rustdoc可以直接使用内部文件链接语法了 E.g. /// Uses [std::future]将自动生成一个链接到std::future的文档。从这里可以了解相关更多信息https://doc.rust-lang.org/rustdoc/linking-to-items-by-name.htmlRead More: https://blog.rust-lang.org/2020/11/19/Rust-1.48.htmlGithub: (https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1480-2020-11-19)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1480-2020-11-19"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust1.48稳定版发布！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是之前日报提到过的rust自定义事件(https://medium.com/better-programming/custom-events-in-rust-c4e534b6b8cb)的后续。Read More（需科学上网）: https://rossketeer.medium.com/rust-events-revisited-926486721e3f"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rossketeer.medium.com/rust-events-revisited-926486721e3f"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"轻松编写rust事件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"熟悉python的同学应该对pandas不陌生，pypolars就是一个对标pandas的库。作者的性能基准测试结果都比pandas要更好一些，Read More里面有详细的数据，同时在本文reddit下有反馈说没能复刻作者的性能基准测试，部分时候和pandas相当，有些情况下甚至会更慢，作者本人尚未对此做出回应，目前看来确实需要其他更广泛的基准测试。Github: https://github.com/ritchie46/polarsRead More(需科学上网): https://medium.com/swlh/a-rising-library-beating-pandas-in-performance-401d246a8569"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://medium.com/swlh/a-rising-library-beating-pandas-in-performance-401d246a8569"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pypolars,一个正在开发的性能超过Pandas的DataFrame库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇讨论rust中错误处理的返回类型的文章。Read More: https://jam1.re/blog/anonymous-sum-types-for-rust-errors相关阅读: https://zhuanlan.zhihu.com/p/225808164?utm_source=ZHShareTargetIDMore之前日报里有提到过reddit上有次讨论错误处理在rust和java中的区别的帖子，于是最近社区里就有人按照帖子中提到的痛点实现了这个库：Crates.io: https://crates.io/crates/polyerrorRead More: https://users.rust-lang.org/t/errors-in-rust-can-now-be-handled-more-ergonomically-cleanly-and-simply-introducing-a-new-error-crate/51527"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://users.rust-lang.org/t/errors-in-rust-can-now-be-handled-more-ergonomically-cleanly-and-simply-introducing-a-new-error-crate/51527"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust错误处理中的匿名(Anonymous)类型与和(Sum)类型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本期采访的嘉宾是Sol Trader(http://soltrader.net)的作者。Read More: https://rustgamedev.com/episodes/interview-with-chris-parsons"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rustgamedev.com/episodes/interview-with-chris-parsons"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust游戏开发播客-第三期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇讨论所有权可用性的论文。Read More: https://arxiv.org/abs/2011.06171"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://arxiv.org/abs/2011.06171"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"所有权语义的可用性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"机器学习相关的用rust实现的工具包，Github页面上有性能基准测试以及详情。Read More（需科学上网）：https://andraztori.medium.com/speed-is-a-feature-introducing-fwumious-wabbit-1cc9573ea7beGitHub: https://github.com/outbrain/fwumious_wabbit"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/outbrain/fwumious_wabbit"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fwumious Wabbit，用rust实现的非常快速的机器学习工具包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Soulver的免费替代品。Demohttps://bbodi.github.io/notecalc3/notecalc#eJxtVV1v2zYUfeevuA9t1qb-kO2mb3loGmQbsGVFm24Yig6gpGuLMEUKpGRF-_U7l5Idp6sB2xR5eT_OPffo3rdcaFuQiaSp0q4cSJ47q1sfqA2DcTtqPeUhLSomXR60a_WOI_ktffadPXBQMJHDnvOFUn_7Dl4cdZHJtKTFd-Hr3DjdGu_knj4Pg7DYcMil0eWMavMowY4GuBFnynV1ziHOyDcc5BaWnTNtyqJmHbvANbuWetNWsuHgY9vZGZUci2Ca1hyYWn7EDR18h5BIuJ6pJviDKVNA7-Sctkhp8F14lsGCPnHsrMRzqdRgdhVqC0Cka30NK5jbQXVNqVsuqa_YpXhUAFfABWAe5FGgPr9BUR9gb9wY1HrsAm_fRw4zQaWS5HArSnkT0DgD7HD52ddM_KjrxiIE3TFb2gZmMRwDpzoTxo3Vw1Q8bn7kUPDYSXX99FGrLKM3tMpeqjVWl3Q1Lua0xpa6P_bhF35MTqWrYaDS7NCMc0c_-CRmlN791IJrhzFHZNPSvxx8RMxsrwD-KvtdxUYXUmajQ4Jz6j_OKMvSV92MkSUJSeZokT3e3aksX411ZHmWrVZKfeItB3aFYGmN4x-keuJtYGHuefcpR4VB7y7K4JtmGoWacjQHaPs69YRLA15KAaetkDgDTrrS92jx1L3RElwOqNBy0Z48JvaKyZePy9s__rqnPQ9R9ZWxTJW3iafvf3tYqNUaQFqrA-VA55I28h_BZgPYQJYNNezBCRxdfN2sv6lfR9rq3AN4QWBGm3fj3IcJGzg6aNvxmL_Y0Ga9oA8jjbQbJiq649lMwFdGCrTgrNS7lXJGOo8APMGefC9OKPMBA1JLNueGuJra88TTP3UwOrfnHVM32u1l8N_XjII1XdNV4sSL5cCA5A1dLdbg7QfTmlxM_3f-7qW6NdsppHg6mc7pO-fq4uvb9TeBWO5GNZ8D_BdJJXKG9K0vV5vxEQO9ZwwBpppiwy5165piVyuFH9K210NMfYzjFGMTgWTZBD4Y38VntEMsEYWJlJHbM5LolixkD1u9p1LHCpi9ms9fy4E4zHlnnIjgKLcCqspSGui5Axtl5pT64k5jqx6kD15DGb3f09ur2riulVaMYik1oT1TwgeuTAF-9ZD3S1qt9_WyUq8eKngXUrmjKMEYGUH-RZ1jKiVPZIJAQjzBk2SL-mNMQpvSOMGRmNb7sMcM4lU1vVIQIddx0k9N0aRINWbNNBbbgp7Kue0ZHHteyJjpjPIu4ST6HVKEUiKMN6S-9J5xZbqkThtpbDGOBTwACKhXiJgkcWF2zoej8J-6OL01RyF4rW597ywgln1Nq59vaCujnTq6FOHLl1EwQcYiJKmwIdl9fwoBkELS4zKqK6r_WY-ne1lV6j9NhaIwRead More: https://bbodi.github.io/notecalc3/Github: https://github.com/bbodi/notecalc3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/bbodi/notecalc3"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-19 19:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"NoteCalc具有内建智能计算器的便捷记事本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前支持 C++ 和 Java ，也可以自己开发对应语言接口比如，以下 Rust 代码：然后就可以写这样的 Java 代码：或者是这样的 C++ 代码：https://github.com/Dushistov/flapigen-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Dushistov/flapigen-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-18 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"flapigen-rs: rust 与其他语言交互的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"例子如下:https://github.com/rust-lang/rust/pull/79135"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/rust/pull/79135"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-18 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 常量泛型要来了：#![feature(min_const_generics)] 将在 Rust 1.50 版本中稳定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"包括 Microsoft 、npm、Facebook、Amazon、Discord等https://serokell.io/blog/rust-companies"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://serokell.io/blog/rust-companies"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-18 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"九个在生产环境中使用 Rust 的公司"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://docs.rs/emoji/0.1.1/emoji/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/emoji/0.1.1/emoji/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-18 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"emoji：unicode emoji 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"转自 Rust视界rustc-perf  2号贡献者 Nicholas 写了一本关于 提升 Rust 程序性能的经验之书。在线阅读：https://nnethercote.github.io/perf-book/源码：https://github.com/nnethercote/perf-book"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-17 20:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust性能之书"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"小编发现比较两亮点的地方是 future::pending、future::ready两个 API 稳定了，还有Option/Result的内容判断函数可以编译时优化了"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-17 20:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.48.0 将在 2020-11-19 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"到目前为止，课程已经讲完了基本语法以及包管理系统 Cargo 的用法，此仓库是学习群群友的笔记，还在刷 trpl 的朋友可以参考github： https://github.com/xxg1413/inviting-rust-note"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-17 20:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"@xxy1413 的 Rust编程实战课程笔记"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Docsdocs.rs/feroxbuster/Repohttps://github.com/epi052/feroxbuster"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 21:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Feroxbuster：用Rust编写的简单，快速，递归的内容发现工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cn 是 UNIX / Linux / BSD中copy命令的一种快速，内存安全的替代方法。cp通过省略某些默认情况下应打开的标志以及更好的错误消息，它比原始程序友好得多。GitLabhttps://gitlab.com/arijit79/cn"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 21:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cn v2.0.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是面向初学者的视频，拥抱Rust吧🎉～YouTubehttps://www.youtube.com/watch?v=4KsAsGhFo4U&feature=emb_logo&ab_channel=RustCast"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 21:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【学习资料】Rust模块系统说明"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文设计了一个比较巧妙的 Events 模式, 不由地让人想起 Qt的 signal.下面是核心代码以及使用例子. 具体更多细节可以参阅原文.输出结果原文链接https://rossketeer.medium.com/custom-events-in-rust-c4e534b6b8cb"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 17:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 实现 Custom Events"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ECS (entity-component-system) 是一种广泛应用于游戏引擎中的设计理念.本文主要描述的是 ECS 相关的概念中的 Scheduler.\n什么是调度器?\n动态调度.\n静态调度.\n实际情况考量, 例如 thread local 等.\n调度器实际例子. 如 bevy_ecs, yaks等.\n原文链接https://ratysz.github.io/article/scheduling-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 17:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"实体组件系统调度器设计"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Crust of Rust最新的一期 Rust 视频: Sorting Algorithms.Crust of Rust 是一系列质量比较高的 Rust 直播编码视频. 强烈推荐给各位小伙伴.需要科学上网.油管连接https://www.youtube.com/watch?v=h4RkCyJyXmM&feature=youtu.be"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 17:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crust of Rust: Sorting Algorithms"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"t-rec 是一个 Rust 编写的超快的命令行录屏器, 可以生成 .gif 图片.github地址https://github.com/sassman/t-rec-rs--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-16 17:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"超快 terminal 录屏工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"刚刚发布了这个小crate，https://docs.rs/mockalloc/0.1.0/mockallok/我的一个项目涉及自定义容器类型（vec和类map容器），并且测试他们的功能是否像预期那样，我想要一个简单的方法来测试他们。文章链接，https://www.reddit.com/r/rust/comments/jttpie/mockalloc_a_crate_to_test_for_leaks_and_other/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/jttpie/mockalloc_a_crate_to_test_for_leaks_and_other/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-14 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mockalloc-一个用于测试泄露和内存分配问题的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"大家好，今天我们发布了Tide HTTP框架0.15.0版本，这是一个小的发行版，提供了一个有趣的新特性：Server::bind。这允许服务器交错的初始化。你可以打开一个socket，但要等到其他操作完成后才能接受传入的链接。文章链接，https://github.com/http-rs/tide/releases/tag/v0.15.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/http-rs/tide/releases/tag/v0.15.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-14 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tide v0.15.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在rest API中表达数据操作的最简单的办法。使用适当的http方法、url、csv的数据格式组合实。Github 链接，https://github.com/ivanceras/restqhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ivanceras/restq"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-14 21:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustq"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PossibleRust.com是上线不久的专注于分享Rust的个人博客网站，作者从2013年0.8版开始学习Rust，并声称到现在他也一直在学新的Rust的东西。比如最新的一篇博文Non-Generic Inner Functions讲到如何使用内部非泛型函数来避免静态分发导致的编译速度下降和二进制体积膨胀的问题，强烈推荐一看。（占个坑，有时间我翻译一下）https://www.possiblerust.com/pattern/non-generic-inner-functions链接：https://www.possiblerust.com/pattern/non-generic-inner-functions"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.possiblerust.com/pattern/non-generic-inner-functions"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-13 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PossibleRust.com"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Out parameter中文应该翻译成传出参数？其实很好理解，大家都碰到过或用过。举个例子，如下第二种即Out parameter：作者这篇文章提供了在Rust中Out parameter的最佳实践：\n能不使用传出参数的情况下尽量不要使用\n有几个原因：1) 返回值的方式语义上更明确，更清晰。2) Rust有非常丰富的数据类型，如果需要返回多个参数可以用tuple包裹起来，没必要作为out parameter来返回。3) Rust编译器大都数情况下对返回值的拷贝有优化，几乎能达到和out parameter同样的效果；\n只有一种情况推荐使用Out parameter: 调用方传递给函数的是某种形式的buffer\n比如标准库的Read trait:这里的read()比较适合使用out parameter。链接：https://steveklabnik.com/writing/are-out-parameters-idiomatic-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://steveklabnik.com/writing/are-out-parameters-idiomatic-in-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-13 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Are out parameters idiomatic in Rust?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"BPF是Berkeley Packet Filter（伯克利包过滤器）的缩写，这是一个用于过滤(filter)网络报文(packet)的架构。其实 BPF 可谓是名气不大，作用不小的典范。BPF 即为 tcpdump 抑或 wireshark 乃至网络监控(Network Monitoring)领域的基石。以 tcpdump 为例：熟悉网络监控(network monitoring)的读者大抵都知道 tcpdump 依赖于 pcap 库，tcpdump 中的诸多核心功能都经由后者实现。而pcap就是基于内核中的BPF模块。这篇文章作者介绍了自己公司提供了几个方便使用Rust编写BPF/eBPF程序的crate。文章链接：https://blog.redsift.com/labs/writing-bpf-code-in-rust/更多参考资料了解BPFeBPF 简史: https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.htmlBPF: A New Type of Software：http://www.brendangregg.com/blog/2019-12-02/bpf-a-new-type-of-software.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://www.brendangregg.com/blog/2019-12-02/bpf-a-new-type-of-software.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-13 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Writing BPF code in Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个类似于FlatBuffers的序列化框架，作者声称zero-copy。链接：https://github.com/djkoloski/rkyv"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/djkoloski/rkyv"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-13 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rkyv - a zero-copy deserialization framework for Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 Rust 官方 blog，在过去的几个月中，Mozilla 一直在使用 Profile-Guided Optimization（PGO）来构建自己的优化版本的Clang，从而使 Firefox 的构建基础结构的编译时间减少了9％。 Rust 编译器是否可以做到这一点，就是说，我们可以将配置文件引导的优化应用于 rustc 本身以使其更快吗？这篇文章恰好探讨了这个问题，更多详情请看：https://blog.rust-lang.org/inside-rust/2020/11/11/exploring-pgo-for-the-rust-compiler.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/11/11/exploring-pgo-for-the-rust-compiler.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-12 19:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"探索 Rust 编译器的 PGO"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这边是 shopee 和 garena 的集团总部Sea infrastructure 中间件团队，现在招中间件研发。 目前在用 Rust 和 Golang 做分布式 Redis 并落地到kubernetes。也准备在kubernetes上做kafka和pulsar服务。jd:\n对底层技术有浓厚兴趣\n熟悉多线程编程\n熟悉 Linux 系统原理和系统编程\n了解过分布式系统\n有 Rust，Golang，C，C++，Java的研发经验\n全日制本科或以上\n薪酬一般比国内高，税远少于国内，无996。入职提供约 7500rmb 的换城市补贴。工作环境跟国内一线大厂一样。对英语只有读写要求，但能正常交流更好。有兴趣的发英文简历到: huanggx@seagroup.com"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-12 19:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"新加坡shopee garena母公司sea group招聘开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"你是否想成为 CPU Whisperer？从逻辑上讲，Brainfuck 是最著名的深奥编程语言。它之所以成名，主要是因为它的名称中带有“ fuck”一词，但爱好者编译器开发人员喜欢它，因为它是一种很小的语言，可以很容易地为其编写编译器。有趣的事实是：人们编写的 Brainfuck 编译器比实际的 Brainfuck 程序更多。详情请看博客原文：https://github.com/pretzelhammer/rust-blog/blob/master/posts/too-many-brainfuck-compilers.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/pretzelhammer/rust-blog/blob/master/posts/too-many-brainfuck-compilers.md"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-12 19:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过用 Rust 编写大量的Brainfuck编译器来学习汇编"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者一直是 React 和它的 JSX 语法的忠实拥护者。同时倾向于使用旨在提供类似语法的 Rust 前端框架，并且当 Yew 成为可行的选择时，作者试图将两者结合起来，通过 Typescript 类型定义从 React 组件生成 Yew 组件。更多请看原文：https://www.hobofan.com/blog/2020-11-10-reacty_yew/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.hobofan.com/blog/2020-11-10-reacty_yew/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-12 19:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"reacty_yew"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust提供了对运行时行为和内存管理的更精细控制。另外，它使并发编程更容易，并且消除了数据争用。Apache Arrow定义了用于列式数据的内存格式，以及Parquet（一种持久的持久性格式）以及Flight（一种用于“通过网络接口进行大型数据集的高性能传输”的客户端/服务器框架和协议）。另外，Rust的Apache Arrow工具集中还有DataFusion，它是用于Apache Arrow的Rust本机SQL查询引擎。假设我们以DataFusion为核心进行构建，这意味着InfluxDB IOx将支持现成的SQL子集随着DataFusion项目的成熟，通过InfluxData外部的协作者的开发工作，它既可以在InfluxDB IOx中使用，也可以在其他地方使用。该项目仍处于初期阶段。我们目前尚未生成构建，并且除了InfluxDB IOx项目README之外，没有任何文档。该团队是一个由高级工程师组成的小型小组，我们的工作与平台上其余部分的大型工程组织的所有工作并行。我们的目标是在明年初生产开源构建，并在InfluxDB Cloud中以alpha形式提供。https://github.com/influxdata/influxdb_iox详情:https://www.influxdata.com/blog/announcing-influxdb-iox/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.influxdata.com/blog/announcing-influxdb-iox/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-11 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「InfluxDB IOx」未来会用 Rust 和 Arrow 构建内核"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"BPF是一种虚拟机，当Linux系统上发生某些事件时，它允许在内核中运行用户定义的程序。例如，您要监视可疑文件活动，记录网络响应延迟甚至跟踪用户空间应用程序–您可以编写小型BPF程序，请求将它们附加到内核中的正确位置，并实施必要的检测。BPF VM使用其自己的指令集。您可以直接编写字节码，但是人们通常使用 bpftrace 或编写C代码并使用 BPF编译器集合（BCC）进行编译。https://github.com/iovisor/bpftrace从原理上讲，开发BPF程序的过程可以归纳为以下步骤：RedBPF包括用于实现上述所有步骤（步骤1）除外的API和工具。使用RedBPF，步骤1变为：文中实现了一个简单的http trace, 有兴趣的可以仔细阅读详情:https://blog.redsift.com/labs/writing-bpf-code-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.redsift.com/labs/writing-bpf-code-in-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-11 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[linux kernel] 在Rust中编写BPF代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"昨天有个同学说 rust 没有基础数学运算。emmmm洛佳同学的回复:Attila的灵魂一击:点击发现更多科学计算库:https://lib.rs/science/math最后说一句:多 Google ,几个关键字一拼什么都有了"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://lib.rs/science/math"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-11 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Rust 的数学运算"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近一个观点在 Rust 社区引起了争议，原文时来自网友 @Apache9 的微博：最近看到吹Rust的越来越多了，什么性能牛逼bug少。这个我觉得可以多说两句。软件工程这个东西，我在学校学的时候就觉得没什么鸟用。直到工作一段时间时候才体会到，软件工程尝试解决的问题是，如何让后50%的程序员产出不为负。这其实也是编程语言设计时候需要考虑的问题。这里面一个极端是Java，这个语言设计的目标就是规范后50%码农的行为，控制破坏范围，尽力维持他们产出稍稍为正。所以为什么java各种框架条条框框特别多，就是让培训班出来的人也能写程序，甚至写出来还能用。另一个极端就是Rust了，Rust的设计就是直接告诉后50%的程序员，你们不配当程序员，给老子滚。后50%的程序员用Rust连一个能编译过的程序都写不出来，别说上线跑了。所以为什么Rust程序性能好bug少？因为能用Rust写程序的本来就是程序员很牛逼的一波人了，你让他们用PHP他们一样能写的性能好bug少。谢谢尽管不可否认不是所有人都能掌握 Rust ，但 Rust 软件 Bug 少的主要原因，是因为 Rust 站在时代的前沿，通过提供完善的内存安全检查的工具来使得检查出常见的内存安全问题更加容易。另外，张汉东老师也对此提出了自己的看法：这种言论虽然有鼓吹Rust开发者牛逼的嫌疑，但其实还是建立在没有对Rust有真正认识的基础上。Rust代码Bug少，完全是因为Rust语言的设计和Rust编译器的检查。换成PHP，Cpp，Bug照样成堆，出错是人类自身的弱点，没办法。Rust语言牛逼之处在于可以把一个菜鸡的水平提升到一个合格程序员的红线之上。并不是让谁滚。只要有上进心想在技术上有所提升都可以用rust。并不是牛逼的人才能用Rust。Rust程序员不应该像Cpp开发者那样给人一种所谓的智商优越感！"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-10 20:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust软件 Bug 少并不是因为开发者智商高！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"论文摘要：Rust是新兴的系统级编程语言，旨在提供内存安全的同时保证极高的性能。Rust形式化语义是用来证明其内存安全和开发Rust程序分析工具的基础。鉴于目前没有直接描述Rust的形式化语义，提出了针对Rust语言的形式化可执行语义KRust。为了确保语义的可执行性和应用性，使用了K框架进行语义的开发。KRust目前涵盖了Rust常见的语法和语义，包括了Rust的3个核心特性：所有权、借用和生命周期。KRust通过了191个测试样例，其中157个都是来自Rust官方的测试集。语义对比测试实验发现了Rust编译器的缺陷。此外，KRust的语义还可以被应用于开发Rust程序分析工具。论文链接： http://fcst.ceaj.org/CN/abstract/abstract2041.shtml"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-10 20:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"KRust:Rust形式化可执行语义"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个比赛由OSChina， gitee 主办， openEuler协助举办。openEuler 是一个开源的 Linux 发行版，通过开放的社区形式与全球开发者共同构建一个开放、多元和架构包容的软件生态体系。同时 openEuler 也是一个创新的平台，鼓励任何人在该平台上提出新想法、开拓新思路、实践新方案。此次大赛旨在鼓励高校在校学生积极参与到开源项目，通过参与开源项目的开发激发学生的动手实践、提升解决问题的能力和技术创新能力。本次比赛有7个和 Rust 相关的课题：大赛链接：https://www.oschina.net/2020-openeuler?from=oschina-wx"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-10 20:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2020 openEuler 高校开发者大赛"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近 reddit 上有不少人对 Rust 的工程如何进行组织, 以及如何才能进行更加完善的测试进行了一些讨论.下面的文章给出了一个 web 服务的例子, 演示了如何来组织 Rust 中的模块, 以及如何让代码更加具有测试性.原文链接https://medium.com/better-programming/structuring-rust-project-for-testability-18207b5d0243"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-09 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"构建可测试性的 Rust 工程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ANTLER是一个无纹理的渲染引擎.通过编写类似下面的格式的配置, 既可以让引擎渲染出非常炫酷的效果.渲染示例图:github 地址https://github.com/FreddyWordingham/antler"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-09 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"antler: 一个无纹理的渲染引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是为 golang 使用者打造的一系列学习 Rust 的指南. 可以让 gophers 快速找到 golang \b在 Rust 中对应的知识点.目前已经更新到了第六章. 从 golang 转过来的小伙伴可以看看.原文链接https://levpaul.com/posts/rust-lesson-5-and-6/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-09 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust for gophers"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是<<使用 Rust 创造一门新语言>>的最新一章, 函数调用.原文链接https://arzg.github.io/lang/9/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-09 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 创造一门新语言: Part 9, Function calls"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"email-parser 是一个无任何依赖,目前解析最快的一个 email 解析库.github地址https://github.com/Mubelotix/email-parser--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-09 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"email-parser: 解析最快的 emial 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustFest Global是11月7日至8日直播的在线社区Rust会议。需要购买💴门票参与，当然也可以像小编一样等待YouTube上的免费回放，详情可访问如下链接：Livehttps://rustfest.global/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-08 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustFest Global 2020"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"滴～有图有真相！Rust  异步架构（Async Architectures） 图来啦🎉"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-08 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"分享：Rust 异步架构图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在树莓派（Raspberry Pi）上用Rust做嵌入式系统开发Repohttps://github.com/rust-embedded/rust-raspberrypi-OS-tutorials"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-08 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust进行嵌入式开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"C 安全规范：171条建议，106条规则。C++ 安全规范：101条准则，92条风格指南。Rust 安全规范： 所有权模型 + 编译器检查。👍顺便提一嘴：Rust can be thought of as a combination of two programming languages: Safe Rust and Unsafe Rust.更多请阅读如下链接：Dochttps://doc.rust-lang.org/nomicon/meet-safe-and-unsafe.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-08 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"茶余饭后的一点儿小谈：Rust 安全规范"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Anu，是一个免费的开源分布式版本控制系统。它基于更改而不是快照，因此与替代品相比，它更易于使用，更可靠且更具确定性。该项目是 Pijul 作者重写的，其中包含了许多新想法。https://pijul.org/项目链接，https://anu.dev/代码链接，https://nest.anu.dev/anu/anu"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nest.anu.dev/anu/anu"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-07 20:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Anu"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Theseus，是用 Rust 编写的新操作系统，尝试使用新颖的 OS 结构，更好的状态管理以及如何将 OS 职责（如资源管理）转移到编译器中。尽管仍然是一个不完整的原型，但团队认为 Theseus 将对高端嵌入式系统或边缘数据中心环境很有用。Github链接，https://github.com/theseus-os/Theseus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/theseus-os/Theseus"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-07 20:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Theseus OS"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustFest Global 是 Rust 社区会议。会议将会跨越全球三个时区在线播放，可以随时随地参加直播或重新观看演讲！网站链接，https://rustfest.global/播放链接，https://watch.rustfest.global/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://watch.rustfest.global/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-07 20:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustFest Global"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"关于Tokio，async-std，smol的异步架构图片链接，https://i.redd.it/6kxvfm94kox51.png（搬运到Github链接，https://raw.githubusercontent.com/lesterli/blockchain/master/images/rust/async.png），另附一篇帖子（链接：https://www.reddit.com/r/rust/comments/i5hppj/smol_vs_tokio_vs_asyncstd/）关于这三个的理解。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://i.redd.it/6kxvfm94kox51.png"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-07 20:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 异步架构图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 还是 Go，哪个更好？ 应该为下一个项目选择哪种语言，为什么？ 两者在性能，简单性，安全性，功能，规模和并发性等方面如何比较？ 它们有什么共同点，并且在根本上有何不同？ For the Go of Love系列图书的作者 John Arundel 撰写此文，希望在 Rust 和 Go 友好而公正的比较中，找出这些问题的答案。https://bitfieldconsulting.com/about文章链接，https://bitfieldconsulting.com/golang/rust-vs-go"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://bitfieldconsulting.com/golang/rust-vs-go"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-07 20:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust vs Go"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个关于跟踪 Rust 应用程序中的生产错误的小故事。文章链接，https://vorner.github.io/2020/11/06/40-ms-bug.htmlhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://vorner.github.io/2020/11/06/40-ms-bug.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-07 20:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"40毫秒的错误"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"经过两个月的奋战，作者把 Rust 的 Reference 给翻译完成了。现在诚邀各位围观，希望大家积极提交修改意见，以及后续的维护建议。在线预览地址：https://minstrel1977.gitee.io/rust-reference/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://minstrel1977.gitee.io/rust-reference/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-06 16:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Reference中文版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"蛮有创意的一个小工具。链接：https://github.com/marcusbuffett/pipe-rename"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/marcusbuffett/pipe-rename"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-06 16:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pipe-rename - 使用终端编辑器批重命名文件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"BurntSushi大佬是rust regex库和ripgrep的作者。最近Sourcegraph公司对他进行了Podcast专访，畅聊关于Rust，Go，Haskell和Linux window管理器等话题。链接：https://about.sourcegraph.com/podcast/andrew-gallant/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://about.sourcegraph.com/podcast/andrew-gallant/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-06 16:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"BurntSushi专访"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"各位同学大家好，我是本学期操作系统专题训练课程“R:Z RustOS Learning Guide”小组的组长马川。我们小组在本学期试着为进行 rCore 实验的同学们编纂一部面向进行 rCore 实验但没有Rust基础的同学们的学习指南。我们现在已经有了整个指南的大致框架以及部分内容，现在它已经成为了 GitHub 上的一个开源项目，欢迎各位同学前去围观，给出你的意见与看法，说出你希望指南中加入什么内容，还可以加入我们一起进行项目的维护。我们欢迎所有人加入这个项目，一起帮助在 rCore 学习中遇到困难的同学们度过难关。参考资料与链接\n\n网页端 gitbook：https://simonkorl.gitbook.io/r-z-rustos-guide/\n\n\nGitHub 仓库：https://github.com/simonkorl/rustOS_learning_guide\n\n\n本项目的操作系统 wiki 页：http://os.cs.tsinghua.edu.cn/oscourse/OsTrain2020/g7\n\n网页端 gitbook：https://simonkorl.gitbook.io/r-z-rustos-guide/GitHub 仓库：https://github.com/simonkorl/rustOS_learning_guide本项目的操作系统 wiki 页：http://os.cs.tsinghua.edu.cn/oscourse/OsTrain2020/g7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://os.cs.tsinghua.edu.cn/oscourse/OsTrain2020/g7"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-06 16:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"清华大学《R:Z 从零开始的RustOS编写体验指南》项目邀请"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://this-week-in-rust.org/blog/2020/11/04/this-week-in-rust-363/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2020/11/04/this-week-in-rust-363/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-06 16:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 第363期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本来只是一篇简单的为什么不选择Rust的blog，但是在reddit上还是引起了不少讨论。总的来说rust是一门低级语言，就像这篇blog中作者所说的一样，有时候能畅快表达比性能更重要（ Maybe that costs performance, but I need the ability to quickly write code a lot more than I need the extra performance.）。虽然如此，但是就像之前日报报道过一篇关于ra的文章一样，rust在足够复杂的项目中，开发效率是能够和kotlin这类高级语言相媲美的。Read More: https://www.reddit.com/r/rust/comments/jo2hco/why_dark_didnt_choose_rust/Blog 原文: https://blog.darklang.com/why-dark-didnt-choose-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.darklang.com/why-dark-didnt-choose-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-05 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么Dark语言不选择Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ktra是一个一体化私有包cargo登记处，目前还在开发当中。Github: https://github.com/moriturus/ktra"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/moriturus/ktra"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-05 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ktra你自己的小cargo仓库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sauron是一个具有服务器端渲染的非常快速的Web框架。Github: https://github.com/ivanceras/sauron指南（WIP）: https://sauron-rs.github.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://sauron-rs.github.io/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-05 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sauron[v0.32] 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文作者以尽可能符合rust风格的方式来完成链表这一数据结构。Read More: https://rossketeer.medium.com/implementing-a-linked-list-in-rust-c25e460c3676"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rossketeer.medium.com/implementing-a-linked-list-in-rust-c25e460c3676"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-05 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在rust中实现链表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇讨论所有权的blog，正如此篇blog发布的reddit贴评论所说的一样，尽管标题的骗点击率的嫌疑和一些毫无根据的结论，但实际上，这篇文章是围绕某些编程范例的哲学而写的。Read More: http://www.gingerbill.org/article/2020/06/21/the-ownership-semantics-flaw/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://www.gingerbill.org/article/2020/06/21/the-ownership-semantics-flaw/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-05 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"所有权语义的致命缺陷"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Bevy最近发布了0.3的版本，带来了很多令人激动的提升，同时社区学习资料较少，之前的贪吃蛇教程也随着Bevy新版本的发布而更新了。Read More：https://mbuffett.com/posts/bevy-snake-tutorial/#0.3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mbuffett.com/posts/bevy-snake-tutorial/#0.3"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-05 16:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bevy贪吃蛇教程更新了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/async-rs/async-std/releases/tag/v1.7.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/async-rs/async-std/releases/tag/v1.7.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-04 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-std v1.7.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用于游戏引擎 Bevy 中，支持多线程块，泛型 traits 使得 bevy_tilemap 可以用于任何系统中。https://crates.io/crates/bevy_tilemap"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/bevy_tilemap"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-04 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bevy_tilemap：基于块的地形构造工具（tilemap）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://bevyengine.org/news/bevy-0-3/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://bevyengine.org/news/bevy-0-3/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-04 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"游戏引擎 Bevy 发布 0.3 版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本次开源（v1.1.0版本）包含的主要内容如下：\n公开可验证密文账本的一个交互式样例，实现密文金额发行、密文金额四则运算关系验证、密文金额范围验证等功能；\nRust SDK，封装底层算法，提供易用、易扩展、跨语言的编程接口；\n三类零知识证明算法的高效稳定实现，包括密文加和关系证明、密文乘积关系证明、密文范围证明；\n其他基础工具代码；\n全平台SDK类库FFI适配接口。\nhttps://github.com/WeBankBlockchain/WeDPR-Lab-Core"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/WeBankBlockchain/WeDPR-Lab-Core"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-04 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WeDPR: 隐私保护算法组件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"bacon 在编辑器旁边给出收到警告和错误的通知https://github.com/Canop/bacon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Canop/bacon"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-11-04 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bacon: 幕后代码检查工具"},"type":"text"}],"type":"title"}},]
