export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"現在一個簡單的 echo server可以寫成這樣到目前為止，感謝社區的回饋與rust團隊對rust語言的維護，也感謝tokio有專業的團隊在維護。read morehttps://www.reddit.com/r/rust/comments/cnrzb6/ann_tokio_v020alpha1_now_with_async_await/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tokio v0.2.0-alpha.1; 現在有 async & await."},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者是c++ 老手，看到了一些rust的傳聞很感興趣，所以來試著用用看。一開始的感覺還不錯，所有權解決了很多在C++會遇到的問題，這並不是免費的午餐，他依賴更複雜的語法限制，且你不能把其它語言的常識套用在rust。但這樣也沒什麼不好，rust寫出來的程式很難會有難聞的代碼味，你可以很放心的維護你的程式。rust相較於c++，需要你顯式宣告各種語法，你的程式語意明確不會被誤解。作者覺得rust生態還不夠完整，直接使用的風險還過高，但這個問題正在逐步被改善，像微軟、亞馬遜、臉書等公司都在使用，相信rust的未來是很光明的。read morehttps://www.reddit.com/r/rust/comments/cnnoyo/my_first_three_months_with_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我學習rust的前三個月"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這篇文章講解了從純future轉換到 async/await之後，程式碼的閱讀性會有顯著的提高，也更容易寫出非同步的程式。使用futureasync/await相信大家都跟我一樣迫不及待想要趕快使用rust 1.38版！read morehttps://www.reddit.com/r/rust/comments/cnnb5b/await_a_minute_why_bother/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Await 一下，何必要這麼麻煩呢？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"裡面提到了 rust 目前所擁有的語言特性大部份是參考過去程式語言的解法只是更優雅的整合在了一起，這是其它語言所沒有的。read morehttps://www.reddit.com/r/rust/comments/cnsb3j/project_servo_technology_from_the_past_come_to/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Project Servo 使用過去繼有的技術拯救未來的自己"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"現在所有的型別都實作 DebugMSAA 反鋸齒做好了事件API對3D圖形底層api有興趣的可以看看。read morehttps://www.reddit.com/r/rust/comments/cnvfrm/gfxhal03_release_notes/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-09 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gfx-hal-0.3 來了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库的作用是这个，随着数据的增多，想要从各种数据中识别出用户的关键（敏感）信息，就越来越困难，必须使用一定的工具来进行自动化处理。而这个算法就在这个过程中起作用。详情请查阅：https://tweedegolf.nl/blog/33/implementing-lempel-ziv-jaccard-distance-lzjd-in-rustRepo: https://github.com/tweedegolf/lzjd-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tweedegolf/lzjd-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lzjd-rs - Lempel-Ziv Jaccard Distance 算法的 Rust 实现库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"属于研究范畴了，作者还有后续文章，请持续关注。Read More: https://gist.github.com/edmundsmith/e09d5f473172066c0023ef84ee830cad"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gist.github.com/edmundsmith/e09d5f473172066c0023ef84ee830cad"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在使用现有的Rust设施模拟 HKT（Higher-Kinded Types ）上的尝试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Kate，对，就是原来 KDE 中的那个 Kate，现在已经在其主分支上支持了 Rust 的 rls。想尝鲜的可以下下来试一下。Read More: https://kate-editor.org/post/2019-08-07-kate-initial-rust-lsp-support/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://kate-editor.org/post/2019-08-07-kate-initial-rust-lsp-support/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Kate 编辑器对 Rust rls 的支持已经落实了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"之前推过，今天社区又比较关心，故再次推一下。Read More: https://tikv.org/blog/client-futures/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://tikv.org/blog/client-futures/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"NRC 大佬的博客文章，对 tikv 的 futures 0.1 升到 0.3 过程的记录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以并行渲染，适合新手练习。Repo:https://github.com/Smoltbob/fractals_rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Smoltbob/fractals_rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fractals_rust - 生成分形渲染图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Boggle 游戏是一种找字游戏，说明在[这里]（https://en.wikipedia.org/wiki/Boggle），作者通过尝试将多线程与 crossbeam-deque 配合使用实现了高性能的解题武器。Repo: https://github.com/elfsternberg/boggle-solver"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/elfsternberg/boggle-solver"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"boggle-solver - 通过解决 boggle 问题来展示 crossbeam-deque"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"包含：\nA event based Descrete Event Simulator(DES)\nA Queue Network, consists of Servers(Operator), Queues(Communication Channel)\n感觉已经超出了小编的认知了，谁能来讲一下？比如，它可以对斐波拉契公式映射成下面这个：Repo: https://github.com/max6cn/q\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/max6cn/q"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-08 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"q 框架 - 通用队列自动机运行时实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#security今天的讨论有两个主题，第一个是关于在Safe Rust中绕过借用检查的一个问题，第二个是关于Libra区块链依赖Rust单一语言而引起的安全性讨论。一、Safe Rust中绕过借用检查：几天前（2019 年 7 月 27 日）一位用户将 Rust issue #25860 Implied bounds on nested references + variance = soundness hole  中的用例上传到了 crates.io（fake-static）。意在使大家注意到这个在此之前已经超过两年没有动静的 issue。这使我了解到原来目前的 Rust 实现还在一些边角存在着可怕的缺陷。以致于在安全 Rust 中通过精心构造的数行代码便能绕过借用检查，正如 issue 中的用例：\n知乎讨论\nissue #25860\nfake-static\n二、在今天某微信社区的一次区块链安全的分享中，提到Libra墨子安全实验室创始人 苗知秋 谈到Libra选择Rust：在实现语言上，Libra项目选择了一个非常小众但宣称安全性突出的语言RUST。然而，宣称的安全不表示实际上的安全。过于小众的语言往往缺乏长时间的锤炼，导致隐藏的问题较多。再安全的语言也无法确保实现的安全，漏洞常常来自代码实现过程，来自于人。RUST社区也在讨论随机数生成函数的安全升级。所以RUST语言虽然具有安全的特色，但是并不完美，不排除有可能成为Libra项目的阿喀琉斯之踵。最后，过于依赖RUST语言有可能带来单一性依赖问题，如果RUST语言出现安全问题，则会波及整个Libra系统，这一点可能需要时间来解决，毕竟Libra出现时间尚短，需要时间来实现必要的多样化部署。日报君（Chaos）发出质疑：不过话说回来，有一点我不太同意。安全漏洞比例最大的是内存安全问题，（见微软安全响应中心的文章，70%的安全漏洞是内存问题引起的）。而Rust语言的安全性恰恰就是解决内存安全（常见的内存安全问题，当然不完美，也不可能完美）。内存漏洞是跨语言漏洞，多用一种语言就多一份风险，其实并不能改善安全性。苗知秋回复：这是一种经典的安全防护思路，安全问题必须从整体上考虑，不能只看局部。区块链作为去中心化的P2P架构，不怕部分节点出问题，担心的是全部节点出问题。因此如果单一使用rust语言实现，谁敢打包票说rust万寿无疆、刀枪不入？万一某天rust爆出系统性漏洞，Libra就全军覆没了。因此为了实现系统级的安全，必须要把风险分散。如果所有的rust部署节点出问题，在解决rust问题期间Go语言节点还可以支撑系统运行，Go语言出问题，在解决Go语言问题期间Java节点也可以让系统正常运行。那么如果rust，go，java同时出问题呢？概率比rust一个出问题的概率小多了啊，这就叫千斤重担万人挑，人人头上有指标[呲牙]小结： 从安全角度来看，苗知秋的观点是有一定道理的。这可能也是以太坊多语言实现的一个原因。关于以上两个讨论，大家怎么看呢？"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」Rust的安全性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crossbeamBoggle是一款受欢迎的益智拼字游戏，作者用Rust来实现了它，作者主要是想练手crossbeam，因为他最近找工作的时候碰到的白板手写代码就是这个Boggle Slover。boggle-solverhttps://github.com/elfsternberg/boggle-solver"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"boggle-solver：Boggle游戏的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Reddit为什么Rust突然被Facebook、微软等广泛推崇？ 下面一个评论总结的很到位：当「工程质量」高于一切的时候，选择Rust是自然而然的事。Reddit讨论https://www.reddit.com/r/rust/comments/cn50tm/why_is_rust_suddenly_so_widely_adopted_not_a/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」为什么Rust突然被广泛使用？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustsimRustsim组织是一个GitHub组织，聚焦于提供各种数值模拟的库。包括\nalga， 抽象代数库\nnalgebra， 线性代数库\nncollide， 2D和3D的碰撞检测库\nnphysics， 2D和3D的物理模拟库\n最新报告称：\nnphysics 0.12 已经支持了连续碰撞检测\nncollision 0.20 对非线性冲击时间计算和Pipeline进行了重构\nRead Morehttps://www.rustsim.org/blog/2019/08/01/this-month-in-rustsim/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustsim 报告 #7"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate这个帖子给出了一个办法，就是把它交给Rust Bus组织（社区义务者），该组织会帮你管理crate。倒也是个不错的办法。\nRead More\nrust-bus\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"当你没时间维护自己的crate时，最好的善后方法是什么呢？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blockchainstellar公司出品。wow，挖掘出一点点关于Rust之父的秘史，不知道大家是否知道：Rust之父Graydon Hoare在2014年加入过这家公司作为核心团队成员（当然现在不在了），可以看下面的Stellar Report 2014。\nslingshot\nStellar Report 2014\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"slingshot : 一个新的区块链框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mosaic万恶的马赛克。emosaichttps://github.com/willdady/emosaic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"emosaic： 马赛克生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#BorrowChecker主要是简单地使用scope（花括号块）来解决生命周期问题Read Morehttps://www.youtube.com/watch?v=RoCMsiWngNs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「新手向」「视频」和借用检查器战斗实录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#music #webPolarishttps://github.com/agersant/polaris"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Polaris：一个用Rust编写的web音乐播放器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DNA #wasmCodenano还能够计算出一些简单的DNA碱基之间的相互作用，以帮助用户根据一些简单的标准设计出可行的DNA纳米结构。创建纳米结构设计可能是一个乏味的过程，而codenano的设计目的是减少这一过程。它给出了一个简单的应用编程接口，在这个接口中，我们使用一个小的、简单的Rust编程语言子集来指定一个DNA纳米结构。使用这个应用编程接口不需要任何Rust的知识。然而，高级用户可以从Rust的表达中受益。\nRead More\nonline 演示\nRepo\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-07 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Codenano： 一种在浏览器中设计DNA（脱氧核糖核酸）纳米结构的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustcheats.rs是一个Rust资料备忘录网站，记载了常见Rust知识点、文档、工具等等，有了它可以把一大堆书签删掉了。夜间模式下 Ferris 的眼神蠢萌蠢萌的。https://cheats.rsRead Morehttps://cheats.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-06 21:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cheats.rs 一个整洁的Rust备忘录"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#iot作者李立源介绍了他使用Rust、 STM32 Blue Pill 和 Apache 开发 NB-IoT 传感器的过程。https://medium.com/@ly.lee?source=post_page---------------------------Read Morehttps://medium.com/@ly.lee/rust-rocks-nb-iot-stm32-blue-pill-with-quectel-bc95-g-on-apache-mynewt-ef62a7e28f7e"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-06 21:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【阅读】使用Rust开发NB-IOT设备"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@timkofu 看完 The Book 后想找一个类似 pythonchallenge.com 网站，通过做一些编程练习学习 Rust，网友给他推荐了以下几个网站：https://twitter.com/timkofu\nvulkan-tutorial-rs\nwww.codewars.com\nexercism.io\n刚学 Rust 不知道该做些什么项目的同学可以看看，顺便推荐issuehub.com，可以用“rust + help wanted”来搜索Rust 相关的开源项目，帮助开源项目解决issue也是一种练习方式。http://issuehub.ioRead Morehttps://twitter.com/timkofu/status/1158415111394123776"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-06 21:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【工具】vulkan-tutorial-rs 编程语言练习工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust作者认为Rust很有吸引力，但比较两门程序语言是困难的。虽然增长、性能和安全优势等指标是一回事，但长期来说开发人员的工作效率对于他们衡量或研究来说是一个更难的指标，因此作者想在社区中听到大家的声音。目前讨论中觉得Rust能提能提高生产力的地方是：貌似讨论区更多的是在夸Rust，更多讨论请点击下面链接。Read Morehttps://www.reddit.com/r/rust/comments/cmk5rz/does_rust_improve_developer_productivity_over_c/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-06 21:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【讨论】Rust是否比C++更能提升开发人员生产力"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #book感谢 @huangjj的分享Read Morehttps://huangjj27.github.io/async-book/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Rust异步之书」中文翻译"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#physics #game #Rustsim作者在本文中探到了Nphysics将来的愿景，是做一个性能水平可与现有流行的C++开源物理引擎(如Box2D和Bullet Physics)相媲美的Rust实时物理引擎。该库现在属于Rustsim组织。Read Morehttps://www.patreon.com/posts/28917514"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nphysics的未来：纯Rust的2D和3D实时物理引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game\nRead More\nveloren源码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"veloren: 一个类似于我的世界的游戏发布了0.3版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#stackoverflow问题：Rust有128位整数，用数据类型i128表示(u128表示无符号整数):Rust如何使该i128值在64位系统上工作？它是如何做算术的？因为据我所知，这个值不能放在x86-64处理器的一个寄存器中。编译器是以某种方式为一个i128值使用两个寄存器，还是使用某种大整数结构来表示它们？回答：所有Rust的整数类型都编译为LLVM整数。LLVM允许1到2^23 - 1之间任意位宽的整数。LLVM指令通常处理任意大小的整数。在LLVM IR级别，答案是：两者都不是。i128适合一个寄存器，就像其他单值类型一样。另一方面，一旦翻译成机器码，两者之间就没有什么区别，因为结构可以像整数一样分解成寄存器。然而，当进行算术运算时，将整个数装入两个寄存器是一个非常安全的选择。*虽然我知道对大于128的大小和非2的幂的支持是不稳定的，并且实现可能有错误，这可能部分解释了为什么Rust只公开1、8、16、32、64和128位整数。Read Morehttps://stackoverflow.com/questions/57340308/how-does-rusts-128-bit-integer-i128-work-on-a-64-bit-system"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「SO问答」Rust中的128位整数如何在64位系统上工作？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#indextreepulldown_cmark库为了增加解析速度，快速构建和遍历AST，就使用了indextree。Read Morehttps://github.com/saschagrunert/indextree/releases/tag/4.0.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"indextree 4.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli新手可参考它来学习RustBattleshiphttps://github.com/SerhiiBilyk/Battleship"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Battleship: 控制台游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#spojSPOJ是波兰最为出色的Online Judge之一，界面和谐，题目类型也非常丰富，适合有一定基础的选手练习，对高手而言也是个提高能力的良好平台。现在已经支持了Rust 1.33版本。Read Morehttps://www.spoj.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SPOJ将Rust升级到1.33版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GUI #GTK本文通过一个简单的示例探讨了Rust所有权对GUI开发的影响。结论：在构建GTK应用程序时，Rust带来了一些合理的权衡。但这并不意味着它没有代价。如果你决定使用Rust进行GTK应用程序开发，那么在开始设计自己的框架之前，你可能需要检查relm(Rust实现的，基于GTK+的仿elm框架)是否有更高级别的应用程序接口。\nRead More\nrelm\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust vs GUI： Rust所有权对于GUI开发的影响"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#http一个实用的HTTP客户端。Isahc vs Reqwest：\nIsahc使用http crate作为其公共API的一部分，而reqwest将其隐藏在实现中\nIsahc具有更小的依赖树和更小的二进制内存占用\n改名的原因：\ncHTTP太难念\ncHTTP不容易被记住\n（所以，isahc难道是 is a http client 缩写吗？ 这新名字起的也不咋地。。。233）isahchttps://github.com/sagebind/isahc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"isahc: 之前的cHTTP已经改为此名"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#IoT标题为：「Abusing Fire for Light - Why we didn’t rewrite our IoT app in C++」，翻译过来就是： 「饮鸩止渴：为什么我们不用C++重写IoT应用」文章里这个类比比较经典（普罗米修斯盗了天火，为世界带来了光明，但与此同时也带来了灾难）：我们本可以用C++重写我们的物联网平台应用。使用C就像用蜡烛照明一样。它的基本属性是众所周知的，它从文明之初就存在了，如果你滥用它，它会让你周围的房子着火。(在这个比喻中，C++将是“所有可以被点燃产生光的东西的集合”。)该文的作者是智能家居系统公司Dwelo的IoT工程师，该文主要罗列了一些Cpp编写嵌入式应用可能拥有的问题。\nRead More\nPart I\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」用Rust重写物联网网关 Part 2: 饮鸩止渴：为什么我们不用C++重写IoT应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cpp有人写了篇文章，呼吁Cpp也学Rust那样引入Epochs。想象一下，你已经设计了一种编程语言超过30年，并且它逐渐在全球广泛使用。你在开始时所做的一些决定非常出色，并为你的项目的成功做出了贡献。然而，还有一些不是最好的:多年来，你和你的用户意识到，如果你多年前所做的选择略有不同的话，这个世界会变得更好。你不断发展你的语言，增加有用的功能，并使它跟上竞争的步伐。然而，糟糕的选择和旧的(现在已经过时的)结构仍然挥之不去。你试着删除语言中最危险和最少使用的部分，虽然他们的删除非常成功，但是一些用户无疑会受到它的阻碍。对于更受欢迎的构造，您尝试不赞成:社区的大部分人欢迎它并迁移它们的代码库，而另一个人发现实现一致性所需的工作要么大得不合理，要么由于遗留依赖关系或许可问题而不可能。除非你偶然发现这篇文章，否则似乎没有出路。它的作者提出了一个不可思议的主张：如果我告诉你，我可以解决你所有的问题呢？更好的是，如果我告诉你向后兼容性永远不会被打破，并且可以自动迁移到你的语言的更新版本呢？此时，你立即认为这家伙一定是疯了。然后他说...而且，已经有人做了。而且奏效了。现在你感兴趣了。这篇文章的Rddit讨论贴里有人说：这就是我为什么学习Rust的原因，Cpp那帮人是不会同意的。\nReddit 讨论\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用epochs修复c++"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#proc_macroproc_macro_roids是一个辅助你写过程宏的小工具。proc_macro_roidshttps://github.com/azriel91/proc_macro_roids"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"proc_macro_roids 0.3 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Vector发布了0.2版本staticvechttps://github.com/slightlyoutofphase/staticvec\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-05 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"staticvec: 基于const generics实现的栈分配固定容量的Vec替代方案"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust知乎网友@黄珏珅开设了本专栏，主要针对对 Rust 感兴趣的 C++ 工程师，介绍了完成相同任务 C++ 和 Rust 中的异同，感兴趣可以专注专栏。本周第三篇文章出炉。https://www.zhihu.com/people/huang-jue-shen\nC++工程师的Rust迁移之路（3）- 继承与组合 - 上\nC++工程师的Rust迁移之路（2）- 类与结构体\nC++工程师的Rust迁移之路（1）- 起步\nRead Morehttps://zhuanlan.zhihu.com/c_1139487758685900800"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-04 17:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"知乎专栏【CPP工程师的Rust迁移之路】新文章出炉"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustOwen Synge 在 DebConf 上的演讲，他介绍了 python 在他开发中的应用场景，以及他为什么没有选择 C/C++ 而选择了 Rust。Read Morehttps://www.youtube.com/watch?v=IYLf8lUqR40"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-04 17:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"是什么让 python 开发者在找不到 Rust 相关工作时还要学它？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust特点是性能好，尚未发布，作者希望能让更多贡献者参与进来。Read Morehttps://users.rust-lang.org/t/new-rust-png-decoding-library/30952"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-04 17:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个新的 Rust PNG 解码库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者既不是经验丰富的Rust程序员，也不是GTK+的开发者，甚至没有丰富的多建立本机GUI或系统级编程的经验。尽管如此，他还是想知道Rust的内存访问静态分析对编写GUI有何影响。Read Morehttps://turbomack.github.io/posts/2019-07-28-rust-vs-gui.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-04 17:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的借用检查和内存所有权对GUI开发的影响（简单案例）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@douglascorrea 在Reddit上发帖要直播实现一个游戏模拟器的过程，如今已经出到第14期视频了。立下flag却迟迟没有动手的同学可以借鉴他的方式。https://www.reddit.com/user/douglascorrea/Read Morehttps://www.reddit.com/r/rust/comments/cjespt/twitch_youtube_series_building_a_gameboy_emulator/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-04 17:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 实现 Gameboy 模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用来对一个数据流中的重复数据进行筛选。是 BoomFilters 的 Rust 实现版本。https://github.com/tylertreat/BoomFiltersRepo: https://github.com/u2/stable-bloom-filter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/u2/stable-bloom-filter"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"stable-bloom-filter - 稳定布隆过滤器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者写了一篇文章来表达自己的见解。答案是：会。原文值得一看。国内地址：https://docs.qq.com/doc/DQlBtWlBBbFNXeEt2原文地址：https://medium.com/@me_26124/rust-reverses-research-ruin-88641c11a99f"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://medium.com/@me_26124/rust-reverses-research-ruin-88641c11a99f"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 会在研究领域大展身手吗?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"AVL 树是一个自平衡二分查找树，以它的发明者  Adelson-Velsky and Landis 命名。这篇文章就通过使用 Rust 对 AVL 树的实现来深刻理解 Rust 中的主要概念。国内地址：https://docs.qq.com/doc/DQmNmTWxOcWdpeHJK原文地址：http://francismurillo.github.io/2019-07-31-Understanding-Rust-Through-AVL-Trees/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://francismurillo.github.io/2019-07-31-Understanding-Rust-Through-AVL-Trees/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过 AVL 树来理解 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"功能很简单，比如：Repo: https://github.com/Calmynt/moveslice其实相关的评论很有价值，我这里整理出来，对于学习是非常好的一手实践材料。国内地址在这里：https://docs.qq.com/doc/DQkJscUd0REhCZkdX原文地址https://www.reddit.com/r/rust/comments/cl8xvv/moveslice_a_one_function_crate_that_explains/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.qq.com/doc/DQkJscUd0REhCZkdX"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"moveslice - 一个简单的库，用来对slice中的一部分进行移动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"克隆自 DOS 游戏 ZZT 的引擎。https://en.wikipedia.org/wiki/ZZTRepo: https://github.com/yokljo/ruzzt"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/yokljo/ruzzt"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ruzzt - 一个 ZZT 游戏引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"沙盒库的意思，就是可以随便在里面玩儿，里面崩了不会影响外面的进程状态。跟 Docker 有点像，但是是更轻量型的语言内的沙盒。\nany normal computation (not I/O)\nI/O operations on existing file descriptors (i.e. files and sockets opened before entering the sandbox)\naccepting connections on an existing socket (which creates new file descriptors)\nopening files under pre-selected directories though the Sandbox/SandboxContext API (which creates new file descriptors)\nRepo: https://github.com/myfreeweb/rusty-sandbox"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/myfreeweb/rusty-sandbox"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rusty-sandbox - 一个 Rust 沙盒库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"简单地被其动画吸引了，已经上升到美学和哲学层面。这种库不推还推什么，哈哈。Repo: https://github.com/p-e-w/ternimal"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/p-e-w/ternimal"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ternimal - 模拟生命的形式？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"快速读取 JSON 值 。借鉴自 https://github.com/tidwall/gjsonRepo: https://github.com/importcjj/a-json\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/importcjj/a-json"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-08-03 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"国人 importcjj 哥出的 ajson 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust #stackoverflow该问题的作者描述，比如C代码中：两个指针a和b有可能互为别名（俩指针指向同一数据），所以clang在编译该代码的时候，会在寄存器中存储两次(%rsi),%eax来防止这种情况。当然也可以使用restrict关键字来对参数进行约束，显式地告诉编译器这俩指针不可能互为别名（但在C语言中，restrict关键字仅仅是告诉编译器可以优化，它不会帮助开发者进行检查，也就是说，很可能因为开发者没有遵循此契约而引发未定义行为）。从而生成的优化代码中只存储一次寄存器。但是作者发现在Rust中虽然有编译器检查，两个可变引用不存在互为别名的情况，但是编译器并没有因此而进行任何优化：所以他比较担忧，是不是在Safe Rust之下也可能存在别名？该贴的回复给出了答案：Rust最初启用了LLVM的noalias属性，但这导致了非预期的编译结果（算是LLVM的一个Bug，等issues 54878修复以后就正常了）。现在也可以使用-Zmutable-noalias=yes参数进行编译就能得到预期结果。\nRead More\nissues/54878\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「SO问答」既然两个可变引用不能别名为啥Rust编译器没有对其进行优化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#TypedPointerReversal #paperHAL INRIA貌似是法国国家信息及自动化研究院。该论文提出了ML风格编程语言的资源管理模型，旨在兼容OCmal理念和运行时模型，提议使用析构函数扩展OCmal，在系统编程所有权和借用模式之上来提升OCmal的安全性、效率。没错，借用了Rust/C++中的一些概念。感兴趣的可以看看，对资源管理应该会有深入的了解。该组织已经发布了多篇关于Rust研究的论文了。Read Morehttps://hal.inria.fr/hal-02177326"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学术」使用类型化指针反转进行高效析构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#NeuralNetworks这篇文章是作者探索Rust是否适合数据科学的工作。他分别用python和rust实现了一个小型的神经网络，然后进行了性能测试，利用火焰图进行分析，最终得出一个结论：\n大部分时间都花在做线性代数上，不管Rust还是Python，所以使用Rust永远也不会有10倍的加速。\nPython进行优化以后，性能可以提升两倍，Rust原则上可以进行相同的优化，但目前ndarray还不支持2维数据以上的矩阵乘法。\n作者认为，Rust目前还没有做好胜任数据科学的工作。未来还需要更完善的生态系统。\nRead Morehttps://ngoldbaum.github.io/posts/python-vs-rust-nn/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Python和Rust实现神经网络"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RestSec很高兴有人在帮我们思考这个问题：当一个crate依赖越来越多的crates时，我们有什么办法可以审计它们？Read Morehttp://lucumr.pocoo.org/2019/7/29/dependency-scaling/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于Rust依赖安全的最新思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#openapi #WIP0.3发布，支持OpenAPI V2接口。papercliphttps://github.com/wafflespeanut/paperclip"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"paperclip: OpenAPI的代码生成工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rocketrocket-lambhttps://github.com/GREsau/rocket-lamb"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rocket-lamb: 方便在aws lambda上面跑rocket的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async新库，WIP状态。该库是从作者的另外一个项目OxidizeBot(高性能Twitch机器人)中提取出来的。\nRead More\nasync-injector\nOxidizeBot\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-injector: Rust的异步反应式依赖注入库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#AlgebraicEffects看样子该贴作者是一个函数式粉丝。评论回复中有人用Rust实现了一个代数效应库effective-rust。代数效应目前是一个学术/实验概念，它允许你通过使用类似于throw catch的机制来改变称为“效果”的某些计算元素（如函数调用，打印语句等）。\nReddit 讨论\neffective-rust\nAlgebraic Effects相关文章\nwhat-does-algebraic-effects-mean-in-fp\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」Rust如何实现代数效应"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Debian2019年7月6日发布的Debian GNU/Linux 10 “Buster” 操作系统将预装Rust编译器。\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-31 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Debian Buster 将会预装Rust编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust知乎网友@黄珏珅开设了本专栏，主要针对对 Rust 感兴趣的 C++ 工程师，介绍了完成相同任务 C++ 和 Rust 中的异同，感兴趣可以专注专栏，目前已经有两篇文章：https://www.zhihu.com/people/huang-jue-shen\nC++工程师的Rust迁移之路（1）- 起步\nC++工程师的Rust迁移之路（2）- 类与结构体\nRead Morehttps://zhuanlan.zhihu.com/c_1139487758685900800"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-30 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"知乎专栏【CPP工程师的Rust迁移之路】"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blockchain秘猿组织的 rust & blockchain 的 telegram 群，下面是群链接Read Morehttps://t.me/rustinblockchain"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-30 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust & Blockchain 群"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@ardawan 用 Rust 实现的游戏服务器，目前还没有开源，评论中期待开源的呼声很高。https://www.reddit.com/user/ardawan/Read Morehttps://www.reddit.com/r/rust/comments/chodkr/testing_my_first_game_server_written_in_rust_lang/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-30 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 实现的游戏服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@douglascorrea 要在 YouTube 和 Twitch 直播他实现 Gameboy 模拟器的过程，他认为“公开曝光有助于避免拖延症”，所以他选择了直播。https://www.reddit.com/user/douglascorrea/Read Morehttps://www.reddit.com/r/rust/comments/cjespt/twitch_youtube_series_building_a_gameboy_emulator/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-30 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 实现 Gameboy 模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@SuperV1234 使用 C++20 和 Rust 分别实现了同一个项目，用来比较这两个语言的优势以及相异之处，下面是他的初衷：https://www.reddit.com/user/SuperV1234/\n让 C++ 的开发者体验一下 Rust\n让 Rust 的开发者体验一下 C++20\n让自己对 Rust 更深入\n确定两种语言的优劣点，并希望有助于改善这两种语言。\n更多讨论和代码仓库请点击链接。Read Morehttps://www.reddit.com/r/rust/comments/cjjnec/feedback_request_for_sokoban_implementation/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-30 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"C++20 和 Rust 实现推箱子游戏的比较"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Seed(https://seed-rs.org/) 也是一个前端 Web 开发框架。这是用 Seed 写的一个前端网站（https://seed-rs-realworld.netlify.com/），这里是一些相关的资源（https://github.com/MartinKavik/awesome-seed-rs）。Repohttps://github.com/David-OConnor/seed"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://seed-rs.org/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Web 前端开发框架 Seed 的一些资料"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这里列举一些，不完整，会不断增加\nhttps://apps.karthikkaranth.me/spherro/\nhttps://lukaslueg.github.io/macro_railroad_wasm_demo/\nhttps://sandspiel.club/ 落沙游戏\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"已经用上 wasm 技术的一些网站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章https://iandouglasscott.com/2019/07/26/rust-safe-and-unsafe-as-theorems-and-axioms/ 作者从另一个视角来探讨了 Rust 中的 unsafe 的概念，他建议，可以将 Rust Unsafe 类比看作数学上的公理和定理。基于这个观点，做出了详细的剖析。详情请看原文。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://iandouglasscott.com/2019/07/26/rust-safe-and-unsafe-as-theorems-and-axioms/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Unsafe：把它们看作公理和定理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"很简单的思路，如果发现溢出了，结果就置为 1。一定程度上，可保证计算安全，不会由于偶然的原因，导致系统崩溃。比如：https://github.com/XCH-CEB/xch-project/tree/master/scalc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/XCH-CEB/xch-project/tree/master/scalc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SCalc - 保证不会溢出的计算库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比如会给出这样一个报告。还有相关其它配套功能。使用下面命令安装："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-cache - 帮助你管理你本地的 registry 缓存"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"演示地址在这里：https://vberger.github.io/Bayes-O-Matic/讲解文章在这里：https://vberger.github.io/Bayes-O-Matic/help.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://vberger.github.io/Bayes-O-Matic/help.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bayes-O-Matic - 帮助你对一些问题做贝叶斯推演的一个Webapp程序（用wasm实现）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个例子：https://github.com/seijikun/kmean-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/seijikun/kmean-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kmean-rs - 实现 K 均值聚类的小而快的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://phaazon.net/blog/introducing-awoo 这篇文章，从风格上，我觉得挺诡异，没看懂，各位看观有兴趣来点评一下？\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://phaazon.net/blog/introducing-awoo"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-28 21:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Animate code with awoo!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust如果你想参加关于 Gamedev 的演讲、研讨会或者加入讨论组，可以在这条推特下面和@Miux讨论或者提出建议。https://twitter.com/angelmixuRead Morehttps://twitter.com/angelmixu/status/1154816448096886789"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-27 22:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于推动使用 Rust 进行游戏开发的讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustRust in Action 新增了几个 rust 项目:\na CPU emulator\nan NTP client\na basic grep\nyour own floating point format\na memory scanner\nUNIX signal handling\nsetjmp/longjmp control flow\nbinary files inspector\nRead Morehttp://www.rustinaction.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-27 22:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust in Action 新增项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustsled 将要发布新版本，下面是新版本中的一些特性:\natomic writebatches\nhigher write throughput & lower tail latency\nmuch faster initial startup time for short-lived programs\nCRDT-based multithreaded recovery support\nfewer dependencies\nAPI closer to #rustlang std\nRead Morehttps://github.com/graphql-rust/juniper"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-27 22:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sled 将要发布新版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm这是一个用 Rust 编译到 WebAssembly 的前端项目，它实现的效果像万花镜一样绚丽🦚Online Demohttps://ran.do/pythiaRead Morehttps://twitter.com/josephreisinger/status/1153679861921329158"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-27 22:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个使用 Rust 实现的 WebAssembly 项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate@jntrnr 有一个关于 crate 播客的想法，每集找一个有趣的 crate，谈谈能用它干什么，点击下面的链接加入讨论。https://twitter.com/jntrnrRead Morehttps://twitter.com/jntrnr/status/1154869171231973376"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-27 22:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个关于crate播客的想法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@nasso4991把他老版本的屏幕拍摄应用使用 Rust 重写了，第一个版本是用 C 和 SDL2 实现的，新版本使用了 Rust、OpenGL 和 glium crate。https://twitter.com/nasso4991Repohttps://github.com/nasso/screensnapRead Morehttps://twitter.com/nasso4991/status/1154122993846689792\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-27 22:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 和 OpenGL 实现的屏幕拍摄应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這位網友想組一台 Ryzen 9 3900X +Samsung 970 EVO Plus SSD有興趣的可以給他建議read morehttps://www.reddit.com/r/rust/comments/chqu4c/building_a_computer_for_fastest_possible_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-26 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"組一台編譯rust最快的個人電腦！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"read morehttps://matklad.github.io/2019/07/25/unsafe-as-a-type-system.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-26 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Blog Post: Unsafe as a Human-Assisted Type System"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"給rust初學者參考read morehttps://www.youtube.com/watch?v=TecJkB-8kBI"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-26 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用動態規劃解決找錢問題"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"更新了效能改善與語法改動。read morehttps://www.reddit.com/r/rust/comments/ci0ghn/ann_sauron_0100_web_framework_rust_nightly_with/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-26 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sauron 0.10.0 web framework (rust nightly)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"裡面有個短片與源碼，可以看到不斷放大的碎形之美read morehttps://www.reddit.com/r/rust/comments/ci19o2/i_made_a_zoom_video_of_the_mandelbrot_set_with/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-26 21:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 碎形程式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一篇很优秀的文章，讲了 C 编译器的实现中的一些优化情况，以及带来的风险，对于正在进化的 Rust 编译器，可能能提供一些参考。Read Morehttps://lwn.net/Articles/793253/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编译器优化及其可能带来的风险"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"都在报怨 Rust 编译器太慢了。其实官方组还是很努力了。不信看看下面的报告：Read Morehttps://blog.mozilla.org/nnethercote/2019/07/25/the-rust-compiler-is-still-getting-faster/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 编译器一致在致力于加快编译速度的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"昨天出的第一篇文章，今天出的第二篇，接着昨天的写。初学者可以仔细跟着做一下，很好的入门教程。Read Morehttps://tht.fangraphs.com/baseball-coding-with-rust-part-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」棒球编程与Rust 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"像下面这个样子：不过，俗话说，写宏一时爽，读宏火葬场。请看官自行斟酌。Repohttps://github.com/mooli/zoet-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"zoet - 一个帮助实现常用 Trait 的过程宏库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SPH(smoothed-particle hydrodynamics) 光滑颗粒流体动力学 ：D。作者用 Rust 写了一个模拟这个的库，在网页上运行。效果真棒。Demo onlineRepohttps://apps.karthikkaranth.me/spherro/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"网页上的 SPH 流体模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 安全代码工作组（非官方）搞的一个仓库，供人们讨论可以替换为safe代码的unsafe代码Repohttps://github.com/rust-secure-code/safety-dance"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"哪些 unsafe 代码可以被替换为安全代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"直接看效果。喜欢。Repohttps://github.com/SambaDialloB/RustyChat"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust，Cursive 和 PubNub 开发一个聊天客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这里https://www.infoq.com/presentations/rust-webassembly-javascript/Cloudflare 的工程师讲的，不过是英文的，感兴趣的可以听听。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个 Rust、WebAssembly 及与 Js 进行配合的讲座"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目的是让使用标准库中的 Atomic 类型更方便。比如下面这样子：Repohttps://github.com/LukasKalbertodt/atomig"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"atomig - 一个辅助使用 Atomic 类型的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这里https://twitter.com/i/status/1154312277845106689"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 制作游戏服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"炫酷的视频效果在这里https://youtu.be/b4mZau2NhiY"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 实现 Mandelbrot 集"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"检查 Http 的返回状态，其实主要是配合 Prometheus 使用的。Repohttps://github.com/rjmasikome/pinger-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Http状态检查器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"听起来有点绕口，就是帮助你写过程宏的一个库。主要是提供了方便的解析属性的功能。Repohttps://github.com/chuck-flowers/attribution"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"attribution - 辅助写过程宏的过程宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Repohttps://github.com/alexislozano/conway\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-25 19:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个 Conway 生命游戏练习"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#meetupRead Morehttps://space.bilibili.com/293274438/channel/detail?cid=81095"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"In Rust We Trust 活动回顾视频已上传B站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asyncasync/await将在Rust 1.38中稳定，但是还不会支持trait中的异步方法，所以，dtolnay做了这个库，提供了一个属性宏#[async_trait]来满足这个功能。async-traithttps://github.com/dtolnay/async-trait"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-trait: 为trait提供async fn支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Metaprogramming #Generics该文作者比较了Go、Rust、Swift和D等语言中的泛型，以及阐述了这些语言中如何实现泛型。Read Morehttp://thume.ca/2019/07/14/a-tour-of-metaprogramming-models-for-generics/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"不同语言中的泛型和元编程模型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#BitVectors作者在写压缩算法，这篇文章是作者学习使用位向量进行可变长度编码压缩算法学习过程的记录。Read Morehttps://christianpoveda.github.io/blog/bit-vectors/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"位向量与可变长度编码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#unsafe(这名字起的好：Sidereophile，噬铁菌，对金属有亲和力)Siderophile会发现你代码中的unsafe代码，并且会给这些代码进行安全性排序，辅助你进行模糊测试。\nRead More\nsiderophile\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Siderophile: 暴露你crate中的不安全性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Rust到底Rust是否适合小白？本文算是一个答案。本文作者不是一名程序员，他从去年开始想要创建一个自己的个人棒球数据基础设施，所以想自学一门编程语言，后来选择了Rust。这之前他也了解过R/ Python，来看看他写的两篇文章，看看他如何理解Rust，以及他如何通过类比棒球比赛（代码示例）来理解Rust的所有权。（我看他这两篇文章写的一点儿都不像是个零基础刚入门的小白）Read Morehttps://tht.fangraphs.com/baseball-coding-with-rust-intro/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」棒球编程与Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#LTO为了使Rust能够与用其他语言编写的代码进行互操作，调用必须通过C-ABI。 所以它是内联过程优化的边界。跨语言LTO使此边界对LLVM透明，有效地允许将C/C++代码内联到Rust代码中，反之亦然。\nRead More\n这篇issues比较详细解释了跨语言LTO\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mozilla在Firefox中为所有平台提供了跨语言LTO"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#yew该文教你用Yew的函数和组件来模块化代码。Read Morehttps://www.steadylearner.com/blog/read/How-to-modulize-your-Rust-Frontend"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「用Rust写前端系列文章」如何模块化你的Rust前端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#JobKey responsibilities:\nWork with product to translate the requirements into high level design.\nCoordinate the engineering  to assign/prioritize tasks dynamically.\nBuild high quality code by developing both unit and integration testing\nParticipate in code reviews to ensure new code conforms to highest standards\nWork with team to troubleshoot code level problems quickly and efficiently\nRequirements:\nBachelors Degree in Computer Science or related field\n5 years+ software programing experience\nExperience with blockchain technologies, like ethereum, smart contracts, and  p2p networking.\nRust experience  in production environment.\nExperience with substrate is a plus\n地址在北京， 薪水40-60万， 联系 zhengpeng.hou [at] gmail\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-24 22:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"北京区块链创业公司招人"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#substrate最近发现学习Substrate（Polkadot出的区块链框架）的人越来越多。今天有人问我一个问题，刚开始看的我一头雾水（对方截图代码如图1），又像Rust又不像Rust。问了他相关代码上下文之后，发现完整代码是一个宏（图2）。 我有点担忧。想起了10年前Rails流行的时候，很多人把Rails的DSL认为是一种语言，而完全不懂得Ruby了。对此，我只想说，磨刀不误砍柴工。建议Substrate的爱好者先把Rust系统性地学一遍，再看substrate将会事半功倍。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"建议： 学Substrate前先系统学习一遍Rust语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blockchain由NervOS在San Francisco组织。Youtubehttps://www.youtube.com/playlist?list=PLRke1-EE4VWGLXPbcpxn8fPmXlvRuZGIw&app=desktop"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust in Blockchain meetup视频集"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#MSRC #Microsoft本文是MSRC的第二篇文章，介绍了为什么微软认为Rust目前是C和C++的最佳替代品。Read Morehttps://msrc-blog.microsoft.com/2019/07/22/why-rust-for-safe-systems-programming/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「微软安全响应中心系列博文」为什么Rust适合安全系统编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#AI #IoT巴基斯坦一个为期15个月的物联网和人工智能项目，专为绝对初学者设计，让巴基斯坦为物联网和人工智能的新时代做好准备。该课程大部分内容是使用Rust。课程内容涵盖：Rust/ 嵌入式Rust和实时系统/ 微软IoT edge和IoT云/ WebAssembly/ Node.js / Docker/ KubeEdge/ 应用于IoT的区块链等。Read Morehttps://www.piaic.org/iot"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"巴基斯坦物联网和人工智能课程使用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Tezos该资金将用于使用Rust开发新的Tezos节点。Tezos是一个和以太坊竞争的区块链项目。Read Morehttps://medium.com/simplestaking/tezos-rust-project-receives-funding-from-tezos-foundation-a10e689373ec"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tezos Rust项目获得了Tezos基金会的资助"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RedoxRead Morehttps://www.redox-os.org/news/rsoc-ptrace-5/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」RSoC: 为Redox实现ptrace： Part 5"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#base64它的目标是全功能、易用且采用AVX2加速，所以如果编码/解码大块数据(如何机器支持AVX2)，它会非常快。radix64https://github.com/ggriffiniii/radix64"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"radix64: 全功能的base64库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#quickjsquickjs-rshttps://github.com/theduke/quickjs-rs\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-23 19:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"quickjs-rs: Quickjs Javascript引擎的Rust包装"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargocargo-bloat 是一个可以帮助你缩减crate大小的库。新的版本有意思的是，cargo-bloat用cargo-bloat缩减了自己，结果令人满意：大小缩减了5倍，性能提升了10倍。Read Morehttps://www.reddit.com/r/rust/comments/cg3p5m/cargobloat_08_debloated_5x_smaller_10x_faster/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-bloat 0.8 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asyncchttp是一个http客户端，最近全面升级为async/await，并且改进了API。适合学习async/awaitRead Morehttps://github.com/sagebind/chttp/releases/tag/0.5.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"chttp 0.5 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#supervisorRust实现的一个类似于Erlang里的监督树，使用它来启动自动监督的任务。bastionhttps://github.com/vertexclique/bastion"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bastion: 容错运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo新版本提供了Workspace的支持。cargo-release是一个类似于Go语言社区的一个分发工具GoReleaser。Repohttps://github.com/sunng87/cargo-release"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo-release 0.12 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asyncheim是在Rust crates生态系统中用于获取系统信息(例如，CPU、内存、磁盘或进程统计信息)的最佳工具。它的目标是最终至少具有与psutil、gopsutil或oshi相同的功能。\nheim\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"heim: 用于获取系统信息的跨平台异步库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ML #PyTorch同时也有篇文章介绍了如何基于tch-rs和Rust来使用PyTorch。\ntch-rs\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tch-rs: PyTorch的Rust绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#security用于构建Rust应用程序（CLI工具、网络、Web服务）的微框架，非常注重安全性。可能一些区块链应用在用它。\nRead More\nabscissa\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Abscissa： 面向安全的Rust应用框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#unsafe最近关于Actix中unsafe的讨论沸沸扬扬，该文作者特地写了一篇针对Unsafe的文章，来引导大家正确认识Unsafe。 最终作者提到几点：\nUnsafe并不容易。我们应该承认并尊重Unsafe的复杂性。\n请记住，Unsafe的范围远远超过了unsafe块的界限。\n当你必须使用Unsafe时，请不要放松警惕。你在用FFI的时候无法避免地会使用Unsafe，没有人会因为你在那里使用它而责备你。但这并不能免除你调整外部库的语义用来适应Rust代码的责任。\n如果想用Unsafe来优化代码，那么务必要做到这一点：在使用Unsafe优化之前，先测试代码性能。\n使用注释来记录你对Unsafe代码的不安全假设。\n保守地使用Unsafe，不要随心所欲，这样只会增加自己和别人的负担。\n当看到别人写Unsafe代码的时候，该如何做？ 不要放过UB出现的可能性，但你完全可以拥有一次愉快的交流。\nRead Morehttps://inejge.github.io/blog/2019/07/18/The-Temptation-of-Unsafe.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Unsafe的魔力"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game\nRead More\ngrue-rs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"grue-rs: RPG 角色名字生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Constructors这篇文章里作者讨论了构造函数的危险性，以此可以明白Rust为什么放弃构造函数。Read Morehttps://matklad.github.io/2019/07/16/perils-of-constructors.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"构造函数的危险"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文介绍了如何使用Tera模板系统、Webpack、最小的VueJS和CoffeeScript、Gotham创建一个小应用，并部署到Heroku。Read Morehttps://blog.codeship.com/gotham-from-start-to-heroku/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-22 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gotham ： 从零开始实现一个Web应用且部署到Heroku"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它提供了一个 Treelike trait，实现其中的两个方法 content() 和 children() 即可。作者是在在多个项目中重复写树实现得出的灵感。赞一个！Repohttps://github.com/djugei/treelike"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"treelike - 一个用于方便地实现树结构的辅助包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Neuralink is developing ultra-high bandwidth brain-machine interfaces toconnect humans and computers. We are building a team ofmultidisciplinary experts passionate about making a world-changingimpact.Read Morehttps://jobs.lever.co/neuralink/efb72bf6-5a55-434e-a0fd-9197f8485b55"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Neuralink 在组建一个队伍，寻找有 Rust 经验的工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以看作一个代码审查辅助工具。不能完全保证找出所有不安全代码，但可以成为一个有效的生产力工具。会根据不安全代码的使用进行评分，给出一个报告：Read MoreRepohttps://blog.trailofbits.com/2019/07/01/siderophile-expose-your-crates-unsafety/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"siderophile - 暴露你的包中的不安全代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"非常 Nice。第一眼就爱上了。Repohttps://github.com/Kerollmops/slice-group-by#linear-searched-immutable-groups"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"slice-group-by - 对 slice 进行分组的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"初学者可以多看看。Read Morehttps://rniczh.github.io/blog/lifetimes-intro/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"又一篇《理解生命周期》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以用来与电报机器人进行交互。Repohttps://github.com/Sreyas-Sreelal/tgconnector"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tgconnector - 一个电报连接器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linkhttps://redmonk.com/sogrady/2019/07/18/language-rankings-6-19/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Redmonk 语言排行榜：Rust 比上季度上升两名"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linkhttps://android.googlesource.com/toolchain/rustc/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-21 15:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustc 已经被添加进了 Android 工具链"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#website来自刘安齐的分享Read Morehttps://medium.com/coding-neutrino-blog/localize-the-rust-website-to-traditional-chinese-473413f44d21"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-20 19:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"台湾友人分享Rust官网翻译台湾繁体版本的心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust下面一篇教程介绍了如何在 Rust 中通过 tch-rs 使用 Torch 神经网络https://github.com/LaurentMazare/tch-rsRead Morehttp://vegapit.com/article/how-to-use-torch-in-rust-with-tch-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-20 19:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Torch 神经网络框架现已在 Rust 中可用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#book #rust这本书是 Rust \"圣经\"的纸质版，可以在线阅读。推特别特感谢 @Carols10cents 为这本书作出的卓越贡献。https://doc.rust-lang.org/book/Read Morehttps://t.co/XXmEpHeDIM"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-20 19:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust编程语言》新版已经在印刷了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #cli编写 markdown 文件，通过 mask 运行文档中的任务，目前支持 node、bash、python、php、ruby。例如：你可以配置一个 server 任务和一个 snapshot 任务，让 python 运行 web 服务，让 node 运行 puppeteer 为每一个页面生成一张 png 图片。Read Morehttps://github.com/jakedeichert/mask"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-20 19:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mask，一个通过 markdown 配置的任务运行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm开发者是上面 mask 的作者，他通过编写 rust 编译成 wasm，使用浏览器 canvas2D API 实现了一个寻找路径的 Demo，可以在线体验。https://jakedeichert.github.io/wasm-astar/Read Morehttps://github.com/jakedeichert/wasm-astar"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-20 19:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebAssembly 实现的路径查找 Demo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#unsafezerocopy 可以为具有的某些属性的类型提供标记 trait。例如，将任意字节序列（正确长度）解释为类型的实例是安全的。 它还提供了多个 derive，自动分析的类型并确定它是否符合标准。它提供了零成本抽象，允许开发者在原始和类型字节表示之间进行转换，解锁“零拷贝”解析和序列化。 到目前为止，它已被用于网络数据包解析和序列化，图像处理，操作系统程序等。https://crates.io/crates/zerocopy它最初是为网络堆栈开发的，作者去年就此进行了讨论，因此，他们的项目具有零拷贝解析和所有数据包的序列化功能，而整个25K行代码仓库只有一个 unsafe 关键字。https://www.youtube.com/watch?v=UfMOOxOGCmARead Morehttps://www.reddit.com/r/rust/comments/cfh8la/thinking_of_using_unsafe_try_this_instead/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-20 19:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"正在想要不要使用 unsafe 吗？可以考虑下 zerocopy"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#graphics #rustlibre graphics meeting 是一个图形相关的会议，本次会议 Colin Rofls 和 Raph Levien 一起分享了他们使用 rust 开发绘图框架的过程，如果你正在使用 rust 开发绘图框架，可以点击下面的链接观看视频。read morehttps://www.youtube.com/watch?v=wMoS0QHBoHM"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-19 19:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"LGM 2019 – 用 rust 实现 2D 绘图框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustc可能下下下一个正式版就有机会用到了read morehttps://www.reddit.com/r/rust/comments/cepvks/enable_pipelined_compilation_per_default/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-19 19:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"开启流水线编译成为默认设置"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli #rustAbscissa 是一个小型的程序框架，它提供了 cli 程序的基本功能\ncli 指令解析\nTOML 配置\nlogging 记录\n错误处理\n组件特性(类似ECS)\nREPL，彩色界面\nread morehttps://www.reddit.com/r/rust/comments/cethae/introducing_abscissa_a_securityoriented_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-19 19:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Abscissa：面向安全的Rust应用程序框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustlang微软发现过去他们修正的 bug，平均有70%都是内存安全导致的，当然也包括 data race。下面一篇文章探讨为什么微软认为 Rust 编程语言目前是业界采用的最佳选择。read morehttps://www.reddit.com/r/rust/comments/cexkip/we_need_a_safer_systems_programming_language/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-19 19:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我们需要更安全的系统编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustc今年到目前为止，编译器速度已经提高了30%～40%，一些项目的提升率达到了45%以上。本周的 Rust weekly 有一篇关于提升编译器速度的文章，可以看看。更多讨论请点击下面的链接。https://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/read morehttps://www.reddit.com/r/rust/comments/cezxjn/compiler_speed_has_improved_3040_across_the_board/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-19 19:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编译器速度提升"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有议员提到，为什么为选择Rust来开发Libra，它够成熟吗？如何担负起其对安全的要求。内有彩蛋：DRead Morehttps://www.c-span.org/video/?c4808083/rust-language-chosen"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"美国国会关于Libra的听证会"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章 中，讨论了构造器是什么，Rust选择了没有构造器，这背后的权衡是什么？会有什么问题。并且对比了一下Swift的选择。等等，很细致。值得一看。https://matklad.github.io/2019/07/16/perils-of-constructors.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"是否真的需要构造器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个项目用于，跨平台，获取系统基本信息，比如 cpu，内存，磁盘，网络等等。heim是德语“家”的意思。开发作者专门开了一篇博客，详细讲述他要做什么。老外做事情真是踏实。Read MoreRepohttps://svartalf.info/posts/2019-07-17-announcing-heim-project/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"heim - 获取系统信息的工具项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"1.36 发布后，Rust带来了一个 mem::MaybeUninit，可以更安全地处理未初始化的数据。而 mem::MaybeUninit 可以替代 mem::uninitialized，为什么？下文给出了说明和一个示例：Read Morehttps://www.reddit.com/r/rust/comments/cefgec/howto_replace_memuninitialized_with_memmaybeuninit/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于使用 mem::MaybeUninit 替换 mem::uninitialized 的一个示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Commodore 64，也称为C64、CBM 64或在瑞典被称作VIC-64，是由Commodore（康懋达国际）公司于1982年1月推出的8位家用电脑。Repohttps://github.com/xTibor/rust-on-c64"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"把 Rust 在 Commodore 64 位机上跑起来"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这种界面风格：Repohttps://github.com/Freaky/Compactor"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Compactor - Win 10 文件系统压缩用户界面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 核心组开发人员 Nicholas Nethercote 详细罗列了 2019 年可以做的用于加速 Rust 编译器速度的事情。Read Morehttps://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-18 11:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2019，Rust如何提高编译器速度"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#TestableComponentDesign本文简单介绍了在Rust中编写一个工程性更强的组件（crate）所必须要遵循的一些原则：\n自动化测试覆盖\n需要可配置的依赖\n公共api应该更加易于使用和理解\n契约层应该尽量减少泛型的使用\n其他\nRead Morehttp://iextendable.com/2019/07/12/testable-component-design-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的可测试组件设计"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#TiKV #futuresnrc 最近为TiKV的客户端从futures的0.1升级到了0.3，本文记录了该过程中他遇到的一些棘手的问题等。想了解0.1和0.3之间的一些区别，可以看看此文。\nRead More\nclient-rust\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从futures 0.1迁移到0.3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#yew #wasm #webRead Morehttps://www.steadylearner.com/blog/read/Fullstack-Rust-with-Yew"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Yew和Rust进行全栈Web开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustc该文作者最近给Rust发了很多PR，用于改进Rust编译器的性能，该文是他对这些PR的一些梳理总结，记录了他提升Rustc编译性能的思路。Read Morehttps://blog.mozilla.org/nnethercote/2019/07/17/how-to-speed-up-the-rust-compiler-in-2019/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2019年如何提升Rust编译器性能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"微软安全响应中心一直在研究Rust语言作为系统编程的安全替代方案，并建议整个软件行业认真研究它。并且会写一系列的相关的文章，本文是第一篇：自2004年以来，微软安全响应中心(MSRC)已经对所有报告的微软安全漏洞进行了三重分析。从所有这些分类中，有一个惊人的事实凸显出来:正如马特·米勒在2019年布鲁哈特伊利诺伊州的演讲中所讨论的那样，大多数修复的漏洞和分配的CVE漏洞都是由开发人员无意中在他们的C和C++代码中插入内存损坏错误造成的。随着微软增加其代码基础并在其代码中使用更多的开源软件，这个问题并没有变得更好，反而变得更糟。微软并不是唯一一个暴露在内存崩坏问题之下的公司。所以需要一种更加内存安全的语言，比如Rust。时代在进步和变革，拿汽车和编程语言类比非常适合。我们不是要等事故发生以后再去处理它，而要在事故发生之前，预判一些可能导致事故的危险行为去避免它。(微软已经不是以前那个微软了，微软越来越像那个我期待的微软了)Read Morehttps://msrc-blog.microsoft.com/2019/07/16/a-proactive-approach-to-more-secure-code/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」微软安全响应中心：一种主动性的方式来提升安全"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix本文作者尝试解释为什么他不认为actix-web能够成为引领Rust社区向前发展的“那个”框架。作者列出了他的理由：\n代码中依旧还有25个unsafe方法在使用。比如std::mem::uninitialized。但有人可能会说，这没什么大不了的，修好就可以了。但是本文作者强调：Nikolay（acitx-web作者）的态度是你难以改变的。本文作者列举了Nikolay在强硬关闭其他人移除actix-web中unsafe代码的PR中的回复：actix-web/pull/968。  （这个PR下actix-web作者的几个回复的态度确实不太好，比如他说道：已经失去了和开源社区打交道的动力。）\nactix不是一个你可以轻易贡献的项目。最终，这使得开发者都将依赖Nikolay来获得新的特性。本文作者用一个词来描述actix-web：Flying Solo。\n性能测试作弊？比如硬编码header值、或者放弃检查HTTP方法之类。他呼吁大家仔细研究下TechEmpower的测试代码。\n总结：本文作者认为actix-web作者的心态和代码内部的质量，足以让他放弃actix框架。那么还有哪些替代品？\nRocket\nGotham\nThruster\nWarp\nTide\n(wow，看完之后我感觉，该文作者描述actix的问题还是挺严重的，真心希望actix-web可以更好)\nRead More\nReddit讨论贴\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"叫板？为什么我们需要一个actix的替代品"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#k8s #ArrowDataFusion的作者新的项目，目前是PoC（概念验证）阶段。\nRead More\nballista\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ballista：集成了Rust、 Apache Arrow 和 Kubernetes的分布式计算平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tokio主要是解决tokio用户对依赖tokio时候pull的crate数量抱怨的问题。大家可以来此issues下讨论替代的策略。（合久必分，分久必合）Read Morehttps://github.com/tokio-rs/tokio/issues/1318"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tokio重构计划：让tokio 的子crate “坍缩”为一个独立的crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustSecadvisory-dbhttps://github.com/RustSec/advisory-db"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"advisory-db: RustSec组织发布的安全告警数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Carbon有一个网站叫Carbon，可以创建漂亮的代码图片，而silicon是该功能的Rust实现。\nsilicon\ncarbon\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-17 19:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"silicon: 为你的源码创建漂亮的图片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#event该站点专注于记录世界各地Rust各大活动的时间线，开源项目，大家可以提交活动信息。timetill.rshttps://timetill.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"timetill.rs: 专注于记录全球Rust活动的站点"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#CHIP8该文作者是游戏开发圈的一员，最近在尝试从Cpp到Rust的迁移过程，这个CHIP-8模拟器就是他的迁移实践。本文记录了他的一些心得感想。\nRead More\nCode Repo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CHIP-8模拟器的Rust移植版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#benchmarks据文章中所说，是因为新的测试硬件使用了更先进的AVX-512 SIMD指令。Read Morehttps://frehberg.com/2019/07/the-computer-language-benachmarks-game-rust-ranks-1-for-n-body/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"计算机语言Benchmarks游戏：Rust在n-body项拿下第一"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #UDP本文是async和tokio的一次尝试，作者写了一个通过UDP广播发现本地网络上的设备的应用，并且介绍了他实现过程中的一些心得。\nRead More\ntresorit/tresorit-dropbox-discovery\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中使用异步网络收集广播UDP数据包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#functional本文档使用Fantasy Land规范(JavaScript)和Rust编程语言中定义的术语来提供代码示例，讲解了Rust中存在的函数式语言编程中的“黑话（术语，Jargon）”，很难得的一份学习材料。Fantasy land（梦幻之地 ）不仅包含大量的函数式编程模块，还包含有关如何实现“代数结构”（也称为对象）以与库兼容的正式规范。将此作为标准会很棒。\nRead More\nRepo\nfantasy-land\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"存在于Rust中的函数式编程“黑话”"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Game使用100% rust (gfx-rs, winit, opengl)开发了该游戏SiteSteamhttps://www.roboinstruct.us/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust编写的编程类益智游戏 Robo Instructus 已上架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ml #cpp #neural这篇文章其实是一个Rust新手在尝试使用Rust和Cpp编写一个朴树的神经网络来重新学习Rust。作者在2014年第一次学Rust，但是后来就放下了，五年后的今天想尝试使用Rust，这个项目是他复习Rust所做的。感兴趣的可以看看源码学习学习如何使用Rust实现一个简单的神经网络。Read Morehttp://nicktasios.nl/posts/rust-vs-c%2B%2B-implementing-a-neural-network.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「新手向」Rust vs C++ : 实现神经网络"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#JavaScriptosgoodhttps://github.com/IntrinsicLabs/osgood"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Osgood：基于Rust和V8构建的专门用于HTTP服务器的JavaScript运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #2DAmethyst出品\nRead More\namethyst-starter-2d\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"amethyst-starter-2d: 2D游戏开发的新工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustFestRead Morehttps://blog.rustfest.eu/barcelona-announcement"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustFest 巴塞罗那大会将在11月份开启"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#D从D语言的角度来看看所有权和借用？感兴趣的可以看看Read Morehttps://dlang.org/blog/2019/07/15/ownership-and-borrowing-in-d/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"D语言中的所有权和借用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#event乌克兰基辅举办的音乐节，其实该音乐节去年就开始使用Rust了，去年的日报也报道过。Read Morehttps://www.reddit.com/r/rust/comments/cdg5b4/rust_in_the_on_of_the_biggest_music_festival/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2019年最大的音乐节Atlas Weekend使用了Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#fuzzerlainhttps://github.com/microsoft/lain"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lain: 一个模糊器框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#redisredis-analyzerhttps://github.com/fetlife/redis-analyzer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust编写的Redis内存分析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rc是Rust标准库中Rc的一个替代品Read Morehttps://hyperbo.la/w/cactus-harvesting/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CactusRef: 一个单线程、周期感知、引用计数智能指针"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded该活动在本月25号于伦敦举行，在伦敦的日报读者朋友可以去看看。Read Morehttps://www.reddit.com/r/rust/comments/cdx8gr/rust_embedded_taster_session/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」Rust嵌入式尝鲜线下活动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lisp #llvm基于Rust和inkwell开发。Inkwell旨在通过安全地包装llvm-sys来帮助你编写自己的编程语言。\nunlisp-llvm\ninkwell\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"unlisp-llvm: 基于LLVM的玩具Lisp语言编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#paper本文说明了一种转换任意数据结构析构函数的技术，使它们在恒定的堆栈和堆空间中运行。听上去不错，可惜的是我还没看明白。。。Read Morehttp://guillaume.munch.name/files/efficient-drops-mlworkshop.pdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学术」用类型指针反转进行高效解构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Python将会替代C。Read Morehttps://www.youtube.com/watch?v=doqno2H4HW8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」Rust是下一个Python FFI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gotham #async新版本引入了TLS支持，以及新的中间件设计。Read Morehttps://gotham.rs/blog/release/2019/07/14/gotham-0.4.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步Web框架Gotham发布0.4版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#memory #unsafeRalfj的新博文，探讨了未初始化内存。你真的了解什么是未初始化内存吗？来看看Ralfj怎么说。Read Morehttps://www.ralfj.de/blog/2019/07/14/uninit.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ralfj: 未初始化内存"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gRPCshorty-rshttps://github.com/MovingGauteng/shorty-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"shorty-rs: 一个基于tower-grpc实现的url短地址服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#FFI #C该系列文章主要包括如何将Rust库更简单更安全地公开为统一的C接口。Read Morehttp://hotforknowledge.com/2019/07/14/6-rust-the-new-c/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」Rust是新的C语言 Part I： 构建和组合本地库到C接口"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#jieba该库旨在为jieba-rs提速。双数组Trie树（Double-array Trie, DAT）是由三个日本人提出的一种Trie树的高效实现，兼顾了查询效率与空间存储。\nRead More\ncedarwood\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cedarwood: 高效可更新的双数组前缀树（Double-Array Trie）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DODRead Morehttp://www.dataorienteddesign.com/site.php"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"面向数据设计（Data-Oriented Design）的一些学习资源"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#music #monomeMonome是一种很酷的乐器，算是一种开源硬件，该库可以实现用Rust和Monome对话。\nmonome-rs\nmonome\n\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-16 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"monome-rs: 让Rust和Monome对话"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust用来发布 Rust 项目的推文，可以关注它 @RustTrending。https://twitter.com/RustTrendingRead Morehttps://github.com/pbzweihander/rust-trending"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-15 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-trending —— 用 Rust 开发的 twitter 机器人"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#graphqlhyper、rocket、iron、warp 这四个 web 框架中可以使用，目前该项目版本没有到 1.0，可能会有一些 API 不稳定。Read Morehttps://github.com/graphql-rust/juniper"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-15 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"juniper —— graphQL 服务端库的 Rust 实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#article作者分享了他在写了3万行 rust 代码后的心得，文中包括学习 rust 的十个关键，正在学习 rust 的小伙伴可以去看看，文中推荐了其他文章，可以一起看。Read Morehttps://medium.com/@jondot/my-key-learnings-after-30-000-loc-in-rust-a553e6403c19"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-15 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「学习rust」写了3万行rust代码后的心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust编写markdown文档，通过命令运行文档中脚本语言编写的程序，目前支持 node、bash、python、php、ruby。Read Morehttps://twitter.com/jakedeichert/status/1150070977600151552\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-15 20:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个尚未发布的 cli 工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用双数组字典树实现，尝试并提升了 jieba-rs 的分词效率，点击下面链接阅读详情。Read MoreRepohttps://blog.paulme.ng/posts/2019-07-14-cedarwood%3A-efficiently-updatable-double-array-trie-in-rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-14 23:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cedarwood - 提升 jieba-rs 分词效率"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"先来看一下 demoRepohttps://github.com/RamiHg/RustyBoy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-14 23:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustyBoy - 一个时钟精确的 Gameboy 模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这套系统 rust.cc 能不能直接拿来用呢？Repohttps://github.com/dessalines/lemmy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-14 23:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lemmy - 一个用 rust 实现的类 reddit 项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Redox OS 还在坚持不懈的开发。这篇文章讲解了为 Redox OS 实现 ptrace 的细节。Read Morehttps://www.redox-os.org/news/rsoc-ptrace-4/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-14 23:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」为 Redox OS 实现 ptrace Part 4"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"实际是借鉴的 carbon 库。来看看效果：https://github.com/dawnlabs/carbonRepohttps://github.com/Aloxaf/silicon\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-14 23:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"silicon - 为你的代码生成漂亮的分享图片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者提到 unsafe 關鍵字讓很多人誤解了 rust 在 unsafe裡面很不安全，其實 unsafe 裡面還是有做很多檢查，這篇文也比較了 python 與 rust 的內存安全差異。文章列舉了 safe 範圍的 rust做了什麼樣的保證， unsafe 的rust做了什麼樣的保證，與程式員需要做出相對的契約保證。如果你想讓你的程式更安全、更好維護那這篇文章值得一看。read morehttps://www.reddit.com/r/rust/comments/ccdiup/what_is_rusts_unsafe/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-13 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust哪邊不安全？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"對下面議題有興趣的可以聽聽read morehttps://www.reddit.com/r/rust/comments/cce7kp/rustacean_station_a_rust_community_podcast_an/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-13 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一節 Rust社群語音 1.36特別篇"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"值得注意的是，此版本引入了User Guide跟其它文檔其它改動\nverify deps 改成 verify\n關閉草稿編輯器時沒有存檔𤡈的話將移除記錄。\nadvisories 系統進行了改造\nread morehttps://www.reddit.com/r/rust/comments/cceijm/cargocrev_v08_released_distributed_crate_reviewing/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-13 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-crev v0.8 出了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者提到了 docker 讓虛擬容器變的很普遍，但java的虛擬機開銷很大作者目前只有看到 actix 好像還不錯，但他對這個框架還不夠了解，不知道能不能做到過去他在java裡面做的事情，目前他還在研究中read morehttps://www.reddit.com/r/rust/comments/ccnold/thoughts_about_rust_for_web_applications_from_a/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-13 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"從Java的角度來思考 Rust的Web應用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這篇文章在講Rust的工作量太大，想做的事太多，這些工作該怎麼管理，有些工作應該被重新考慮，並審查有限的資源該投入在哪些工作上。RFC的初始設計。 這是由語言團隊完成的。有些RFC存在五年是因為這個想法很好，但是缺少資源去實作，且優先級別不夠高。作者也提到可能會需要設定一些限制，不要讓要做的事無限增加。read morehttps://www.reddit.com/r/rust/comments/cbzyf3/aic_unbounded_queues_and_lang_design/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-12 17:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"AiC: 無限工作佇列和語言設計"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者分享了用 Azure Pipelines app 配上CI 整合進他們的產品中。read morehttps://www.reddit.com/r/rust/comments/cc4k9x/rustypipes_easy_continuous_integration_for_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-12 17:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rusty-pipes: 使用Azure 輕鬆 CI Rust項目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Modern Compiler Implementation in ML這本書裡面講了一個tiger語言本文作者實作了第一章的一部份read morehttps://www.reddit.com/r/rust/comments/cc4s3p/modern_compiler_implementation_in_a_modern/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-12 17:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"書： 現代編譯器實作在現代語言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"方法跟上面的現代編譯器實作在現代語言很像read morehttps://www.reddit.com/r/rust/comments/cc76k2/creating_a_simple_lisp_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-12 17:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 Rust 裡面創造一個簡單 LISP"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linkerd 是一個服務網格，旨在提供平台範圍的可觀察性、可靠性、安全性，而無需更改配置或代碼。使用 Kubernetes 。 官方網站https://linkerd.io/這篇PDF說明了Linkerd花了很多力氣在維護程式碼上面。包含了 人工程式碼審核和代碼輔助滲透測試。報告指出，從2019年6月的Cure53項目清楚表明Linkerd產品完全能夠防止重大攻擊和大多數妥協的惡意企圖。read morehttps://www.reddit.com/r/rust/comments/cc7mww/linkerd2_security_audit/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-12 17:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linkerd2 安全審核"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Golomb-compressed sets（GCS）是一种空间利用率很高的数据结构，可以用于判断一个元素是否属于这个集合。它与 Bloom Filter 非常类似，区别是它的压缩率更高，同时查询效率更低。同样，GCS 也有将原本不属于集合的元素误判为属于的可能（false positive）。这个库为 Rust 实现版本。Repohttps://github.com/dac-gmbh/golomb-set"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"golomb-set - 比布隆过滤器压缩率更高的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"像下面这样写递归现在是不行的。这里给出了一些解释。大体上说是异步函数编译成状态机后的一些限制，balabala，可以进帖子查看。https://www.reddit.com/r/rust/comments/cbdxxm/why_are_recursive_async_fns_forbidden/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"这样写异步递归行不行？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库用于分配一个全局固定存储，特别适合嵌入式设备使用。库刚刚发布，感兴趣可以参与进去。Repohttps://github.com/HeroicKatora/static-alloc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"static-alloc"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"直接上图：细节可在下文中追寻。Read morehttps://blog.tomarrell.com/post/rust_and_leds"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 点亮树莓派上的 LED 阵列"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这里 Possible Java to Rust switch for a securities trading platformhttps://users.rust-lang.org/t/possible-java-to-rust-switch-for-a-securities-trading-platform/16895希望有助于致力于把 Rust 用在金融领域的同学。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Rust 能否用在（高频）交易系统中的相关资料汇集和讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"loopybayesnet 是一个 Loopy Belief Propagation 算法的 Rust 实现。属于神经网络/深度学习领域的算法。关于它与 Bayesian networks 的区别：https://github.com/vberger/loopybayesnet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Loopy Bayes Net 的 Rust 实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"专门用于罗列在哪些地方什么时候将要举办（已经举办）哪些 Rust 会议。很方便了。https://timetill.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://timetill.rs/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"未来全世界 Rust 会议的一个汇编网站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前 10 结果如下：聪明的你认得出哪些是 Rust 的孩子么？hyper 冲上头名，举社区欢庆！ ：）Read morehttps://www.techempower.com/benchmarks/#section=data-r18&hw=ph&test=plaintext\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-11 11:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：Rust 的 http plain test 在 techempower 上已经霸榜了，hyper 拿下头名"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hyper将在hyper 0.13中稳定发布Read Morehttps://github.com/hyperium/hyper/pull/1836"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-10 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hyper现在已经支持std::future"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo该贴作者写道：在遗忘的target目录下发现了170GB的空间占用。由此他提醒大家使用cargo clean来清理这些垃圾。评论区有人也提供了另外一个工具，比如cargo-sweep。Read Morehttps://www.reddit.com/r/rust/comments/cbc24k/psa_run_cargo_clean_on_old_projects_you_dont/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-10 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对不再打算继续构建的老项目请使用carg clean"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cpp该贴作者谈到：同事是一位（资深）Cpp开发人员，他坚持认为Rust不会带来任何新的东西，至少与C++相比是这样。因为该贴作者没有进一步紧跟现代Cpp（他在Cpp11发布之前就不用Cpp了），所以没有很好的论据来说服他的同事，现在发帖想和大家探讨这个问题。那么评论区是怎么说的呢？\n「Rust提供了内存安全保证，Cpp没有」。 对此论点提供反驳的通常都这么说：「格式良好的C++可以用智能指针做同样的事情，等等」，但其实，开发人员并不能保证他们的代码总是格式良好的。也许有人说，Cpp专家可以保证格式良好。但是Rust并不仅仅是关心那些专家，它关心的是每个开发者。这就像说如果每个人都遵守交通法规，事故就不会发生一样。虽然这是真的，但这完全是毫无意义的反驳。\n除此之外，有人总结了Rust提供了Cpp不提供的三件事：强制性RAII； 默认Move； 全局且不妥协的静态分析。但Rust的泛型，目前还不如cpp的模板更加强大。不过Rust还在持续改进，超越Cpp模板编程指日可待。\n这篇reddit帖子里包含了大量评论，感兴趣的可以自己去看看。（总之就是一句话：不要等错过了、遗憾了，才明白生活中其实不必有如此无谓的执着。）Read Morehttps://www.reddit.com/r/rust/comments/cb49lb/coworker_rust_doesnt_offer_anything_c_doesnt/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-10 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」如何回复同事这个问题：Rust没有提供任何Cpp没有的东西。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#zola #static_siteRead Morehttps://github.com/getzola/zola/releases/tag/v0.8.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-10 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"静态站点生成器Zola发布了0.8版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#clojure一个9年的Clojure资深开发者写下了他喜欢Rust的原因：其实和大家喜欢Rust的原因一样。感兴趣的可以去看看。Read Morehttps://www.reddit.com/r/rust/comments/cb5316/my_reasons_to_move_to_rust_from_clojure/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-10 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「个人心得」从Clojure转到Rust的几个原因"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GTK作者对于Rust和GTK都是新手，这是他的学习心得记录。Read Morehttps://medium.com/journey-to-rust/drawing-in-gtk-in-rust-part-1-4a401eecc4e0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」使用Rust和GTK绘图 Part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded概要：\n经过社区投票，交流工具选择了Matrix，新的channel：https://matrix.to/#/#rust-embedded:matrix.org\n官方工作组在英国剑桥和美国波特兰RustConf大会上做宣传\n还在寻找合适的嵌入式Rust项目进行官方展示\nRead Morehttps://rust-embedded.github.io/blog/newsletter-18/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」嵌入式工作组报告 #18"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargo使用--offline意味着Cargo不会更新其索引。 Cargo将使用缓存索引重新解析依赖关系图，并且更喜欢使用已缓存的crates版本。 如果可以只使用缓存的crates，那么就可以在不触及网络的情况下进行构建。同样，在添加新依赖项或启动新项目时，如果没有--offline，cargo build将更新索引，但使用--offline意味着Cargo将使用缓存索引并尝试使用已在本地缓存的crates。Read Morehttps://www.ncameron.org/blog/cargo-offline/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo offline功能指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#module没有搞清楚模块和文件关系的可以看看这篇文章。Read Morehttps://amos.me/blog/2019/rust-modules-vs-files/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的模块与文件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GTKRead Morehttps://nora.codes/tutorial/speedy-desktop-apps-with-gtk-and-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用GTK和Rust的加速桌面应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#allocstd::alloc在1.36稳定版中发布，这篇文章较为详细的介绍了std::alloc。总之，可以自定义自己的全局内存分配器。Read Morehttps://ehsanmkermani.com/2019/07/03/rust-std-study-series-alloc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列」std::alloc 指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#yew #wasm这是一篇比较详尽的Yew使用指南，使用Yew和Rust来构建前端页面。Read Morehttps://www.steadylearner.com/blog/read/How-to-use-Rust-Yew"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和Yew指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#codesearch基于Rust的ripgrep和google的re2正则引擎构建。Read Morehttps://codesearch.aelve.com/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Google的CodeSearch服务支持Rust代码搜索"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmRead Morehttps://www.webassemblyman.com/rust_webassembly_hello_world.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust WebAssembly 之 深入浅出wasm-bindgen和wasm2wat"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#dev #wasmDev的offline网页是指dev.to/offline，该网页上提供了几种颜色的画笔。这篇文章教你如何用Rust和WASM实现类似的网站。\ndev.to/offline\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust构建Dev的offline网页"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async #await官方核心组Leader Niko的新文，主要阐述了三件事：\nasync/await MVP的状态\n目前的工作目标，以及如何将其纳入更大的愿景\n社区里的你，能帮上什么忙。\nMVP（最小可行产品）的功能包括：\nFuture trait（1.36已稳定）\n基本的async-await的语法，正在努力赶在1.38版本稳定发布（仅限于 async fn自由函数 和 impl块中async fn的方法）\nasync book（异步之书）的第一版。等async-await语法稳定就开始构建本书。\n未来更大的愿景：\n需要一组核心的async trait和组合子。基本上是futures-rs的1.0版本中包含。\n更好的stream支持。\nGenerator和async Generator支持。\n在trait和trait impl中的async fn支持\n异步闭包\n你如果愿意参与贡献，可以去Rust官方仓库搜索async-await相关的issues了解。Read Morehttp://smallcultfollowing.com/babysteps/blog/2019/07/08/async-await-status-report-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」async-await状态报告 #2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DebianRead Morehttps://qa.debian.org/developer.php?login=pkg-rust-maintainers@lists.alioth.debian.org"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Debian 10发布，包含ripgrep，fd-find，exa，hexyl，process-viewer几个Rust实现的命令行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game对本游戏感兴趣的可以关注它们的周报，已经发了23期Read Morehttps://veloren.net/devblog-23/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"veloren: 一个类似于我的世界的游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust最近发布的1.36.0版本带来了一个MaybeUninit Union类型，它允许更安全地处理可能未初始化的数据。 这样的数据结构非常棒，但很多crate的MSRV策略可以追溯到很多，并且可能会犹豫是否放弃std::mem::uninitialized以支持这个非常新的API。对于这些用户，可以使用maybe-uninit crate，它将MaybeUninit的带到所有版本的稳定Rust中，从1.0.0开始。Read Morehttps://github.com/est31/maybe-uninit"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"maybe-uninit: 为所有Rust版本支持MaybeUninit"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasi不确定为什么在官方发布公告中没有提到这一点(这是WASM开发的重要一步)，不过在发布说明中可以找到。Read Morehttps://github.com/rust-lang/rust/blob/master/RELEASES.md#compiler"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.36稳定了wasm32-wasi target"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hashmapHashcowhttps://github.com/purpleprotocol/hashcow"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Hashcow： 一个带有写时复制KV的Rust HashMap实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#fuseJS模糊字符串搜索库，运行在你的浏览器中\nRead More\nwafu\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wafu: Fuse.js的Rust移植版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#macro上述代码字段会被Move。该库由unsafe Rust实现，谨慎使用。derive_destructurehttps://github.com/Migi/derive_destructure\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-07-09 21:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"derive_destructure: 支持对实现Drop的结构进行解构"},"type":"text"}],"type":"title"}},]
