export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 gankra 的博文。作者经常思考 Rust 中的Unsafe Pointer问题。作者写了一本关于 unsafe Rust 的书（编按：也就是大家常说的 ”unsafe rust黑魔法”）：https://doc.rust-lang.org/nightly/nomicon，还有关于 Rust 指针的书（https://rust-unofficial.github.io/too-many-lists）。同时，作者重新设计了 Rust 的指针 API，并为不安全的堆分配缓冲区设计了标准库的抽象，并维护替代的 Vec 布局。https://doc.rust-lang.org/nightly/nomicon/作者经常思考 Rust 中Unsafe Pointer的问题，并表示讨厌它们。但不要误会作者的意思，他认为自己的所有工作都让它们变得更好，但它们仍然存在严重缺陷。事实上，他们已经变得更糟了。不是因为 API 发生了变化，而是因为当我处理这些东西时，我们对指针应该如何工作的理解太天真了。本文分为 3 个部分：概念背景、当前设计的问题和提出的解决方案。原文链接：https://gankra.github.io/blah/fix-rust-pointers/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gankra.github.io/blah/fix-rust-pointers/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-20 22:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的Unsafe Pointer类型需要大修"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从 Rust1.54 开始，我们现在可以在属性中使用类似函数的宏。 #[doc] 属性有很多优点，让我们来看看其中的一些！例如只需在lib.rs文件的顶部编写 README 即可：同时 README 文件现在将成为 crate 的文档，并且其中的代码示例也将被测试。更多详情请看原文：https://blog.guillaume-gomez.fr/articles/2021-08-03+Improvements+for+%23%5Bdoc%5D+attributes+in+Rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.guillaume-gomez.fr/articles/2021-08-03+Improvements+for+%23%5Bdoc%5D+attributes+in+Rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-20 22:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中#[doc]属性的改进"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"godot-rust是一个Rust库，为Godot游戏引擎实现本地绑定。这允许你在Godot中开发游戏或其他应用程序，同时受益于Rust的优势，如其类型系统、可扩展性和性能。项目地址：https://github.com/godot-rust/godot-rusthttps://github.com/Jancd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/godot-rust/godot-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-20 22:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"godot-rust 0.10 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"你有没有想过Rust的过程宏如何工作？在这个博客文章中，我们将进入细节！我们团队的成员Vladislav Beskrovny，最近谈到了RustCon的主题。该系列基于这个主题，有一些略微的修改和添加。在这篇文章中，我们将查看Rust宏的基础知识并进入过程宏细节，密切关注他们的API。文章链接，https://blog.jetbrains.com/rust/2022/03/18/procedural-macros-under-the-hood-part-i/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.jetbrains.com/rust/2022/03/18/procedural-macros-under-the-hood-part-i/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-19 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"过程宏内幕详解：Part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"godot-rust是一个Rust库提供了到Godot引擎的Rust绑定。Rust可以被当做内置的GDScript语言的原生替代品，提供更好的类型安全、可扩展性和性能。经过了一年的时间，0.10.0版本给godot-rust带来了很多进展。Github 链接，https://github.com/godot-rust/godot-rust文章链接，https://www.reddit.com/r/rust/comments/thv703/godotrust_010_released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/thv703/godotrust_010_released/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-19 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"godot-rust 0.10发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对于InfluxDB的未来核心InfluxDB IOx，我们使用Apache Kafka来给数据排序：到目前为止，我们依赖于Rust-rdkafka，它为Librdkafka提供了异步绑定，Librdkafka是一个用C写的kafka client。我们为什么要更换它？以下是一些原因：\n复杂性：Librdkafka是一个复杂的库，具有我们不需要或想要的大量功能，并且支持各种Kafka版本，而我们基本上运行最新的。\n。。。文章链接，https://www.influxdata.com/blog/building-simple-pure-rust-async-apache-kafka-client/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.influxdata.com/blog/building-simple-pure-rust-async-apache-kafka-client/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-19 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"构建一个简单的、纯Rust的异步Apache Kafka Client"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rustler 是几年前由 Hans Elias J.创建的，它是一个旨在成为 Rust 和 Elixir/Erlang 之间的桥梁的项目。由于 Rust 正被广泛用于系统编程。并且由于它的安全性和性能，它是一种将 (NIF)[https://www.erlang.org/doc/tutorial/nif.html] 写入 BEAM 生态系统的好语言，就算使用令人敬畏的 Rustler 项目编写它们也会变得相当容易。https://github.com/rusterlium/rustler\nhttps://dashbit.co/blog/rustler-precompiled\n\nhttps://www.youtube.com/watch?v=0gpGA80DA0s\n作者最近玩的一款游戏 Pokémon Legends: Arceus，它在 Cyber​​score 上有大约3000 个得分榜。因为懒不想手动提交那么多记录，所以作者开始研究一种工具来自动化提交。文章主要介绍两件事：利用 rust 从 JPG 中提取分数的过程(OCR)，以及将其嵌入到 Cyber​​score 前端的过程。\nhttps://hugopeixoto.net/articles/rust-wasm-ocr-experiments.html\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-18 23:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Arti是我们正在进行的项目，旨在创建一个在Rust中可嵌入的Tor客户端。它还没有准备好取代C语言的主要Tor实现，但我们相信它是未来的趋势。blog: https://blog.torproject.org/arti_010_released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.torproject.org/arti_010_released/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-17 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Arti 0.1发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇讲解axum的博文：blog: https://mixi-developers.mixi.co.jp/how-to-use-type-safe-routing-of-axum-c06c1b1b1ab"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mixi-developers.mixi.co.jp/how-to-use-type-safe-routing-of-axum-c06c1b1b1ab"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-17 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何使用axum的 \"Type safe routing\"？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前还处于早期开发阶段，感兴趣的可以先star一下。Octocrab是一个第三方的GitHub API客户端，允许你在Rust中轻松建立自己的GitHub集成或机器人。Octocrab有两套主要的API用于与GitHub通信，一套是高级强类型语义API，另一套是低级HTTP API用于扩展行为。监听issues的例子：GitHub: https://github.com/octocat-rs/octocat-rs详细的文档基本都在Crates.io里：Crates.io: https://crates.io/crates/octocrab"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/octocrab"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-17 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"octocat-rs一个GitHub API客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 434: https://this-week-in-rust.org/blog/2022/03/16/this-week-in-rust-434/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/03/16/this-week-in-rust-434/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-17 21:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 434"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"AUTOSAR的“核心合作伙伴”是宝马集团、博世、Continental、Daimler、福特、通用汽车、PSA集团、丰田和大众集团。ReadMore:https://www.autosar.org/news-events/details/autosar-announces-new-working-group-for-programming-language-rust-in-automotive-software-context-202/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.autosar.org/news-events/details/autosar-announces-new-working-group-for-programming-language-rust-in-automotive-software-context-202/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-16 23:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Autosar成立新的汽车软件编程语言Rust工作小组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nFlutter\n\nWidget Tree\nRender Object\nSkia\n\n\nJetpack Compose\n\ncompose runtime\nState via positional memorization\nIncremental computation\n\n\n\nWidget Tree\nRender Object\nSkia\n\ncompose runtime\nState via positional memorization\nIncremental computation\nReadMore:https://github.com/cksac/oxui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/cksac/oxui"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-16 23:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OXUI - 跨平台原生 UI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n多目标地址: 根据 IP 和 TLS SNI/ALPN 转发到不同的目标地址\n\nIPv4/IPv6 白名单列表：仅转发白名单 IP 范围的连接\n支持TLS\n\n在单个端口上允许 TLS 和非 TLS 客户端\n连接到 TLS 和非 TLS 端点\n\n\n\n\n配置热重载：更新的配置会自动重新加载\niptables 支持：自动配置 iptables 以丢弃来自不允许范围的数据包\nIP 组：可以在不同服务器配置中重复使用的命名IP 组\n\nIPv4/IPv6 白名单列表：仅转发白名单 IP 范围的连接\n支持TLS\n\n在单个端口上允许 TLS 和非 TLS 客户端\n连接到 TLS 和非 TLS 端点\n\n\n\n在单个端口上允许 TLS 和非 TLS 客户端\n连接到 TLS 和非 TLS 端点\nReadMore:https://github.com/cfal/tobaru"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/cfal/tobaru"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-16 23:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tobaru - 端口转发工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果下面的 pull 通过, let chains 的语法支持有望在 1.62 到到达稳定. 届时,下面的语法将会被支持.很多小伙伴已经等了很久了.原文链接https://github.com/rust-lang/rust/pull/94927"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-14 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"let chains 有望在 1.62 到达稳定状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"《Veloren》是一款用 Rust 写的多人像素 RPG 游戏。它的灵感来自Cube World、Legend of Zelda: Breath of the Wild、Dwarf Fortress 和 Minecraft等游戏。原文链接https://www.veloren.net/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-14 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"veloren: 一个 Rust 编写的多人像素风游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Savage是一个全新的计算机代数系统，用纯Rust从头编写而成。它的目标依次是正确性、简单性和可用性。整个系统编译成一个单独的、没有依赖关系的可执行文件，大小只有2.5 MB。虽然这个可执行文件将随着Savage的成熟而增长，但他们的计划是最终交付一个有用的计算机代数系统，其大小不超过5 MB。github地址https://github.com/p-e-w/savage"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-14 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"savage: Rust 编写的全新的计算机代数系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"xshell提供了一套跨平台实用工具，用于编写跨平台和符合人体工程学的 bash 脚本。github地址https://github.com/matklad/xshell--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-14 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"xshell: 0.2 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"内容包括六个部分：\nTypes: 围绕 Rust 的核心类型系统的建议。\nConcepts: 构成 Rust 设计的核心思想。\nDependencies: 使用 Rust 的包生态系统的建议。\nTooling: 关于如何通过超越 Rust 编译器来改进代码库的建议。\nAsynchronous Rust: 使用 Rust async 机制的建议。\nBeyond Standard Rust: 关于何时必须超越 Rust 的标准安全环境进行工作的建议。\n网址：https://www.lurklurk.org/effective-rust/intro.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-13 20:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Effective Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"特点：\n快\n低内存和CPU\n容易使用\n实时监控文件变化\n轻量安装包\n简单优雅的UI\nGitHub：https://github.com/naaive/orange"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-13 20:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"跨平台文件搜索引擎：orange"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"专门写给有其他编程语言经验的程序员，内容短小精悍。具体包括以下部分：\n介绍和总览\n语法\n类型和模式\n所有权、内存模型\nTrait 和方法\n安全、线程安全\n错误处理\n宏和元编程\n异步\nFFI\n文档和测试\n稳定性\nCargo\n库\n地址：https://www.chiark.greenend.org.uk/~ianmdlvl/rust-polyglot/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-13 20:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"给有经验程序员的Rust Guide"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"特点如下：\n任意精度整数、有理数和复数算术\n符号表达式的输入、简化和计算\n向量和矩阵是一等公民，系数是任意表达式\n具有语法和括号突出显示、持久化历史记录和自动多行输入的 REPL\n基于宏的系统，用于定义具有元数据和自动类型检查的功能\n可用作任何 Rust 程序中的库\n快速指南GitHub：https://github.com/p-e-w/savage"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-13 20:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"savage：代数计算系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n0:35 - 作者 Martin 个人简介\n1:30 - 什么是PancakeDB？\n5:48 - Pancake 与 CSV & Parquet 相比如何？\n7:09 - 开发PancakeDB的想法从何而来？\n9:25 - PancakeDB 许可证&商业化\n14:00 - 是什么让 PancakeDB 如此高性能？\n18:21 - Martin 如何进入大数据领域？\n21:22 - PancakeDB 如何解决数据插入问题？\n26:28 - Pancake DB 这个名字从哪儿来的？\n27:42 - 实施数据插入的推荐方法\n30:37 - 在数据处理方面，Rust VS 其他语言\n34:05 - 是什么把 Martin 带到了 Rust\n37:23 - Rust 如何改善 Martin 分割的想法？\n网址：https://rustacean-station.org/episode/059-martin-loncaric/PancakeDB：https://pancakedb.com/GitHub：https://github.com/pancake-db/pancake-db"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-13 20:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PancakeDB 的分享"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tower-lsp 发布 v0.16.0！基于 Tower 的 Rust 实现的语言服务器协议，用于构建 LSP 服务器的轻量级框架。V0.16，https://github.com/ebkalderon/tower-lsp/releases/tag/v0.16.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ebkalderon/tower-lsp/releases/tag/v0.16.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-12 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tower-lsp 发布 v0.16.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"CXX — Rust 和 C++ 之间的安全互操作。这个库提供了一种安全的机制，用于从 Rust 调用 C++ 代码和从 C++ 调用 Rust 代码。 它开辟了一个通用性机制，其中 Rust 和 C++ 在语义上非常相似，并指导程序员在该机制内有效地表达他们的语言边界。 CXX 填充低级别的东西，以便获得安全绑定，防止在不安全的 C 语言式的签名上执行外部函数接口的陷阱。CXX库链接，https://cxx.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://cxx.rs/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-12 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CXX"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rulex，一种新的正则表达式语言。Rulex 用一种新的、更简单的语法解决了这些问题：\n它不区分空格并允许评论\n文本必须出现在引号中， 这使表达式更长，但也更容易阅读\n没有反斜杠转义\n非捕获组是默认值\n更一致的语法\ncrate链接，https://crates.io/crates/rulexhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/rulex"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-12 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rulex"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gitoxide 是用纯 Rust 实现的一个精简、快速和安全的 Git 实现。此外，它还以各种小 crates 的形式提供了一套易于使用的API，方便我们轻松实现自己的工具。“checkout” 代表检出文件。如果没有索引，git 将从源码树中创建一个索引，并使用内存中的索引来检出文件。gix 是由 gitoxide 驱动的二进制程序，它比 git 的多线程 checkout 速度快 1.8 倍。这意味着在一台 10 核 MacBook + tmpfs 的组合上，可以在 ~874ms 内检出 Linux 内核 v5.16 。GitHub - Byron/gitoxide: https://github.com/Byron/gitoxideChecking out the Linux kernel in under a second: https://github.com/Byron/gitoxide/discussions/349"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Byron/gitoxide/discussions/349"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-11 00:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"利用 gitoxide 可以在一秒内检出 Linux 内核"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"venial 试图实现一个轻量化的 proc-macros 解析器。目前仍然处于实验阶段，但最终目标是在流行的 derive macro crates 中取代 syn 。GitHub - PoignardAzur/venial: https://github.com/PoignardAzur/venialdocs.rs - venial: https://docs.rs/venial/latest/venial/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/venial/latest/venial/index.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-11 00:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"venial 0.1 - syn 的轻量化变体"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 433: https://this-week-in-rust.org/blog/2022/03/09/this-week-in-rust-433/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/03/09/this-week-in-rust-433/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-11 00:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 433"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它是完全免费和开放的，不受任何公司控制。意味着没有广告、收集用户习惯和秘密算法。ReadMore:https://join-lemmy.org/news/2022-03-08_-Lemmy_Release_v0.16.0-_Theming_and_Federation_improvementshttps://join-lemmy.org/news/2022-03-08_-_Lemmy_Release_v0.16.0_-_Theming_and_Federation_improvements"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-09 23:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lemmy - 一个自托管的社交链接聚合和讨论平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于 Rust 的 Unikernel。\n支持日志的控制台驱动程序\n页框映射和表生成\n授予表创建/销毁\nXenStore 界面\nXenBus 接口\n简单的异步执行器\nReadMore:https://github.com/StardustOS/stardust-oxide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/StardustOS/stardust-oxide"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-09 23:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"stardust-oxide - 基于 Rust 的 Unikernel"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ReadMore:https://intellij-rust.github.io/2022/03/09/changelog-166.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://intellij-rust.github.io/2022/03/09/changelog-166.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-09 23:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"INTELLIJ RUST 更新日志 #166"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Fornjot (Code-CAD in Rust) - Weekly Dev Log - 2022-W09https://www.reddit.com/r/rust/comments/t8ocub/fornjot_codecad_in_rust_weekly_dev_log_2022w09/关于FornjotFornjot是一个早期项目，旨在创建新一代的Code-CAD应用程序：因为世界需要另一个CAD程序。这个项目的目标是创建一个有如下特色的CAD应用程序：\n使用代码优先的方法；\n是开源的；\n广泛使用，支持所有主要平台；\n基于一个新的CAD内核，用Rust语言编写；\n提供一个全面的功能集；\n以及对不同建模语言的支持；\n这个目标还没有实现。事实上，还远远没有! 但Fornjot正在一步一步地慢慢变得更好。Fornjot正在积极开发中，但仍然是实验性的。目前的工作重点是提供一套稳定的基本CAD功能。基本建模功能在这一点上，Fornjot支持基本的2D形状（由线段、圆和它们之间的有限组合组成的草图），沿着直线路径扫过这些2D形状以创建3D形状，以及对构造实体几何（CSG）的一些非常不完整的支持。短期到中期的优先事项是提供固体CSG支持、更灵活的草图和更灵活的扫描（沿着圆或螺旋）。长期计划是不断增加更高级的CAD建模功能，以支持甚至复杂的模型和工作流程。平台支持截至目前，Fornjot在Linux、Windows和macOS上运行。该项目主要是在Linux上开发的，所以其他平台可能会有bug。中短期的计划是增加对网络平台的支持，因此Fornjot可以在浏览器中运行。长期来看，计划是增加对主要移动平台的支持。导出到3MF支持将模型导出到3D制造格式（3MF），这在3D打印中使用。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-08 17:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fornjot: 世界需要另一个CAD程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"kira (game audio library) v0.6.0 - complete rewrite with streaming sound support and a leaner and more elegant APIhttps://www.reddit.com/r/rust/comments/t984ss/kira_game_audio_library_v060_complete_rewrite/关于KiraKira是一个与后台无关的库，用于为游戏创建富有表现力的音频。它提供了用于平滑调整声音属性的参数，一个灵活的混合器，用于将效果应用于音频，以及一个时钟系统，用于为音频事件精确计时。平台支持Kira主要用于桌面平台。大多数测试是在Windows上进行的，但它也被成功地用在了Linux上。Kira也可以在wasm环境中使用，但有以下限制：\n静态声音不能从文件中加载；\n不支持流媒体声音，因为它们会大量使用线程；\n代码示例项目地址：https://github.com/tesselode/kira"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tesselode/kira"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-08 17:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Kira(游戏音频库) v0.6.0 - 完全重写以支持流媒体声音和更精简、更优雅的API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pronunciation of <[_]>https://www.reddit.com/r/rust/comments/t8p76w/pronunciation_of/turbofish，通常用于在Rust表达式中为泛型类型、函数或方法指定参数。这里有个小网站可以通过泛型参数自定义turbofish的形状，它的小尾巴还能游动哦：\nturbofish-int\nturbofish-slice\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-08 17:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"turbofish: 飞驰的海洋生物"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Implementing a size-bounded LRU cache with expiring entries for my DNS server (in Rust)https://memo.barrucadu.co.uk/dns-cache.html跟着作者一起学习，如何使用Rust编程语言为DNS服务器实现一个有大小限制的LRU缓存，并有过期的条目。Rust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-08 17:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust实现一个有大小限制可过期的LRU缓存"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Onefetch是一个用Rust编写的命令行Git信息工具，它直接在终端上显示本地Git存储库的项目信息和代码统计信息。该工具完全offline - 不需要网络访问。默认情况下，git仓库的信息显示在主要语言的logo旁边，但您可以进一步配置onefetch，以在支持的终端上使用图像、文本输入或完全不使用任何内容。Github 链接，https://github.com/o2sh/onefetch"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/o2sh/onefetch"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-05 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Onefetch"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"coca在一年前发布了上一个版本，在这之后我只是偶尔投入在这上面。自从const generics的MVP版本稳定以来，我一直想发布一个新版本。这真的让coca大放异彩，但我总是想先补充一些别的东西。Github 链接，https://github.com/teryror/coca文章链接，https://www.reddit.com/r/rust/comments/t6npfj/announcing_coca_v030_allocationfree_data/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/t6npfj/announcing_coca_v030_allocationfree_data/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-05 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"coca v0.3.0发布："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"允许我向您展示DS-Transcriber - 1.0.0的下一个主要版本。这是一个由DeepSpeech为基础的的crate，可以让你轻松获取麦克风录音，完全离线。有一些性能改进和错误修复。然而，大多数更改是为了使公共API更友好、更干净。Github 链接，https://github.com/kawaki-san/ds-transcriber文章链接，https://www.reddit.com/r/rust/comments/t76poy/announcing_dstranscriber_100/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/t76poy/announcing_dstranscriber_100/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-05 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"发布 ds-transcriber 1.0.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"link 是一个用 rust 编写的命令和控制框架。目前处于测试阶段。link 提供了 MacOS、Linux 和 Windows 植入程序，这些植入程序可能缺乏其他更成熟的命令和控制框架提供的必要规避技术。构建过程：\nhttps://github.com/postrequest/link\nembed-c是一个允许你在 Rust 代码文件中嵌入 C 代码的 crate。C 代码在编译时使用 C2Rust 翻译成 Rust 代码，这意味着它可以与 Rust 完全互操作。C 代码可以调用 Rust 代码，反之亦然。https://github.com/immunant/c2rust您只需要：并在 toml 中：然后就可以构建程序了，更多例子在链接中\nhttps://github.com/zdimension/embed-c\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-05 09:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"第一届 bevy jam 距离作品提交时间只剩下一天多点了，你有参加么？itch: https://itch.io/jam/bevy-jam-1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://itch.io/jam/bevy-jam-1"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-03 20:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"第一届Bevy jam步入尾声"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"lapce是使用 Rust 开发的开源轻量代码编辑器。虽然还处于早期开发阶段，但是已经发布了自己的官网。顺便提一嘴，作者是华人。官网: https://lapce.dev/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://lapce.dev/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-03 20:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lapce发布了官网"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 432: https://this-week-in-rust.org/blog/2022/03/02/this-week-in-rust-432/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/03/02/this-week-in-rust-432/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-03 20:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 432"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"The Rust CLI Programming book by Matthew Provost讲解Rust基础与命令行界面编程实战的书。link: https://rftgu.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rftgu.rs/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-02 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"又一本Rust书：Rust From the Ground Up"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用Rust实现命令行工具的过程真的是太享受了。link: https://github.com/konradsz/igrep"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/konradsz/igrep"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-02 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"igrep - 交互式grep"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我们梦想着用Rust进行QT开发。之前Rust的Qt绑定，一直没有吸引太多人注意，本身确实也不好用。而CXX-QT的方式不一样，这个库目前还未到产品级阶段，但是已经可用了。大家有机会可以尝试尝试。blog: https://www.kdab.com/cxx-qt/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.kdab.com/cxx-qt/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-02 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust进行QT开发的新方式 CXX-Qt"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Wasmer 2.2 发布！该版本具有显着的进步，可以在很大程度上影响 Web3.0 和区块链。Wasmer 正在为Singlepass 编译器重新兼容 Aarch64 而努力完善。借助新版的 Singlepass 编译器，Web3.0 和区块链开发人员可以在 Windows、Linux 和 macOS 上使用 Singepass 高效运行 Wasmer Runtime。（不过新版本还完全支持备受期待的 Apple M1 处理器）原文链接Singlepass 编译器是什么https://wasmer.io/posts/wasmer-2.2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-01 19:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wasmer 2.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Wasm 是当下最火热的技术之一，作者介绍了如何将其与 K8s 结合起来，同时说明了为何 Rust 是最适合开发 Wasm 的语言。原文链接https://developer.okta.com/blog/2022/01/28/webassembly-on-kubernetes-with-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-01 19:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"去容器化! 如何在 k8s 上借助 Rust 运行 Wasm"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"推荐几个使用 Rust 开发的文本编辑器：\nxi-editor\nhelix\nlapce\n其中，xi-editor 项目已经不再积极维护，具体原因可以查看其创始人的博客https://raphlinus.github.io/xi/2020/06/27/xi-retrospective.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-03-01 19:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 开发文本编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"24 天从从 JavaScript 到 Rust教程，一个 Node 开发者视角的 Guide。视频：https://vino.dev/blog/node-to-rust-day-1-rustup/GitHub：https://github.com/vinodotdev/node-to-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-27 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从Node到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个用 Rust 和 Numpy C API 编写的高性能 python 技术分析库。平均而言，Panther 对这些（如下）指标的计算比使用 Pandas（行业标准方法）快 9 倍。\nATR\nCMF\nSMA\nEMA\nRSI\nMACD\nROC\nGitHub：https://github.com/gregyjames/Panther"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-27 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Panther"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"swift-bridge 促进 Rust 和 Swift 互操作，可以在 Rust 和 Swift 之间传递和共享高级类型，例如 Option<T>、String、Struct 和 Class。电子书：https://chinedufn.github.io/swift-bridge/GitHub：https://github.com/chinedufn/swift-bridge"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-27 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"swift-bridge"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 写的 CSS标记器，解析器，转换器。BenchMark：https://telecss.github.io/telecss/dev/bench/GitHub：https://github.com/telecss/telecss"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-27 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Telecss"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这应该算是又又又又一个关于 Rust 算法和数据结构的书了。目录如下：\n第一章：计算机科学\n\n计算机科学\nRust 回顾及学习资源\n\n\n第二章：算法分析\n\n性能分析：大 O 分析法\n\n\n第三章：基本数据结构\n\n栈、队列、双端队列、链表、Vec\n\n\n第四章：递归\n\n递归三定律、尾递归、动态规划\n\n\n第五章：查找\n\n顺序查找、二分查找、哈希查找\n\n\n第六章：排序\n\n十大排序算法\n\n\n第七章：树\n\n二叉树、二叉堆、二叉查找树、平衡二叉树\n\n\n第八章：图\n\n图的表示、广度优先、深度优先、最短路径\n\n\n第九章：实战\n\n编辑距离、字典树、过滤器、缓存淘汰\n一致性哈希、Base58 编码、区块链\n\n\n\n计算机科学\nRust 回顾及学习资源\n\n性能分析：大 O 分析法\n\n栈、队列、双端队列、链表、Vec\n\n递归三定律、尾递归、动态规划\n\n顺序查找、二分查找、哈希查找\n\n十大排序算法\n\n二叉树、二叉堆、二叉查找树、平衡二叉树\n\n图的表示、广度优先、深度优先、最短路径\n\n编辑距离、字典树、过滤器、缓存淘汰\n一致性哈希、Base58 编码、区块链\nGitHub：https://github.com/QMHTMY/RustBook知道你们想问其他的是什么，来吧，不用谢：\nhttps://github.com/TheAlgorithms/Rust\nhttps://github.com/weihanglo/rust-algorithm-club\nhttps://github.com/EbTech/rust-algorithms\nhttps://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Rust\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-27 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"数据结构和算法（Rust）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Actix Web 是一个强大的高性能 Web 框架，用于创建从小型到单体的 Web 服务。v4.0 主要变化v4.0 版本是由社区推动的，57 位贡献者提交了超过 600 次！主要变化包括：\n完全兼容 Tokio v1 生态系统，包括#[tokio::main] 支持。\n使 actix-http 更精简。这个 crate 支持 Actix Web，包含我们的 HTTP/1 实现和较低级别的 HTTP 处理。\nAPI 改进，通常是为了提高表现力和开发人员的生产力。\n减少特定 API 中的 paper-cuts 和 non-obvious 行为的数量。\n大大改进了大量关键项目的文档。\n迁移指南包含了如何更新的解释和差异。https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-26 22:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Actix Web 发布 v4.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 2016 年到 2020 年间，Nicholas 写了一系列名为“如何加速 Rust 编译器”的博文。 这些主要是关于其在 Rust 编译器上的工作，以及总体上关于 Rust 编译器速度进展的一些更新。现在他作为 Futurewei 的 Rust 团队一员，是时候重新开始这个博客系列了。文章链接，https://nnethercote.github.io/2022/02/25/how-to-speed-up-the-rust-compiler-in-2022.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nnethercote.github.io/2022/02/25/how-to-speed-up-the-rust-compiler-in-2022.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-26 22:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Nicholas: 2022年如何加速 Rust 编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-analyzer 在 2021 年 9 月 27 日默认启用了 #[attribute] 扩展，从那时起，我们已经看到了一些关于在属性项目内部完成时用户体验下降的问题。 对于大多数用户来说，这是一个相当大的问题，尤其是那些编写异步或网络服务器代码的用户，因为那里主要使用属性。 然而，直到最近我们才真正开始正确解决这个问题。在 2021 年 rust-analyzer 回顾中简要讨论了它，但 Lukas Wirth 认为另一篇关于更普遍问题以及可能的解决方案的帖子可能会引起某些人的兴趣。这篇文章将扩展这个问题，不仅讨论属性，还讨论类似函数的 proc-macros。 但是不会具体涉及派生属性，因为它们不会真正受到问题的影响，因为它们不会替换带注释的项目。文章链接，https://veykril.github.io/posts/ide-proc-macros/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://veykril.github.io/posts/ide-proc-macros/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-26 22:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lukas: rust-analyzer 和 proc-macros"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要发布内容："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-25 22:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.59.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于 Hendrik Sollich 在 4 年前的工作，作者添加了一些常用的函数和宏的基准结果：GitHub - hoodie/concatenation_benchmarks-rs: https://github.com/hoodie/concatenation_benchmarks-rsString concatenations benchmarks (updated): https://www.reddit.com/r/rust/comments/t06hk7/string_concatenations_benchmarks_updated/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/t06hk7/string_concatenations_benchmarks_updated/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-24 23:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"字符串连接操作的基准测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sylvain Kerkour ，Bloom 的创建者也是 Black Hat Rust 一书的作者，发文对比了 actix-web、warp 和 axum  三个 Web 框架，结合代码示例进行了一个简单的评估。尽管作者心属 axum，但还是选择 actix-web 作为 Bloom 的首选。Reddit 上的网友则提供了更多讨论，包括 tide ，rocket 以及 poem 。Which Rust web framework to choose in 2022 (with code examples): https://www.reddit.com/r/rust/comments/szl0im/which_rust_web_framework_to_choose_in_2022_with/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/szl0im/which_rust_web_framework_to_choose_in_2022_with/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-24 23:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"热议 - 2022 年你会选择哪种 Web 框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 431: https://this-week-in-rust.org/blog/2022/02/23/this-week-in-rust-431/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/02/23/this-week-in-rust-431/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-24 23:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 431"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PopOS是要开发Rust Linux发行版的System76的Linux发行版，现在正致力于和Relm4合作，帮助用Rust在PopOS上更容易地开发GTK程序。https://github.com/AaronErhardt/relm4Relm4是基于GTK上层的一套框架，提供类Elm的编程模式。Linkhttps://www.reddit.com/r/rust/comments/sxwi46/popos_collaboration_with_relm4_writing_gtk/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PopOS正在与Relm4配合，以帮助用Rust在PopOS上开发GTK程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust虽然相比Java，js，python算小众语言，但是已经进入 Linux kernel, Windows, Chrome, Android 等基础设施了。更重要的是，Rust能帮助AWS大大减少碳排放。目前世界的数据中心耗费全世界1%的电，这个规模级别上，呼唤Rust的更广泛采用。Linkhttps://www.zdnet.com/article/programming-languages-aws-explains-why-rust-is-so-important/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"AWS：为什么我们要持续投资Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/robert-king/rust-wordle对了，这是在终端下。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/robert-king/rust-wordle"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wordle 游戏的Rust版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章作者总结了11条，这两个包管理器的不同之处，其实这些不同也牵涉到语言级的原因。Linkhttps://blog.williammanley.net/2022/02/23/pip-and-cargo-are-not-the-same.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo 和 pip 是不同的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比 screen, tmux 更现代。还等什么呢，用啊。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"zellij - tmux 的 Rust 实现版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"seanmonstar 大大规划2022年一定要发布 hyper 1.0。给他加油吧。linkhttps://seanmonstar.com/post/676912131372875776/hyper-10-timeline"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hyper 1.0路线路出来了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在Rust语言中，unsized变量一直都没有人去认真做过这方面的分析工作，编译器一直也没有对这块做太多的功能支持。作者在这个主题上从历史开始做了深入的详尽的分析。值得学习。linkhttps://poignardazur.github.io/2022/02/23/rust-unsized-vars-analysis/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"好文：对Rust中unsized变量的分析"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"继续抛光打磨！egui体验太棒了，欢迎大家都去尝试。社区口碑非常好的一个GUI库。demohttps://www.egui.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"egui 0.17 已发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust编译器团队刚发布了2022年编译器这边要做的一些事情。总体来讲，有三个大目标：具体来讲，分以下几大方面：\nI-unsound\nAsync Rust\nDebugging\nFaster Builds\nExpressiveness\nLibrarification\nP-high Backlog\nTeam Operations\nBackend\nDiagnostics\n内容规划得非常详尽。足见要做好一个编译器工程确实太难了，详情请细读原文：linkhttps://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-23 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方博客：Rust编译器的2022雄心"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SixtyFPS becomes Slint — Slint Bloghttps://slint-ui.com/blog/sixtyfps-becomes-slint.html我们将SixtyFPS改名为Slint。为什么要改变？在2020年春天，我们启动了SixtyFPS，旨在为桌面和嵌入式设备创建一个新的GUI框架。在将近两年的时间里，我们已经发布了13个版本，赢得了许多用户，创建了一个贡献者社区，签署了一些客户，并获得了3k个GitHub star🤣。我们选择SixtyFPS这个名字是因为我们想传达我们的目标：即始终实现流畅的动画，这通常与每秒60帧的刷新率有关。许多旁观者从字面上理解这个名字。每当我们的项目出现在社交媒体上，我们就会收到关于我们名字的评论：考虑到现在的屏幕经常以更高的刷新率运行，这个名字显得过时了。我们考虑改变这个名字，并决定在开放源码社区讨论这个问题，以收集意见。我们在GitHub上展开了讨论，并收到了许多好的建议。@karoofish提出了slant，这成为投票率最高的建议，我们非常喜欢它。我们和一些朋友讨论了这个问题，包括一些讲母语的人，有些人建议，在某些情况下，它可以有一点负面的意思。我们所需要的只是一个小小的迭代。https://github.com/karoofish我们的新名字来自于Straightforward, Lightweight, Native Toolkit，这也是我们的设计目标：Slint。衷心感谢每一个参与其中的人，尤其是@karoofish!https://github.com/karoofish什么是Slint？对于那些从未听说过SixtyFPS Slint的人来说，它是一个用Rust编程语言实现的GUI工具箱。其核心是声明性的Slint标记语言，它代表了整个用户界面。Slint语言从Qt的QML获得了一些灵感。这很自然，因为我们来自那个生态系统。我们决定从头开始建立一个强大的类型系统，一个设计师友好的单元系统和完整的工具支持。用Slint标记语言编写用户界面，用 \"真正的\" 编程语言编写业务逻辑。你可以用不同的编程语言使用Slint，比如Rust、C++和JavaScript。我们为这些语言设计的API是直观和习惯性的，而不仅仅是一些自动生成的绑定(binding)。我们设计了这个工具包，以便我们可以将Python、Go或其他语言加入到这个组合中。我们自己的编译器可以解析Slint语言，并直接编译成本地的Rust或C++代码，具有本地性能和高效的内存布局。你也可以用我们的运行时解释器在运行时动态地加载.slint文件。我们的工具包括一个实现了语言服务器协议的语言服务器，可以方便的集成到各种IDE和编辑器中。它提供了自动完成、语义语法高亮和一个很酷的实时预览，正如下面的视频片段所演示的那样。https://slint-ui.com/blog/sixtyfps-becomes-slint/preview_codelens.mp4Slint 0.2.0版本0.2.0版本的目的是为了反映这一名称的变化。我们也借此机会对我们的API进行了一些重要的修改，这些修改是我们从去年0.1.0版本开始收集的，在此感谢你们的反馈。下面是你如何升级你的应用程序：\n\n确保你的编程环境符合我们更新的工具要求：Rust 1.56或更高版本。如果你使用的是C++，请使用支持C++ 20的编译器。\n\n\n如果你使用的是Rust，把你的Cargo.toml改成依赖slint而不是 sixtyfps。如果你使用的是C++，修改你的CMakeLists.txt以找到Slint包，并针对Slint::Slint目标进行链接。\n\n\n在你的应用程序代码中，用slint重命名所有出现的 sixtyfps 模块/命名空间。关于API的变化，请参阅我们的Rust（+解释器）和C++迁移指南。\n\n确保你的编程环境符合我们更新的工具要求：Rust 1.56或更高版本。如果你使用的是C++，请使用支持C++ 20的编译器。如果你使用的是Rust，把你的Cargo.toml改成依赖slint而不是 sixtyfps。如果你使用的是C++，修改你的CMakeLists.txt以找到Slint包，并针对Slint::Slint目标进行链接。在你的应用程序代码中，用slint重命名所有出现的 sixtyfps 模块/命名空间。关于API的变化，请参阅我们的Rust（+解释器）和C++迁移指南。在这个版本中，我们还释放了一个新的功能：你现在可以在Slint场景的渲染之前或之后集成自定义的OpenGL代码。新的OpenGL Underlay Example展示了如何在Rust和C++中做到这一点。https://sli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-22 18:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SixtyFPS现已更名为Slint"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Happy birthday Alacritty!https://repography.com/blog/happy-birthday-alacritty六年前的2月21号(2016年2月21号)，Joe Wilm提交了第一个commit到Alacritty的Git仓库：今天是Alacritty的6周岁生日，这篇文章使用Repography 分析和回顾了Alacritty的repo历史：https://repography.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-22 18:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Alacritty六周年生日快乐!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-itertools/itertools: Extra iterator adaptors, iterator methods, free functions, and macros. (github.com)https://github.com/rust-itertools/itertoolsItertools是一个额外的Rust中迭代器适配器、函数和宏的集合，它提供了很多类似于Python中itertools模块的功能。例如生成一个指定大小的迭代器中元素排列的代码可以这样写："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-22 18:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Itertools：辅助的迭代器适配器、函数和宏。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Belgium Rust Meetup (February 3 2022, recording): async Qt, bubbly bubblesorts and how to win hackathons.https://www.reddit.com/r/rust/comments/sy4fn1/belgium_rust_meetup_february_3_2022_recording/2022年2月3日在比利时举办的Rust Meetup录屏分享，内容包含：\n\nasync Qt\n\n\n冒泡排序\n\n\n如何赢得黑客松\n\nasync Qt冒泡排序如何赢得黑客松视频地址：Belgium Rust Meetup (February 3 2022)https://video.rubdos.be/w/bhhMcctgLXTX5hrVARw3euRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-22 18:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Meetup录屏（2022年2月3日在比利时）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"notan 的目标是成为一个简单和可移植的多媒体层，旨在在其上创建您自己的多媒体应用程序，而不必过多地担心特定于平台的代码。我们的主要目标是提供一组api和工具，这些api和工具可以用于以人体工程学的方式创建项目，而不强制执行任何结构或模式，并且总是尽量不妨碍您的工作。在线 demoshttps://nazariglez.github.io/notan-web/github地址https://github.com/Nazariglez/notan"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-21 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"notan: 一个可以移植的多媒体层"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"duplicate提供了允许您避免重复工作的宏。而不是复制粘贴一些Rust代码，然后编辑几个地方，duplicate可以为您复制，并在每个副本的关键位置插入不同的代码.crates地址https://docs.rs/duplicate/latest/duplicate/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-21 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"duplicate: 让重复工作更简单"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一期 Rust 视频教程, 讲解如何使用 Serde 自定义反序列化.需要科学上网.油管视频https://www.youtube.com/watch?v=5D1hAy3UhTY--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-21 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Serde 自定义反序列化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 aws blog 的一遍博文，以云厂商的视角，从环保、可持续发展以及能源效率的角度来介绍 rust 的优势。原文地址：https://aws.amazon.com/cn/blogs/opensource/sustainability-with-rust/知乎译文地址：https://zhuanlan.zhihu.com/p/466475200?utm_source=wechat_session&utm_medium=social&utm_oi=28455760560128&utm_campaign=shareopn&s_r=0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://zhuanlan.zhihu.com/p/466475200?utm_source=wechat_session&utm_medium=social&utm_oi=28455760560128&utm_campaign=shareopn&s_r=0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-20 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的可持续发展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"flutter_rust_bridge 是一个用于 Flutter/Dart 与 Rust 的高级内存安全绑定生成器。它开源将 Flutter（一种跨平台的热重载快速开发 UI 工具包）和 Rust（一种使每个人都能够构建可靠且高效的软件的语言）结合起来。项目地址：https://github.com/fzyzcjy/flutter_rust_bridge"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/fzyzcjy/flutter_rust_bridge"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-20 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"flutter_rust_bridge 开源项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自 Michael Spencer 的一篇博文讨论，一篇简短的专栏文章，讲述了与区块链社区有关的编程的未来。在 2022 年，似乎开发人员正在使用 Rust 编程语言为 DeFi、游戏、NFT 和 metaverses 中的Web3 应用构建 dApps。如果你认为 Solana 是以太坊主导地位的合法竞争者，那就更是如此了。作者认为 Rust 完全有能力成为取代 Ethereum dApps 最常用的开发语言 Solidity 的编程语言。更多开源看原文：https://datasciencelearningcenter.substack.com/p/is-rust-the-programming-language?utm_source=url"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://datasciencelearningcenter.substack.com/p/is-rust-the-programming-language?utm_source=url"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-20 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 是 Web3 的编程语言吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Blueboat 是 Cloudflare Workers 的开源替代品，旨在成为 serverless Web 应用程序的开发人员友好型多租户平台。简单使用示例："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-20 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Blueboat 开源库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天，我们很高兴地宣布初始发布Tokio-Metrics，一个用于获得Tokio应用程序的运行时和任务级别指标的crate。Tokio-Metrics使Tokio用户更容易通过提供生产中的运行时行为来调试性能问题。如今，Tokio已成功用于亚马逊、微软、Discord等公司的大规模生产部署。然而，我们通常会从处理调试问题的工程师那里收到问题。文章链接，https://tokio.rs/blog/2022-02-announcing-tokio-metrics"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://tokio.rs/blog/2022-02-announcing-tokio-metrics"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-19 23:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tokio Metrics 0.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Libc函数limetime，gmtime和mktime的纯Rust重新实现。这个crate主要用于UNIX平台。由于时区数据库文件未包含在此crate中，因此非UNIX用户可以在IANA站点上下载时区数据库的副本，并将时区数据库文件编译为本地目录。Github 链接，https://github.com/x-hgg-x/tz-rs文章链接，https://www.reddit.com/r/rust/comments/svvpo3/announcing_tzrs_a_reimplementation_of_libc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/svvpo3/announcing_tzrs_a_reimplementation_of_libc/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-19 23:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TZ-RS，Libc函数localtime, gmtime和mktime的重新实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Veloren是一个rust实现的多人像素RPG游戏，Veloren从Cube World、Minecraft这些游戏获取灵感，目前还处在开发阶段，但是已经是可玩的了。Github 链接，https://github.com/veloren/veloren文章链接，https://www.reddit.com/r/rust/comments/sw0gvf/the_veloren_012_release_is_happening_today_after/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/sw0gvf/the_veloren_012_release_is_happening_today_after/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-19 23:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Veloren 0.12今天发布!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在使用 PostgreSQL 时，使用类似 SUM(vals) 或者 AVG(vals) 是一个常见的习惯。这些聚合函数为用户提供了一种简单、有效的方法来计算一组输入的结果。那么它们是如何工作的？是什么让它们与普通函数不同？我们如何制作一个聚合函数？还有哪些其他用途？通过 pgx 我们使用 SQL 创建一些基本的聚合方法，然后使用 pgx 0.3.0 的新聚合支持创建一个在 Rust 中定义聚合的扩展。https://github.com/zombodb/pgx\nhttps://hoverbear.org/blog/postgresql-aggregates-with-rust/\n作者介绍如何使用 Yew、yew-router、yew-agent 和其他几个项目构建一个聊天应用程序\nhttps://blog.devgenius.io/lets-build-a-websockets-project-with-rust-and-yew-0-19-60720367399f\n是时候用 Rust 重写我们的系统软件并摆脱 C 的陷阱了。这个过程中还包括文件系统支持等基础知识。作者接受了在 Rust crate 中实现 NTFS（Windows 使用的主要文件系统）的挑战，并且从固件级别到用户模式都同样可用。\nhttps://fosdem.org/2022/schedule/event/misc_ntfs_rust/\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-18 13:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linux 内核和 Rust on Linux 的主要开发者 Miguel Ojeda 近日再向 Linux Kernel 邮件列表提交了一个新补丁 (v4)，继续推进在 Linux 内核中增加对 Rust 作为第二语言支持。此举意味着对 Linux 内核驱动程序等的可选 Rust 编程支持继续成熟；Phoronix 称，按着这一趋势，今年或将有望看到主线状态。Read More: https://mp.weixin.qq.com/s/oT-x9NfLdhMD_R9_m9vdDA"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mp.weixin.qq.com/s/oT-x9NfLdhMD_R9_m9vdDA"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-17 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust for Linux第四个补丁版本提交"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"bacon是一个后台Rust代码检查器。它被设计成需要最小的交互，这样你就可以让它运行在你的编辑器侧边栏，并通知你的Rust代码中的警告、错误或测试失败等信息。它甚至可以在一个小终端中传达你需要的信息，这样你就可以为你的其他任务保留更多的屏幕空间。Read More: https://dystroy.org/bacon/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dystroy.org/bacon/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-17 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"发布 Bacon 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"clap 3.1来了! Clap是一个Rust的CLI参数分析器，v3.1版本的重点是为clap 4.0准备的API清理。详情请见CHANGELOG。https://github.com/clap-rs/clap/blob/master/CHANGELOG.mdclap 3.0已经开发了4年，虽然我们看到有人将其与《半条命3》相提并论，但我们也看到有人将两次发布的间隔时间过长作为使用它的动机之一。为了让clap保持相关性，我们觉得我们需要避免长时间发布周期的停滞，同时为clap已经 \"足够好 \"的用户保持平稳。v3.1的发布是努力实现这种平衡的一个重要步骤。Read More: https://epage.github.io/blog/2022/02/clap-31-a-step-towards-40/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://epage.github.io/blog/2022/02/clap-31-a-step-towards-40/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-17 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"clap 3.1 迈向4.0的一步"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"宣布 cargo-zigbuild。用zig作为链接器编译Cargo项目zig 是一门编程语言，可以直接编译到C语言。在该贴下，有人指出为了引入一个功能而直接引入一个编程语言是不值得的，但也有人回复到zig不仅仅是一门编程语言，同时配套的还有一系列的工具。并且大家的愿景是未来能在Rust原生的编译器上加入zig所带来的新特性。小编本来也想尝试一下，但是出了一些问题，并没有体验到与默认的链接器有什么区别。不过看了该贴下的评论，貌似是提供了更好的跨平台编译能力。Read More: https://libreddit.spike.codes/r/rust/comments/stq51v/announcing_cargozigbuild_compile_cargo_project/Github: https://github.com/messense/cargo-zigbuild"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/messense/cargo-zigbuild"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-17 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo zigbuild 使用zig作为链接器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我仍然对编程语言感到兴奋。但这些天来，感兴趣的不是他们让我做什么，而是他们不让我做什么。\nAmos在博客中讲述了Rust无法捕捉到的错误\nRead More: https://this-week-in-rust.org/blog/2022/02/16/this-week-in-rust-430/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/02/16/this-week-in-rust-430/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-17 20:33"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"本周周报"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"9354 名受访者,90% 的受访者表示他们正在使用 Rust，而 5% 的人表示他们过去曾使用过 Rust 但现在不再使用，4% 的人表示他们根本没有使用过 Rust。75% 的 Rust 用户说他们可以编写用于生产环境的代码， 27% 的人说这有时很困难。2021 年可以说是 Rust 历史上最重要的年份之一——随着 Rust 基金会的成立、2021 版本以及比以往任何时候都更大的社区，Rust 走向更坚实的未来。ReadMore:https://blog.rust-lang.org/2022/02/15/Rust-Survey-2021.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2022/02/15/Rust-Survey-2021.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-16 16:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2021年 rust 调查结果"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read和Write Trait 是 Rust 中 IO的关键部分，设计这些Trait的异步版本,对于提高异步生态系统中的互操作性和可移植性至关重要。这项工作是改进 Rust 中的异步编程正在进行的工作的一部分。\nTrait应该符合人体工程学来实现和使用。\n支持向量读写。\n支持读入未初始化的内存。\n支持单个资源的并发读写。\n作为特征对象工作得很好。\n在no_std场景中工作。\n与 io_uring、IOCP 和其他基于完成的系统一起工作\nReadMore:https://www.ncameron.org/blog/async-read-and-write-traits/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.ncameron.org/blog/async-read-and-write-traits/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-16 16:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步读写Trait"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ReadMore:https://intellij-rust.github.io/2022/02/14/changelog-165.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://intellij-rust.github.io/2022/02/14/changelog-165.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-16 16:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"INTELLIJ RUST 更新日志 #165"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo nextest 是一个 cargo test 的改进版本其作者指出，当前的 cargo test 有几点不足：针对这些问题，cargo nextest 采用了更加并行化的策略，提出了一个更加先进的测试框架针对多个大型项目的 Benchmark 结果如下，可以看出，测试性能有显著提升官方文档https://nexte.st/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-15 16:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-nextest: 全新版本的 test runner"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 广泛采用 CSP 模型进行并发编程，不过仍有一些爱好者想要尝试 Actor 模型，这不，有人在 twitter 上发起了一个讨论：What's the current state of actor systems in rust? 下面是针对该讨论的一些总结："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-15 16:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust actor 发展情况"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Starlane 是一个资源网格，使微服务能够在整个企业中创建、查找、监视和使用各种微资源以及向其他微服务发送消息。 Starlane 还提供了用于部署、执行和连接客户端和服务器端 WebAssembly 参与者（称为 Mechtrons）的机制。Starlane 使在云、边缘、桌面、移动和物联网环境中安全的 WebAssembly 代码的部署和互操作变得容易。官方网站：http://starlane.io/Tutorial：http://starlane.io/docs/tutorial/GitHub：https://github.com/mechtronium/starlane/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-14 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Starlane"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"像素风格战术2D射击游戏，最多4名玩家在线或在共享屏幕上玩。GitHub：https://github.com/fishfight/FishFightGitHub：https://github.com/fishfight/FishLauncher"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-14 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"FishFlight"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用于对图像进行排序和分类的GUI工具。具体而言，将所有图像和视频放在一个文件夹中，用 ImageSieve 打开文件夹，将不值得保留的图像和视频标记为丢弃，定义时间段内的一些重大事件（如生日，  旅行或婚礼），选择一个目标文件夹，ImageSieve 将自动完成工作。GitHub：https://github.com/Futsch1/image-sieve"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-14 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ImageSieve"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者整理了一些 Rust 独特的特性，并且尝试解释为什么需要这些特性。地址：https://fengliang.io/RustWHY/face.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-02-14 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustWHY"},"type":"text"}],"type":"title"}},]
