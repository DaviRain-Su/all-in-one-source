export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#StackOverflow今天SO发布的这个统计很有意思，先来看看Rust，三点：继续SO统计。图1是SO统计各大语言生态的原图，上面没有Rust。但其实，以我运营Rust日报近两年的观察，Rust的生态目前确实比不上在各个领域已经成熟的语言，但是它正在底层默默地在这些领域构建自己的生态。如图2。用群友的话来说：Rust正在聚沙成塔。 ​​​​另外，SO统计上关于区块链的统计也很有意思。Read Morehttps://insights.stackoverflow.com/survey/2019"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust又一次获得StackOverflow程序员最喜欢语言第一"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#char #crate\nReddit介绍\nchar-circle\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"char-circle: 提供循环缓冲区和in-place字符串转换的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate #gitOnefetch是一个命令行工具，可直接在终端上显示有关Git项目的信息。 Onefetch支持近20种不同的编程语言。onefetchhttps://github.com/o2sh/onefetch"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"onefetch: 命令行Git信息汇总工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actix-web“魔术链接（Magic links）”是每次需要登录时，Web应用程序都会生成一个新的，唯一的密码，而不是单个长期存在的密码。 然后，Web应用程序会向用户发送一封电子邮件或一条带有登录链接的短信。 此链接包含此唯一密码：短暂共享密钥。该demo是使用actix-web 0.7。Read Morehttps://blog.approveapi.com/tutorials/rust-actix-web-approveapi-magic-login-link/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用actix-web实现魔术登录链接的示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tokio #i3ipc该文作者介绍了使用tokio实现i3wm（i3窗口管理器）的IPC接口\nRead More\ni3wm IPC接口文档\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Tokio实现自定义协议（i3 IPC）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#PythonRead Morehttps://medium.com/@rajasekar3eg/rust-for-python-developers-ownership-and-borrowing-cd85fc10cae4"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Python开发者的Rust教程 Part 2: 所有权和借用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#electron #wasmelectron-wasm-rust-examplehttps://github.com/anderejd/electron-wasm-rust-example\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-10 13:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"electron-wasm-rust-example: 一个最小化的Electron + WebAssembly (WASM) + 🦀 Rust的示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看起来操作性很高，比linux之前的MC好用多了。本工具受 ranger 和 emacs 启发。Repohttps://github.com/rabite0/hunter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hunter - 终端下的文件浏览器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Repohttps://github.com/J-F-Liu/lopdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lopdf - 用于操作PDF文档的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从头开始写 C 编译器，很好的学习教程。谁在学习编译原理，可以参考参考。Repohttps://github.com/onehr/crust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"crust - 一个Rust实现的简单C编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以在逻辑层面做 LBS 应用了？真正实际应用的时候，还是要使用数据库中的 geo 功能吧。Repohttps://github.com/georust/geo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"geo - Rust实现的地理空间原语和算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"转换后，就不需要运行模拟器来执行swf了。开坑不久，可以参与。Repohttps://github.com/lykenware/flashback"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"flashback - 将adobe的SWF文件转换为SVG或WASM等格式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"simdjson 这个库这段时间非常火，因为它确实很快啊，用 SIMD 指令集来加速。这个库是 rust 的实现版本，不是包装版本。https://github.com/lemire/simdjsonRepohttps://github.com/Licenser/simdjson-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"simdjson-rs - simdjson库的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Alacritty 是 Rust 实现的一个高性能终端。这个版本添加了很多新特性，可以玩玩儿。新 logoRead Morehttps://blog.christianduerr.com/alacritty_030_announcement"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Alacritty 0.3 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://www.reddit.com/r/rust/comments/baxg3a/rust_1340_prerelease_testing/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.34.0 预发布版邀请大家测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"写人类可读的单元测试的框架。看起来非常不错。DocsRepohttps://docs.rs/fluid/latest/fluid/wiki/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fluid - 一个单元测试库 发布了0.4版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库的目标就是一个字——快。为了快，可以不择手段。下面是跑性能测试。Repohttps://github.com/devashishdxt/desse"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"desse - 一个用于序列化和反序列化固定大小类型的超快的二进制序列化和反序列化库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"帅气的 wasi 教程 的 rust 实现版本。跟进最新的 wasi 的同学不能错过。https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-tutorial.mdRepohttps://github.com/kubkon/rust-wasi-tutorial\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-09 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-wasi-tutorial"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#future #async该PR解决的问题是：Future::poll应该获取＆Waker还是可以获得＆Waker的＆Context？最终答案是：Context\nFuture-proof the Futures API ：PR 59119\n相关：Tracking issue for RFC 2592, futures_api\n相关： [Stabilization] Future APIs #59725 \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust异步进展：Future-proof the Futures API的PR已经被合并"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#actixRead Morehttps://zupzup.org/rust-webapp/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和Actix-web基本Web编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ScientificComputing #ndarray该作者的日常工作是机器学习，他在多次使用Rust进行相关的实验之后发现，Rust语言在这个领域将大有可为，并让他感觉非常激动。作者反观了Python统治下的机器学习世界，其生态系统爆炸的原因是因为有很多基础库，比如NumPy，SciPy，Pandas等。大多数项目是构建在NumPy和SciPy之上。如果Rust也拥有这些核心的基础库会怎么样？抱着这样的想法，作者加入了维护ndarray库的队伍中。他贡献了一堆PR之后，诞生了一个独立的crate：ndarray-stats。这个系列的文章，将围绕ndarray来阐述。Read Morehttps://www.lpalmieri.com/posts/2019-04-07-scientific-computing-a-rust-adventure-part-2-array1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列博客」 Rust与科学计算 Part 2: 数组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#springboot来自Rust国内社区 @xiaohulu 投稿。源代码托管在 https://github.com/blocklang/blocklang-installerBlockLang Installer 安装在应用服务器上，支持：功能示意图： "},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"BlockLang Installer 是一款专用于部署 Spring boot 项目的自动化安装工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#TM1637 #STM32F104C8T6来自Rust国内社区 @洛佳。查看该Demo项目Readme，有详细的内容说明。tm1637-display-demohttps://github.com/luojia65/tm1637-display-demo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」一个TM1637的demo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#job关键字：远程(美国境内)、Rust、容器服务、创业Read Morehttps://www.cloudseal.io/hiring/rust-systems-software-engineer-sp19"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「远程工作」Rust软件工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#notificationrust-notificahttps://github.com/frewsxcv/rust-notifica"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-notifica: Rust实现的跨平台系统通知工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#imageimage是纯Rust实现的图像库，这次迁移主要是遵循以下计划：\n\n准备邀请一些人可以加入组织做贡献\n\n\n准备建立两个团队：发布团队（拥有crates.io的访问权限）和开发团队（拥有仓库代码的写入权限）。这样做是为了安全性。\n\n\n移动其他相关的库到统一的组织下\n\n\nimage-rs组织\n\n\nRead More\n\n准备邀请一些人可以加入组织做贡献准备建立两个团队：发布团队（拥有crates.io的访问权限）和开发团队（拥有仓库代码的写入权限）。这样做是为了安全性。移动其他相关的库到统一的组织下image-rs组织https://github.com/image-rsRead Morehttps://github.com/PistonDevelopers/image/issues/891"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「通告」image的GitHub仓库将在24小时内迁移到新的image-rs组织"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#deno #hypermax latency >1000ms目前讨论还未有结果，可以持续关注。Deno作者提交了一个PR，使用O3优化，目测也未有改善。\nReddit 讨论\nDeno基准测试\nDeno基准测试代码\nPR: Use -O3 instead of -O \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」为什么Deno的基准测试中Hyper的最大延迟如此高？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RustLatamRust LATAM是拉丁美洲(Latin America)第一次专注于Rust编程语言的会议。该文作者是此次大会的组织者之一。这篇文章里他简单分享了这次大会的收获：\n技术经验。有机会和Rust社区的一些非常好的人提问和交流，收获了很多。\n大会组织经验。通过提供现场翻译服务或字幕来帮助不熟悉英语的人参与大会。这是包容性的体现，因为很多贡献者并不是英语母语使用者。另外一点是提供了学生价门票，对学生更友好。\n人文经验。这是他第一次去拉丁美洲，开阔了自己的世界观。\n（看完这个，我就更期待RustCon Asia大会了）Read Morehttps://apiraino.github.io/2019/04/06/latam.html\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-08 12:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust LATAM大会组织和参与心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#zhihu #github可以关注下这个知乎问题，下面链接是对区块链框架CITA的介绍。Read Morehttps://www.zhihu.com/question/30511494/answer/643314455"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub 上有哪些值得关注的 Rust 项目？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nomnom是Rust社区的一个重要的解析工具，作者在reddit发帖表示将要发布5.0版本。（这是一个你没有看过的船新版本，挤需体验三分钟，里造会干我一样，爱象这个版本。）你可以在nomfun项目里体验到nom的新设计。在这个库里完全看不到宏的影子了，取而代之的是Functor，用法和另一个解析库combine趋于一致。新版本据说性能会有5%-20%的提升，并且有更好的错误处理系统，同时保持大部分向后兼容。因为作者家里有事，可能5.0版本需要几个月才能发布，不过近期他会先发一个alpha版本，作者也列出了一个5.0的路线图。\nRead More\nnomfun\ncombine\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nom 5.0 发布预告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#azure可以很轻松地集成CI。rust-azure-pipelineshttps://github.com/xoac/rust-azure-pipelines"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用于Azure Pipelines项目的Rust模板"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ArcSwapArcSwap可以自动存储和加载Arc，类似于RwLock<Arc <T >>但没有锁。适合于频繁读取但不经常修改的数据，如配置或内存数据库每秒请求数百万次查询等。这篇文章中，作者揭示了ArcSwap的工作机制。\nRead More\narc-swap\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ArcSwap的袖里乾坤"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#error_handlefailure + error-chain = <3这个库旨在提升failure的用户体验（error_chain向）。failchainhttps://github.com/cristicbz/failchain"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"failchain:  一个新的错误处理库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#reddit有人在reddit发帖，探讨了他目前观察到Rust的一些状态，他关注的点是：\n异步语法。正在积极地走向稳定。\n消息队列（Graphql订阅、mqtt等）。被异步耽误了，目前Graphql订阅支持最有希望的是Actix。\n嵌入式Rust。看起来得2019年年底成熟。\nWASM（Graphql UI Client）。Yew好像最受欢迎，但是不支持wasm-bindgen，只能用stdweb，所以导致很难用webpack来处理css模块。当然也有人在解决这些问题。\n云支持。看上去支持的不错。\n结论： 目前Rust生态已经处在一种「马上能成事」的边缘。作者表示，如果现在用Rust构建他想要实现的产品，可能需要自己构建或者等待一些工具（大约一年）。他也知道现在开始学习Rust正好，也可以提交一些PR来改进生态，但是他不想这样（233，估计是时间关系），然而他说，他可以出钱赞助这些加速生态发展的项目维护者。Reddit 讨论https://www.reddit.com/r/rust/comments/ba7yci/state_of_rust_from_an_outside_pov/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」旁观Rust目前的状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#serde默认情况下，serde在序列化结构时包括所有字段，即使它们的值是默认值。 这可能导致一些包含空值的「污染」。本篇文章教你如何跳过这些默认值。Read Morehttps://www.mth.st/blog/skip-default/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"不要序列化默认值"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RaspberryPi #MPU6050read morehttps://pastebin.com/Yy12vcq3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」树莓派MPU6050 IMU驱动程序寻找review"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#best_practices有人在reddit上面开贴询问这个问题，评论里也有很多人讨论。大家还有什么推荐？（我个人用的是dotenv了）Reddit讨论https://www.reddit.com/r/rust/comments/ba4dr3/configurations_best_practices/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」Rust项目配置的最佳实践是什么？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#linked2 #ServiceMeshLinkerd的服务之前是Scala写的，并且受到了Twitter在Finagle RFC系统上工作的启发。但是Linkerd 2却用Go（Control Plane）和Rust（Data Plane）进行了重写。（这让我想到Twitter曾经宣布用Scala/Java替换Ruby的新闻，感受到了时代的车轮在转动。本文作者是Buoyant的CEO和联合创始人。在加入Buoyant之前，他是Twitter的基础架构工程师，就是他帮助将Twitter从一个失败的单片Ruby on Rails应用程序迁移到基于Scala的高度分布式，容错的微服务架构）Buoyant团队对底层的Rust网络堆栈进行了深入的技术投资，并将UX重新定位于简单性，易用性和低认知开销上。结果显着更快，更轻，更简单。自Linkerd 2.0发布至今已有六个多月，该团队认为重写已经带来了好处，许多以前无法采用1.x分支的用户现在乐于采用2.x。Linkerd团队从1.0产品中吸取了什么教训？尽管Linkerd取得了成功，但许多组织不愿意将Linkerd部署到生产中，或者愿意为了这样做而不得不进行重大投资。这种摩擦是由下面几个因素引起的。\n有些组织不愿意将JVM引入其运营环境。 JVM具有特别复杂的操作表面，一些操作团队无论是对还是错，都避免将任何基于JVM的软件引入其技术栈 - 特别是像Linkerd这样扮演关键任务的角色。\n其他组织不愿意分配Linkerd所需的系统资源。一般来说，Linkerd 1.x非常擅长扩展 - 如果有足够的内存和CPU，单个实例每秒可以处理数万个请求 - 但它不擅长缩减：很难获得内存单个实例的占用空间低于150 MB的RSS。 Scala，Netty和Finagle使问题变得更糟，因为它们都旨在最大限度地提高资源丰富环境中的吞吐量，即以牺牲内存为代价。\n由于组织可能部署数百或数千个链接器代理，因此这种占用空间非常重要。作为替代方案，我们建议用户为每个主机而不是每个进程部署Data Plane，从而允许用户更好地分摊资源消耗。但是，这增加了操作的复杂性，并限制了Linkerd提供某些功能（如每服务TLS证书）的能力。\n存在复杂性问题。 Finagle是一个具有大型功能集的丰富库，我们通过配置文件或多或少直接向用户公开了许多这些功能。因此，Linkerd 1.x可定制且灵活，但学习曲线陡峭。特别是一个设计错误是使用委托表（dtabs），一种由Finagle使用的回溯，分层，后缀保留的路由语言，作为基本配置原语。任何试图自定义Linkerd行为的用户都会很快遇到dtabs，并且必须投入很大精力。\n（更新的JVM显着改善了这些数字。在IBM的OpenJ9下，Linkerd 1.x的资源占用和尾部延迟大大减少，而Oracle的GraalVM承诺会进一步降低它。小声嘀咕：但这也改变不了第一条）船新的开始痛定思痛之后，Linkerd开始改变。定了几个目标：\n目标1: 最低资源配置。Linkerd 1.x中，控制层和数据层都是基于JVM实现的，但实际上这两件产品是完全不同的。控制层对性能和资源的要求比较宽松，而数据层对性能和资源的要求非常严格，而且必须安全。所以2.x就采用Go语言来写控制层，Rust来写数据层。但是为什么控制层也不用JVM呢？Go比JVM更轻量，而且在K8S生态中有很多现成的库。数据层最初他们也考虑过Cpp，但从一开始他们就知道Rust是最符合他们要求的语言，并且团队的Scala工程师也非常喜欢Rust语言。但在2017年，Rust生态有一个非常大的缺点，就是确实网络库的支持，他们对Rust的网络库也投资了大量精力。（我想这就是他们赞组tokio作者的原因，后来出了tower库）\n目标2: 正常工作。\n目标3: 简单。\n最后在2018年9月他们推出了Linkerd2.0，六个月后，也就是2019年3月了，这种改变已经产生了回报，之前很多不愿意使用1.x的用户都接受了2.x。他们对Rust的选择引起了人们的极大兴趣。他们也承认，这是一种赌博，之前发布的早期产品叫「Conduit」，原因是害怕“玷污”了Linkerd的品牌（233），现在证明赌博是赌对了。从2017年开始，Linkerd团队对Rust网络库（Tokio、Tower和Hyper）进行了大量的投入（对Rust生态贡献很大）。Read Morehttps://www.infoq.com/articles/linkerd-v2-production-adoption"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linkerd v2: 从产品中吸取了什么了教训导致重写了服务网格？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#windows #epollWepoll是一个Windows平台的epoll API实现。wepoll-bindinghttps://gitlab.com/yorickpeterse/wepoll-binding\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-07 12:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wepoll-binding: Wepoll的Rust绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者舉了一些例子下面簡單說明他討論的這個問題他想為MVPArena寫一個add的函數那把add這個函數從 impl MVPArena 移到外面那首先就要解決生命週期的問題另外當你要寫一個樹結構的時候會遇到更多問題因為生命週期沒辨法離開當前的區塊範圍Read morehttps://www.reddit.com/r/rust/comments/b9y8ov/arenas_vs_indices/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Arenas vs. Indices：為型別寫函數要寫在型別裡還是外面？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者想要學rust, 於是決定寫一個compiler來練練手Read morehttps://www.reddit.com/r/rust/comments/b9xag6/trying_to_write_a_c11_c_compiler_in_rustworking_on/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CRUST：試著用rust寫一個 C11 c compiler"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/b9vmz4/implemented_peter_shirleys_ray_tracing_in_one/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"有人用rust實作了Peter Shirley's Ray Tracing的演算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一位rust大佬，他就是上次寫rust超越我的男人Read morehttps://www.reddit.com/r/rust/comments/b9tzxs/steve_klabnik_is_joining_cloudflare/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Steve Klabnik加入CloudFlare"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用工具 https://github.com/src-d/herculesRead morehttps://www.reddit.com/r/rust/comments/b9shaz/burndown_chart_of_rust_source_code_lines_by_year/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust source code行數變化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一堆rust開發者都在等啊~~~~Read morehttps://www.reddit.com/r/rust/comments/b9se8s/stabilizing_future_apis/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Future API終於要定案了！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個快速的靜態網站產生器，讓人快速的產生blog上傳到github上Read morehttps://www.reddit.com/r/rust/comments/b9rc50/zola_060_released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Zola 0.6.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/b9ol2l/the_new_hashmap_is_ready_for_merging/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-06 13:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"新版 HashMap 要合併到rust了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#CodeReview #sledSled项目是一个用Rust编写的嵌入式数据库。该文作者在日程工作中用到了它，为了掌握它的工作原理，准备开始写这个系列的博客。也可以通过学习此文，掌握一些阅读开源项目源码的技巧或其他启示，比如：\n先找你擅长领域的项目去阅读，事半功倍。\n从整体上先把握代码组织结构、依赖库，从所获得的信息中去推测更多信息。\n携带某个主要的问题去看源码是如何实现的。\n该文作者还有一个完整的review LevelDB的系列文章：reviewing-leveldb\nRead More\nreviewing-leveldb\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」审阅Sled源码 Part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #smithy状态：0.0.2 Alpha版本。\nRead More\nsmithy\n在线Demo\ndemo源码：smithy_todolist\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Smithy： 一个Rust实现的WebAssembly框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #lucetLucet是一个本地WASM编译器和运行时。基于Lucet运行时，Rust编译为wasm32-unknown-wasi target就可以创建一个运行于服务端的wasm程序。目前wasm32-unknown-wasi只支持Rust Nightly（2019-04-01版本确定可用）\nRust官方PR： Add a new wasm32-unknown-wasi target\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"案例：使用Rust和Lucet"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GlooGloo是一个用Rust和Wasm构建快速可靠的Web应用程序和库的模块化工具包，于两周前开始构建。最新的进展如下：\n增加了「“洋葱”分层API」。\n也就是说，API的构建就像是洋葱一样，分好几个抽象层。他们希望在raw-sys库之上构建一层中级的API，然后在中级API层再构建一层高级的面向用户的API。并且每一层都是公开暴露接口并可复用。这样设计是为了最高限度地提高大型生态系统的可重用性、通用性等。其中核心层API是构建在wasm-bindgen，js-sys和web-sys之上的原始绑定。中间层是回调（callback）层，比如gloo_timers就包含在这一层。高级层是Futures和Steams层，当然现在是futures 0.1，等异步稳定以后再切换到最新的。未来也有可能增加更高的抽象层。比如某些Web API或是为了生态系统而集成的层。\n另一个正在进行的设计是如何制作事件目标和监听器层。\nRead Morehttps://rustwasm.github.io/2019/03/26/gloo-onion-layers.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gloo更新：Onion层、计时器和事件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#font #xi_editorXiEditor作者新博文，深入介绍了字体回退机制。在操作系统介面和网页等现代排版环境下，如果指定用字体 A 来显示某字符 x 但该字体并不支持这个字符（甚至该字体当前不可用），排版引擎通常不会直接放弃，它会根据一个预先记好的列表来尝试寻找能显示字符 x 的字体，如果找到字体 B 能行，那就用字体 B 来显示字符 x。字体 B 就是当前这个情况的 fallback。\n字体回退机制参考\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"深入字体回退（Font Fallback）机制"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#json特点：\n编译时执行更多编码操作，运行时更少。\n在类型中编码JSON对象的结构。\n性能据说比serde的json!高出一个数量级。\n比如：json_in_typehttps://github.com/lovasoa/json_in_type"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"json_in_type: 快速JSON编码库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#webrtc #sctpSCTP: Stream Control Transport Protocol\nRead More\nSlides\ndemo演示视频\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」纯Rust实现SCTP以便支持WebRTC数据通道"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#llvm #compiler本文作者以他自己实现的Cone编译器为案例深度探索了编译器架构和LLVM的性能，并比较全面地阐述了LLVM的性能概况。\n编译器架构。Cone选择了C，而非Rust，是因为作者对性能更关心一些，他认为C更好。还介绍了一些前端架构的优化原则。\nLLVM后端性能。作者测量了LLVM后端各个编译阶段的性能，顺带阐述了LLVM的构建流程。\nLLVM构建流程：\nSetup。初始化有关目标计算机，数据布局和全局上下文的信息。这个阶段的执行时间是固定的，不会随着源程序的增大而变长。\nGen LLVM IR。Cone和LLVM的混合阶段，作者的Cone编译器会生成LLVM IR，就像Rust一样。同时作者也实现了一个Cone IR，类似于Rust的MIR。但Cone可能比Rust更快一些，因为没有Rust这么多分析。\n验证LLVM IR。这个过程是对LLVM IR的有效语义进行分析。确保IR的格式正确、通过类型检查，其算法复杂度为O(n)，与LLVM IR节点的数量成正比。\n优化LLVM IR。将执行6次LLVM优化：将栈变量转换为寄存器、函数内联、窥孔优化（peephole optimization）、位操作优化（bit twiddling）、公共子表达式消除和控制流程简化。一些优化过程可能是O(n)，但某些复杂的可能是指数级的。\n生成目标，并将其存储于磁盘。此阶段占整个LLVM运行时间的73%。\n小百科窥孔优化可以在四个方面寻找优化机会：冗余指令删除，包括冗余的load和store指令以及死代码(不会执行的代码);控制流优化；强度削弱；利用特有指令。作者也从LLVM架构上探讨了LLVM缓慢的原因。并且作者还打算继续研究优化LLVM的方案以及替代LLVM的方案。更多详细请阅读原文。\nRead More\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编译器性能和LLVM"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#scientifc_computing #quantum_mechines科学计算库\nWafer\n科普伟大的物理方程（3）薛定谔方程\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wafer: 并行三维FDTD 薛定谔(Schrödinger)方程求解器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gifRead Morehttps://www.reddit.com/r/rust/comments/b9mdll/pixel_ferris_32x32/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"像素级Ferris动态表情"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mdbook\nmdbook-bookimport\nGuide\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mdbook-bookimport：支持从其他文件将代码或文本导入到mdbook中"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tui #termion由termion，tobj和nalgebra制作的独一无二的命令行3D软件光栅化工具。目前支持没有纹理或材质的OBJ文件格式。\nrust-slothgl\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-slothgl: 命令行3D软件光栅化工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Drone #UAV #Quadcopter #RCPlane状态：WIPufohttps://github.com/ajmwagar/ufo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"UFO: 用于无人机/无人机/四轴飞行器/RC航模的Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#erlang #supervisor #process该库从erlang supervisor树汲取灵感，它提供了构建监督进程树的机制，当进程重启率超过指定限制时，失败可以传播。旨在为服务/容器等提供稳定支持。\norderly\nDocs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"orderly: 可提供有序、受控的一组进程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#job新加坡公司，非远程。Witnet-将智能合约连接到任何外部数据源。\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Witnet Foundation： Rust区块链工程师招聘"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang #learningMini-TT是一个简单的依赖类型语言。minitt-rs是它的Rust实现，并且还提供了一个REPL。 作者是@ice1000\nminitt-rs\nMini-TT论文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"minitt-rs:  Mini-TT的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#async在最近的一条已merge的PR中，顺便列出了所有已被修复的async中已知的生命周期问题。rust/pull/59286https://github.com/rust-lang/rust/pull/59286\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-05 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」当前Async已经修复的问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#zalando本文描述了zalando公司从Scala转向Rust的成功故事。缘起：2016年该文作者作为Scala开发者加入了Zalando公司。半年后，他们打算开始做一个新的应用，与此同时，团队内商量该使用什么新技术，Rust就在这时被提及，同时他们也用Rust快速实现了原型，但是最后这个新应用被取消了。但Rust却成为了该团队的一门候选语言。碰壁：不久之后，Zalando的主要服务（Scala Web）出现了一些问题。在高负载情况下，应用程序出现了大量的内存占用，有时也会耗尽内存。所以他们起了一个念头：用Rust重写整个服务会怎么样？经过几天的实验，重写了该服务，测试以后发现比之前的scala程序有更好的延迟，内存和CPU也占用更少。而且可以处理更多的负载。这时，他们的领导友情提醒，Rust并不是团队的「官方」技术，如果要将此Rust程序正式上线到生产环境，可能会出现严重的风险。最后经过Zalando技术团队内部协商，Rust最终被决定为「评估」状态，所以这件事就又就此作罢了。破竹：事情在2017年中期实施新的服务产生了转机。他们准备实现一个简单的流服务，就是执行一些RESTful调用再将数据写入redis。领导再次对他们表示了关切：是否可以真的上生产环境？新人来了以后如何接手Rust？于是他们在接下来的几周内，重点分析了应用程序中可能出现的问题，并找出了如何使用Rust来避免这些问题，核心原因是Rust的安全性和生产力，而且使用Rust可以有效地利用资源。他们有计划使用k8s来运行pods节省成本。就这样和领导「推杯换盏」持续说服花了半年时间，接近年底的时候他们都不知道到底Rust能不能上生产。在2017年年底的时候，为了应对需求变化而对团队进行了重组。作者本来是6人团队，减少到4人。然后领导说：你们这是一个Rust团队。这真的是出乎了作者的意料。事情就这么落地了。他们从一个简单的CRUD项目开始逐步将旧的系统替换为Rust实现的新系统。最后，他们实现了最初的目标，将Rust引入了团队成为了「官方技术」。（也许这个故事可以给你一些启示，帮助你在公司内推广Rust）Read Morehttps://jobs.zalando.com/tech/blog/story-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"成功故事：Rust在企业领域的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://zhuanlan.zhihu.com/p/61340679另外，我给准备参与此人才计划的选择阅读《Rust编程之道》的读者，提供一些提高学习效率的建议。下图为检视阅读方法："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PingCAP Talent Plan 第二期火热来袭，线上课程全面开放！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DSL\nPart I\nPart II\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Rust中实现DSL的挑战"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#future #asyncRead Morehttps://www.viget.com/articles/understanding-futures-in-rust-part-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」理解Futrue Part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tensorflow #dl本文将引导你基于一些现有模型来使用rust和tensorflow完成面部识别。 使用的是名为mtcnn的预训练模型进行人脸识别。\nRead More\nmtcnn\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Tensorflow Rust进行人脸识别"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Zeroknowledgezexehttps://github.com/scipr-lab/zexe"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"zexe: 基于零知识证明的去中心化私有计算库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cryptoThemis 是一个高级加密服务库。它提供了复杂的加密方式用于各种基础架构平台，新版本增加了对Rust的全力支持。\nthemis\nRust-Howto\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"themis 0.11.1发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ONNX #TensorFlow #deeplearn对语音处理等实时应用也提供半实验性支持。tracthttps://github.com/snipsco/tract"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tract: 适用于TF和ONNX的小型推理引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cli文章介绍了如何使用Rust构建一个简化的cat命令Read Morehttps://www.demainilpleut.fr/your-first-cli-tool-with-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust编写你的第一个CLI应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sshtrapit类似于Endlessh，它会打开一个套接字并伪装成一个 SSH 服务器，非常缓慢地发送一个无休止的随机 SSH banner，使 SSH 客户端一次锁定数小时甚至数天。目的是将真正的 SSH 服务器放在另一个端口上，而在虚假的服务器上卡住入侵者，防止其影响到真正的服务器。tarsshhttps://github.com/Freaky/tarssh"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"trassh: 一个简单的SSH蜜罐"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang号称安全无痛地处理并发，主要是支持类Erlang轻量级进程来处理并发。inko-lang.orghttps://inko-lang.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Inko: Rust实现的面向对象语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#benchmarking这篇文章主要关注在Rust中如何创建令人满意的基准测试Read Morehttps://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-04 14:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和性能测试指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mesalink #opensslMesaLink TLS是百度安全实验室研发的下一代传输层安全(Transport Layer Security, TLS)库。正式支持TLS 1.3和IPv6，支持CMake编译，支持Windows，实现生产环境可用。Read Morehttps://mp.weixin.qq.com/s/O6rRwJGMGWuy7bziwul6eg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mesalink v1.0.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#diesel #sgrifSgrif在Rails社区服务了6年多，提交了1452个commit，重写了Rails 4.2的大部分库。对Rust产生兴趣之后，创建了Diesel库，Rust实现的ORM框架。2018年4月，接手管理crates.io，但是2018年10月他从Shopify公司离职，想全职投入Rust社区。他现在想要以下支持：\n一份来自大公司的赞助，以便支持crates.io的维护。\n一份可以兼职的工作，以便维持生计。\nRead Morehttps://blog.seantheprogrammer.com/moving-on-from-rails-and-whats-next"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Diesel的作者离开了Rails准备全职投入Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#linux可替代Linux用户空间，但目前只是简陋版。\nReddit 讨论\nlens-os.gitlab.io\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lens: 纯Rust实现的Linux用户空间"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#DI支持编译时依赖注入aerosolhttps://github.com/Diggsey/aerosol"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"aerosol 0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#serialization #deserializationdessehttps://github.com/devashishdxt/desse"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"desse: 用于编译时已知大小类型的超快序列化库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mipsMIPS汇编常用于教学目标，MIPS指令集属于精简指令集mips-simulatorhttps://github.com/salahsheikh/mips-simulator"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mips-simulator: Rust实现的MIPS汇编模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#redis由国内Rust社区成员 @黄光星 开发undermoonhttps://github.com/doyoubi/undermoon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"undermoon: 支持Redis集群的Server端Redis代理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#asyncRead Morehttps://dev.to/gruberb/explained-how-does-async-work-in-rust-46f8"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"解释：Rust异步如何工作？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#TypeSystem该库是对论文《Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism》的实现\nBidirectionalTypechecking\nComplete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"“高阶多态双向检查”的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#String该库提供了BString和BStr两种字符串类型，与标准库的String和str类型的不同之处在于它们不需要是有效的UTF-8。该库不是对标准库Sring的包装，值得看看源码。bstrhttps://github.com/BurntSushi/bstr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bstr: 提供不需要验证UTF-8有效性的字符串"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#concurrent #HazardPointer问题：在多线程程序中，某线程通过一个指针访问一段内存时，如何保证指针所指向的那块内存是有效的？普通青年： 加锁。文艺青年： 无锁实现，使用HazardPointer。二逼青年： 根本没有意识到这是个问题。HazardPointer可以理解为是一种线程安全的智能指针。相比于crossbeam-epoch的基于代的回收方案效率更低。但如果追求回收的可靠性，HazardPointer更可靠点。\nhazptr\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hazptr: 基于Hazard指针的并发内存回收"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#C针对这篇文章「Rust不是一个好的C替代品（Rust is not a good C replacement）」引发的讨论。\nRust is not a good C replacement\nReddit讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「讨论」Rust是不是一个好的C替代品？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#javascript #lexing该篇文章分享了如何使用Rust实现一个基于状态机的高性能的JS词法分析器。\nRead More\njavascript-es9-parser\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"高性能JavaScript词法分析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#job要求懂得Go或Rust。该团队成立15个月，有6名团队成员，工作主要是区块链相关。公司在美国西海岸，可全职远程。Read Morehttps://blockchain.works-hub.com/jobs/remote-cryptonomic-software-engineer-1f007?utm_source=reddit&utm_medium=chorus%20one&utm_campaign=j.gretton"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「远程工作」Chorus One寻找加密软件工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#erlang长文。关键问题：为什么选择Rust来实现Gleam编译器？ （而不是选择erlang / elixir等）Gleam最初是用Elixir来写的，但很快又换成了Erlang，后来他想要重构代码但是意识到，没有一个好的静态类型来帮助它纠正设计中的错误，所以就对重构失去了信心。后来选择了Rust，花了3个月时间重构了，功能大致相同，但是有更少的错误和更少的技术债务。Rust是实现编程语言的好语言吗？作者表示Rust不错，很适合。并且用Rust实现Erlang VM之后启动和加载各种模块不再有延迟。但是他认为，Rust还不是实现编程语言的完美语言，主要是编写类型检查的代码让他很沮丧。但总的来说，他对自己用Rust的决定还是挺满意的。Read Morehttps://notamonadtutorial.com/an-interview-with-the-creator-of-gleam-an-ml-like-language-for-the-erlang-vm-with-a-compiler-e94775f60dc7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"采访Gleam的作者：使用Rust编写Erlang VM"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#interviewAshanti是一名女性Rust开发人员和一位艺术家，就职于Holochain。 感兴趣可以看看。Read Morehttps://www.tripwire.com/state-of-security/featured/women-nonbinary-ashanti/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-03 14:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ashanti 专访"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"提议整个Rust项目由bors机器人管理。https://github.com/rust-lang/rfcs/pull/2671提议将Cow来默认导出  （这个我真信了）https://github.com/rust-lang/rfcs/pull/2672信了你就瓜了。:)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/rfcs/pull/2672"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"愚人节 RFCs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"COSCUP 2019 - Aug 17th-18th. NTUST, Taiwan 無論您是開放原始碼的開發者、推廣者、使用者、還是想了解軟體的新手，都歡迎您來參加為開放原始碼開發者、使用者和推廣者舉辦的「開源人年會」。欢迎大家投稿前来台湾演讲。Read MoreCOSCUP 2019https://blog.coscup.org/2019/04/2019-cfp-open.html#rust?tdsourcetag=s_pcqq_aiomsg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"台湾 COSCUP 開源人年會"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这种字符串类型不要求字符串必须是 UTF-8 的，也就是说，任意字符串值都可以。作者设计的时候，与标准库的 String 和 str 是对应的，还提供了一些对应的 trait。Read Morehttps://github.com/BurntSushi/bstr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bstr - 不要求是 UTF-8 的字符串类型库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者只是为了好玩儿和教育目的？Read Morehttps://github.com/chrisdickinson/git-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"git-rs  -  用 rust 重新实现的 git"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可能是（世界上）最快的 Windows XML Event Log 解析器了。Read Morehttps://github.com/omerbenamram/evtx作者还做了一个 py 的封装。Read Morehttps://github.com/omerbenamram/pyevtx-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"evtx - Windows XML 事件日志解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本次是作为 Apache Arrow 的一部分发布的。目前有几大特性支持：\nParquet 支持\n自定义数据源支持\n实验性数据帧风格 API\nQuery 优化\nRead Morehttps://andygrove.io/2019/04/datafusion-0.13.0/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"DataFusion 0.13 发布了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Post 1Post 2https://hermanradtke.com/2019/04/01/wasi-example-using-rust-and-lucet.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"已经有人写了 WASI 和 Lucet 的两篇使用文章"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Repohttps://github.com/lpil/gleam一个采访文章Read Morehttps://notamonadtutorial.com/an-interview-with-the-creator-of-gleam-an-ml-like-language-for-the-erlang-vm-with-a-compiler-e94775f60dc7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gleam - Erlang 虚拟机之上的ML语言，由 Rust 实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"好东西，强制你的工程中的文件名的命名规则，作为一个工具帮助你检查。Repohttps://github.com/bloom42/flint"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"flint - 强制文件命名规则工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不过看起来好像还很嫩。Rust 目前为止还没有一个靠谱的原生 GUI 库。Repohttps://github.com/KenSuenobu/rust-pushrod/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pushrod - 基于 piston_window 的 GUI 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库是 cunicorn CPU 模拟器的 Rust 绑定。现寻求维护者。感兴趣的可与作者联系。Repohttps://github.com/ekse/unicorn-rs\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-02 13:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"unicorn-rs 寻找维护者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#algo台湾同胞搞的Rust学习算法的教程rust-algo.clubhttps://rust-algo.club/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust算法俱乐部"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#x11cnxhttps://github.com/mjkillough/cnx/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cnx：用Rust实现的X11状态栏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustsim简要：\nalga 0.9 和 nalgebra 0.18开始支持复数\n并且与＃[no-std]保持兼容\nnalgebra开始在几何代数上添加对三角函数和卷积的支持等等。\nRead Morehttps://www.rustsim.org/blog/2019/04/01/this-month-in-rustsim/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustsim 报告 #5"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n为了更健康的crate生态，准备提供一个审查工具，帮助用户剔除掉一些依赖包\n语言简化。 考虑删除过程宏功能，准备汲取Zig语言的编译器动态反射来替代当前的过程宏。另外，还要放弃ref和mut修饰符，用于简化用户的开发体验。\n为了进一步增加安全性，将会添加： 依赖类型和有状态视图的支持。依赖类型有助于提升代码安全性，有状态视图有助于减少unsafe代码的使用。\n编译器改进。考虑让rust编译器比gcc编译的更快。\n欢迎你的反馈。祝大家愚人节快乐。Read Morehttp://antoyo.ml/future-of-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2.0要开始筹备了，主要目标有："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#mock写单元测试的时候经常需要mock一些场景，比如访问外部服务。但是传统的mock服务是在测试代码中创建一些模拟的对象。Rust中的一些mock框架也是类似的做法，参加「mock框架比较」。但是最大的问题是无法mock出代码中使用的外部结构。Rust中没有继承的概念，所以无法mock出标准库或者外部包中使用的结构类型。有一种解决办法是用trait或泛型，但是这种方法可能会使代码更复杂。而另一种方法则是利用条件编译，这也是本文作者想要介绍的。在测试的时候使用fake_clock的mokc对象，而非测试的情况则使用Instant。但这样也有一些缺点：\n所有测试用例共享一个mock，但是如果每个测试用例需要不同的mock行为，则需要想想其他策略\n更加需要集成测试。\n在使用该文作者编写的http mock库mockito就可以使用条件编译：\nRead More\nmockito\nRust社区mock库比较\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust的条件编译来实现Mock功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RabbitMQamiquiphttps://github.com/jgallagher/amiquip"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"amiquip: 纯Rust实现的RabbitMQ客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rfcdiesel作者发起的这个RFC感觉比较接地气。从标准库中重新导出std::borrow::Cow，以鼓励其可以得到更广泛的使用。RFC 2672https://github.com/rust-lang/rfcs/pull/2672"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RFC 2672: Re-export Cow from prelude"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#elixir #js他发帖主要是想寻求一个快速学习的方法，如果有同样需求的初学者，可以看看讨论区的回复。Reddit 讨论https://www.reddit.com/r/rust/comments/b7qjmq/elixirjavascript_programmer_thinking_of_switching/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个Elixir/Javascript程序员准备切换到Rust的思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#yarte #actixyarte号称最快的模板引擎，之前和Askama模板的作者有过Lisense相关的争议。\nRead More\nyarte\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"yarte 0.2 现在支持actix-web 1.0.0-alpha"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hugo主要用来给Hugo静态站点提供搜索，目前该库请求review。HugoToJSONhttps://github.com/arranf/HugoToJSON"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"HugoToJSON: 用于生成Hugo文档的关键内容的json"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人在Reddit发布了一首歌的歌词：「用Rust重写」Reddit 讨论贴https://www.reddit.com/r/rust/comments/b7thxz/april_fools_rewrite_in_rust_lyrics/但好像没什么人参与讨论。。。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「愚人节之歌」 用Rust重写"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#STM #seqlocksseqlocks（顺序锁）对读写锁的一种优化。使用顺序锁，读执行单元绝不会被写执行单元阻塞，也就是说，读执行单元可以在写执行单元对被顺序锁保护的共享资源进行写操作时仍然可以继续读，而不必等待写执行单元完成操作，写操作也不需要等待所有读执行单元完成读操作才去进行写操作。用于受保护的资源很小，简单且经常访问，适用于写操作很少但必须很快的场景。Linux内核处理中断的函数使用了seqlock。该文作者也是实验性软件事务内存库swym的作者，swym是对seqlock的一种实现，基于Transactional Locking II 论文。\nRead More\nswym\nTransactional Locking II 论文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"介绍Seqlocks"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#monad「长文预警」本文作者描述了一种在Rust中表达Monad的新方法，用于证明在Rust中实现Monad的可行性。作者说这是他见过的最简单的设计。Read Morehttps://varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-04-01 14:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的惯用monad"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从下周开始将由ChaosBot、Mike和Damody三位轮流发布日报，其中Damody为台湾同胞，如果大家看到中文繁体日报，就是他发布的。发日报有什么好处？我来给大家透露一下。至少有三点好处：所以，也欢迎大家参与Rust日报的内容建设中。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust日报小组成立"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#job_queue使用Rust/Actix/Redis实现。据作者称已经用于生产环境几个月，每周处理数百万个任务。特点：\n\n语言无关\n\n\n使用redis\n\n\n使用HTTP/JSON协议\n\n\n提供HTTP接口\n\n\n灵活的工作元数据\n\n\n失败时自动重试\n\n\nocypod\n\n\nDoc\n\n语言无关使用redis使用HTTP/JSON协议提供HTTP接口灵活的工作元数据失败时自动重试ocypodhttps://github.com/davechallis/ocypodDochttps://ocypod.readthedocs.io/en/latest/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ocypod: 基于Redis的任务队列服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Variance简单讨论了泛型参数的协变和声明周期参数中的子类型概念。Read Morehttps://ehsanmkermani.com/2019/03/16/variance-in-rust-an-intuitive-explanation/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中型变（Variance）的直观解释"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#proc_macro一个简单的过程宏入门教程Read morehttps://dev.to/naufraghi/procedural-macro-in-rust-101-k3f可以配合Dtolnay的proc macro workshop来学习。该workshop是Dtolnay为Rust Latam Conf准备的。proc-macro-workshophttps://github.com/dtolnay/proc-macro-workshop"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"过程宏 101"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#learn该文作者在他博客里记录下来他学习Rust中感觉困难的部分，主要是所有权相关内容，以便帮助后来者。Read Morehttps://naftuli.wtf/2019/03/20/rust-the-hard-parts/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列文章」Rust学习中的障碍 Part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RaptorQ课外知识：喷泉码是一种特殊的前向纠错码（FEC），其理论特征十分简单：如果想发送的数据大小为K个数据包的大小，通过喷泉码编码后可以产生并实际发出K+X个数据包，而接收方只需要这其中的任意K个数据包就可以重建原数据。超出原始数据大小的X个数据包理论可以无穷多地生成，因此可以通过调整X的量以适应不同环境不同丢包率的需求。RaptorQ（以下简称RQ）作为喷泉码的一种，同时也是系统码（Systematic Code）。这意味着一组数据如果通过RQ进行编码，生成的前K个数据包将与输入数据完全一致。我们称这K个数据包为源码符（source symbols）。而基于源数据额外生成的X个数据包，我们称之为修复码（repair symbols）。修复码被用于恢复在传输过程中丢失的源码符。因此，如果传输过程中没有丢失任何源码符，不需要任何解码运算就可以获重建源数据，可以节省时间与内存占用。这种特性也是系统码的一大优点。RQ码的某个实现方法高通公司写入RFC6330。可用于视频传输。在本文中，作者给出了他用Rust实现RQ库的优化历程，包括：\n\n使用unsafe和SIMD\n\n\n使用ArrayMap替换HashMap\n\n\n使用cfg(debug_assertions)禁用某些验证检查\n\n\n更新算法、删除了很多clone调用、使用位图等替换HashSet，在这部分内容作者提到，他最初对借用检查器感到非常沮丧，但是熟悉以后他认为借用检查器不仅仅是有助于所有权，而且还有助于理解性能。\n\n\n将petgraph库替换为自定义的实现\n\n\n课外知识参考文章\n\n\nraptorq\n\n\nRead More\n\n使用unsafe和SIMD使用ArrayMap替换HashMap使用cfg(debug_assertions)禁用某些验证检查更新算法、删除了很多clone调用、使用位图等替换HashSet，在这部分内容作者提到，他最初对借用检查器感到非常沮丧，但是熟悉以后他认为借用检查器不仅仅是有助于所有权，而且还有助于理解性能。将petgraph库替换为自定义的实现课外知识参考文章https://canmipai.com/index.php/2017/09/05/fountain_codes_and_librq/raptorqhttps://github.com/cberner/raptorqRead Morehttps://www.cberner.com/2019/03/30/raptorq-rfc6330-rust-optimization/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RaptorQ（RFC6330）与Rust性能优化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gdb #tuiugdb是gdb的替代TUI前端，unsegen是一个建立在termion之上的TUI库。\nRead More\nugdb\nunsegen\ntermion\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"宣布ugdb和unsegen"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tips如果你已经知道了，就当作者没说过。Read Morehttps://saghm.github.io/five-rust-things/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"别人不会告诉你的关于Rust的五件事"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmLucet是一个本地WebAssembly编译器和运行时。它旨在安全地在应用程序中执行不受信任的WebAssembly程序。lucethttps://github.com/fastly/lucet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lucet: 沙盒WASM编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#elasticsearch不错的项目。快速，轻量级和无架构的搜索后端。 Elasticsearch的替代方案，可在几MB的RAM上运行。sonichttps://github.com/valeriansaliou/sonic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sonic: 搜索后端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#WireGuard #userspace #vpnWireGuard是一个科学上网的解决方案。boringtun是它的用户态Rust实现。boringtunhttps://github.com/cloudflare/boringtun"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"boringtun: Rust实现的用户态WireGuard"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#graphic_render该库解决了图形渲染中动态批处理性能问题。guillotierehttps://github.com/nical/guillotiere"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"guillotiere: 快速释放和矩形合并的动态纹理图集分配器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#uCore #OS目前刚支持gcc,nginx,redis等（基于musl libc）在rcore上运行。rcore_plushttps://github.com/oscourse-tsinghua/rcore_plus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rcore_plus: 清华大学uCore OS的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#nix_shelllorrihttps://github.com/target/lorri"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lorri: nix-shell替代品"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #Cloudflarewrangler是一个CLI工具，专为有兴趣在Cloudflare Workers上使用Rust生成的WebAssembly的用户设计。wranglerhttps://github.com/cloudflare/wrangler"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wrangler: 方便在cloudflare worker上使用wasm的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#awesomeawesomo-rusthttps://github.com/lk-geimfari/awesomo/blob/master/languages/RUST.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"awesomo-rust: 按英文字母索引排序的Rust知名项目列表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #wasm\nRustyVolleySrc\ndemo\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-31 22:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustyVolleySrc: 使用Rust和WASM实现的排球游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://www.reddit.com/r/rust/comments/b6qb9y/face_detection_with_tensorflow_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-30 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用rust與tensor來做臉部辨識"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基於actix來實作，目前看起來功能還沒有 beanstalkd 之類的老牌 job queue 完整不過效能應該是可以期待的，使用json來溝通如果之後能直接支援 protobuff 就好了畢竟json比protobuff慢多了Read morehttps://www.reddit.com/r/rust/comments/b6wxvj/ocypod_languageagnostic_redisbacked_job_queue/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-30 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ocypod: 一個用Redis來備份的工作佇列"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Intel SGX 是 x86 延伸指令集。Intel SGX 功能於現有的虛擬記憶體管理位置之中，切出 1 塊專門供 Intel SGX 技術使用的空間，稱之為 enclave，被放進此空間的程式資料將封鎖非法存取。若想要使用此功能，除了支援的硬體之外，作業系統和應用程式也必須支援此功能。Read morehttps://www.reddit.com/r/rust/comments/b6xkmu/state_of_sgx/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-30 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sgx sdk 1.0了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天是 Rust Latam Conference，但我沒去。這很重要，因為之前的每一次我都有去！在過去四年中舉行了十三次Rust會議。作者講了一大堆的話，簡單來說就是作者很熱心的去過去每一次的Rust會議盡可能的跟大家討論這一次作者也很想去，但是因為工作的原因沒辨法去，但是他覺得這一次他覺得rust在沒有他的情況下也運作的很好他的團隊在生產中使用了Rust一段時間，他感覺很棒！他在過去幾年盡量回答了網路上有關rust相關的問題但他現在也慢慢看開了。並想知道Rust的下一階段是什麼感覺。Read morehttps://www.reddit.com/r/rust/comments/b6zb6h/rust_has_finally_outgrown_me/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-30 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust 终於超越了我"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看就對了Read morehttps://www.reddit.com/r/rust/comments/b72zpb/five_super_helpful_rust_things_that_nobody_told/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-30 13:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"5個你一定要知道的rust的小技巧"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"昨天，Mozilla 发布了 WASI 规范，今天，Fastly（一个云基础设施服务商）就发布了 WASI 的一个实现 Lucet。https://rust.cc/article?id=2a372fd7-336c-485a-a569-fb8836f3b2cbFastly 把 Lucet 用在边缘计算上，Lucet 具有极小 runtime，可以在几 us 内加载，只占用几 K 的内存，这样就特别适合用在他们的云服务边缘计算上。WebAssembly 生态正在以不可思议的速度前进，强力！Read MoreRead More 2https://www.fastly.com/blog/announcing-lucet-fastly-native-webassembly-compiler-runtime"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：Fastly 发布 Lucet：本地 WebAssembly 编译器和运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"很有意思。Read Morehttps://github.com/nerdypepper/eva"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"eva - 一个交互式的计算器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Steve Klabnik 开始学习 ada 了。真是一个狂热的语言爱好者。下面是他学习过程中的一些记录，从 Rust 程序员的角度来总结的。Read Morehttps://words.steveklabnik.com/learning-ada"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Learning Ada (from a Rust perspective)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"就是完全用 Rust 开发网站前端的框架。作者立的 flag 是简单，快速。RepoApp RepoRead Morehttps://github.com/rbalicki2/smithy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Smithy - 又一个 WebAssembly 开发框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"wrangler 是一个用于构建预览和部署 CloudFlare Workers 的命令行工具。这些 workers 由 webassembly 形式执行。整个工具由 Rust 写成。看来 CloudFlare 对新技术（Rust, wasm）的确很狂热。这种感觉很棒！Read Morehttps://blog.cloudflare.com/introducing-wrangler-cli/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CloudFlare 发布了 wrangler"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"玩耍地址在这里https://rustyvolley.github.io/WebDemo/Read Morehttps://github.com/RustyVolley/RustyVolleySrc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustyVolley - 一个 Rust wasm 开发的游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sled 是一个 Rust 写的嵌入式数据库，质量相当不错。作者用了一段时间后，想了解里面的实现，就开始了这个学习和审阅过程。Read Morehttps://ayende.com/blog/186753-A/reviewing-sled-part-i"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对 Sled 代码的学习和审阅"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此项目目标是成为一个广泛使用的 Rust 静态分析工具。Read Morehttps://github.com/facebookexperimental/MIRAI"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MIRAI - Rust MIR 的抽象解释器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://cetra3.github.io/blog/face-detection-with-tensorflow-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Tensorflow Rust 绑定进行人脸检测"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"后面组织翻译一下。Read Morehttps://www.reddit.com/r/rust/comments/b664x5/what_are_the_implications_of_not_having_a_memory/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-29 12:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于内存模型的讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"BoringTun 是一个用户空间的 WireGuard® 协议 Rust 完整实现。https://www.wireguard.com/而 WireGuard 是一种新协议，尝试替代老旧的 VPN 协议（科学上网的同学了解其中的意义了），基于 UDP。CloudFlare 的程序猿考察了一遍市面上的现有库，觉得都不满足要求，然后就撸起袖子自己干了。（估计主要是因为这些程序猿是 Rust 狂热分子吧，也难怪，因为被坑过）https://blog.cloudflare.com/incident-report-on-memory-leak-caused-by-cloudflare-parser-bug/话说，这样一种底层库，Rust 一出，谁与争锋。没有更适合的语言来写这种库了。关于这个起命的来源，跟 google 的 BoringSSL 有关系。https://boringssl.googlesource.com/boringssl/RepoRead MoreRead More 2https://github.com/cloudflare/boringtun"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：CloudFlare 发布 BoringTun"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"WASI 是 WebAssembly 在 Web 外的系统接口。也就是说这个标准一旦完成，那么 WebAssembly 作为一种通用汇编语言的时代就到来了，或者说，又一个通用虚拟机出现了（想想当年 Java 的愿景：一次编译，到处执行）。Read Morehttps://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/?utm_source=tuicool&utm_medium=referral"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：Mozilla 开始 WASI 标准化努力"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者会一直跟踪最新的图形后端的绑定。Read Morehttps://github.com/rust-skia/rust-skia"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-skia - 到 Skia 图形库的绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对，1Password 就是跨平台存储密码那个工具。他们测了三个库，go publicsuffix，rust publicsuffix 和 rust psl，结果如下：测试代码在这里。https://github.com/1Password/publicsuffix-benchmarks然后，rust publicsuffix 和 psl 的作者（同一个）解释了为什么推荐用后者。Read MoreRead More 2https://www.reddit.com/r/rust/comments/b65t5o/comparing_performance_of_the_publicsuffix_and_pls/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"1Password 测了 public suffix list 的几个库的性能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://www.parity.io/jobs/#berlin-database-engine-developer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Parity 在柏林招数据库引擎工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"没有用 oi用了 oi效果不错。Read Morehttps://github.com/casey/oi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"oi - 一个用于标注出位置的错误类型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详细列举了一些有用的工具和建议，后面我们会全文翻译Read MoreRead More 2https://crafterscircle.io/rust/coding/2019/01/18/tips-for-rust-beginners/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"给初学者的 Tips"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Gloo 是一个模块化工具箱，目标是用 rust 和 wasm 创建快速，可靠的 Web 应用程序。RepoRead Morehttps://github.com/rustwasm/gloo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-28 18:42"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gloo 更新进展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个事件源数据库跟 Kafka 或 Rabbit MQ 类似，但是会把事件存储在磁盘上，没有上限。这个数据库服务的一个作用是，把一个流的所有事件发布给所有订阅客户端（事件按接收顺序存储）。一个客户端可以指定从哪一个编号的事件开始读取，这样就可以仅仅通过读取新事件消息来从崩溃状态中恢复。不过，MeiliES 也可以做消息队列使用？MeiliES 内部用了 sledhttps://github.com/spacejam/sledRepoRead MoreRead More 2Read More 3https://github.com/meilisearch/MeiliES"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-27 15:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：MeiliES - 事件源数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Miri 是一个实验性的 Rust MIR 解释器。它可以运行 Rust 二进制文件，对其进行测试，可以检查出某些未定义的行为 ref。https://github.com/rust-lang/miri#readme用 rustup 添加了 miri 后，你就可以以慢速、解释模式来运行你的测试套件了：在运行上述命令之前，请先执行一次 cargo clean。Read Morehttps://www.ralfj.de/blog/2019/03/26/miri-as-rustup-component.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-27 15:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Miri 已经可以当作 rustup 组件添加了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"得fq才能看的。Read Morehttps://www.youtube.com/watch?v=V-Oa5Td_a3A&feature=youtu.be"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-27 15:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"讲解过程宏规则的视频"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个牛逼的库，故而再发一次。很多人说过，Rust 在大数据领域其实是一个很有潜力的竞争者，但是在被 Java/C++ 垄断的领域，后来者 Rust 如何能在已经非常成熟的这个领地抢占吞噬一块自己的根据地。只能靠两点了：而 Sonic 就是这样一个可以逐渐替换 Elasticsearch 的库。上线宣传短短两天，收获2000+ stars。对 Rust 在大数据领域的发展充满信心。Read Morehttps://github.com/valeriansaliou/sonic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sonic"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"也是大数据领域的一个进展。Read Morehttps://github.com/apache/arrow/tree/master/rust/datafusion相关的还有\nbarrel\nsqlparser-rs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"发现 Datafusion 已经进入 Apache Arrow 的官方库了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"与 Actix 的区别是，这是基于线程实现的。作者认为它有它的适用场景。Read Morehttps://github.com/movie-rs/movie"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"movie - 另一个 Rust Actor 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"下面链接有 Pauan 兄弟的介绍。Read Morehttps://internals.rust-lang.org/t/welcome-pauan-to-the-rust-and-webassembly-domain-working-group-core-team/9707"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pauan 进入 Rust WebAssembly 官方工作组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个 GUI 程序，用 Glium 和 imgui-rs 实现。效果酷炫叼。Read Morehttps://github.com/jherman3/ifs_fractal"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个分形演示器 ifs_fractal"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read Morehttps://internals.rust-lang.org/t/kickstarting-a-database-wg/9696"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于成立一个数据库工作组的想法和讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"go 的 blackfriday，rust 的 comrak 和 pulldown-cmark（google那个）性能测试，发现 pulldown-cmark 最快。说的是最新 0.4 版以及后面的版本还有大优化，会有更好的性能。Read Morehttps://www.reddit.com/r/rust/comments/b5cul0/benchmarking_markdown_libraries_comrak/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"几种 markdown 库的性能评测："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是用 web assembly 写的一个命令行，用于加载执行其它 web assembly 模块。其实也是属于 web-dom 项目中的一个工具。作者脑洞很大，想法相当不错。这个可以怎么玩儿？Link0Link1Link2https://web-dom.github.io/wash/examples/helloworld/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-26 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wash - web-dom 的作者新玩意儿"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我們又回來了經過了一年又四天終於進版了大部份時間團隊都在忙 relibchttps://gitlab.redox-os.org/redox-os/relibc目前看到的亮點是 redox 同時支援winit 與 cairo ，看來是想通吃windows與linux的 GUI library?感覺redox要往gui os 的方向發展#redoxRead morehttps://www.reddit.com/r/rust/comments/b51ec3/redox_os_050/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-25 20:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Redox OS 0.5.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#firefoxRead morehttps://www.reddit.com/r/rust/comments/b50435/firefox_shortcuts_for_rustaceans/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-25 20:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"教你如何用 firefox 快速搜尋 rust 文檔"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#gc簡單看了一下，只有rcgc有寫使用說明，另外兩個沒寫說明crossbeam-epoch可以在no_std + alloc的環境使用有範例程式https://github.com/crossbeam-rs/crossbeam/blob/master/crossbeam-epoch/examples/sanitize.rsRead morehttps://www.reddit.com/r/rust/comments/b51zk7/garbage_collection_libraries_gc_rcgc/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-25 20:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"垃圾回收庫 - gc, rcgc, crossbeam-epoch"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#STM作者用序列鎖的方式來做裡面有寫教學，常寫多線程的同學可以來看看怎麼做的Read morehttps://www.reddit.com/r/rust/comments/b52db6/generalizing_seqlocks_the_swym_algorithm/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-25 20:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一個幫忙處理記憶體交易的庫 swym"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"幫助你在用生成器模式寫範型時，對抗編譯器無法推導型別的情況#typeRead morehttps://www.reddit.com/r/rust/comments/b547dt/the_phantom_builder/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-25 20:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Phantom builder"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#debug #vscodeRead morehttps://www.reddit.com/r/rust/comments/b569qk/how_to_debug_rust_with_visual_studio_code/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-25 20:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在vs code 去debug rust?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個小巧跨平台，產生random變數的庫可以產生一個buff長度的亂數"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-24 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"getrandom crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"從1.75進步到0.6秒Read morehttps://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-24 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pidigits在rust 1.33變成原來的三倍快"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個高效的流量產生器可以產生成千上萬的封包做模擬Read morehttps://github.com/Gymmasssorla/anevicon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-24 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Anevicon"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這是一個轉換程式碼格式的工具可以轉換 FooBoo => foo_boo 這種變數名轉換工具看起來蠻好用的Read morehttps://github.com/iboss-ptk/ficon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-24 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ficon"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者說這個引擎已經整合在 Crisp platform跟elastic search 一樣強，但只需要少少的RAM跟CPURead morehttps://www.reddit.com/r/rust/comments/b4hn69/fast_lightweight_search_engine_an_alternative_to/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-24 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sonic 一個快速輕量的搜尋引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"群友 @Lmhx大弱鸡 创作的一个 Vulkan 教程。分享。https://lemonhx.github.io/When-Vulkan-meets-Rust-Web/希望社区出现越来越多的原创。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"当 Vulkan 遇上 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"（昨天发过了，因为好用，所以再发一遍 ：D）漂亮的想法！下面看看怎么用，非常简单，比如下面这个代码：在里面设一个断点：然后运行程序，就会出现：然后用 gdb 就可以调试程序了。目前这个还只能在 Linux 下用，作者很快会适配 Windows和 MacOS。Read Morehttps://github.com/ethanpailes/debug-here"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"debug-here - 用于在程序运行过程中调起调试器来进行调试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Linkhttps://github.com/net-reflow/reflow/tree/master/asocks5/examples"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个使用 async 和 await! 的 socket 操作的例子（基于 tokio）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"顺便学习一下英语。LinkPdfhttps://softwareengineeringdaily.com/2019/03/06/webassembly-execution-with-syrus-akbary/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 WebAssembly 的一个讲座，主讲人口音非常清晰"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"教你如何在 Rust 实现链表，升阶必读，墙裂推荐。Read Morehttps://rust-unofficial.github.io/too-many-lists/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Learn Rust With Entirely Too Many Linked Lists 更新到 2018 Edition 了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"无船同志在这个视频中有一个比较精彩的讲解 Linkhttps://www.youtube.com/watch?v=AI7SLCubTnk&feature=youtu.beLink1Link2Link3Link4https://www.reddit.com/r/rust/comments/b4a4fu/what_are_the_technical_reasons_for_the_orphan_rule/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于孤儿规则技术决策的讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rusty clock 是一个嵌入式设备展示的入口。之前日报报道过。https://github.com/TeXitoi/rusty-clock在 Rust 嵌入式工程中，在 main 函数执行之前会发生什么，一个讲座https://www.youtube.com/watch?v=RIHVoNDxNuk用 Rust 在 stm32 上进行中断编程https://flowdsp.io/blog/stm32f3-01-interrupts/把 Rust 在 TI SensorTag 上跑起来 Linkhttps://www.wezm.net/technical/2019/03/sensortag-embedded-rust-coding-retreat/及其它 embedded-hal 生态的更新。Read Morehttps://rust-embedded.github.io/blog/newsletter-17/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式工作组第 17 周周报发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"已经有明显进步了。Rust 正在发挥它的威力。之前提到的 copyless 库会给它带来更大提升空间。https://github.com/kvark/copylessRead Morehttps://gfx-rs.github.io/2019/03/22/dolphin-macos-performance.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gfx-portability 在 MacOS 的 Dolphine 模拟器上的性能评测"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者的一轮考察及讨论。Linkhttps://www.reddit.com/r/rust/comments/b463rg/are_we_database_yet/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-23 14:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Are We  Database Yet?"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者發了一個好用的小工具可以在指定行號跳到debugger可惜的是目前只支援LinuxRead More ...https://www.reddit.com/r/rust/comments/b3ygxd/ann_debughere_022/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-22 19:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"debug-here 0.2.2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這禮拜有關WebAssembly裡面包含了前幾天介紹的dodrio: 基于Bump内存分配的虚拟Dom实现https://rust.cc/article?id=6a5a2ee3-1373-4184-be5e-8a138f82c7d3seed 0.3版發佈了https://github.com/David-OConnor/seed/blob/master/CHANGELOG.md#v030這是一個幫忙製作rust wasm 的小工具0.3版更新了Async等一些事件新功能，並修正許多bugweb-dom - 方便 Rust webassembly 访问 DOM 的库https://rust.cc/article?id=4aaed6e7-8b8a-47bd-affc-5e14ef653d7dEnsembl 2020要使用rust+wasm打造他們的產品Ensembl將會是一個視覺化基因的軟體https://twitter.com/ensembl/status/1106140169575514113actix專案已經被成功移值到wasm了！https://users.rust-lang.org/t/another-small-step-to-wasm-compatibility-actix-actors-in-the-browser/26318Demo: 一個即時偵測音高的網頁程式，而且有庫可用https://twitter.com/alesgeno/status/1107662063168614400Godbolt編譯器可以顯示wasm反組譯碼，有漂亮的上色並顯示rust程式怎麼編譯成wasm組語的https://rust.godbolt.org/z/PZqG56"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-22 19:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust and WebAssembly 14"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在寫程式時當你要寫這種函數時通常都要回傳self，但在rust馬上就會遇到所有權問題，來看看作者怎麼解決的Read More ...https://randompoison.github.io/posts/returning-self/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-22 19:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"教你怎麼在鏈式呼叫中不回傳自己"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這個作者寫了一個比dd更好用的區塊資料複製程式然後開始覺得dd取名取的很奇怪blablabla所以講了一大堆為什麼取名叫bcp的原因Read More ...https://www.reddit.com/r/rust/comments/b3res0/announcing_bcp_a_block_copy_program_for_when_dd/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-22 19:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"叫我bcp之我要打爆dd"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這個作者寫了一個SAT solver來解NP問題這個程式的名字叫Varisat這是一個系列blog的第四篇我自己對SAT也不熟就不誤導大家了Read More ...https://jix.one/refactoring-varisat-4-heuristics/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-22 19:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Varisat: 4. Heuristics (SAT solver written in Rust)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"fulmicoton 今天发布了 Tantivy 0.9 正式版本。https://github.com/fulmicotonTantivy 是对应于 Apache Lucene 的 Rust 实现的全文搜索引擎。新版本有许多变化。更快，更安全，更强。下面是更新日志：\n一些内存泄漏的错误\n用 SIMD 来加速一些部分。交叉访问比 0.8 版快 10%，同等负载下目前 Tantivy 搜索速度是 lucene 的2倍\n清除了大部分 unsafe 代码\n减少索引内存占用\n给嵌入其它语言中使用提供了可能性\n没有文档内容的分段会被更早删除\n新增批量添加和删除操作，批量添加会被保证在同一个分段上\n添加了 DateTime 字段\n添加了 IndexReader，默认情况下，新提交进来后，索引会自动重载\nRead MoreTantivy 项目地址https://www.reddit.com/r/rust/comments/b3jz4x/tantivy_09_released/PS：forustm2 使用了 Tanvity 0.8 版本，效果不错。https://github.com/daogangtang/forustm2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tantivy 0.9 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在使用 Rust 的过程中，对工具有什么不爽或觉得不够用的地方，去这里反馈吧。https://internals.rust-lang.org/t/tools-team-tell-us-your-sorrows/9657"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 官方工具组在倾听大家的意见"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Rust 和 VueJS 实现，提供 Web 操控界面。详情https://tornado-torrent.gitlab.io/posts/first-beta/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tornado - 一个 BitTorrent 客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个与 Wasm-bindgen 及 web-sys 类似，只是作者觉得前面的库用起来比较复杂，就自己写了一个。https://github.com/rustwasm/wasm-bindgenRead Morehttps://github.com/web-dom/web-dom"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"web-dom - 方便 Rust webassembly 访问 DOM 的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"相当底层的一个库，面向 LLVM，能给 LLVM 提供更多优化的机会。创建这个库的目的是为了加速 WebRender 和 gfx-rs。https://github.com/servo/webrenderRead More项目地址https://mozillagfx.wordpress.com/2019/03/20/webrender-newsletter-42/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"copyless - 在调用大 Box/Vec 值的时候，避免不需要的内存拷贝的 crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看其评测数据，真的很快。与 blake2b-simd 中 BLAKE2bp 对比性能评测，要快3~5倍。与 rust-crypto HMAC-SHA2 对比评测，要快 5~25 倍。Read Morehttps://github.com/jedisct1/rust-sthash"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-sthash - 非常快的，用于对大消息进行密码学哈希的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustBridge专注于让具有不同编程语言背景的人数不足的人学习Rust并加入社区。研讨会将于4月22日上午10点开始，将由Olivia Hugger全程英语指导。如果有兴趣可以通过下面链接注册。具体地址将随RustCon Asia大会信息一起公布。Read Morehttps://rustcon.asia/blog/rustbridge/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustBridge Workshop 来中国北京了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"newpavlov 大佬提出对 Rust 的特性，引入一个半稳定状态的想法，这个状态介于稳定和不稳定状态之间。文章很长，有兴趣进入下面链接去看。Read Morehttps://internals.rust-lang.org/t/idea-semi-stabilization/9655"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Rust 语言中半稳定状态的想法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-headless-chrome 是 Puppeteer 的 Rust 对应实现。就是用程序控制的 Chrome 浏览器。可以方便地用于一些自动化操作，比如抓取页面，生成pdf，测试网页等等。https://github.com/GoogleChrome/puppeteerRead Morehttps://github.com/atroche/rust-headless-chrome\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-21 16:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-headless-chrome 0.1.4 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"3.21开始预计一周，Rust日报将由Mike和Damody帮忙打理。大家也可以通过Rust日报的GitHub仓库提交issues来投稿每日新闻。来尝试像我一样对你当天看过或学过的资料进行一次总结，也许你会有不一样的感觉？一周后恢复正常更新。RustStudy/rust_daily_newshttps://github.com/RustStudy/rust_daily_news"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-20 16:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「通告」Rust日报征集投稿"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#NES #Emulator文章中作者探讨了如何使用Rust开发一个模拟器。主要涵盖以下问题：\n模拟器支持哪些功能？可以玩什么游戏？\n如何解决NES模拟器的问题？\nRust的类型系统和借用检查会给开发过程带来哪些干扰？有无性能问题？\n作者在文章中分享了三个可以提高FPS的优化，每一个方法都可以提高10％的FPS：\n避免使用除法（Division）指令，而用条件减法来代替（conditional subtraction）。\n按元素迭代相比于按字节迭代更好。\n作者想要尝试LRU缓存，但是通过将最常访问的组件当到第一位也可以达到优化搜索性能的目的。\n该作者后续还会有更多关于Rust和NES模拟器开发的文章，包括使用强化学习训练一个代理来玩马里奥游戏，以及如何用Rust实现一个NES游戏等。可以关注。\nRead More\nnes-emulator\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-20 16:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust实现NES模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hashbrownAlex最近完成了对hashbrown的详细review，可能会成为Rust标注库中std::collections::HashMap的新的实现。Alex发现一个令他惊讶的事实，insert的实现，本质上等价于下面代码：这意味着这个API会在map进行两次查找。刚开始Alex认为这可能造成性能负担，但是经过一些仔细的讨论和审查，他得出hashbrown这个insert实现是合理的。这篇文章就是解释这个合理性。当前标准库的HashMap实现是基于开放定址加线性探测法（具体也可以参考《Rust编程之道》第八章8.2.2小节HashMap实现原理中关于Robin Hood Hashing的讲解）来处理Hash冲突。但是在处理删除的的时候，使用的是回溯（backshifting），而hashbrown的解决方法在于使用了「墓碑（tombstones）」，顾名思义，就是为删除的元素留下一个空位，并且使用tombstones来标记「已删除」。（hashbrown是对Google Swiss table算法的实现，该算法使用元表来指示存储桶是空的还是之前已被删除。它使用两位一位保持空/删除和六位七位来缓存哈希值，这样大多数时候它可以找到正确的桶而不查询主桶表。并且因为这个元表很小（每个元素一个字节），就可以使用一些SIMD指令来一次查询16个单元。）而引入了Tombstones导致插入算法有了一个有趣的属性：能证明某个key不在表的位置（因为需要查找墓碑是不是被删除过），可能会距离实际插入的位置非常远。所以就有两种不同的插入实现策略：双简单循环和单复杂循环。hashbrown使用了双简单循环的方案，正如本文开头那个插入方法所示。而且hashbrown的主要思想是针对SIMD进行优化。「两个循环」经过SIMD优化之后只是「做了两个简单的SIMD操作」而已。Read Morehttps://gankro.github.io/blah/hashbrown-insert/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-20 16:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么Hashbrown会进行双重查询"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#oxidizeconfOxidizeconf大会是以嵌入式Rust开发为主题的大会，可以关注Read Morehttps://oxidizeconf.com/schedule/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-20 16:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」Oxidizeconf大会日程表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#database #migration可与diesel（1.2.0+）集成使用。barrelhttps://github.com/spacekookie/barrel\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-20 16:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"barrel: 用Rust来编写SQL迁移文件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#npm之前日报中报道过NPM白皮书相关内容，今天Infoq发布了一篇相关的中文短篇。NPM 采用 Rust 以消除性能瓶颈https://www.infoq.cn/article/IHLLJbYiDfxwkQ17r_Kq?from=groupmessage&isappinstalled=0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"NPM 采用 Rust 以消除性能瓶颈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#imapimap是Rust实现的用于和实现IMAP协议（Internet Mail Access Protocol）的服务器交互的客户端。rust-imaphttps://github.com/jonhoo/rust-imap"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"imap 发布1.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该小组的高级目标是使Rust项目的工作更加可预测和透明。工作组将检查，记录并提议改进用于运行项目的一些政策和程序。为此，治理工作组将采取多种观点，并在社区成员和项目成员的角度下调查当前的工作模式。从而使项目更加透明，并使感兴趣的社区成员更容易提供有效的反馈并与项目保持密切联系。Read Morehttps://internals.rust-lang.org/t/governance-working-group-announcement/9637"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方」宣布成立治理工作组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#debiandebcargo可以从crates.io打包特定版本的包构建为Debian软件包。\nRead More\ndebcargo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"debcargo正在运行测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crates.io预计维护时间30分钟。Read Morehttps://internals.rust-lang.org/t/crates-io-downtime-2019-03-21-22-00-utc/9641"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crates.io停机时间，2019-03-21 22:00 UTC"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#bumpBump内存分配算法，是一种快速但有限的分配算法，分配器会维护一块内存以及指向该内存的指针，当分配一个对象时，分配器将指针会按该对象的对齐规则来分配内存，并且快速测试指针有没有溢出。bumpalohttps://github.com/fitzgen/bumpalo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bumpalo: 一个快速Bump内存分配库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#jobImperva是一家领先的网络安全提供商，提供一流的解决方案，以保护数据和应用程序 - 无论它们驻留在何处 - 在本地，在云中以及在混合环境中。该公司的Prevoty团队正在招Rust，应该无法远程。Read Morehttps://www.imperva.com/company/careers/?p=job%2FoAnb9fw1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Prevoty团队正在寻找Rust开发人员"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#web作者在文章里以Heroku平台为示例提供了三种部署方式：\n直接部署，使用Procfile来管理应用启动\n使用Docker\n使用ZEIT/now提供的serverless 运行时服务\nRead Morehttps://medium.com/@gruberbastian/rust-for-the-web-02-x-deploy-your-first-app-51d1ed69cbe3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Rust for Web系列文章 02」部署你的Rust Web应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#stm32f3 #embeded轮询GPIO以读取按钮的状态很容易实现，但是遇到了许多问题：\n程序需要确保在执行其他任务时定期扫描按钮。\n让处理器一直扫描按钮按下不能节能。\n当程序不忙时，无法利用可用的处理器睡眠模式来节省能源。\n更好的选择是使用硬件中断。Read Morehttps://flowdsp.io/blog/stm32f3-01-interrupts/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」在STM32F3 Discovery板上编写GPIO中断"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#unsafe这个库用于完全不介意unsafe情况时使用，它也不保证线程安全。globalshttps://github.com/richardanaya/globals\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-19 23:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"globals: 提供一个无痛的但是Unsafe的全局变量"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#hmm #ml科普：隐马尔可夫模型（Hidden Markov Models）是统计模型，用来描述一个含有隐含未知参数的马尔可夫过程。现实生活中有这样一类随机现象，在已知现在情况的条件下，未来时刻的情况只与现在有关，而与遥远的过去并无直接关系。这些问题可以用马尔可夫模型解决。比如天气预测。但是当不知道今天是什么天气状况，而只知道今明后三天的某个植物的干燥湿润状态，想通过此状态来推测今明后三天的天气状况，就需要用到隐马尔可夫模型。隐马尔可夫过程，是根据可观察状态的序列找到一个最可能的隐藏状态序列。一个典型的应用是中文分词。因为你想要得到的是每个字的位置，但是看到的只是这些汉字，需要通过汉字来推出每个字在词语中的位置，并且每个字属于什么状态还和它之前的字有关。此时，我们需要根据可观察状态的序列找到一个最可能的隐藏状态序列。参考资料https://blog.csdn.net/weixin_36604953/article/details/78653744本文作者用Rust实现一个HMM主要是用于机器学习。\nRead More\nhmmm\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hmmm: 用Rust实现隐马尔可夫模型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmwebcomponenthttps://github.com/richardanaya/webcomponent"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"webcomponent: 一个用于编写Web组件的Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Ensembl2020 #wasmEnsembl是一个基于Web的基因组浏览器，也是世界上最引人注目的生物信息学项目。 Ensembl项目（www.ensembl.org）旨在传播聚合的基因组注释，包括图形视图。因为诸多因素，需要将大量计算推向客户端，所以在Ensembl2020（新一代Ensembl）中会引入WebGL和WASM/Rust/React技术。Read Morehttps://www.reddit.com/r/rust/comments/b205xe/ensembl_2020_will_use_rust_and_webassembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ensembl 2020将使用Rust和WebAssembly"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#macos #xcode结合Xcode，可以生成Xcode Instruments跟踪文件。跟踪cpu /线程使用情况，分配，上下文切换和一堆其他东西。cargo-instrumentshttps://github.com/cmyr/cargo-instruments"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-instruments: 在macOS上进行无痛分析"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#youtube #tcp #Jon东半球Rust大神又开直播了。Read Morehttps://www.youtube.com/watch?v=OCpt1I0MWXE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」实现TCP Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#apache #tinkerpopApache TinkerPop 是一个流行的开源图形计算框架。 TinkerPop 的用户利用图形遍历语言Gremlin 来与他们的图形进行交互。gremlin-rshttps://github.com/wolf4ood/gremlin-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Apache TinkerPop的Rust客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#fosdem #redox #arm将类UNIX的Redox OS移植到Arm v8.0\nSlides（89页）\nReddit 讨论\nVideo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「演讲Slides」用Rust编写的微内核"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasmexampleshttps://github.com/richardanaya/wasm-module/blob/master/examples/x-clock/src/lib.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「案例」使用wasm-module来最小化自定义元素便于DOM访问"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game #ecs #DataOriented这个库汇集了很多游戏中通用功能的实现，比如库存系统、用户管理、游戏聊天、权限等，基于ECS模式实现。game_featureshttps://github.com/jojolepro/game_features"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"game_features：开源通用的游戏功能 0.1 现在发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tockOS #ioTtockOS是一个Rust实现的嵌入式操作系统google/tock-on-titanhttps://github.com/google/tock-on-titan"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」将Tock OS移植到Google Titan安全芯片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rsync性能评测Lumins要强于rsyncluminshttps://github.com/wchang22/lumins\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-18 23:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"LuminS：用于同步本地文件的快速可靠的rsync替代方案"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#libpnetlibpnethttps://github.com/libpnet/libpnet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-17 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"libpnet : 提供了底层网络的跨平台Rust API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#machinelearn该文作者是一名数据科学家，有90%的编程工作都是和Python打交道。几个月前，该作者对Rust产生了兴趣，但是发现Rust在机器学习的关键限制是缺乏开发体验良好的线性代数库。有nalgebra和ndarray其他几个库，但是作者认为不好用，没有针对底层的SIMD、blas和Lapack高性能数值计算。作者用的最多的是ndarray。虽然不好用，但作者发现Rust非常适合编写高性能代码。使用blas-src和lapack-src，以及Rust内置的SIMD函数就可以编写令人惊讶的Rust代码。BLAS（Basic Linear Algebra Subprograms，基础线性代数程序集）是一个应用程序接口（API）标准，用以规范发布基础线性代数操作的数值库（如矢量或矩阵乘法）。该程序集最初发布于1979年，并用于建立更大的数值程序包（如LAPACK）。这篇文章简单介绍了如何在Rust中使用SIMD、BLAS和Lapack。最后给出了一个结论：摩尔定律正在失去效用，所以如果我们想要继续蓬勃发展机器学习的生态系统，就需要学会优化机器学习。与Python调用C相比，使用此方法（Rust中使用SIMD/BLAS/LAPACK）可实现性能4-10倍的提升。Rust也非常适合调试，严格的类型可以在执行数据工程时提供良好的实践。 我劝你：开始尝试使用Rust进行机器学习吧。虽然现在它会有点令人小失望，但在未来几年内会得到回报。Read Morehttps://www.erikpartridge.com/2019-03/rust-ml-simd-blas-lapack"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-17 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"当Rust遇上机器学习：SIMD、BLAS和Lapack"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#vscodeRon是Rusty Object Notation的缩写，RON是一种简单易读的数据序列化格式，看起来类似于Rust语法。 它旨在支持Serde的所有数据模型，包括结构，枚举，元组，数组，通用映射和原始值。\nRead More\nron\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-17 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"vscode-ron插件支持RON语法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#game\ngodot-rust\n官网\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-17 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"godot-rust: 开源游戏引擎GDNative的Rust官方绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#servo #GPU #svg #VRPathfinder 2是一款快速，实用，正在进行中的基于GPU的光栅化工具，用于使用OpenGL和OpenGL ES 2.0+进行字体和矢量图形处理。pathfinderhttps://github.com/pcwalton/pathfinder"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于Pathfinder和Servo实现VR中使用GPU对SVG渲染"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#profilemicroprofile使用C/CPP实现，已经被用于多个AAA级游戏。现在有了Rust的绑定。microprofile-rusthttps://github.com/jonasmr/microprofile-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"microprofile-rust： 用于Rust的微型嵌入式分析工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#PIRead Morehttps://github.com/jgrant27/jngmisc/blob/master/rust/machin-pi/src/main.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「国际数学日」HappyPI：用于计算π的代码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ScientificRust任何涉及使用计算机进行科学研究的东西都算作科学编程。它包括从运行在卫星上的嵌入式软件到运行在超级计算机中的气候模型，从运行管道工具的shell脚本到使用笔记本电脑的数据分析。该文作者在生物学领域做科学编程的工作，在这篇文章里，描述了他对于Rust的2019期望，给出了Rust如何做才能更好地面向科学工作者的建议。看得出来Rust在生物学领域已经有了一些可用的库，可以在相关GitHub组织RustBio中找到。\nRead More\nrust-bio\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"科学Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pushrodrust-pushrodhttps://github.com/KenSuenobu/rust-pushrod/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"跨平台UI Widget库Pushrod 发布0.1.14版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#sobel #image该库是Sobel边缘检测算法的Rust实现，看源码的Readme文件截图，效果好像不错edgyhttps://github.com/dangreco/edgy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"edgy: 图像边缘检测库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#lang目前还只是文档，作者并未开源，据说是2019年中开源。先来感受下代码风格：vlang.iohttps://vlang.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"V语言： 受Rust和Go启发的新编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#virtualizationvmm是指VirtualMachineMonitor。Firecracker（亚马逊的）是一个基于KVM的轻量级VMM，可以在几分之一秒内启动虚拟机，内存占用少，可以实现高密度云环境。在Firecracker被开源之后，该开发团队又在2018年底启动了rust-vmm项目，旨在实现安全共享虚拟化核心组件。rust-vmm会以多个独立的crate来发布，都在RustVMM GitHub组织下开源。\nRead More\nrust-vmm GitHub组织\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用rust-vmm构建未来的虚拟化堆栈"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust该文章作者，在Google的Hash Code 2019编程竞赛活动中对Rust的高效能力进行了测试。Hash Code是一个团队编程竞赛，所有团队必须在4小时的时间窗口内解决单个工程问题。今年，来自世界各地的6000多支队伍参赛。Hash Code提出的问题一直是NP-hard的优化问题，需要实现近似解决方案。因为每个团队只有4个小时来实施，而且还运行他们的解决方案，所以他们不能是CPU密集型的。通过对其近似解决方案生成的结果进行评分来对团队进行排名。问题：今年的问题是由一组照片创建幻灯片。这些幻灯片的评分取决于它们的有趣程度。每张照片都有一组与之关联的标签。竞争对手：Java，C / C ++，Python和C＃等主流语言。而作者的团队当然是用Rust。结论：作者的团队取得了第783名的成绩（6000个团队），所以，通过这次测试，作者认为Rust是足够高效的语言。当然，编程竞赛属于一种特定场景，但在短短4小时内解决一个问题，也可以说明一门语言是否高效了。Read Morehttps://medium.com/@woutergeraedts/how-productive-is-rust-e2260db28f09\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust有多高效？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#thetaoofrustRead Morehttps://zhuanlan.zhihu.com/p/59384453"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust编程之道》读者答疑：每个章节副标题名言代表的意义"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #virtualDOMdodrio的作者写文章介绍了dodrio实现的一些细节。它是使用Rust和WASM实现的虚拟dom库。该库的作者为了实现此库，还专门和React、Elm和Ember团队的核心开发人员讨论了很多想法。并且Mozilla负责WebAssembly标准制定的Luke和Rust核心团队的Alex都参与了该项目的设计？看来这个库不是玩票。Bump内存分配算法，是一种快速但有限的分配算法，分配器会维护一块内存以及指向该内存的指针，当分配一个对象时，分配器将指针会按该对象的对齐规则来分配内存，并且快速测试指针有没有溢出。\nRead More\ndodrio\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dodrio: 基于Bump内存分配的虚拟Dom实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#markdownpulldown_cmark是用Rust编写的CommonMark markdown标准的高性能解析器，刚发布了0.3版本。这篇文章中还介绍了该团队优化0.3版本性能的一点心得：\n为了增加解析速度，快速构建和遍历AST，他们使用了indextree crate。\n在没有严格要求的情况下，永远不要复制或分配内存。只用引用，以及在新版本中使用了一种新的写时复制类型（类似于Cow<T>)\n我查了下源码，他们用的写时复制类型叫 CowStr应该是根据自己的场景定制的。Read Morehttps://fullyfaithful.eu/pulldown-cmark/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pulldown_cmark 0.3 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blogos最新的这篇文章展示了如何在内核中实现分页。该系列教程的中文翻译可以关注： 知乎专栏：做一枚爱生活的Rustaceanhttps://zhuanlan.zhihu.com/c_1078248076300521472Read Morehttps://os.phil-opp.com/paging-implementation/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「BlogOS系列教程」分页实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blockchainPurple号称是一种先进的，实验性的开放式区块链协议，从第一天开始设计就注重可扩展性和完全去中心化。它可以在高峰时间达到每秒多达50000个事务。基于一种新的共识，半同步工作证明（简称SSPoW），因为它提供的异步扩展优于传统的基于工作证明的同步共识。不管吹的如何，新项目先关注下。代码完成度很高。\npurple\n官网\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"purple: Rust实现的一个现代化的开放区块链协议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#redis内嵌了sqlite数据库redisqlhttps://redisql.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"redisql: Rust实现的Redis模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#UnsafeRust这是Rust官方不安全工作组的讨论视频记录，主题是Unsafe Rust代码指南。一共六个人参与讨论，大家感兴趣可以看看。Read Morehttps://www.youtube.com/watch?v=atRKeoWbfi0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方会议讨论视频记录」Rust Unsafe代码指南讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#speck #decrypts #encryptsbaconhttps://github.com/aspera-non-spernit/bacon\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-15 23:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bacon: 使用Speck算法对任意结构进行加密和解密"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #seedSeed是一个Rust前端框架，借助wasm可以创建Web App。Read Morehttps://github.com/David-OConnor/seed/blob/master/CHANGELOG.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"seed 发布0.3版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#haskell这篇文章描述了作者创建Alfred-Margaret的过程，它是Aho-Corasick字符串搜索算法中最快的Haskell实现，用于支持Channable中的字符串搜索。Channable是一种Feed处理工具，用户可以在其中定义规则以优化其产品Feed。作者最初实现的算法和上万star的明星Rust库就是用Rust实现了Aho-Corasick算法进行比较，性能差距很大。但是在经过努力优化以后，这个差距缩小了。\nRead More\naho-corasick的Rust实现\nripgrep\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何让Haskell搜索字符串与Rust一样快"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded用于在编译期检测栈是否溢出，对于嵌入式设备的安全很重要。所以官方嵌入式组Leader Japaric实现了这样一个库。文章介绍了关于cargo-call-stack的详细实现细节。\nRead More\ncargo-call-stack\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」cargo-call-stack: 一个静态栈分析工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crates.io(原来Diesel作者sgrif也参与了crates.io的维护)之前是同步的方式，现在改成了异步。所以，如果你发布crate的时候，如果没有发现错误，也并不意味着你可以正常发布你的crate。主要是因为有延迟问题，现在最大延迟是3秒，如果依赖的包太多，你可能需要重试几遍？？当然，官方目前正在处理这个问题。Read Morehttps://internals.rust-lang.org/t/changes-to-how-crates-io-handles-index-updates/9608"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「官方通告」关于crates.io更新了索引处理方式的说明"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#python #webRead Morehttps://medium.com/@rajasekar3eg/making-a-case-rust-for-python-developers-1a114e2d89f4"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"以数据处理为案例，教Pythoner使用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tips主要技巧是为实现的数据结构中的索引建立关联闭包，然后通过正确关联的闭包来访问数据，如果是空的索引，则会造成编译期错误。这个错误就证明了有越界访问。但这个技巧最好是在团队内达成共识，否则错误看上去会非常奇怪。Read Morehttps://fullyfaithful.eu/bounds-check-elision-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"利用Rust的类型系统消除运行时越界检查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#learn该Reddit贴中作者认为用Rust实现Unix中的命令行小工具就很好，比如tree、strings、wc、ls、nc、cat等就不错。（我也这么认为）Read morehttps://www.reddit.com/r/rust/comments/b0i625/classic_unix_utilities_make_great_beginner/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"学Rust不知道做什么练手项目好？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#ScientificComputing有博主宣布要写Rust和科学计算的系列文章，本文是该系列的第二篇文章。该作者的日常工作是机器学习，他在多次使用Rust进行相关的实验之后发现，Rust语言在这个领域将大有可为，并让他感觉非常激动。作者反观了Python统治下的机器学习世界，其生态系统爆炸的原因是因为有很多基础库，比如NumPy，SciPy，Pandas等。大多数项目是构建在NumPy和SciPy之上。如果Rust也拥有这些核心的基础库会怎么样？抱着这样的想法，作者加入了维护ndarray库的队伍中。他贡献了一堆PR之后，诞生了一个独立的crate：ndarray-stats。这个系列的文章，将围绕ndarray来阐述。Read Morehttps://www.lpalmieri.com/posts/2019-03-12-scientific-computing-a-rust-adventure-part-1-zero-cost-abstractions/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「系列博客」 Rust与科学计算 Part 1： Rust的冒险之零成本抽象"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#video #redis该视频是用于学习而制作\n代码\nRead More\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-14 18:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「视频」用Rust实现Redis模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"请大家注意查收邮件。个别我可以直接联系到的朋友，就直接联系了，没有发邮件。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rusty棒球帽已发货"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#pest #intellij #ide这是来自@ice1000的投稿Pest的IntelliJ插件，有rule的补全，补全的时候有hint，有重命名（有点bug，马上有个PR修复），自动高亮#[grammar_inline = \"...\"]里面的Pest代码。支持Ctrl+Alt+N进行inline和Ctrl+Alt+M进行提取。intellij-pesthttps://github.com/pest-parser/intellij-pest"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pest的IntelliJ插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#tikvRead Morehttps://zhuanlan.zhihu.com/p/59165478"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TiKV源码解析系列之四：Prometheus"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#embeded该文作者效仿John Carmack，进行了为期一周的Coding Retreat活动，大概就是远离工作和日常的环境，像隐士一样在某个地方围绕一个主题的编程活动。（闭关？）该文作者和他的六位好友，使用Airbnb在郊区租了一个房子，围绕SensorTag做了一个小项目。SensorTag是集成了低功耗蓝牙和六种传感器的套件，可以用于数据采集。\nRead More\ncoding retreat\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「嵌入式Rust」在SensorTag上运行Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cpp #meshDust3D是一款高性能的3D建模软件，大部分都是Cpp实现，之前还有Rust实现的一些核心网格算法，但是最近作者又将它改为Cpp实现，现在该软件是纯Cpp实现。这是为什么呢？有两点原因：\n作者还是Rust新手，实现过程种一直和编译器借用检查器做斗争，十分怀念Cpp的一把梭，于是乎。。。\n作者认为，Rust在游戏开发领域的生态还不太成熟，虽然也有一些绑定库，但是不够用。\n（怎么说呢，写代码这种事，还是自己开心最重要）\nReddit 讨论\nRead More\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么将Dust3D的网格生成器从Rust改为C++实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#WasmWG #wasmRust和WASM工作组的2019愿望是希望为Rust和WASM开发构建稳定、可持续、生产化的生态系统。为了实现这个目标，工作组推出了Gloo，它是一个模块化的工具包，作用如下：\n构建更小且能集成到大型JavaScript系统种的WASM模块\n可以用Rust编写整个Web应用\nGloo于WASM的目标，等价于Tide于服务端Web的目标。Gloo将进一步抽象出高级的库和框架，易于开发。该项目才刚刚开始，欢迎参与。\nRead More\nrustwasm/gloo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Rust和WASM工作组」让我们一起构建Gloo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#cargocargo-feature-analysthttps://github.com/psinghal20/cargo-feature-analyst"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-feature-analyst: 用于分析项目种features使用情况"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#GADT #haskell该文作者是一名Haskell选手，他在尝试用Rust实现GADT（Haskell种的广义代数数据类型）\nRead More\ntypo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中实现GADT的一些思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#templatecuachhttps://nest.pijul.com/pmeunier/cuach\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-13 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cuach: 又一个编译时模板"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#RFC #async #awaitstd::task和std::future::Future是将async/await稳定为第一类公民的基础。该RFC涵盖了：\nstd中task模块的所有API\ncore和std的future模块\nRFC 2592 prhttps://github.com/rust-lang/rfcs/pull/2592"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"稳定std::task和std::future::Future的RFC已被合并"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#Question这个帖子里有人整理了一些提问的地方：\nStackOverflow, Rust Tag\nCodeReview.Stackexchange, Rust Tag\nReddit, r/learnrust\nRust官方User论坛, users.rust-lang.org\nRust相关的IRC频道， #rust，这样的频道还有好几个： #rust-beginners/ #cargo/ #rust-gamedev/ #rust-osdev/ #rust-webdev/ #rust-networking\n以上是国外的，我整理一下国内的：\nRust社区QQ群/微信群/Telegram群\nrust.cc 论坛\n《Rust编程之道》读者群/ 随书源码issues\n加群方式可以私聊Read Morehttps://www.reddit.com/r/rust/comments/azqo9c/hey_rustaceans_got_an_easy_question_ask_here/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hi Rustaceans! Rust有问题该去哪里问？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #scraperZEIT是一个Serverless服务平台，的主打产品是 now，一个一行命令就能发布Node或者Docker应用的PaaS，现在支持了Rust。因为Rust性能太好，所以ZEIT可能会推出基于1ms的定价（是不是有点流氓。。。233）。为了演示，他们基于now服务发布了一个简单的Rust爬虫，基于servo：rust-scraper.now.sh，可以爬Hackernews的新闻。\nRead More\nnow-rust\nrust-scraper.now.sh\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ZEIT的Now服务宣布支持Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#self_referential该库用于构建可移动的自引用类型\nReddit 讨论\nrel-ptr\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rel-ptr: 相对指针"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#codesearch基于crates.io来搜索codesearch.aelve.com/rusthttps://codesearch.aelve.com/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"可在线搜索Rust代码的服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#blog这篇文章总结了Rust语言、工具、库中作者认为好的地方、不好的地方，以及作者感觉有点丑陋的地方。虽然有点主观，我也不同意他的某些观点（比如他认为宏很丑陋，我觉得还好），但觉得值得分享出来让大家看看。（这位博主说他12岁就开始写代码了）\nRead More\nReddit 讨论\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编程中的好的、坏的、丑的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#grep #binary可以匹配任何字节模式，可以跨行。bgrephttps://github.com/gahag/bgrep"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bgrep：Rust实现的一个二进制grep工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ZhangHanDong"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#python #game\nRead More\npyckitup\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-03-12 14:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pyckitup: 用Rust实现的可运行于浏览器的Python游戏引擎"},"type":"text"}],"type":"title"}},]
