export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"修复了几个bug原文https://blog.rust-lang.org/2018/07/20/Rust-1.27.2.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-21 17:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.27.2发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"简要：\nNLL： 聚焦于ICE修复、诊断的边界情况、性能和内存使用的边界情况\nClippy：已经成为了rustup组件，只剩下一些琐碎的问题\n嵌入式：\n\n需要关注的FCP：https://github.com/rust-lang/rust/issues/44489#issuecomment-398965881\nlibm的移植工作\n\n\nCLI：还需要在输入、输出、分发、测试四件事情上努力\nWASM：\n\n暂停模板工作直到cargo-generate可用\nrust_wasm_template 和 cargo-generate兼容\n其他零碎\n\n\n网络工作组：\n\n重启网络工作组\npreview2 的主要目标 ：完成futures 0.3 完成 以及  async/ await使用futrues\n\n\n\n需要关注的FCP：https://github.com/rust-lang/rust/issues/44489#issuecomment-398965881\nlibm的移植工作\n\n暂停模板工作直到cargo-generate可用\nrust_wasm_template 和 cargo-generate兼容\n其他零碎\n\n重启网络工作组\npreview2 的主要目标 ：完成futures 0.3 完成 以及  async/ await使用futrues\n原文https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-07-20/8019"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-21 17:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018  edition 周末报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"同时 async/await 已经使用了futures0.3 实现原文https://rust-lang-nursery.github.io/futures-rs/blog/2018/07/19/futures-0.3.0-alpha.1.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-21 17:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Futures 0.3-alpha.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://github.com/exonum/exonum/blob/master/CHANGELOG.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-21 17:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust区块链 exonum发布0.9"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://blog.kuviman.com/2018/07/20/glitchcat.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-21 17:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"glitchcat让你超容易创建CLI 应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo install paxpax index.js bundle.js原文https://pax.js.org/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-21 17:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的js打包神器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/905y36/multiline_search_is_coming_to_ripgrep/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-20 09:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ripgrep开启多行搜索功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"CTFE（Compile-Time Function Evaluation），是指编译时函数求值，直白地说，是编译期执行代码。比如，知道了数组的大小如何在编译期计算其内存布局。从Rust1.26以来Rust引进了CTFE，因此引发了一系列CTFE期间应该允许哪些操作的探讨。这篇文章是从类型系统角度对这些讨论的看法。CTFE仅用于const的值或者是数组长度rustfn demo() {const X: u32 = 3 + 4; // CTFElet x: u32 = 4 + 3; // no CTFE}CTFE需要考虑的问题（要点总结）：\n\nconst安全，并非所有操作都可以在CTFE上下文使用 ，所以需要考虑以下问题：\n\nCTFE必须是确定的，也就是说，不能存在歧义，否则会计算错误。\nconst fn 之所以存在，是为了满足在CTFE上下文中调用指定的函数。const fn 关键字可以让编译期识别，以便和普通的fn区分。\n\n\n\nconst类型系统和健壮性\n\nconst类型系统不允许CTFE调用非const函数\nCTFE不能支持指针，因为在编译期需要合法有效的值，指针无法保证\n\n\n\nCTFE的正确性\n\nRust中CTFE是由miri来执行的，miri是一个mir解释器，已经集成到了rustc中\nmiri执行const上下文的代码，并且目前，拒绝原始指针的所有操作。但是未来还会计划修改miri来让它执行更多的操作。\nCTFE的正确性是指编译期求值和运行时的表现完全一致。但是目前CTFE对于浮点数的计算比较困难。\n\n\n\nCTFE与Unsafe（假如扩展miri来支持unsafe，需要允许哪些操作？）\n\nCTFE目前已经实现了以确定的方式支持内存分配\n允许引入 const-unsafe来操作原生指针，也就是说，把const上下文也分为safe和unsafe两个区域\n\n\n\n静态提升（Static Promotion）\n\n比如，fn make_a_3() -> &'static i32 { &3 } 返回值 包含的&3会被提升为一个静态值，从而编译通过。\n应该只允许遵循const-well-type的值进行静态提升，比如&3可以提升，而*const T不行\n要保证CTFE的正确性\n\n\nconst安全，并非所有操作都可以在CTFE上下文使用 ，所以需要考虑以下问题：\nCTFE必须是确定的，也就是说，不能存在歧义，否则会计算错误。\nconst fn 之所以存在，是为了满足在CTFE上下文中调用指定的函数。const fn 关键字可以让编译期识别，以便和普通的fn区分。\nconst类型系统和健壮性\nconst类型系统不允许CTFE调用非const函数\nCTFE不能支持指针，因为在编译期需要合法有效的值，指针无法保证\nCTFE的正确性\nRust中CTFE是由miri来执行的，miri是一个mir解释器，已经集成到了rustc中\nmiri执行const上下文的代码，并且目前，拒绝原始指针的所有操作。但是未来还会计划修改miri来让它执行更多的操作。\nCTFE的正确性是指编译期求值和运行时的表现完全一致。但是目前CTFE对于浮点数的计算比较困难。\nCTFE与Unsafe（假如扩展miri来支持unsafe，需要允许哪些操作？）\nCTFE目前已经实现了以确定的方式支持内存分配\n允许引入 const-unsafe来操作原生指针，也就是说，把const上下文也分为safe和unsafe两个区域\n静态提升（Static Promotion）\n比如，fn make_a_3() -> &'static i32 { &3 } 返回值 包含的&3会被提升为一个静态值，从而编译通过。\n应该只允许遵循const-well-type的值进行静态提升，比如&3可以提升，而*const T不行\n要保证CTFE的正确性\n看来，CTFE还有很长一段路要走啊，想利用miri来检测unsafe中的UB比我想象中困难原文https://www.ralfj.de/blog/2018/07/19/const.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-20 09:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于CTFE和类型系统的思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个仓库里包含了一篇论文，研究了依赖的兼容性原文https://github.com/teiesti/compdep"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-20 09:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对Rust crate依赖的理论化研究"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对于 y=f(x)\n单射(injection):每一个x都有唯一的y与之对应\n满射(surjection):每一个y都必有至少一个x与之对应\n原文https://phaazon.net/blog/on-rust-impl-block"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-20 09:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust的impl块来玩单射（injection）和满射（surjection）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://soundcloud.com/podcastcode/bonus-episode-steve-klabnik-on-concurrency-and-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-20 09:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Podcast：Steve Klabnik 访谈： Rust与并发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Lin Clark在jsconf上面的演讲视频原文https://hacks.mozilla.org/2018/07/the-arch-using-rust-webassembly-to-animate-30k-colored-led-lights/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-20 09:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Arch： 使用rust和webassembly为3w个Led彩灯制作动画"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"wayland-rs 是Wayland协议的Rust实现，弃用了之前的C绑定Wayland是一个协议定义了如何与内核通讯、如何与Client通讯等，Linux桌面X Client/X server的替代者原文https://smithay.github.io/wayland-rs-v-0-21.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wayland-rs采用纯Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.fpcomplete.com/blog/2018/07/deploying-rust-with-docker-and-kubernetes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Docker和K8s部署Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该库可以列出Rust项目中unsafe统计信息原文https://www.reddit.com/r/rust/comments/8zywu1/cargogeiger_030_update/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-geiger 0.3更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Handlebars-rust 是一个模板库，1.0中改进了渲染大数据集的性能原文https://www.reddit.com/r/rust/comments/8zu1am/handlebarsrust_just_hit_10/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Handlebars-rust 发布1.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust只能保证所有权可以控制范围内的安全。作者举了一个逻辑错误的示例来说明这一点。建议：\n写代码的时候要预估错误\n识别事务中最基本的工作单元（比如某个任务的具体步骤、缩略图中的单个缩略图、下载器中的单个文件等），并为其定义可能产生的意外错误\n原文http://blog.ssokolow.com/archives/2018/07/17/why-you-should-always-practice-defensive-programming/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么你应该经常练习防御性编程？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这笔记写的漂亮（虽然现在还没有啥内容），利用了Rust文档注释支持markdown这一点。可以关注一下，希望不要烂尾原文https://docs.rs/ctrs/1.0.1/ctrs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wow，《面向程序员的类型论》的学习笔记（Rust实现）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 1.29 将对应Edition preview 2版本，2018-08-02发布预期NLL和新的模块系统变更能在 1.29中可用。原文https://internals.rust-lang.org/t/possible-stabilizations-for-2018-edition-preview-2/7983\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-19 10:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 Edition 稳定化预览 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"捅出actix-web unsafe问题那哥们又发贴了，现在actix-web中的unsafe带来的不安全问题已经差不多修复了。但是有很多crate中还在用unsafe，使用unsafe本身很正常，但是想让unsafe中不产生UB，是严重依赖于开发者自身的水平和认知。所以，审核还是必须的。但最好是使用safe rust，以及如果不是必须要用到unsafe，那么可以强制使用#![forbid(unsafe_code)]属性禁用unsafe。该作者分享了自己审核crate的一些方法：\n主要是利用模糊测试（fuzzing）整体检查crate\n检查它们是否出现内存错误\n尝试使用safe代码替换unsafe而不影响性能\n模糊测试相关工具：\ncargo-fuzz\ntargets\n模糊测试是发现错误的一种简单方式，但也不能保证百分百发现错误作者考察了一些库，发现社区不太关心DoS拒绝服务安全漏洞，他在3个crate中找到相关漏洞，他提交了但是3周过去了都没有人去修复。原文https://www.reddit.com/r/rust/comments/8zpp5f/auditing_popular_crates_how_a_oneline_unsafe_has/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-18 12:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"呼吁：对流行crate中unsafe代码进行审计"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://dsvensson.github.io/posts/2018-07-13-Electrosmog-trapping-with-CC1101.html#article"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-18 12:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式」让Rust和CC1101无线电模块一起玩耍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"哪怕你是C++的粉丝，也可以学学Rust，你会学到很多。原文https://itnext.io/what-rust-can-teach-you-even-if-you-are-a-c-fan-95efeceada73"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-18 12:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust能教你些什么？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"srshttps://github.com/quadrupleslap/srs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-18 12:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的WebM屏幕录像工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Elias-Fano(PEF)编码是基于分区的倒排索引压缩算法rust-elias-fanohttps://github.com/tomarrell/rust-elias-fano\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-18 12:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的elias-fano编码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"据悉，国内出版社正在努力引进Rust Programming Language 这本书也就是官方Rust Book第二版，目前在竞价阶段，看来势必要引进了，期待正规的翻译。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"国内正在引进Rust Programming Language 这本书"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用起来更方便：\nrustup update\nrustup component add clippy-preview\ncargo clippy\n原文https://internals.rust-lang.org/t/clippy-is-available-as-a-rustup-component/7967"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Clippy已经成为了Rustup的组件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"薪资 $130k （应该是年薪）不知道是不是之前论坛里发过的那家香港公司原文https://www.reddit.com/r/rust/comments/8z9vvf/hiring_rust_engineer_remote_up_to_130k_blockchain/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"香港区块链公司招人（可远程）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"完全用Rust+wasm重写了整个项目Artifact是一个简单，可链接和可跟踪的设计文档工具文章里记录了他为什么要用Rust重写该项目\n原文\nartifact\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Artifact 2.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rafthttps://crates.io/crates/raft"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PingCAP的raft库发布了0.3.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dalek再次成为签名和验证最快的原文https://github.com/tendermint/signatory/commit/322118dc11ad160d7277224d141f8ce134226469另外介绍下 signatory 库抽象了一层数字签名的统一接口，支持dalek、ring等作为底层加密库providersignatoryhttps://github.com/tendermint/signatory"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"加密库性能比拼 dalek 0.7 vs  ring  0.13"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"也算是侧面普及了支持Rust的IDE吧他因为喜欢Rust，所以现在忍受着不满意的IDE，让他满意的IDE还未出现（看来作者是IDE重度依赖用户）原文https://medium.com/@wolfshirts/surface-rust-6470d0075721\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-17 10:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"本文作者对Rust IDE进行了吐槽"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n建立WG twitter ：https://twitter.com/rustembedded\nMUSL的libm（用于sin，cos等数学函数）移植工作开始，32个函数已经移植了26个。有望被归到Rust core中\n针对thumbv6m和msp430目标的Atomic *{load，store} API可用\n有两个多轴（Multirotor）飞控项目用上了Rust，基于 stm32f3 ，分别是TrustFlight和BetaFPV F3\n有两个项目致力于让树莓派上使用Rust更容易：RustBerry和rust_gpiozero\n基于embedded-hal的嵌入式生态系统中又多了很多库\n原文https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-7/7959"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式工作组报告 7"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"AV1是下一代开放视频编码标准rav1ehttps://github.com/xiph/rav1e"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"安全高性能的av1编码器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/8z4yui/bind9_web_api_using_actixweb/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用actix-web实现bind9 web API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ropey是一个utf8 文本缓冲区库，旨在成为文本编辑器的后备文本缓冲区特色：性能好，内存开销底，Unicode安全原文https://github.com/cessen/ropey"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ropey0.8版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"谢尔宾斯基三角形是一种分形原文https://www.reddit.com/r/rust/comments/8z6ia6/making_the_rust_compiler_display_sierpi%C5%84skis/play代码地址http://play.rust-lang.org/?gist=5f290d7a50efb1d92249b1f4bc10453f&version=stable&mode=debug&edition=2015"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"会玩：使用宏让Rust编译器显示谢尔宾斯基三角形（Sierpinski triangle）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"群体蜂拥行为( flocking behavior) ，即一群运动自主的个体 能够保持成团队的形式向某一目标地迈进，是一组有着共同目 标的大量智能个体的团队行为。该行为被应用于多个领域，比如电脑动画、无人驾驶飞行器本文使用Rust实现了一个鸟群蜂拥行为的模拟原文https://blog.shine.rocks/posts/flocking-in-rust-with-piston/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-16 13:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust实现群体蜂拥行为"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"虽然WebAssembly名字里包含了Web，但实际上它并不仅仅局限于Web。很多程序员知道WebAssembly是运行于浏览器中执行非JS代码的一种技术。这是事实，但实际上还有更多的内容。为了将WebAssembly嵌入到不同的环境中，其规范是被拆分到独立的文档中并区分了层级：\n核心层。定义WebAssembly模块及其指令集的语义。\nAPI层。定义应用程序接口。目前指定了两个API：JavaScript API、Web API。\n由此看出，WebAssembly其本身是独立于Web的，Web只是其应用的特定环境。事实上，WebAssembly也被应用于很多除了Web之外的领域：\n桌面图形化程序\n区块链智能合约，比如Parity的以太坊VM\n编写操作系统微内核，比如Nebulet\n等等，请发挥你的想象力。原文http://words.steveklabnik.com/webassembly-is-more-than-just-the-web"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-15 10:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"WebAssembly  不仅仅是Web"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文作者以自身的经验对Rust和Go做了评价，比较了以下几点：\n内存管理： 很难为谁打call。因为这两门语言都是内存安全的。（那Rust没有GC，是不是算赢了呢？逃）\n学习和使用的难易度。很难为谁打call。因为虽然Go语法简单容易上手，但是作者更想把精力和时间花在编写经得起时间考验的代码上，而非排查各种Bug。（我很赞同）\n泛型。这个自然是Rust赢了，因为Go不支持泛型。\n代码健壮性。显然是Rust赢了。列举一下Rust有但Go不支持的可增强代码健壮性的特性：\n- 断言。断言很重要，但是Go不支持。Go将所有问题都归结为「错误」，相比之下，Rust就给你安排明白了，不该是错误的就不是错误。\n-  类型标注。Rust有更严格的类型标注，可以精准传达程序员的意图。\n- 文档注释。Rust的文档注释可以支持markdown。但是Go的比较简陋。\n-  错误检查。Rust有更高级的类型系统来处理返回的错误。\n分析工具。Go内置了分析工具，比较好用。\n构建速度。Go赢了。\n构建工具。Rust有优秀的包管理工具Cargo，赢。\n单元测试。 作者对go的测试不满意，但是因为有testify的存在，所以这里勉强和Rust打个平手吧。\n这份比较报告，不是为了要挑起语言之争。每种语言都有其优缺点和适用领域，作为程序员，应该对每种语言的特性有所了解，这样有益于为项目选择最佳的工具。 作者还强烈建议广大程序员，应该学学Rust，即使你不用Rust，你也能在这个学习过程中学到更多其他语言里学不到的东西。原文http://julio.meroh.net/2018/07/rust-vs-go.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-15 10:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust vs Go"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我也有同感，你呢？原文https://www.reddit.com/r/rust/comments/8yq6zv/rust_is_helping_me_understand_programming/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-15 10:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"讨论： Rust正在帮助我重新理解编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nCouchDB的Rust客户端\n面向I/O的tokio线程池\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-15 10:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"两个新项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nrust-lang-nursery/mdBook， Rust实现，可以像gitbook那样生成在线的电子书。\nalexcrichton/tokio-signal，tokio的信号处理库\nalexcrichton/ctest，自动为Rust的FFI C绑定生成测试\nbrendanzab/cgmath，Rust实现用于计算机图形学的线性代数和数学库\nsoftprops/atty，Rust写的一个用于判断是否为tty的工具\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-15 10:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日上榜项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustBelt是Rust的形式验证项目。这是Ralfj回归Rust团队之后新的博文，文章中介绍了该Bug，以及弱内存、数据竞争和同步。Bug介绍及其产生原因简单总结：Arc::get_mut可能会引发数据竞争，是在RustBelt研究人员Hai和Jacques-Henri在试图证明Arc :: get_mut的正确性时发现的。是因为Arc内大量使用了原子类型，但是在使用原子类型的时候，实际上需要指定内存顺序，这和内存并发一致性是相关的。目前Arc内部基本使用了Relaxed，已经证明了，将其换成Acquire则是正确的。原文https://www.ralfj.de/blog/2018/07/13/arc-synchronization.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustBelt最近发现Rust并发的一个Bug"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要用于实现光线跟踪原文https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust加速GPU的路径跟踪 Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"2018 Edition快要发布了，官方从这周开始会每周推出此报告，汇聚了各个工作组的最新进展原文https://internals.rust-lang.org/t/2018-edition-end-of-week-post-2018-07-13/7943"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2018 Edition 周末报告（2018-07-13）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于futures 0.2toykiohttps://github.com/polachok/toykio"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个玩具版tokio的实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可用于地震学，流行病学或金融数学中模拟随机事件发生的时间原文https://github.com/ManifoldFR/point-process-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"随机点过程的Rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"又修复了一些Bug原文https://internals.rust-lang.org/t/patch-testing-for-1-27-2/7933"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方公告：Rust 1.27.2 补丁测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://github.com/RyanMarcus/basicaf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的Brainf**k编译器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文作者以学习Docker的目的，用Rust实现了一个最小化容器运行时原文http://rabbitstack.github.io/operating%20systems/containers/linux-container-internals-part-ii/githubhttps://github.com/rabbitstack/rabbitc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"系列文章：Rust实现一个最小化的容器运行时 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文作者最近有机会制作一个需要与嵌入式设备通信的Visual Studio代码扩展，该文解释了他选择实现的架构和决策过程。并介绍了一个串口通信的库 serialport-rs原文https://cultivatehq.com/posts/how-we-built-a-visual-studio-code-extension-for-iot-prototyping/serialport-rshttps://gitlab.com/susurrus/serialport-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我们如何为IoT原型构建Visual Studio代码扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://github.com/ruster-xyz/ruster-wiki/tree/master/Server/Actix/Actix-web\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-14 11:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"国人整理翻译的Actix-web文档"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"netlink是Linux进程间通信协议原文https://www.reddit.com/r/rust/comments/8yduqa/announcing_a_netlink_crates/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"netlink crate发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"大多数无人机飞控都是基于STM32 MCU，正好Rust已经开始对它大力支持原文https://www.joshmcguigan.com/blog/betafpv-drone-flight-controller-hello-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在BetaFPV F3 无人机飞控上面玩Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Part 1https://medium.com/@thomascountz/ownership-in-rust-part-1-112036b1126b中文http://ruster.xyz/a/share/theme/2Part 2https://medium.com/@thomascountz/ownership-in-rust-part-2-c3e1da89956e"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的所有权"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/8y9bc8/should_i_wait_for_asyncawait_syntax/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"讨论： 是否应该等待async/await语法？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://mrandri19.github.io/2018/06/24/how-much-of-npm-will-you-break.html在线演示http://howmuchofnpmcanyoubreak.ml/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust分析npm中有多少依赖"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用Rust控制树莓派的LED、蜂鸣器等原文https://medium.com/@rahulthakoor/physical-computing-with-rust-on-raspberry-pi-a7b6f34261a6"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust在树莓派上进行物理计算"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nanderejd/cargo-geiger，用于检测项目及其依赖中的Unsafe\nnginxinc/ngx-rust， Nginx Rust SDK，可以用Rust开发Nginx模块了。可以做两件事：1. 可以生成C绑定 2. 为Nginx C接口提供有限的高级包装\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-13 10:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日上榜新项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"将主要研究Rust的内存模型，为MIR赋予可执行的操作语义。比如，未来可以通过miri 检测unsafe代码中的UB。原文https://www.ralfj.de/blog/2018/07/11/research-assistant.htmlralfj之前提出的愿景https://www.ralfj.de/blog/2017/06/06/MIR-semantics.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust团队回归了一员大将ralfj"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可能对某些人有用原文https://gist.github.com/rygorous/32bc3ea8301dba09358fd2c64e02d774"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"简单描述了AVX指令（英特尔处理器上的SIMD）可能存在的性能缺陷"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用了combine库，和nom差不多resshttps://github.com/FreeMasen/RESScombinehttps://github.com/Marwes/combinecombine vs nom https://github.com/Marwes/combine/issues/73"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RESS: Rust实现的一个js tokenizer"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新的crate、工具或项目：\nrust+wasm写的游戏: http://www.matthewmichelotti.com/games/project_ice_puzzle/\nwasmbooth，rust+wasm实现的视频捕捉，https://mtharrison.github.io/wasmbooth/\nwasmparse-{core,bridge,web} ，基于浏览器的交互式Wasm反汇编程序（正在进行中）。它的目标是向人们传授webassembly格式，webassembly代码以及堆栈机的工作原理。\nwasm-pack/ wasm_alloc/ Twiggy均已发布了新版本\njpeg-decoder库现在已支持wasm和asm.js\n另外还有很多wasm相关文章介绍原文https://rustwasm.github.io/2018/07/10/this-week-in-rust-wasm-004.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和WebAssembly每周摘要第4期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"提供了类型安全的API，可以动态调用js原文https://github.com/viftodi/wasm_val"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasm_val 是一个wasm库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"im-rs 是一个不可变集合数据类型的实现原文https://github.com/bodil/im-rs/releases/tag/11.0.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"im-rs发布了11.0.0版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://rustwasm.github.io/wasm-bindgen/basic-usage.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasm-bindgen之书"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"真的在招聘Rust工程师，IM部门岗位描述：1、开发跨平台高性能native客户端核心组件；2、负责沟通及创作工具的系统设计, 实现, 优化和演进；3、研究分析主流 IM，优化实现方案，改进产品功能；4、负责设计和优化 IM 协议、弱网通信、推送、存储、网络并发、并行计算、加密以及安全等；5、保证工程质量和开发效率。岗位要求：1、良好的系统编程能力. 喜爱或有Rust经验以及扎实的C/C++功底更佳；2、喜爱关注新技术, 愿意尝试更优解决方案；3、不设边界, 愿意探索了解事物运转原理；4、熟悉开源社区；5、热衷自动化完成事情；6、关注代码设计，有持续学习习惯。各大招聘网站应该有相关简历投递信息"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"今日头条+北京 最近又开始招聘信息轰炸了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\ndani-garcia/bitwarden_rs，开源跨平台密码管理器bitwarden服务器的Rust客户端\nRustPython/RustPython，Rust实现的Python解释器\nmaekawatoshiki/rapidus， Rust实现的javascript玩具引擎\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-12 13:13"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日上榜新项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要是修复了一些Bug和CVE原文https://blog.rust-lang.org/2018/07/10/Rust-1.27.1.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.27.1发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"比较了以下四个框架构成的服务：\nPayara-micro (JEE/JAXRS)\nWildfly-swarm (another JEE/JAXRS micro deploy)\nJavaspark (non JEE \"lightweight\" framework)\nRust-rocket\n比较结果（按框架的罗列顺序）：\n容器image大小：173MB / 151MB / 104MB / 2MB\n容器启动时间：22.2s / 17.6s /1.6s / 0.6s\n启动时的内存使用率：630MB / 401MB / 34MB / 1.6MB\n压力下的内存使用量：647MB / 522MB / 74MB / 1.7MB\nRust优势凸显\n原文\ngithub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Java vs Rust Rest服务比较"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://rust-lang-nursery.github.io/rust-cookbook/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Cookbook经过重构，赏心悦目多了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"DNS-over-HTTPS 是Google发布的服务，帮助实现无污染的DNS原文https://www.reddit.com/r/rust/comments/8x9c1e/dnsoverhttps_support_just_landed_in_trustdns/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"TRust-DNS开始支持DNS-over-HTTPS"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"算是一个黑客工具，可以快速连续地向目标发送SYN数据包以导致拒绝服务（TCP SYN Flood攻击，DDos方式之一）。开源界一般不赞成编写这种黑客工具，但是作者不介意。作者认为，只有充分了解并意识到某些攻击，才能有效地包含自己免受攻击。但这个工具难免被别人利用。当然该作者只是网络安全公司的开发人员。\n原文\nsynner\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Synner-用Rust编写的TCP SYN客户端（WIP）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"但是还打算增加一些座位，在美国的各位可以看看原文http://rustconf.com/register.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方准备举办的RustConf 2018 普通门票已经卖完了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文通过解释如何使用rustfmt工具使用CI强制执行代码风格，来帮助你完全避免团队内部基于代码风格的撕逼。原文https://medium.com/@ag_dubs/enforcing-style-in-ci-for-rust-projects-18f6b09ec69d"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：Rust项目CI风格指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nMitMaro/git-interactive-rebase-tool，不会用git rebase的有福了。这是一个终端编辑器，专门实现了交互式的rebase。\nbuntine/barcoders，条形码处理库。可能是受昨天音乐节帖子的影响上榜了。\nlfairy/maud，Rust实现的编译时HTML模板库，可能也是受昨天音乐节帖子的影响而上榜。\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-11 12:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日新上榜项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"技术覆盖：\n门票处理以及rfid手环\n节日入口系统\n强大的用户管理系统，具有不同的权限和访问权限，可以绑定到确切的日期\n重要区域的安全性，比如后台场景\n汽车检查和处理\n更灵活地控制工人的任务\n实时统计rfid手环的销售、安全区域访问、潜在危险检测等。\n应该是不同的手环配备了不同的访问权限，并且按场地和区域做出了划分。为什么用Rust？因为硬实时性要求很高。使用了MongoDB数据库，但是作者对MongoDB非常失望，因为官方没有提供Rust的驱动。用到的其他库包括：\nstrum，提供了一组宏和trait，用于在Rust中更容易处理枚举和字符串\nsentry，Sentry服务的Rust SDK，用于跟踪程序中的错误。\nmaud，高性能的模板库\nbarcoders，用于处理条形码的强大工具。用于汽车入口自动化，非常出色。\nlettre，构建和发生email。用于汽车入口系统，给司机发送条形码。\nwkhtmltopdf，用于从html模板（maud）构建出漂亮的pdf\nactix-web，令人惊叹，已经无法用言语来形容我用它开发是多么的愉快了（原作者的话）。\n原文https://www.reddit.com/r/rust/comments/8xdsx5/rust_actixweb_in_the_on_of_the_biggest_music/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-10 11:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust+actix-web 支撑了乌克兰基辅最大音乐节Atlas Weekend"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该视频主要分享了如何在C代码中创造「安全区」，配合Rust来实现性能和安全双标准。演讲者Pierre是ANSSI入侵检测研究实验室（LED）的负责人原文https://passthesalt.ubicast.tv/videos/secure-programming-is-slow-really/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-10 11:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"视频：安全编程真的很慢吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"glidehttps://github.com/philn/glide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-10 11:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"glide是基于GStreamer 和 GTK+实现的媒体播放器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"trie-rshttps://github.com/aserebryakov/trie-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-10 11:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个字典树的rust实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用了glium和image等库\n博文\n代码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-10 11:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的微型星球"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\ncswinter/LocustDB，实验性分析数据库，用于提升商用硬件查询性能。\nmimblewimble/grin，MimbleWimble 协议的一个最小的实现。\njblindsay/whitebox-tools，先进的地理数据分析平台（GIS）\nlibp2p/rust-libp2p，Rust实现的libp2p网络栈（libp2p是一套驱动IPFS的模组化的安全网络）\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-10 11:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜今日新上榜项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该项目是对Raspberry Pi的安全抽象，但可能还未经全面测试，同时也寻求社区帮助原文https://www.reddit.com/r/rust/comments/8x1ayd/calling_all_raspberry_pi_owners_rustberry_010_has/Cheddar是Rust实现的GLSL 超集语言原文https://phaazon.net/blog/cheddar-0.1原文https://www.reddit.com/r/rust/comments/8x3t63/configuration_file_parser_in_rust_looking_for/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-09 13:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一些新库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"twitchhttps://www.twitch.tv/shakyshane"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-09 13:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"水管视频：给初学者看的Rust并发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用r#..#语法定义原始字符串的一些规则原文https://medium.com/@rahulthakoor/rust-raw-string-literals-9579c4feb231\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-09 13:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust原始字符串介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://zhuanlan.zhihu.com/p/39248745"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「说明」为什么C++标准草案中会提出和Rust交互"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"yew + wasm + actix-web + diesel+ pgsql原文https://medium.com/@saschagrunert/a-web-application-completely-in-rust-6f6bdb6c4471"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"完全用Rust实现的Web应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"并且已经写好了一部分文章，该导读主要是侧重Rust和C++交互原文https://www.reddit.com/r/rust/comments/8wv32h/feedback_for_ffi_guide/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"FFI  导读已经根据社区的反馈进行了重写"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用到了rayon、serde-json、simd等，用于提供高性能的JSON解析号称要快过C语言实现的json解析模块（ujson、rapidjson）和python标准库的json模块。\n原文\nhyperjson\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hyperjson是基于Rust优化的Python模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用Vagrant来配置交叉编译环境[原文](https://medium.com/@wizofe/cross-compiling-rust-for-arm-e-g-raspberry-pi-using-any-os-11711ebfc52b?sk=c7fbecec1035befa61eb45abe83c5a08）"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用任意操作系统为ARM（比如树莓派）交叉编译Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当前源码中依然包括unsafe代码，但暂时未发现UB，还需要人来review原文https://github.com/actix/actix-web/issues/289#issuecomment-402580525"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"actix-web已经移除了所有会产生UB的unsafe"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\ntomhoule/graphql-client，类型化的GraphQL客户端。特点是为请求和响应提供精确类型。并且支持wasm。\natom/eon，是Atom团队从xray编辑器项目中提取出来的实验性无冲突实时版本控制系统。使用类似于Git，但不用害怕冲突。\nthiolliere/airjump-multi，基于specs实现的ECS游戏demo\nromanz/electrs，用rust实现 Electrum  Server。  Electrum 是比特币钱包。该项目的目的是可以让用户在自己本机上建立 Electrum 服务器，从而保护用户的隐私和安全。\nvi/websocat，命令行WebSocket客户端，类似于netcat（或curl）\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-08 12:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜本周新上榜项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust团队最近收到RedHat提交的一个关于rustdoc安全漏洞的报告，如果没有使用rustdoc则没有问题。问题出在rustdoc的插件功能中，插件默认的加载路径来自于大多数平台中可以全局写入的路径/ tmp / rustdoc / plugins中，所以恶意的用户利用了此漏洞，加载了动态库，让另一个用户执行该代码。因为插件是Rust1.0版本之前的功能，所以将它删除不会影响到任何rust用户，在不久的将来会直接将插件功能从rustdoc中删除。这是Rust第一个CVE，算是一个里程碑事件，在1.27.1中会将此漏洞修复。虽然这是一个小问题，但是Rust官方团队还继续遵循针对安全漏洞的完整流程，所以在修补程序发布之前，拿出来 公开讨论。需要注意的是，Rust确实成功地阻止了编译时代码中的许多问题，但那些仅仅是内存安全导致的问题。而这个安全漏洞属于逻辑错误，有的时候，大家对于Rust抱有热情并产生广泛的期待，而这一事件也正好证明了Rust并不能保证阻止所有错误。\n官方原文\n安全漏洞详细\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：rustdoc安全公告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一篇由Redox组织成员写的博文。Redox是Rust编写的操作系统。本文简单介绍了Redox的特色。Unix/Linux的哲学是：一切皆文件。而Redox的哲学是：一切皆URL。一切皆URL是Redox设计中的重要原则。粗略地说，意味着API/ 设计/生态系统都以URL为中心，并且作为主要的通信原语。应用程序使用URL相互通信，包括系统、后台程序。这个想法和Plan 9系统是相似的。一切皆URL的好处是，不会像一切皆文件那样强制形成一个树结构。资源可以通过协议来区分。本文举了一些具体的示例来展示这种哲学。\n原文\n参考\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Redox OS编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GLSL是OpenGL的着色语言。glsl使用nom实现了GLSL的解析。原文https://www.reddit.com/r/rust/comments/8wog16/glsl09_a_glsl_parser_and_transpiler_crate/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"glsl-0.9：一个GLSL解析器和转换器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n原文\n具体论文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"貌似是C/C++标准委员会提出草案要求C++可以和Rust直接相互调用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"写一次SIMD代码，在SSE2/41和 AVX2上使用。与stdsimd不同，它可以在不同宽度的SIMD指令集上进行抽象。原文https://www.reddit.com/r/rust/comments/8wlj9i/announcing_simdeez_write_simd_code_once_use_it_on/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SIMDeez 库发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前有Rust推动社区用Rust重写一切。后有C++17承诺现代编程语言的安全和易用，以及包含C的性能和功能。另外还有其他“系统”编程语言的夹击，比如Nim、Reason/OCaml、Crystal、Go和Pony。本文对上面列的这些语言都挑了一些刺，该作者不太喜欢Rust，他是Erlang粉，他认为Rust失去了易于编程和正确性。他不太喜欢Rust现在的借用检查，要他喜欢Rust，除非Rust把这一点改的更加符合人体工程学。可能他不知道Rust官方正在加紧开发NLL，就是为了改善借用检查的人体工程性。原文https://blog.usejournal.com/systems-languages-an-experience-report-d008b2b12628"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"系统语言：体验报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"支持GitHub Page原文https://github.com/rust-community/rust-lang-blog-boilerplate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"这是从blog.rust-lang.org剥离出来的静态博客模板"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Conduit 0.5发布，引入了网格间pod零配置自动TLS创建和分发。这意味着大多数Kubernetes用户现在可以通过两个简单的命令加密其服务之间的内部HTTP通信。Conduit正在逐步进入Linkerd项目，未来会成为Linkerd 2.0的基础。原文https://blog.conduit.io/2018/07/06/conduit-0-5-and-the-future/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"conduit 0.5及其未来"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://alexkitchens.net/2018/07/06/why-i-love-rust.html\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-07 11:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我为什么爱Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/8w9mfy/debian_is_starting_to_package_rust_crates/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Debian开始打包rust crate了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是模块系统中关于引用路径的改进，大致模型和Python2和shell中搜索路径相似。\n原文\n前文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust2018中use语句的相对路径"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是我目前正在写的一本书Rust中文书籍。目前初稿已经差不多了，准备把内容覆盖到Rust2018。还需要做以下更新：\n异步async/await\nsimd\n模块系统改进\nimpl/dyn trait\nwasm\n其他的一些小零碎\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"更新一下《Rust编程之道》的写作进度。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PCG是Procedural Content Generation，一般用于游戏中自动生成内容。本文展示了用Rust实现自动生成房间和走廊原文https://www.jamestease.co.uk/blether/procedural-level-generation-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现PCG技术"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Distil公司正在招Rust工程师实现全球机器人检测网络，将用于识别并缓解恶意的僵尸网络、攻击者等。原文https://www.distilnetworks.com/job/?id=c2a5db5c-12ce-40f2-949c-48510acf7fa1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"国外的Rust招聘越来越多了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"StatsD近年来比较火，StatsD 就是一个简单的网络守护进程，通过 UDP 或者 TCP 方式侦听各种统计信息，包括计数器和定时器，并发送聚合信息到后端服务。bioyinohttps://github.com/avito-tech/bioyino该公司还写了文章来介绍bioyino的起源和开发过程，包括他们为什么选择Rust。最难能可贵的是，当初有人反对使用Rust，但他们还是冒着风险用上了Rust。博文https://medium.com/avitotech/bioyino-a-distributed-scalable-statsd-3445acb177eb"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的分布式StatsD服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust使用这个的话会有更好的优化效果论文http://sf.snu.ac.kr/publications/llvmtwin.pdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"论文：为llvm IR创建了一种新的内存模型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"展示高阶抽象语法(HOAS)原文https://stackoverflow.com/questions/51182640/is-it-possible-to-represent-higher-order-abstract-syntax-in-rust\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-06 13:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现lambda演算"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个Ruby程序，它生成Rust程序，再生成Scala程序，又生成...（通过总共128种语言）... REXX程序，再次生成原始的Ruby代码。 ​​​​quine-relayhttps://github.com/mame/quine-relay"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个编程语言接力游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"airjump-multihttps://github.com/thiolliere/airjump-multi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"specs, nphysics 和 vulkano实现的游戏demo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://intellij-rust.github.io/2018/07/04/changelog-77.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"INTELLIJ RUST IDE发布了新特性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"编写一个有效且惯用的Rust程序实际上比编写一个有潜在危险的程序更容易。原文https://medium.com/paritytech/why-rust-846fd3320d3f"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Parity说： 为什么用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"graphql-clienthttps://github.com/tomhoule/graphql-client"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个新的Graphql客户端 0.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者：漂流原文https://www.driftluo.com/article/348befe3-da7e-4f58-b720-a0c47e8c8165"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"群友原创：proc macro初试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Yocto Project是一个系统构建工具集，允许完全从源代码配置和构建完整的Linux发行版，包括交叉编译工具链。原文https://pagefault.blog/2018/07/04/embedded-development-with-yocto-and-rust/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-05 11:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Yocto和Rust进行嵌入式开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"经过一些实践，官方打算使用Discord作为新的沟通渠道原文https://internals.rust-lang.org/t/exploring-new-communication-channels/7859"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：探索新的沟通渠道"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文试图从动态语言惯用法中探索改进Rust这种静态语言人体工程学的可能总结了几点：原文http://willcrichton.net/notes/idioms-of-dynamic-languages/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"动态语言惯用法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rain是一个Rust实现的轻巧且强大的分布式计算框架rainhttps://github.com/substantic/rain"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rain 0.3发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://corecursive.com/016-moves-and-borrowing-in-rust-with-jim-blandy/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PodCast： Rust中的move和借用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"DataFusion是一个Rust实现的SQL查询引擎，它使用Apache Arrow作为其内存模型。原文https://andygrove.io/2018/07/datafusion-0.3.0/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"DataFusion 0.3发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://medium.com/@Razican/learning-simd-with-rust-by-finding-planets-b85ccfb724c3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过这篇文章来学习SIMD"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.fullstackreact.com/articles/rust-react-and-web-assembly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"你们要的全栈Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"继续全栈Rust  ： PRRR Stack（Postgres，Rust，Rocket，React）怕不怕？原文https://medium.com/@ccrsh/introducing-prrrstack-d617ff518ba6"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PRRR 了解一下"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"确认过眼神，你没看错。是的，是用JS安全地管理Rust。不过不要被标题迷惑了，主要是Servo项目中Rust和SpiderMonkey打交道。本文主要讨论的内容是：垃圾收集器SpiderMonkey  JavaScript运行时可以安全地管理Rust 数据的生命周期。最近关于Rust的论文比较多。\n原文\npdf\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-04 13:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Javascript安全地管理Rust数据的生命周期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该篇文章官方探讨了wasm-bindgen 的细节，以及对未来的设想。wasm-bindgen的核心是促进javascript和Rust之间使用wasm进行通信。它允许开发者直接使用Rust的结构体、javascript的类、字符串等类型，而不仅仅是wasm支持的整数或浮点数。开发者只需要专注于他的业务。另外，wasm-bindgen还将支持wasm即将发布的Host Bindings提议，该提议的目标如下：\n人体工程学 - 允许WebAssembly模块创建，传递，调用和操作JavaScript + DOM对象。\n速度 - 允许对JS / DOM或其​​他host调用进行良好的优化。\n平台一致性 - 允许WebIDL用于标注Wasm导入/导出（通过工具）。\n增量机制 - 提供方便填充的策略。\n这有望解锁更快的dom访问，因为dom api可以在编译为wasm时进行验证，就不需要每次在调用时动态检查了。wasm-bindgen致力于为javascript生态和Rust crate生态系统建立共享的基础。\n共享原生的外部导入。\n共享的ECMAScript全局API，每个javascript环境中可用的全局API都可以通过wasm_bindgen :: js模块获取。当然，这里面有一些体力活，需要人手来共同完成，官方也开了issues来忽悠大家一起完成，并且手把手教了方法，想参与贡献的可以去wasm_bindgen的issues列表中查看。\n所有的Web API类型、函数和方法都是由WebIDL来指定，目前正在为wasm-bindgen开发一个新的WebIDL前端。新的前端意味着，wasm-bindgen会解析WebIDL并将其转换为wasm-bindgen的AST，再进行后面的过程。\n原文https://rustwasm.github.io/2018/07/02/vision-for-wasm-bindgen.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-03 11:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方： 我们对wasm-bindgen的愿景"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这些crate多半是针对Rust缺失的特性、推迟的RFC、实验性、hacky技巧之类的。原文https://users.rust-lang.org/t/list-of-crates-that-improves-or-experiments-with-rust-but-may-be-hard-to-find/17806"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-03 11:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"该帖子总结了社区中对Rust语言扩展或改进的第三方crate列表"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一次用rust编写脚本的深度实践\n原文\ncommandspec\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-03 11:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用commandspec从shell迁移到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"topic主题：\nRust中宏的探讨\nfacebook用Rust实现的的Mercurial服务器Mononoke\n有在硅谷的朋友可以去参加原文https://www.meetup.com/Rust-Bay-Area/events/251862242/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-03 11:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rocket 作者、PingCAP等组织的硅谷meetup"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文http://paulkernfeld.com/2018/07/01/logistic-regression-in-rust.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-03 11:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"机器学习：Rust实现逻辑回归"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库在最新的移动开发环境上都能成功编译 @熊皮皮kennytm/rust-ios-androidhttps://github.com/kennytm/rust-ios-android也欢迎大家推荐你们用过的或自己开发的库\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-03 11:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"群友推荐： rust-ios-android"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文是corrode作者写的关于c2rust项目的起源故事。c2rust是 Galois 和Immunant共同推出的项目。本文作者之前在Galois工作，他写了corrode这个工具就是C-to-Rust的翻译工具。他从2016年开始研究corrode，后来mozilla资助了这个项目，才有了现在的c2rust。不过作者也说了，因为某些合同的原因，c2rust是重零构建的项目，不是corrode的衍生。作者也承认，c2rust是将C项目转为Rust的最佳选择。原文https://jamey.thesharps.us/2018/06/30/c2rust-vs-corrode/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"c2rust物语"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"涵盖过去的6周原文https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-6/7842?u=bitshiftmask"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式工作组第六次报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"直播录屏，长达4小时。。原文https://www.youtube.com/watch?v=mMuk8Rn9HBg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"油管视频：使用Rust构建异步ZooKeeper客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nharababurel/gcsf，虚拟文件系统，允许用户在本地挂载google Drive，并且可以将其作为常规磁盘分区。该项目今天占了GitHub趋势总榜Top 1\nimmunant/c2rust，把C代码转成Rust代码。ast-exporter从C文件中提取Clang生成的抽象语法树和类型信息，并将其序列化为CBOR文件。 ast-importer使用这些CBOR文件并生成Rust源代码，保留初始C程序的语义。\nveloren/game，一个类似于我的世界的游戏\ndani-garcia/bitwarden_rs， bitwarden（密码管理服务）核心服务器的非官方Rust实现， https://bitwarden.com/\ncb372/sbt-client， rust实现的sbt轻客户端。sbt是scala的基于任务的构建工具\nalexcrichton/ssh2-rs， libssh2的Rust绑定\nchristolliday/limn， 跨平台GUI库\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"今日GitHub趋势榜新上榜项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ytdlhttps://github.com/shekohex/ytdl"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust写的一个youtube视频下载工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"该文作者探索了使用 rust+wasm提升Azure’s FaaS 性能的可能性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文探讨了Rust应用于最短路径问题的遗传算法实现\n原文\ncitydna\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的遗传算法在自治代理中的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://simplabs.com/blog/2018/06/27/actix-tcp-client.html\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用actix构建基本的TCP客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文是corrode作者写的关于c2rust项目的起源故事。c2rust是 Galois 和Immunant共同推出的项目。本文作者之前在Galois工作，他写了corrode这个工具就是C-to-Rust的翻译工具。他从2016年开始研究corrode，后来mozilla资助了这个项目，才有了现在的c2rust。不过作者也说了，因为某些合同的原因，c2rust是重零构建的项目，不是corrode的衍生。作者也承认，c2rust是将C项目转为Rust的最佳选择。原文https://jamey.thesharps.us/2018/06/30/c2rust-vs-corrode/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"c2rust物语"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"涵盖过去的6周原文https://internals.rust-lang.org/t/the-embedded-working-group-newsletter-6/7842?u=bitshiftmask"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式工作组第六次报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"直播录屏，长达4小时。。原文https://www.youtube.com/watch?v=mMuk8Rn9HBg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"油管视频：使用Rust构建异步ZooKeeper客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nharababurel/gcsf，虚拟文件系统，允许用户在本地挂载google Drive，并且可以将其作为常规磁盘分区。该项目今天占了GitHub趋势总榜Top 1\nimmunant/c2rust，把C代码转成Rust代码。ast-exporter从C文件中提取Clang生成的抽象语法树和类型信息，并将其序列化为CBOR文件。 ast-importer使用这些CBOR文件并生成Rust源代码，保留初始C程序的语义。\nveloren/game，一个类似于我的世界的游戏\ndani-garcia/bitwarden_rs， bitwarden（密码管理服务）核心服务器的非官方Rust实现， https://bitwarden.com/\ncb372/sbt-client， rust实现的sbt轻客户端。sbt是scala的基于任务的构建工具\nalexcrichton/ssh2-rs， libssh2的Rust绑定\nchristolliday/limn， 跨平台GUI库\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"今日GitHub趋势榜新上榜项目："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ytdlhttps://github.com/shekohex/ytdl"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust写的一个youtube视频下载工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://blog.x5ff.xyz/blog/azure-functions-wasm-rust-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"该文作者探索了使用 rust+wasm提升Azure’s FaaS 性能的可能性"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文探讨了Rust应用于最短路径问题的遗传算法实现\n原文\ncitydna\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的遗传算法在自治代理中的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://simplabs.com/blog/2018/06/27/actix-tcp-client.html\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-02 10:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用actix构建基本的TCP客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://newrustacean.com/show_notes/news/rust_1_27/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Newrustacean Podcast: 讨论Rust 1.27"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust出于安全原因没有对信号处理做出支持，因为信号处理很难做到正确。所以只能通过FFI的方式来做信号处理，相关的库有tokio-signal，但相关的库很少。所以作者打算自己实现一个。原文https://vorner.github.io/2018/06/28/signal-hook.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"该文是对信号（Signal）机制的深度思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"现在征求意见中原文https://www.reddit.com/r/rust/comments/8v0imm/content_ideas_for_a_rust_ffi_guide/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust FFI 指南的作者想要更新该指南的内容"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Nebulet是基于rust和wasm实现的操作系统内核原文https://lsneff.me/more-answers.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Nebulet 的更多介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"需要配合cargo-binutils来使用原文https://internals.rust-lang.org/t/llvm-tools-a-new-rustup-component-for-binary-inspection-objdump-nm-size-and-profiling-profdata/7830"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【官方】 一个用于二进制检查的Rustup组件发布：llvm-tools"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"属于servo编程系列文章该文章中介绍了servo中实现HTTP缓存，如何处理共享可变状态原文https://medium.com/programming-servo/programming-servo-an-http-cache-edb52a7f267f"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"HTTP缓存：共享可变状态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"到目前为止，Rust已经被证明是模拟器开发的最佳选择，最大的收获是静态检查和编译器错误警告阻止了大多数错误。原文https://medium.com/@ltriant/nes-emulator-part-2-i-sort-of-know-what-im-doing-f64d5e61caed\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-07-01 12:15"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"NES模拟器开发日志系列文章 Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-30 11:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Firefox里Rust代码占比"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"中文圈里应该不算新闻了\n英文\n中文\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-30 11:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"饿了么团队使用Redis + Tikv分享"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\ndanielpclark/rutie，可以方便Ruby和Rust相互集成，文档也比较丰富\nmaekawatoshiki/rapidus，Rust实现的javascript玩具引擎\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-30 11:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GitHub趋势榜本周新上榜的Rust项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在视频的结尾对比了Rust。在Reddit贴里有个评论有点意思：说实话，在看着他谈论C ++的好处的时候，我忍不住想“是的，Rust也有这个特性，但是更好”：P讨论贴https://www.reddit.com/r/rust/comments/8uhyj4/matt_godbolt_why_c_isnt_dead_he_talks_about_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"油管视频：Compiler Explorer的作者Godbolt的演讲：为什么C++还没死"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"德国斯图加特大学的研究人员写了一篇论文，对Rust中的加密API和第三方库做了可用性调查。结论：\n不安全的违约不会发生，大多数API试图完全避免默认值。\n经过身份验证的加密，在底层库中没有足够的传播，而高级库完全忽略未经验证的加密，以最大程度地防止误用。\n几乎没有高水平的库可用。\n一些项目不会警告已弃用/损坏的算法。\n没有针对意外出现时的重用措施。\n同时也给出了一些可用性建议。第三方加密库的可用性各不相同，但是最有用的密码库是sodiumoxide 和 ring\n原文\npdf\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust加密API的可用性如何？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"bandit算法据说是专治选择困难症一个赌徒，要去摇老虎机，走进赌场一看，一排老虎机，外表一模一样，但是每个老虎机吐钱的概率可不一样，他不知道每个老虎机吐钱的概率分布是什么，那么想最大化收益该怎么整？这就是多臂赌博机问题(Multi-armed bandit problem, K-armed bandit problem, MAB)。怎么解决这个问题呢？求菩萨？拜赌神？都不好使，最好的办法是去试一试，而这个试一试也不是盲目地试，而是有策略地试，越快越好，这些策略就是bandit算法。来源https://zhuanlan.zhihu.com/p/21388070原文https://www.reddit.com/r/rust/comments/8ugeui/bandit_algorithms_in_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现bandit算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Luminance是一个类型安全的图形框架\n原文\nluminance-rs\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Luminance0.27发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Jim是Firefox工程师原文https://corecursive.com/013-rust-and-bitter-c-developers-with-jim-blandy/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Podcast  ：Jim Blandy访谈-Rust要解决什么问题"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该公司用Rust构建生产服务已经一年了，实现了零维护。并且在招聘Rust工程师，但不知是否可以remote原文https://blog.passfort.com/why-choose-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Passfort公司：我们为什么选择Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者用自己的「血泪经历」证明了Rust是一门好语言原文https://spacekookie.de/blog/failure-or-why-rust-is-probably-the-best-programming-language-ever-created/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-29 12:14"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「安利文」为什么说Rust有可能是史上最好的编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"发布里程碑：\n2018-08-02：Edition 预览版 2\n2018-09-13：Edition RC版本\n2018-10-25：Edition 正式版发布\n原文https://internals.rust-lang.org/t/rust-2018-the-home-stretch/7810"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2018 最后阶段"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"知乎问答https://www.zhihu.com/question/282113351"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"来讨论一下：Rust让你瞠目结舌的代码有哪些？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于Rust实现了edgelet部分，edgelet是物联网边缘安全守护进程。守护进程提供硬件安全模块（HSM）的抽象，为物联网边缘模块提供安全的SAS令牌和证书供应。原文https://github.com/Azure/iotedge/tree/master/edgelet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软开源了Azure IoT Edge"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"正如你所期望的那样，它的速度非常快， 比原来快了12.5倍。原文https://www.reddit.com/r/rust/comments/8uczr9/deliveroo_gets_12x_speedup_moving_routing_service/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"DeliverooEng的物流算法团队刚刚发布了车手调度服务的重大改造：从Ruby转移到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"学习Rust，应该让编译器成为你的朋友，而非敌人。该文列举了七大理由，还提供了很多例子。原文https://barafael.github.io/Several-Reasons-Why-The-Rust-Compiler-Is-Your-Friend-(-8-Will-Amaze-You)/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么说Rust编译器是你的好朋友"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当你的计算机电量不足时，它可以每5分钟自动发送一次通知。原文https://github.com/yoshuawuyts/power-warn"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个有意思的小工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"全面支持Rust，包括RLS\n下载\n详细介绍\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Eclipse Rust IDE Photon正式发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"loophttps://github.com/Miserlou/Loop\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-28 10:58"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现一个loop命令"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ticketmaster公司正在招Rust工程师，Ticketmaster是一家票务平台，准备用Rust进行重构。一年130亿美元的销售额。这份远程工作应该比较靠谱，不太可能会出现被骗的工资的情况。原文https://www.reddit.com/r/rust/comments/8u43wi/9095_remote_principal_rust_engineer_ticketmaster/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"首席Rust工程师招聘(90-95％远程)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Thruster框架发布速度有点快，该框架的特点是支持stable rust，这次更新据说是移出了unsafe移除unsafe恐会成为Rust社区框架的政治正确（逃原文https://www.reddit.com/r/rust/comments/8u4osc/thruster_045_safe_and_running_on_stable/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Thruster 0.4.5 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从基准测试看，Zapper比Handlebars的Rust实现至少快30倍还支持自动化A/B测试、邮件模板等功能\n原文\nzapper\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个非常快的模板引擎Zapper"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"并和Go channel做了比较原文https://gsquire.github.io/static/post/a-rusty-go-at-channels/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中的Channel介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"hyper作者介绍了使用0.12.31版本的hyper如何处理http协议升级（如实现websocket）原文http://seanmonstar.com/post/175280388657/better-http-upgrades-with-hyper"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用hyper来处理HTTP 协议升级"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"官方建议用户应该继续使用0.1版本，如果想尝鲜，建议等待最新的0.3版本原文https://users.rust-lang.org/t/futures-0-2-has-been-moved-to-futures-preview/18329"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"futures 0.2已经被移动到futrues-preview版本中"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"playgroundhttps://play.rust-lang.org/?gist=64948b551d024a89d88cdaee65371a05&version=nightly&mode=debug"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"withoutboats给出了一个async的完整使用示例"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要焦点是性能提升原文https://internals.rust-lang.org/t/help-us-get-non-lexical-lifetimes-nll-over-the-finish-line/7807/2?u=nikomatsakis"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：关于NLL的最新进展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-postgreshttps://github.com/sfackler/rust-postgres"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust实现的PostgreSQL驱动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"系列文章，该文作者可能是一个运维（多和ansible、python、openstack打交道），正在准备用Rust实现一个运维工具devtop，是对他之前一个工具的重构。该文主要是记录他处理命令行参数解析的过程原文https://medium.com/journey-to-rust/devtop-command-line-parser-f08b72b02bea"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"devtop： 命令行解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.robertvojta.com/rust-thermometer-part-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust制作温度计 Part 2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Event Sourcing是一种领域驱动设计的实践，本文作者创建了eventsourcing crate，并介绍如何使用它原文https://medium.com/@KevinHoffman/building-an-event-sourcing-crate-for-rust-2c4294eea165\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-27 09:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust实现Event Sourcing（事件溯源）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"工作组愿景： 如外科手术般插入由Rust编译的wasm来加速JavaScript性能敏感的代码，而不需要扔掉或重写现有的代码库，也不需要更改现有的开发流程，做到无缝集成。几点原因：\n为什么关注性能敏感的代码？ 因为js的优化并没有那么简单，而使用Rust你根本不需要成为js优化专家，不需要熟悉JIT内部实现，不需要魔法也能加速。\n方便集成。直接编译为.wasm，使得现有的js代码库可以增量式部分采用Rust。而且还可以保持你现有代码库，不需要重写。\n不需要更改你现有开发流程。对于js开发者，可以将.wasm发布到npm，然后在package.json中依赖它。可以导入为ECMAScript模块，遵循CommonJS风格的require，或者作为新的对象添加到JS全局。而对于Rust开发者来说，可以将.wasm发布到npm，甚至都不需要安装nmp、nodejs等js环境。wasm-pack会编译，优化并生成js绑定，然后发布到npm中。\n当前状态和工具集：\n正在写的书：The Rust and WebAssembly Book\nwasm-bindgen，帮助Rust和js通信。甚至通过它可以在js和rust之间发送string和struct这样的类型，而不仅仅是wasm标准里的整数和浮点数。\nwasm-pack，一站式构建、发布Rust编译的wasm。\nTwiggy ，检查.wasm代码尺寸的工具\nwee_alloc，为wasm设计的小型内存分配器\nwasm-snip，可以用一条unreachable指令强制替换函数的主体。用于在运行时永远不会使用的函数的情况。配合wasm-gc。\nconsole_error_panic_hook，将Rust内部编译错误在浏览器端显式，方便调试\n当然，未来还需要更多的新伙伴加入Wasm工作组，共谋大业。原文https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：我们对Rust和WebAssembly的愿景"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"面向艺术家、黑客、设计人员、开发者，内置了很多简单、快速、方便可读的代码。原文http://nannou.cc/news/hello-nannou/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个Rust开发的创意编码框架： Nannou"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Dateutil是python中用于处理日期时间的库。dateutil.parser具体来说，就是将人们想出的所有超级怪异时间格式转化为实际有用的时间格式。经验：\n\n转录代码时，不要试图用Rust来写python代码。\n\n\n编写漂亮的代码不是首要的目的\n\n\n不要迷信不懂Rust的人说的话。比如“听说Rust正在加入try-catch语法”，作者还以为是python中的try catch异常处理。\n\n\n宏不是免费的。不要滥用宏，有可能增加编译时间，因为宏会产生冗余代码。\n\n\n遇到了Rust生态问题，缺少一些需要的包。\n\n\n原文\n\n\ndtparse\n\n转录代码时，不要试图用Rust来写python代码。编写漂亮的代码不是首要的目的不要迷信不懂Rust的人说的话。比如“听说Rust正在加入try-catch语法”，作者还以为是python中的try catch异常处理。宏不是免费的。不要滥用宏，有可能增加编译时间，因为宏会产生冗余代码。遇到了Rust生态问题，缺少一些需要的包。原文https://speice.io/2018/06/dateutil-parser-to-rust.htmldtparsehttps://github.com/bspeice/dtparse"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我学到了什么： 将Dateutil Parser 移植到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/8ttf3a/announcing_twiggy_version_020/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"twiggy 0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"任务： 计算20,000,000个数字中有多少个素数。第一回合:  判断每一个数字是否为素数\ngo:\n\ntime 34.5s\nmemory: 1490kb\n\n\nrust:\n\ntime 31.9s\nmemory: 550kb\n\n\n\ntime 34.5s\nmemory: 1490kb\n\ntime 31.9s\nmemory: 550kb\nRust胜出。第二回合： 进一步优化算法\ngo:\n\ntime 6.2 s\nmemory: 结束内存占用29,000 KiB和45,000 KiB之间。\n\n\nrust:\n\ntime 6.0s\nmemory: 结束内存使用稳定在10,512 KiB\n\n\n\ntime 6.2 s\nmemory: 结束内存占用29,000 KiB和45,000 KiB之间。\n\ntime 6.0s\nmemory: 结束内存使用稳定在10,512 KiB\nRust胜出。第三回合： 将数组换成切片\ngo:\n\ntime 6.0 s\nmemory: 结束内存使用稳定在大约16,900 KiB\n\n\nrust:\n\ntime 5.1s\nmemory:结束内存使用稳定在10,516 KiB\n\n\n\ntime 6.0 s\nmemory: 结束内存使用稳定在大约16,900 KiB\n\ntime 5.1s\nmemory:结束内存使用稳定在10,516 KiB\nRust胜出。所以，证明了Rust更好。原文+ 代码https://github.com/veniamin-ilmer/go-vs-rust-primes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Go  vs Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Heroku上运行Rocket + Elm项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"想在公司安利Rust的，可以看看这个视频。油管视频https://www.youtube.com/watch?v=imtejBNbm0o&list=PLbWDhxwM_45mPVToqaIZNbZeIzFchsKKQ"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Why Rust？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章里用了三种不同的多线程并行方法，与单线程方案的性能进行比较\n原文\n代码\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"区块链挖掘：尴尬的并行？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"工作组愿景： 如外科手术般插入由Rust编译的wasm来加速JavaScript性能敏感的代码，而不需要扔掉或重写现有的代码库，也不需要更改现有的开发流程，做到无缝集成。几点原因：\n为什么关注性能敏感的代码？ 因为js的优化并没有那么简单，而使用Rust你根本不需要成为js优化专家，不需要熟悉JIT内部实现，不需要魔法也能加速。\n方便集成。直接编译为.wasm，使得现有的js代码库可以增量式部分采用Rust。而且还可以保持你现有代码库，不需要重写。\n不需要更改你现有开发流程。对于js开发者，可以将.wasm发布到npm，然后在package.json中依赖它。可以导入为ECMAScript模块，遵循CommonJS风格的require，或者作为新的对象添加到JS全局。而对于Rust开发者来说，可以将.wasm发布到npm，甚至都不需要安装nmp、nodejs等js环境。wasm-pack会编译，优化并生成js绑定，然后发布到npm中。\n当前状态和工具集：\n正在写的书：The Rust and WebAssembly Book\nwasm-bindgen，帮助Rust和js通信。甚至通过它可以在js和rust之间发送string和struct这样的类型，而不仅仅是wasm标准里的整数和浮点数。\nwasm-pack，一站式构建、发布Rust编译的wasm。\nTwiggy ，检查.wasm代码尺寸的工具\nwee_alloc，为wasm设计的小型内存分配器\nwasm-snip，可以用一条unreachable指令强制替换函数的主体。用于在运行时永远不会使用的函数的情况。配合wasm-gc。\nconsole_error_panic_hook，将Rust内部编译错误在浏览器端显式，方便调试\n当然，未来还需要更多的新伙伴加入Wasm工作组，共谋大业。原文https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：我们对Rust和WebAssembly的愿景"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"面向艺术家、黑客、设计人员、开发者，内置了很多简单、快速、方便可读的代码。原文http://nannou.cc/news/hello-nannou/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个Rust开发的创意编码框架： Nannou"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Dateutil是python中用于处理日期时间的库。dateutil.parser具体来说，就是将人们想出的所有超级怪异时间格式转化为实际有用的时间格式。经验：\n\n转录代码时，不要试图用Rust来写python代码。\n\n\n编写漂亮的代码不是首要的目的\n\n\n不要迷信不懂Rust的人说的话。比如“听说Rust正在加入try-catch语法”，作者还以为是python中的try catch异常处理。\n\n\n宏不是免费的。不要滥用宏，有可能增加编译时间，因为宏会产生冗余代码。\n\n\n遇到了Rust生态问题，缺少一些需要的包。\n\n\n原文\n\n\ndtparse\n\n转录代码时，不要试图用Rust来写python代码。编写漂亮的代码不是首要的目的不要迷信不懂Rust的人说的话。比如“听说Rust正在加入try-catch语法”，作者还以为是python中的try catch异常处理。宏不是免费的。不要滥用宏，有可能增加编译时间，因为宏会产生冗余代码。遇到了Rust生态问题，缺少一些需要的包。原文https://speice.io/2018/06/dateutil-parser-to-rust.htmldtparsehttps://github.com/bspeice/dtparse"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我学到了什么： 将Dateutil Parser 移植到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/8ttf3a/announcing_twiggy_version_020/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"twiggy 0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"任务： 计算20,000,000个数字中有多少个素数。第一回合:  判断每一个数字是否为素数\ngo:\n\ntime 34.5s\nmemory: 1490kb\n\n\nrust:\n\ntime 31.9s\nmemory: 550kb\n\n\n\ntime 34.5s\nmemory: 1490kb\n\ntime 31.9s\nmemory: 550kb\nRust胜出。第二回合： 进一步优化算法\ngo:\n\ntime 6.2 s\nmemory: 结束内存占用29,000 KiB和45,000 KiB之间。\n\n\nrust:\n\ntime 6.0s\nmemory: 结束内存使用稳定在10,512 KiB\n\n\n\ntime 6.2 s\nmemory: 结束内存占用29,000 KiB和45,000 KiB之间。\n\ntime 6.0s\nmemory: 结束内存使用稳定在10,512 KiB\nRust胜出。第三回合： 将数组换成切片\ngo:\n\ntime 6.0 s\nmemory: 结束内存使用稳定在大约16,900 KiB\n\n\nrust:\n\ntime 5.1s\nmemory:结束内存使用稳定在10,516 KiB\n\n\n\ntime 6.0 s\nmemory: 结束内存使用稳定在大约16,900 KiB\n\ntime 5.1s\nmemory:结束内存使用稳定在10,516 KiB\nRust胜出。所以，证明了Rust更好。原文+ 代码https://github.com/veniamin-ilmer/go-vs-rust-primes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Go  vs Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Heroku上运行Rocket + Elm项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"想在公司安利Rust的，可以看看这个视频。油管视频https://www.youtube.com/watch?v=imtejBNbm0o&list=PLbWDhxwM_45mPVToqaIZNbZeIzFchsKKQ"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Why Rust？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章里用了三种不同的多线程并行方法，与单线程方案的性能进行比较\n原文\n代码\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"区块链挖掘：尴尬的并行？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"工作组愿景： 如外科手术般插入由Rust编译的wasm来加速JavaScript性能敏感的代码，而不需要扔掉或重写现有的代码库，也不需要更改现有的开发流程，做到无缝集成。几点原因：\n为什么关注性能敏感的代码？ 因为js的优化并没有那么简单，而使用Rust你根本不需要成为js优化专家，不需要熟悉JIT内部实现，不需要魔法也能加速。\n方便集成。直接编译为.wasm，使得现有的js代码库可以增量式部分采用Rust。而且还可以保持你现有代码库，不需要重写。\n不需要更改你现有开发流程。对于js开发者，可以将.wasm发布到npm，然后在package.json中依赖它。可以导入为ECMAScript模块，遵循CommonJS风格的require，或者作为新的对象添加到JS全局。而对于Rust开发者来说，可以将.wasm发布到npm，甚至都不需要安装nmp、nodejs等js环境。wasm-pack会编译，优化并生成js绑定，然后发布到npm中。\n当前状态和工具集：\n正在写的书：The Rust and WebAssembly Book\nwasm-bindgen，帮助Rust和js通信。甚至通过它可以在js和rust之间发送string和struct这样的类型，而不仅仅是wasm标准里的整数和浮点数。\nwasm-pack，一站式构建、发布Rust编译的wasm。\nTwiggy ，检查.wasm代码尺寸的工具\nwee_alloc，为wasm设计的小型内存分配器\nwasm-snip，可以用一条unreachable指令强制替换函数的主体。用于在运行时永远不会使用的函数的情况。配合wasm-gc。\nconsole_error_panic_hook，将Rust内部编译错误在浏览器端显式，方便调试\n当然，未来还需要更多的新伙伴加入Wasm工作组，共谋大业。原文https://rustwasm.github.io/2018/06/25/vision-for-rust-and-wasm.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官方：我们对Rust和WebAssembly的愿景"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"面向艺术家、黑客、设计人员、开发者，内置了很多简单、快速、方便可读的代码。原文http://nannou.cc/news/hello-nannou/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个Rust开发的创意编码框架： Nannou"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Dateutil是python中用于处理日期时间的库。dateutil.parser具体来说，就是将人们想出的所有超级怪异时间格式转化为实际有用的时间格式。经验：\n\n转录代码时，不要试图用Rust来写python代码。\n\n\n编写漂亮的代码不是首要的目的\n\n\n不要迷信不懂Rust的人说的话。比如“听说Rust正在加入try-catch语法”，作者还以为是python中的try catch异常处理。\n\n\n宏不是免费的。不要滥用宏，有可能增加编译时间，因为宏会产生冗余代码。\n\n\n遇到了Rust生态问题，缺少一些需要的包。\n\n\n原文\n\n\ndtparse\n\n转录代码时，不要试图用Rust来写python代码。编写漂亮的代码不是首要的目的不要迷信不懂Rust的人说的话。比如“听说Rust正在加入try-catch语法”，作者还以为是python中的try catch异常处理。宏不是免费的。不要滥用宏，有可能增加编译时间，因为宏会产生冗余代码。遇到了Rust生态问题，缺少一些需要的包。原文https://speice.io/2018/06/dateutil-parser-to-rust.htmldtparsehttps://github.com/bspeice/dtparse"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我学到了什么： 将Dateutil Parser 移植到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文https://www.reddit.com/r/rust/comments/8ttf3a/announcing_twiggy_version_020/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"twiggy 0.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"任务： 计算20,000,000个数字中有多少个素数。第一回合:  判断每一个数字是否为素数\ngo:\n\ntime 34.5s\nmemory: 1490kb\n\n\nrust:\n\ntime 31.9s\nmemory: 550kb\n\n\n\ntime 34.5s\nmemory: 1490kb\n\ntime 31.9s\nmemory: 550kb\nRust胜出。第二回合： 进一步优化算法\ngo:\n\ntime 6.2 s\nmemory: 结束内存占用29,000 KiB和45,000 KiB之间。\n\n\nrust:\n\ntime 6.0s\nmemory: 结束内存使用稳定在10,512 KiB\n\n\n\ntime 6.2 s\nmemory: 结束内存占用29,000 KiB和45,000 KiB之间。\n\ntime 6.0s\nmemory: 结束内存使用稳定在10,512 KiB\nRust胜出。第三回合： 将数组换成切片\ngo:\n\ntime 6.0 s\nmemory: 结束内存使用稳定在大约16,900 KiB\n\n\nrust:\n\ntime 5.1s\nmemory:结束内存使用稳定在10,516 KiB\n\n\n\ntime 6.0 s\nmemory: 结束内存使用稳定在大约16,900 KiB\n\ntime 5.1s\nmemory:结束内存使用稳定在10,516 KiB\nRust胜出。所以，证明了Rust更好。原文+ 代码https://github.com/veniamin-ilmer/go-vs-rust-primes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Go  vs Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文http://ethanfrei.com/posts/rust-with-rocket-elm-running-on-heroku.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Heroku上运行Rocket + Elm项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"想在公司安利Rust的，可以看看这个视频。油管视频https://www.youtube.com/watch?v=imtejBNbm0o&list=PLbWDhxwM_45mPVToqaIZNbZeIzFchsKKQ"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Why Rust？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章里用了三种不同的多线程并行方法，与单线程方案的性能进行比较\n原文\n代码\n\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-26 11:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"区块链挖掘：尴尬的并行？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Oxyhttps://oxy-secure.app/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-25 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个聚焦安全的远程访问工具 Oxy"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在Rust中Arc可以用于处理多线程之间引用的原子性，但是Arc本身不是原子的。所以需要使用Mutex<Arc<T»或RwLock<Arc<T»，但是如何可以原子加载Arc，并且可以自动更新，就可以避免使用锁，实现无阻塞。该文章介绍了实现思路：\n原文\n代码\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-25 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使Arc更加原子化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"自动生成随机的test case来做fuzzing，如果多个编译器给出的目标程序运行结果不同，那就说明编译器有bug。作者使用了自制模糊测试工具 ： prog-fuzzhttps://github.com/vegard/prog-fuzz原文http://www.vegardno.net/2018/06/compiler-fuzzing.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-25 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"对rustc编译器进行模糊测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"VSTS =  Visual Studio Team Services据作者说好用（作者是微软的原文https://blog.x5ff.xyz/blog/rust-ci-cd-vsts/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-25 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用VSTS构建和部署Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"ChaosBot"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"记录了一些actix使用案例社区介绍https://actix.rs/cn/community/\n( 每日新闻备份地址 )\nTelgram Channel ： https://t.me/rust_daily_news \n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2018-06-25 10:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"国人搞的actix中文社区"},"type":"text"}],"type":"title"}},]
