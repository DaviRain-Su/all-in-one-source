export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"AMD公司的驱动开发团队是较小的团队，为他们的Radeon显卡提供工具平台。这包括Radeon内存可视化软件、图形卡分析软件和Radeon开发者面板软件。当开发的需求提高，这些软件的数量也会变多。AMD公司希望找到有立体图形学和Rust经验、能适应多团队协同工作的开发者。AMD公司官网https://jobs.amd.com/job/Boxborough-3D-Driver-Development-Engineer-80489-Mass/677678000/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"快讯：AMD正在招聘有Rust经验的图形驱动工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Debian Packages官网https://packages.debian.org/fr/buster/rustc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"快讯：Debian系统稳定版已经附带安装rustc的1.41.1版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"知名的语言分析软件rust-analyzer发布了更新公告。本次更新包括许多新功能，包括帮你填写借用符号的函数名补全，从GitHub帮助收集已发布版本的信息，以及添加了新的与dbg!宏有关很方便的补全。本次更新还包括诸多内部改进，包括为内部代码添加更多文档，以便贡献者修改代码和开展工作。rust-analyzer官网https://rust-analyzer.github.io/thisweek/2020/09/28/changelog-44.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer发布第四十四期更新公告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"博主斯科特·玛彬发布了这篇博客文章，阐述他和社区成员一起工作，为ESP32、ESP8266芯片的Rust支持做贡献工作的经历。ESP8266芯片，是全球化的芯片生产商乐鑫公司生产的明星产品，它是性价比的无线连接单片机，能提供适用于物联网、安防领域的解决方案。作者从今年一月就启动了对该系列芯片的支持工作，大量近期的技术更新，也让作者有更进一步的进展。ESP8266拥有较为特殊的Xtensa指令集，这也决定了编译器rustc需要有进一步的工作。作者做了代码的清扫和整理工作，来更快地更新Xtensa指令集所需的编译器模块。目前的Rust编译器rustc和基础设施LLVM的更新有紧密的关系，作者也在推动这个指令集更新到LLVM的主分支里去。作者特别提到，乐鑫公司非常乐于解答开源社区的问题，经常帮助修复软件漏洞和解决问题。作者给出了一个在Linux平台可以使用的rustc编译版，它包括了Xtensa指令集的支持。和许多公司的芯片相似，ESP系列的芯片有特定的烧录流程。厂家给出的流程是以Python脚本的形式提供的。@icewind1991和@jessebraham两位社区成员帮助了作者，分别整理Python脚本到Rust项目，以及提供cargo适用的接口，这有助于搭建完备的烧录工具链。现在，用户只需要一行命令，就可以向ESP系列的芯片里，烧录编译好的Rust程序。这对敏捷开发是非常有好处的，作者也更新了更多的功能，做了提升烧录速度的诸多优化过程。Rust嵌入式社区提供了完整的裸机开发架构：这由外设访问库、硬件中间层库和运行时库组成。通常情况下，外设访问库是由SVD文件生成的。乐鑫公司提供了自己的称为IDF的外设索引格式；作者开发了idf2svd项目，将它转换为SVD格式，以便更快适应Rust嵌入式的生态。作者提到，有了SVD文件，用户就可以调试ESP8266上运行的程序了。因为Xtensa指令集特殊的特点，作者专门开发了适用于它的运行时库，和其它库一样，都把功能归纳到标签宏，这样能精简很多开发流程，包括时钟在内的外设就可以使用了。如果说外设访问库可以机器生成，那么硬件中间层库，便是支持库开发中最需要开发者理解、花功夫的部分。作者在这段时间里，开发了ESP32、ESP8266两种芯片的支持库。社区成员@arjanmels做了一些开拓性的工作，作者随后完成了大量ESP32芯片的开发例子，这些例子都是可以实际运行的。ESP8266的支持库也是由社区成员完成的，和ESP32不同，乐鑫只提供编译好的二进制代码，所以需要由这些二进制代码逆向得到。“虽然这挺有趣的，”作者提到，“但是比从源代码翻阅着写会难很多。”作者完成了大量外设的支持工作，已经开源到esp-rs社区里面了。为了引导新手快速开发，作者很早就编写了一系列入门文章。随着编译器、支持库的修改和优化，在随后的时间里，作者不厌其烦地修订文章，以便满足最新版本的开发需求。这些修改包括LLVM的条件变多了，从自己编译到能在rustup里安装，也包括能同时在两款芯片上编译运行的程序样例。作者希望未来，Xtensa能作为广泛支持的目标，他的工作能用在未来可能出现的新芯片上。相比今年初的工作，作者得到了更多的成果。作者在文章最后，感谢了所有的社区志愿者。作者希望，未来WiFi和蓝牙的支持能继续完善，最后能适配到Tock、RTIC等许多社区成熟的裸机运行环境里去。博客文章https://mabez.dev/blog/posts/esp-rust-ecosystem/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《ESP32、ESP8266与Rust语言：建造生态圈》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"博主fasterthanlime发布了这篇文章。他希望解决文件会被修改的前提下，动态重载链接库的问题。链接库不能单独工作，应该和具体的应用程序一起工作，我们需要导入符号，由操作系统寻找函数的调用位置。文章中，博主详细阐述了动态链接库的创建和应用方法，并用C和Rust两门编程语言具体举例。Rust语言中，要链接静态链接库，需要给编译器提供编译参数。为了链接动态链接库，需要找到操作系统提供的函数，然后调用这些函数完成过程。需要先打开链接库，传入一些操作系统能读取的字符串作为参数。这样能把返回的值转换为函数指针，以便后续的调用过程。所有的都结束后，应当使用特殊的函数关闭这个链接库。作者给出了Linux系统的例子，很显然我们想把它推广到各大主流的操作系统。社区已经为我们造好了轮子——libloading，适用于常见的操作系统。用这款库之后，我们能轻松运用Rust语言的所有权特性，帮助我们自动打开关闭链接库，还能方便地把函数从库里导出，以便调用。包括返回的值也是Result类型，这将帮助我们处理文件、符号不存在等等问题。动态链接库可以用C语言写，当然Rust也能写。将Rust函数使用extern关键字导出，就能在其它语言里访问这个函数。要配置为动态链接库，还需要修改Cargo.toml配置文件里的部分内容，包括它的包名称和包类型。这样Rust写的静态库就能被Rust程序访问了。你想的没错——它也能被C语言程序访问，这是Rust语言在兼容性上非常有优势的一点。在加载、使用链接库之后，还有一个释放过程。我们很容易联想到，释放之后，这个库是否再能被使用一次。作者在这里花费了大量的调试时间，需要注意的是，打开链接库的函数可能被调用多次；这之后的关闭过程，只会降低引用计数。如果要真正关闭这个库，需要引用计数为零，加载时的参数需要满足条件，而且不能被其它链接库同时使用。作者做的工程设计是，先暂停所有的线程，遍历正在使用这个库的线程，取消它们，就能关闭这个库了。这需要可执行文件的代码挂钩一个特殊的函数，它在线程结束时需要完成一些工作。这之后，就可以再加载一次需要的Rust链接库了。作者通过分析工具，找到了这个过程中的内存泄漏问题，最终就能完成手动的重载流程。以上的还是手动的过程，要自动重载代码，需要使用特别的notify库。这个库能跟踪系统中依赖库的变化情况，及时给出反应；这样就能实现自动重载代码了。作者把这些功能包装到了专门的插件系统，最终我们就能为代码编写插件，而且在插件变化时，自动重载这个插件。基于这样的成果，作者实现了有趣的例子，能实时更新图形卡渲染程序的一部分，来在屏幕上画出不同的图形。作者用两周的时间完成了这篇文章，完成在Linux下的整个流程。作者把在Windows和macOS下的软件支持留给读者，这两者和Linux都有一定的区别和独特之处。作者最后感谢了所有支持他的粉丝和捐助者们，没有他们，作者就不能完成这篇文章。fasterthanlime的博客https://fasterthanli.me/articles/so-you-want-to-live-reload-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《所以……你想要热更新Rust代码？》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者richardanaya给出了他对2021年Rust语言发展的看法。作者认为，网页汇编WebAssembly的支持将会进一步发展，演化出除了LLVM之外的其它后端。常量语法希望有更大的进展，能在编写类似于模板的语法时展现出灵活性。另外，越来越多的朋友将会选择Rust作为自己的第一门语言。更多与Rust有关的基金会和组织也将成立，接受资助，开发更多开源项目。Rust应该和JavaScript等其它语言共同协作，从控制台程序转换到其它的呈现形式去。Reddit推文https://www.reddit.com/r/rust/comments/j1ihax/rust_2021_maintain_dominance_on_the_web_easy/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《制霸Web、易学易挣——2021年的Rust》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一款抗锯齿的平面矢量图形绘制库，是由nanovg项目重写而来的。作者从原有的C语言代码修复了漏洞，重新组织项目，以符合Rust语言的标准和需求。在项目主页上，作者给出了包括文字、图形和图像在内的功能展示，列出了支持的所有功能，和仍然需要开发的功能。项目使用Apache、MIT双协议开源，示例中使用了基于其它开源协议的字体和资源。GitHub项目主页https://github.com/femtovg/femtovg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-29 17:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"femtovg：Canvas2D渲染接口，纯Rust开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"重新加载动态库可以让我们在程序不退出的情况下达到升级的效果.想在 Rust 中实时重新加载动态库 ?  这篇文章详细到令人发指, 绝对包教包会.原文链接https://fasterthanli.me/articles/so-you-want-to-live-reload-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 17:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 Rust 中实时重载动态库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 <<从零到生产>> 系列的第四章.首先介绍了程序的观测性的重要性, 然后从 log 到 tracing等 crate 都有深入的介绍和演示.原文链接https://www.lpalmieri.com/posts/2020-09-27-zero-to-production-4-are-we-observable-yet/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 17:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我们可以观测了吗 ? Rust 的遥测介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果你是从 golang 转到 rust, 这篇文章会有所帮助.文章列出了 go 中常用的一些标准库中所对应的 rust 中的 crates.例如:\ngo 中的 log 对应 rust 中的 log.\ngo 中的 flag 对应 rust 中的 structopt 等.\ngo 中的 erorr 对应 rust 中的 thiserror.\ngo 中的 encoding/json 对应 rust 中的 serde 等.\n...等等\n原文链接https://christine.website/blog/rust-crates-go-stdlib-2020-09-27"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 17:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"go 标准库在 rust 中的对应 crates"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ampli-fe 是一个 VST 的插件, 使用 vst-rs 编写,自带一个 UI, 对 VST 插件开发感兴趣的小伙伴可以看看.github 地址https://github.com/antonok-edm/ampli-fe--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 17:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ampli-fe, 一个 VST 插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustPython 是一个用Rust写的Python解释器（Interpreter），在GitHub 上有 5.9k 的Star。Repohttps://github.com/RustPython/RustPythonRead Morehttps://rustpython.github.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 00:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustPython：用Rust写的Python解释器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Jetbrains 在 Linkedin上发布了招聘信息\nYou want to write Kotlin and Rust.\nYou’re interested in developing cloud-based software products.\nRead Morehttps://www.linkedin.com/jobs/view/2151145919"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 00:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【招聘】Jetbrains 正在寻找会Kotlin+Rust的工程师来开发下一代IDE"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章来自Reddit，作者谈到了自己从C++转到Rust的经历，想从C++转到Rust的小伙伴可以看看。Read Morehttps://www.reddit.com/r/rust/comments/j0jlob/discussion_from_c_to_rust_everythings_just_better/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-28 00:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【文章】从C++到Rust：一切让我更好"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Audiobench，通过以无限制的方式连接音频处理模块，可用于创建各种声音。支持Windows，MacOS，Linux系统。官网：https://joshua-maros.github.io/audiobench/入门指南：https://joshua-maros.github.io/audiobench/book/getting_started.htmlGithub链接：https://github.com/joshua-maros/audiobench"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/joshua-maros/audiobench"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-26 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Audiobench，开源模块化合成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不可否认，近年来对 Rust 编程技能的需求已急剧增加。有数据显示，从十年前几乎没有，到现在每个月至少发布200个需要Rust技能的职位。过去一年，美国 Rust 程序员的主要招聘者是像亚马逊这样的技术公司和像埃森哲这样的咨询公司。详细可以阅读原文，https://news.efinancialcareers.com/us-en/3004512/rust-vs-c-hedge-fund-jobs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://news.efinancialcareers.com/us-en/3004512/rust-vs-c-hedge-fund-jobs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-26 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amazon 有最多的 Rust 职位需求"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Igor Aleksanov，做为一名具有强大C/C ++背景的专业 Rust 开发人员，撰文描述了希望Rust在2021年实现哪些功能，大致有如下内容：\n范型关联类型 GAT\nproc_macro_diagnostics\nstd::str::pattern::Pattern\n内置基准测试\ntrait aliases\n具体可参见文章，https://popzxc.github.io/rust-2021"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://popzxc.github.io/rust-2021"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-26 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"In Rust We Trust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RIOT 是物联网友好的操作系统。如果由于硬件限制而无法在设备上运行Linux，可以使用RIOT。 RIOT明确实现了开放Internet的思想。 它支持所有相关标准，并在开源许可协议下分发。 可以在www.riot-os.org上找到更多详细信息。在RIOT 2020 线上峰会，Lup Yuen Lee（李立源）老师介绍了如何使用Rust语言在RIOT系统上进行安全简单的嵌入式编程。视频链接：https://www.youtube.com/watch?v=LvfCSnOM1Hs&feature=youtu.behttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.youtube.com/watch?v=LvfCSnOM1Hs&feature=youtu.be"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-26 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RIOT 2020 峰会"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Low-Level Academy是一个致力于使底层编程更容易的网站。目前只有第一章节的内容。Read More: https://lowlvl.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://lowlvl.org/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust学习网络编程TCP/IP基本原理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 开发的OS 基于blog_os 尝试一个运行在内核态的repl环境 lisp 基于mal实现进行开发。项目是国人开发的，对这个项目感兴趣的小伙伴可以一起去贡献。Github: https://github.com/zzhgithub/juner_os"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/zzhgithub/juner_os"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"juner_os"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"小编对该项目不太了解，详情请直接访问官网和github项目主页。Read More: https://krustlet.dev/Github:https://github.com/deislabs/krustlet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://krustlet.dev/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 Kubernetes 中运行 WebAssembly"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个简短的输出0-9数字的示例。github上介绍：A best-of-breed language with a holistic approach to moving the needle.小编水平有限，对这些概念不太了解，有知道的大佬可以帮忙在评论区科普一下。Github：https://github.com/rotoclone/strategic-communication"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rotoclone/strategic-communication"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"又一门用Rust写的编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新版本增加了对wasm的支持，你可以在浏览器中使用/可视化 Cargo.lock！GitHub: https://github.com/RustSec/cargo-lockDocs.rs: https://docs.rs/cargo-lock/Crates.io: https://crates.io/crates/cargo-lock"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/cargo-lock"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo-lock 5.0发布了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"其中有一部分谈论到了Rust。Read More: https://owenlynch.org/posts/2020-09-16-haskells-children/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://owenlynch.org/posts/2020-09-16-haskells-children/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Haskell的孩子们"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"将您的Rust WASM应用程序构建，捆绑并运送到网络上。Github: https://github.com/thedodd/trunk"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/thedodd/trunk"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"trunk"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"357。Read More：https://this-week-in-rust.org/blog/2020/09/23/this-week-in-rust-357/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2020/09/23/this-week-in-rust-357/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-24 10:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Neovim Rust 开发环境搭建教程https://sharksforarms.dev/posts/neovim-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://sharksforarms.dev/posts/neovim-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-23 21:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Neovim 加 Rust：高效的开发体验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"nushell 是用 Rust 开发的终端工具https://docs.google.com/forms/d/e/1FAIpQLScEFzDh7j3jfAuVMBCQtQE-qfKAhugLCiUaaGL583QtGwz5fw/viewform"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.google.com/forms/d/e/1FAIpQLScEFzDh7j3jfAuVMBCQtQE-qfKAhugLCiUaaGL583QtGwz5fw/viewform"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-23 21:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nushell 2020问卷调查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Embassy 致力于让 async/await 成为嵌入式开发第一梯队的语法选择。https://github.com/akiles/embassy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/akiles/embassy"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-23 21:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Embassy：Rust 嵌入式开发工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇博客中介绍了作者遇到过关于并行异步迭代的挑战。https://blog.yoshuawuyts.com/async-iteration/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.yoshuawuyts.com/async-iteration/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-23 21:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【博客】并发迭代语义"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/osohq/oso/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/osohq/oso/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-23 21:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"oso: 用于应用程序授权的开源策略引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"iou 是 Linux 的 io_uring 接口https://github.com/ringbahn/iou"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ringbahn/iou"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-23 21:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"iou 0.3 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"无舟子（withoutboats)大佬的新作，目标是给 ringbahn 提供可以用作任意 ringbahn 对象的驱动类型。而 ringbahn 是无舟子另外一个提供 io_uring 安全绑定的库。仓库链接：\nmaglev：https://github.com/withoutboats/maglev\nringbahn：https://github.com/withoutboats/ringbahn\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-22 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"maglev - 一个 ringbahn 驱动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"「微软」onefuzz ： 支持自部署的 Fuzzing-As-A-Service 平台特点：https://github.com/microsoft/onefuzz"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-22 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软 onefuzz v1.0.0 发布（转自 tg频道【Rust视界】）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Bandot 是 Polkadot 首个稳定币无抵押借贷系统，ERC-20 持有者可以通过使用其可流动的数字资产进行抵押从而实现跨链代币流通。Bandot 将目标聚焦于跨链 DeFi 上，它试图解锁以太坊之外的质押资产的流动性。详情请看：https://rustcc.cn/article?id=f82ed369-7c9c-445c-832b-e2c62bacc68d"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-22 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bandot 招聘 Rust 工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"昨天的日报我们报道了 Bevy 发布 v0.2 的消息，小编关注里面的异步任务系统提高，今天在搜索的时候发现相关特性也是出自社区的异步大佬 stjepang 之手（发现了async-executor 需要紧急升级到 v1.3.0版本），详情可以看看 PR： https://github.com/bevyengine/bevy/pull/526"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-22 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"小编私货"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 官方宣布成立错误处理组, 隶属于 libs team.该组的主要目标为:原文连接https://blog.rust-lang.org/inside-rust/2020/09/18/error-handling-wg-announcement.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-21 18:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust宣布成立错误处理项目组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Bevy 0.2 正式发布了. 值得注意的特性包括:Async Task System.在此之前, Bevy 使用 Rayon 来运行各种多线程的任务. Rayon 的优点是使用简单,缺点是很容易造成 cpu-hungry.为了解决这些不足, Bevy 自己构建了一个对异步任务友好的 task system, cpu 的使用率获得巨大的提升.Web 平台的初始支持.目前已经有一个 Bevy的子集,通过 WASM 来让 Bevy 的 apps 可以在 web 上运行. 当然目前来说支持的功能非常有限.并发Queries.Bevy ECS Quries 是从 Entity Componet System 中提取数据的一个非常方便的方式. 0.2版本可以非常便利的并发来进行 queries 的遍历.重写 Transform Sytem.Joystick/Gamepad 输入支持.Bevy ECS 性能提升.原文链接https://bevyengine.org/news/bevy-0-2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-21 18:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bevy 0.2 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ouroboros 可以让你非常简单地就能创建复杂的自我引用 struct. 简单用法参考下面例子.Github 地址https://github.com/joshua-maros/ouroboros--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-21 18:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ouroboros 简单易用的 自我引用struct 生成器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustJean Manguy是一位博士后，目前就职于基因组学和宏基因组学的项目，平时的工作都围绕使用Nextflow为现有的命令行工具使用和编写管道而展开，工作中使用最多的是R语言，R语言是一门用于数据探索，统计和数据可视化的解释语言，随着工作变成常态，他发现自己的应用开发能力已经逐渐退步，虽然之前也用C语言做过一些项目，现在他想尝试一门新的语言，于是在疫情期间开始学习Rust。https://jean.manguy.eu/作者在文中介绍了他学习Rust的目的——开发一款游戏，介绍了他对开发环境、学习资源的整理，以及他做过的一些几个项目，详细介绍了他初学习Rust的历程。ReadMorehttps://jean.manguy.eu/post/i-started-to-learn-rust/#some-cons-of-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-20 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust初学者经验分享"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #nodejsNode.js是一个单进程的Javascript运行时，因此一些CPU密集任务对Node.js服务来说是很危险的，它提供了worker thread功能，一定程度上解决了这个问题，但运行效率不高的问题依然存在。C++ addons 和 N-API C++/C 可以将C/C++实现的功能作为一个node模块运行在V8中，因此能够大大提升运行效率，并且丰富了Node.js的生态，Rust可以模仿C库的行为，因此使用Rust同样可是实现。Read Morehttps://blog.logrocket.com/rust-and-node-js-a-match-made-in-heaven/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-20 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 和 Node.js 一次天作之合"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #docker\n分层构建，避免重复构建依赖项\n为linux:alpine构建，减少镜像体积\n给予最小运行权限\nRead Morehttps://shaneutt.com/blog/rust-fast-small-docker-image-builds/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-20 20:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为Rust构建体积小的镜像"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天我们宣布在libs团队下成立了一个新的项目小组，专注于错误处理!本项目小组将致力于的一些目标包括:文章链接，https://blog.rust-lang.org/inside-rust/2020/09/18/error-handling-wg-announcement.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/09/18/error-handling-wg-announcement.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-19 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"宣布成立错误处理项目组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Stack Overflow的年度调查(2020,2019,2018,2017,2016)显示，使用Rust编程语言的人对他们的选择非常满意，在该调查中，Rust连续5年被评为“最受喜爱的语言/技术”。在过去的3年里，Rust用户中喜欢该语言的比例实际上有所上升——从78.9%上升到83.5%，再上升到86.1%。很明显，在Rust上工作的团队做得很好。维护一个没有bug的稳定工具链，频繁发布充满特性的版本，改进编译器性能，改进文档，这些都可以解释为什么人们对它的喜爱越来越大。一个充满更多成熟的库、教程和受欢迎的社区的生态系统可能也会有所帮助。非常感谢每一个为此做出贡献的人。文章链接，https://blog.nindalf.com/posts/rust-2021/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.nindalf.com/posts/rust-2021/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-19 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2021: 降低门槛"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"第一篇博客！在这篇博客文章中，我想谈谈关于linters的各种问题，它只使用ast(抽象语法树)来linting源代码，以及一种您可能不知道的树表示。在rust的一个名为rslint的JavaScript linter上工作了好几个月，我遇到了很多问题，也探索了很多概念，我觉得我应该分享这些概念来提供一些见解，来解释为什么我认为纯粹基于AST的linting不适用于复杂的linters。文章链接，https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.htmlhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-19 23:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"基于原生AST的linting的吐槽"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"broono"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从而在ARM上为Alpine和postmarketOS启用完整的工具链。rustup-init.sh脚本尚未准备就绪，但这是朝着这个方向迈出的一大步。reddit讨论: https://www.reddit.com/r/rust/comments/iumwxu/aarch64musl_now_being_built_by_rustup_ci_enabling/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/iumwxu/aarch64musl_now_being_built_by_rustup_ci_enabling/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-18 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustup CI现在正在构建aarch64-musl"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"broono"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文档内链接是rustdoc的一项特性，可让你通过其名称而不是硬编码的URL链接到“项”（函数，类型等）。即使你的类型重新导出到其他模块或crate中，这也可以使你获得准确的链接。自2017年以来，文档内链接已经存在了一段时间了。它们在nightly版本可用（因此在docs.rs上可用），因此你可能听说它们还不稳定时可能会感到惊讶。“现在发生的变化是，它们将在stable版本上可用，这也意味着我们对实现更加有信心，并将大力鼓励使用它们。我们建议你将库切换为使用文档内链接，这样可以修复重新导出的类型的损坏链接以及指向不同crate的链接。我们希望将来增加对通过cargo fix自动执行此过程的支持。”原文地址: https://blog.rust-lang.org/inside-rust/2020/09/17/stabilizing-intra-doc-links.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2020/09/17/stabilizing-intra-doc-links.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-18 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustdoc文档内链接接近stable"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"西沉"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本期的每周一库带来的是simsearch，一个运行在内存的轻量级字符串模糊搜索引擎。首先列出库的链接\ngithub: simsearch\ndocs.rs: simsearch\n接下来我们通过simsearch gihub中给出的例子来试用开发环境\nrustc --version: rustc 1.45.2 (d3fb005a3 2020-07-31)\ncargo --version: cargo 1.45.1 (f242df6ed 2020-07-22)\n首先在Cargo.toml文件中添加依赖项从官网的介绍我们可以知道，simsearch默认使用了Jaro-Winkler similarity算法，该算法是在Jaro distance进一步改进的算法。它的基本原理是根据公式：计算字符串的相似度，其中$sim_{w}$的计算公式为其中s1和s2表示字符串的长度，m表示两字符串的匹配字符数，t表示换位数目transposition的二分之一。了解了基本概念之后我们通过代码来演示simsearch的功能我们参考官方例子，想要从三个给出的字符串中找到模糊符合我们搜索pattern的index，适当修改官方例子代码如下：运行结果如下接下来我们调整插入的第三个字符串为James Joyce has some things，期望是能够通过搜索patternthngs找到第一个字符串和第三个字符串，运行结果如下：以上就是本期的每周一库"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-18 00:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"KRaBs 是一个内核阅读器和引导器，目前 KRaBs 正在致力于在 32位/64 位 pc 上引导 vmlinux 和其他用 ELF 格式化的内核，目前还在开发中。Krabs 还旨在只支持最小的 Linux x86/x86_64 引导协议。这允许您使用内核命令行和 initrd/initramfs。项目地址：https://github.com/o8vm/krabs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 22:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 实现 x86 bootloader"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者在 Rust playground(https://play.rust-lang.org/) 新建了一个新课程，它就是“khan系统编程学院”。它使用 Rust 和 WebAssembly 在浏览器中运行一个虚拟网络(它是一个基于 smoltcp 的真正的 TCP/IP 堆栈实现)。作者从 Bret Victor 的 Learnable Programming 中获得了很多灵感，后续将继续扩展它以涵盖更多的主题，包括更多可探索的演示。reddit讨论：https://www.reddit.com/r/rust/comments/itzhzl/lowlevel_academy_an_explorable_systems/课程地址：https://lowlvl.org/lesson1.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://play.rust-lang.org/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 22:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust + Wasm 探索系统编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Impero 公司招聘 Rust 全栈开发工程师，工作方式：远程，地点：丹麦(丹麦，德国或法国)，相关信息请看：https://www.reddit.com/r/rust/comments/iuflg1/rust_fullstack_developer_denmark_or_remote/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/iuflg1/rust_fullstack_developer_denmark_or_remote/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 22:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust全栈开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"j4rs 代表“Java for rust”，允许毫不费力地从 rust 中调用 Java 代码，反之亦然。j4rs 只关注于通过允许 JVM 从 Rust 代码创建和操作、无 efortless Java 方法调用、通过 Maven 提供 Java 库等方式，改进 Rust 应用程序调用 Java 代码。目前，j4rs 也可以用于希望实现对 Rust 库的 JNI 调用的 Java 项目中。项目地址：https://github.com/astonbitecode/j4rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 22:30"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"j4rs项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"博客内容主要有一下几个话题:\n准备 Rust 2021 版本\n后续正在\"进行中\"的设计和工作\n改善项目运作和治理\n更好地了解计划和设计工作的状态\n增加指导，领导力和组织带宽\n使设计讨论更富有成效且更省力\n详情请见-rust blog:https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 01:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「Rust 核心团队」 Rust 2021 规划"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Dropbox 中开发者自己建立了存储系统,他们需要零拷贝反序列化的框架,促使形成了自己的库,从那以后,在Dropbox的多个地方使用了这个库。reddit 话题:https://www.reddit.com/r/rust/comments/ittov9/dropbox_open_sources_protobuf_codegen/详情请见-Github:https://github.com/dropbox/pb-jelly"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/dropbox/pb-jelly"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 01:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Dropbox开源protobuf代码生成！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前一阵我一直在努力增加WSL支持的IntelliJ Rust。经过不断努力终于通过了合并进了intellij-rust的基础分支。reddit 话题:https://www.reddit.com/r/rust/comments/it82wo/ive_been_working_on_adding_wsl_support_to/github:https://github.com/intellij-rust/intellij-rust/pull/5014"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/intellij-rust/intellij-rust/pull/5014"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-17 01:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"致力于IntelliJ Rust 支持 WSL的rust开发环境"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"TIOBE发布了2020年9月的编程语言指数。TIOBE为Rust给出了0.92%的指数，同比8月的0.74%上升了三分之一，也是该指数历史上首次超过0.8%。目前，在TIOBE跟踪的所有编程语言里，Rust位列于第18名，超过了随后的Dart和Objective-C两门语言。TIOBE官网https://www.tiobe.com/tiobe-index/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-15 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust现在是TIOBE编程语言排名的第18名了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"写了一个bug公众号添加了此篇博文。文章中，作者介绍了Rust开发中常常见到的解决痛点的库。这些库包括重量级的网页服务器引擎Hyper、应用开发框架Actix，包括Python语言运行时PyO3，也包括简单的动态链接库加载器libloading等等。作者通过代码例子，快速地介绍了它们的使用方法和特点。微信公众号“写了一个bug”https://mp.weixin.qq.com/s/StDEAc-qXSfz8hu2yoD0nA"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-15 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《Rust中应该尝试的12个杀手级库（下）》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果您正寻找机会为Rust社区做贡献，有足够的空余时间，或者希望在贡献过程中学到有趣的事情，您可以考虑Rust编译器团队的优先事务组。这个小组正在招募新成员。优先事务组是Rust编译器团队中，处理重要漏洞和问题的小组。优先事务组将站在问题跟踪系统的最前线，需要分类所有的问题，挑出致命的问题以便其它小组处理。另外，优先事务组将决定整个编译器团队每周的议程，确保最严重的漏洞被及时考虑。要完成这些工作，编译器团队准备了triagebot工具，方便贡献者在Zulip协作软件上得到消息。优先事务组由自己的仓库，小组的工作记录将上传到仓库里。优先事务组会为新来的成员准备详细的文档；这是以组织、排序为主的小组，相比编写代码，更重要的工作是安排编译器团队的日程。对优先事务组来说，一周的工作是从周四或周五开始的。整个编译器团队的组会将在周四、周五召开。在一周的后面几天，优先事务组将跟踪所有的反馈问题，为新出现的问题分配优先级。如果不容易确定优先级，问题将被发送到小组的Zulip讨论室，以便做一些简单的讨论。这个问题是否极其严重？是否需要制作最小的复现代码？这都是要讨论的内容。指引文档里会给出更详细的工作流程。下一周的组会开始前，优先事务组将安排下周的会议流程，提交给整个编译器团队。在Rust Forge网页上有更多详细的信息。要参加小组的工作，可以帮助分类编译器的问题，帮助总结问题和安排议事日程。即使觉得自己的能力没有那么强也没关系，小组的氛围很友好，会有人帮助解释和澄清问题。如果您对这份社区工作感兴趣，可以加入优先事务组的Zulip房间，也可以跟踪编译器团队每周的组会；Rust编译器团队的优先事务组希望在这些地方看到你。Rust语言博客https://blog.rust-lang.org/2020/09/14/wg-prio-call-for-contributors.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-15 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust团队优先事务组正在招募新成员"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自Ferrous Systems公司的阿列克谢·克拉多夫开发者发表了这篇博文。文章中，作者尝试整理什么影响了编程语言的流行，给出了猜测和作者的看法。文章认为，只要语言是图灵完备的，且具有一定的抽象能力，人们就会立即挑选它用于特定的工作。即使有些语言设计上不尽人意，或者它们的生产力不如其它语言高，也总可以花一些时间编写代码，来克服这样的问题。在这之外，还要考察语言的运行时，在不同的需求里，需要运行时特性不同的编程语言——作者认为克服运行时的特性是比较难做到的。基于这样的发现，文章给出了一个假设：当一门语言的运行时具有创新性或者排他性时，它们通常会变得流行。作者用假设分析了已经流行的几门语言，如C、Java和Go语言，也有另一些语言还不能被这样的假设解释。文章认为，Rust语言在运行时上或许和C/C++语言等效，作者将内存安全归纳到运行时的属性里面；作者还给出了针对其它语言的一些预测和判断。matklad的博客https://matklad.github.io//2020/09/13/your-language-sucks.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-15 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《你的编程语言糟透了，但是没关系》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust语言静态分析软件rust-analyzer公布了这篇更新日志。现在，宏展开里的错误将标记在宏的定义之内，而不是只标注使用宏的语句。已有子模块文件的情况下，你在父模块里添加它的声明时，会得到语法补全的提示。模式匹配使用的box关键字已经可以语义识别。另外，async代码块也能得到妥善的语法提示。一些小的修改包括涉及dbg!宏的语法提示和删除它之后的一些处理。本次更新还包括一些内部优化。rust-analyzer项目官网https://rust-analyzer.github.io/thisweek/2020/09/14/changelog-42.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-15 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer发布第四十二次更新日志"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是由开发者御坂知惠（@cssivision）编写的练习项目。代码风格非常清爽，非常简单。阅读项目的代码，能初步理解Rust语言异步编程的方法。GitHub主页https://github.com/cssivision/awak/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-15 21:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"awak：简单的Rust异步运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者分别使用 Kotlin 和 Rust 的不同框架写了同样的微服务, 并且对其进行了压测对比.之所有没有直接引用别人的压测结果(例如著名的 techempower: Web Framework Benchmarks),而且是选择自己完全手写项目来测试,是因为:原文中有大量的指标图对比,感兴趣的同学可以查看原文.作者甚至粗略地计算了他们各自的成本:在这个一切皆为资源的云时代, Rust可以帮你节省不少成本呢!原文链接https://matej.laitl.cz/bench-rust-kotlin-microservices/techempower: Web Framework Benchmarkshttps://www.techempower.com/benchmarks/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-14 17:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从压测 actix v2/v3 (Rust) 和 Http4k, Ktor(Kotlin) 微服务上所学到的"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Actix-web 3.0 正式发布了!是目前为止最为稳定的版本,强烈建议大家升级到最新版本.原文链接https://paper.dropbox.com/published/Announcing-Actix-Web-v3.0-QOXXb1lXgTubzXHzUq9ONY5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-14 17:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Actix-web 3.0 正式发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用起来非常简单.效果图"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-14 17:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bunt,一个简便易用的命令行颜色库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文介绍了如果一步一步把一个基于 LGVL 的 PineTime (一款 linux 智能手表) app 从 C 移植到 Rust 上(RIOT系统上).详细程度到代码级别, 采用 C 代码和 Rust 左右对比的模式,让你清清楚楚,从头到尾的了解他是如何从 C 移植到 Rust 上.多达 30 步:省略...每一步都会列出原始代码和转换后的代码:原始的 C 代码:转换后的 Rust 代码:原文链接https://lupyuen.github.io/pinetime-rust-riot/articles/watch_face--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-14 17:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"移植 PineTime Watch Face(C to Rust)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RIOT - The friendly OS for IoThttps://github.com/RIOT-OS/RIOT作者（李吕源，物联网技术与教育家）在文中谈到：将嵌入式C转换为Rust并不难（Converting Embedded C to RustLang is not that hard.）GitHubhttps://github.com/lupyuenRead Morehttps://lupyuen.github.io/pinetime-rust-riot/articles/watch_face"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-13 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用LVGL在RIOT上将PineTime表盘从C移植到Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust.Tokyo 在推特上发布消息称已经将提案翻译成中文，期待大家提案。RustFest 是一个 Rust 活动。我们在寻找 Rust 的话题，或者会让 Rustacean（参与 Rust 的人）感兴趣的话题。Read Morehttps://github.com/rustlang-tokyo/RustFestGlobal2020-CFP/blob/master/zh_cn.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-13 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustFest Global 2020 提案征集"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"2018年，三位前GnuPG开发人员开始着手开发红杉，这是Rust中OpenPGP的新实现。OpenPGP是用于数据加密的开放标准，通常用于安全电子邮件。GnuPG是该标准的实现。已获得GPLv2许可的红杉公司正在朝1.0版迈进，还有一些尚待解决的问题。https://gnupg.org/Read Morehttps://lwn.net/SubscriberLink/830902/028779b5b8f69e5f/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-13 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的OpenPGP：红杉项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Jsonnet 是 Google 推出的一门 JSON 模板语言. 它的基本思想是在 JSON 的基础上扩展语法, 将 JSON 的部分字段用代码来表达, 并在运行期生成这些字段.www.jsonnet.orgRepohttps://github.com/CertainLach/jrsonnet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-13 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 编写的 Jsonnet 实现：jrsonnet"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天，有网友在 Twitter 上发文称：Apple 似乎全力支持 Rust 进行底层编程。“在非常成功地首次引入 Rust 之后，我们正在将已建立的代码库从 C 迁移到 Rust，并主要在 Rust 中构建新功能。”并附上了 Apple 软件工程师的职位链接，https://jobs.apple.com/de-de/details/200170723/software-engineer-networking-privacy?team=SFTWR小编发现其实该职位是 Apple 在8月份就发布的。虽然不是最新消息，但也说明越来越多的主流大公司在采用 Rust 编程语言。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://jobs.apple.com/de-de/details/200170723/software-engineer-networking-privacy?team=SFTWR"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-12 20:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Apple 使用 Rust 进行底层编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Gitoxide 发布 v0.4，该项目是一个用 Rust 实现的 git，但它的目标并不是要完美复制 git 的功能。安装命令：安装后会有两个二进制命令：gix 和 gixp，其中 gix 是用于访问 git 代码库的命令行接口工具，它是用来优化用户体验，其性能优于 git 规范的实现，进行 clone 项目比直接使用 git 更快。由于一些问题，目前没有支持 Windows 的v0.4版本。Github 链接，https://github.com/Byron/gitoxide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Byron/gitoxide"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-12 20:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gitoxide v0.4"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ultraviolet， 是在计算机图形学和游戏相关的线性代数上的一个 crate，在生产率和运行时性能方面都非常快。就生产率而言，ultraviolet 不使用任何泛型，并且被设计为尽可能简化界面，从而缩短了编译时间并提供了清晰的代码。另外，不使用泛型和 Rust 类型系统中的各种“hack”使得错误清晰明了，易于用户解析和修复。在运行时性能方面，从一开始就考虑到性能来设计。为此，它为每种类型提供两种单独的类型，一种具有通常的标量 f32 值，另一种为\"宽\"类型，其为每个值使用 SIMD 向量类型。每种类型的两种都提供本质上等效的操作，而\"宽\"的类型则提供它们独有的某些功能，为高性能 SIMD 算法设计。此设计的目的是明确的，并且还允许代码充分​​利用 SIMD，从而为某些工作负载提供大幅性能提升的可能性。v0.6 的主要功能：\n支持 256 位宽的 AVX 向量和指令以及 128 位宽的 SSE 指令。\n在 f64 功能下支持 f64/双精度浮点数，包括 f64x2 和 f64x4 SIMD 加速类型。\nv0.6 版本博客文章链接，https://fusha.moe/blog/posts/ultraviolet-0.6/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://fusha.moe/blog/posts/ultraviolet-0.6/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-12 20:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ultraviolet v0.6"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"系列教程：用 Rust 开发一个名叫 Eldiro 的编程语言Read More: https://arzg.github.io/lang/3/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://arzg.github.io/lang/3/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 创建一门编程语言第三部分更新了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"标题是直译原文的，虽然看上去有种标题党的嫌疑，但是就如原文所说的，这种方法在之前已经有不少人用过了，但是从来没有谁把它放到台面上分享给大家，这是一种实用的方法。作者在github上维护一个命令行工具 Intermodal，需要大量测试用户输入与程序输出是否符合预期，因此用到了这个怪异的方法。https://github.com/casey/intermodal/使用起来大概时这样的：可以看到这个宏用起来还是挺方便的，具体原理原文以及源代码都有。作者目前还没有将这个方法提炼成一个库，如果你想用的话可以去作者的命令行工具源代码里面复制这部分的相关代码，然后在你的项目里面使用。作者说以后肯定时要和现在它写的项目分离出来作为一个独立的项目的，但是暂时没有动力。作者鼓励大家去维护这样的一个库。Read More: https://www.reddit.com/r/rust/comments/ippyeg/you_wont_believe_this_one_weird_trick_to_speed_up/Intermodal github仓库: https://github.com/casey/intermodal/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/casey/intermodal/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"你不会相信这个奇怪的技巧可以加速和提高你的测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本来是三月份的时候就已经写的这么文章，但由于当时Zoom的一些风波，作者便没有选择发布这篇blog。现在好像风波过去了，作者整理了这篇blog，选择重新发布出来。Read More: https://confused.ai/posts/intercepting-zoom-tls-encryption-bpf-uprobes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://confused.ai/posts/intercepting-zoom-tls-encryption-bpf-uprobes"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用BPF拦截Zoom的加密数据"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"需要Rust 1.46Crate: https://crates.io/crates/const_format/0.2.5"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/const_format/0.2.5"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编译时字符串格式化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read More：https://ferrous-systems.com/blog/knurling-sessions-introduction/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://ferrous-systems.com/blog/knurling-sessions-introduction/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Knurling-rs学习嵌入式Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read More: https://crates.io/crates/rsfbclient"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/rsfbclient"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Firebird  客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果你在工作中使用Rust遇到了困难，可以向他们做有偿咨询，他们会帮助你度过难关。地址: https://rust-experts.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-experts.com/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust有偿专业咨询"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是作者的第一个Rust库，blog介绍了作者写这个库的一些历程。Read More: https://blog.digital-horror.com/twistrs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.digital-horror.com/twistrs/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Twistrs ー Rust 中的域名枚举库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"355。Read More：https://this-week-in-rust.org/blog/2020/09/09/this-week-in-rust-355/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2020/09/09/this-week-in-rust-355/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-10 18:54"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"系列教程：用 Rust 开发一个名叫 Eldiro 的编程语言https://arzg.github.io/lang/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://arzg.github.io/lang/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-09 20:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 创建一门编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"reddit 提问，蹲回答https://www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/ip88wb/what_makes_actix_faster_than_other_frameworks/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-09 20:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"是什么让 Actix 比其他框架更快？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者给 2021 roadmap 提的建议https://mbuffett.com/posts/rust-less-error-handling/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mbuffett.com/posts/rust-less-error-handling/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-09 20:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"作为一个 Rust 业余爱好者，我不想考虑太多错误处理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"例如下列代码可以在代码运行时，改变打印的值https://crates.io/crates/inline_tweak"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/inline_tweak"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-09 20:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"inline_tweak: 在项目运行中改变源代码中的数字或布尔值"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由于具有内存安全保证，Rust 在对安全性要求较高的应用程序开发中比较有前景。但是，尽管Rust crates 中的漏洞很少见，但它们仍然存在，Rust当前缺少处理它们的工具。例如，如果您正在运行易受攻击的版本，则Linux发行版会警告您，甚至可以选择自动安全更新。Cargo不仅没有安全更新基础结构，甚至都不知道编译某个二进制文件时要使用哪个库或库版本，因此无法检查您的系统是否易受攻击。rust-audit 这个仓库已经在着手解决这个问题https://github.com/Shnatsel/rust-audithttps://github.com/Shnatsel/rust-audit"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Shnatsel/rust-audit"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-09 20:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"引入“auditable”：审计Rust二进制文件中的已知错误或生产中的漏洞"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"（转自 Rust视界）这篇文章作者阐述了 Haskell 的发展历史，认为 现在 Rust 很可能也会重蹈覆辙。太长不看版：We have great tools in the Rust language. We could kill it by making a mess, we could kill it by being arrogant about it, we could kill it by ignoring the Enterprise. I suggest that we not follow that route.我们拥有Rust语言的强大工具。 我们可以通过制造混乱来杀死它，可以通过自大来杀死它，我们可以通过忽略企业来杀死它。 我建议我们不要走那条路。从结尾的这句话来看，作者似乎在批评 Haskell 社区是自负与傲慢，并且Haskell 并没有解决企业应用的问题。我想，Rust 社区应该不会有这个问题。帖子下面还有很多评论值得看看。https://gist.github.com/graninas/22ab535d2913311e47a742c70f1d2f2b"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-08 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"那些杀死Haskell的，也能杀死 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"尽管当前 Rust社区主要使用“特质”来翻译术语 trait，@upsuper 在对比常用的翻译软件以及一些场景下翻译的通顺程度，认为使用特征是一个更好的翻译。你的看法呢？ 欢迎点击原文链接查看！原文： https://github.com/rust-lang-cn/english-chinese-glossary-of-rust/pull/16"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-08 23:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"特质？ 特征？关于术语 trait 的翻译的讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rune是一个 Rust 可以嵌入的动态语言. 使用 Rust 编写, 基于 Runestick VM. 你可以认为他是 Rust 中的 Luna,但是语法是类 Rust 的.具有以下特性:\n非常干净的 Rust 集成\n内存安全的(通过引用计数)\n模板字符串\n? opearator\nPattern matching\nStructs 和 enums, 支持 associated data和funcitons\n动态的 vectors, objects, tuples 和内置 serde 支持.\nFirst-class 的 async支持.\nGenerators\nDynamic instance functions\nStack isolation between function calls.\nStack-based C FFI, like Lua's (TBD)\nThe Rune Programing Language: https://rune-rs.github.io/rune/foreword.htmlRune github: https://github.com/rune-rs/rune"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rune-rs/rune"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-07 17:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rune,一个Rust的可嵌入的支持aysnc的动态语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"vopono 是文章作者自己的第一个有用的 Rust 项目. vopono 是一个linux 的 VPN 工具, 可以让不同的程序在临时的 network namespace 上启动, 以便每个程序都使用各自独立的 VPN 连接,而不影响系统上的其他程序.作者从 项目背景, Rust带来的好处, 困难点, 目前存在的问题 这几方面来回顾这个项目的开发,这一篇干货满满的分享,下面为部分节选:Rust 带来的益处:EnumsRust对 enum 的原生支持,让推导和 debug 更加的简单和方便(例如在为OpenVPN协议上选择 TCP 还是 UDP), Rust 编译器会强制我们处理 enum 的所有可能情况来减少 bug.StructOptStructOpt是一个通过 derive宏来处理命令行参数 非常棒的 crate.Result和anyhowRust 的 Result 和 ? 操作符让我们可以非常优雅的处理错误. 结合 anyhow 这个 crate 会非常容易的处理错误.SerdeSerde 可以让你非常方便的序列化和反序列化你的结构体.DropDrop trait可以允许我们再在 struct 失去作用范围的时候运行desctructor. 当程序退出的时候, vopono用他来自动销毁一些临时的 network namespace.CargoCargo 作为 crate 管理器, 本身就是使用 Rust 的一大好处.include_str宏include_str宏可以在编译期间将硬盘上的文件作为静态 string 加载编译到 binary 中.RustlsRustls是一个TLS库,可以用来替代 OpenSSL.musl和静态链接x86_64-unknown-linux-musl target可以用来做(交叉)编译,静态的连接到musl而不是默认的glibc.原文链接: http://jamesmcm.github.io/blog/2020/09/05/vopono/#en"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://jamesmcm.github.io/blog/2020/09/05/vopono/#en"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-07 17:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"vopono 项目回顾"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者把自己的 ThinkPad 升级为 Threadripper (Linus Torvalds也有这么一台)了.\nCPU AMD Ryzen Threadripper 32核/64线程(3.7GHz - 4.5GHz, 147MB cache)\nMotherboard: Asus Prime TRX40-PRO\nRAM: 128GB Corsair Vengeance DDR4 3200MHz (8 x 16GB)\nHDD: 2x (RAID 0) 1TB Seagate Firecuda 520 Gen 4 PCIe NVMe (up to 5000MB/R, 4400MB/W)\n体会一下这凶猛的编译速度,隔壁的小孩都馋哭了:文章连接: https://bobweb.co/article/threadripper-meets-rustc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://bobweb.co/article/threadripper-meets-rustc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-07 17:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linus 同款电脑编译 Rust 的体验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"serde_query是一个 Serde 数据模型下的一个 query language.https://github.com/pandaman64/serde-query/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/pandaman64/serde-query/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-07 17:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"serde_query"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #vscodeVscode debug工具，一个数据结构可视化插件，支持JS/TS/Rust/Python，数据结构教学好工具，如果小编上学那会儿数据结构课能用这种工具辅助，很多同学就不会在学期中还没入门数据结构课程了。Repohttps://github.com/hediet/vscode-debug-visualizerReadMorehttps://twitter.com/ray_codes_stuff/status/1300783285707182080?s=21"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-06 20:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Vscode 数据结构可视化插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#dll用Rust实现用来测试注入方法的DLL。下面时往 \"c:\\pwned\" 写入一个名为 pwned_{pid}.txt 的demo。\n{pid} = pid of process injected.\n文件内容如下：要编译所有依赖到DLL，需要在项目根目录创建.cargo/config.toml文件，并写入以下内容：Repohttps://github.com/theflakes/Evil_DLL"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-06 20:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Evil_DLL 用来测试注入方法的DLL"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #roadmapRead Morehttps://blog.rust-lang.org/2020/09/03/Planning-2021-Roadmap.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-06 20:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 2021年计划 - Rust核心团队"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #crate干货文章，作者对现在用于生产环境的Rust序列化相关的库做了benchmark，细致的分析了每个库具体适用的场景，总结来说：\n如果那你需要快速序列化和反序列化，bincode是你最好的选择\n如果被序列化的内容很小，可是试试MessagePack，但你可能会在反序列化牺牲一些运行时间\n在嵌入式场景中Postcard提供了很好的折中方案\nFlatBuffer很复杂，而且占用的空间比应有的多，除非您以多种语言使用Schema定义，否则没有理由使用它。即使这样做了，JSON也是更好的选择\nJSON是三种可读格式中最快的，这是有道理的，因为它在业界得到了广泛的使用，并受益于SIMD优化\nReadMorehttps://blog.logrocket.com/rust-serialization-whats-ready-for-production-today/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-06 20:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 序列化相关库综合分析"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust和c++是两种流行的系统编程语言。多年来，c++的焦点一直放在性能上。我们越来越多地听到来自客户和安全研究人员的呼吁，认为c++语言应该有更强的安全保证。 Visual Studio 2019 version 16.7 在c++的核心检查中包含了四个新规则，以将Rust的一些安全特性合并到c++中。文章链接，https://devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-05 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软在c++静态分析工具实现了一些rust的安全规则"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"就在昨天，这个Rust PR(我正在做的)每晚都被合并到Rust中，这对编译器错误有着广泛的影响。https://github.com/rust-lang/rust/pull/73996在这篇文章中，我描述了这种变化以及从中可以期待什么。在错误中完整路径的问题：如下所示的简单程序将导致类型错误。类型错误可以描述为:cannot compare between values of the types Vec<Vec<String>> and Vec<String>。在PR改变之前，这几乎是错误信息的第一行，其余的错误信息提供了更多关于特征的细节:值得注意的是，在上述错误中，造成认知负担的最大因素是类型和特征的完整合格路径(例如std::vec:: vec)。对很多人来说，它的可读性有很大的不同。文章链接，https://blog.aloni.org/posts/path-trimming-in-rust-nightly/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.aloni.org/posts/path-trimming-in-rust-nightly/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-05 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Nightly Rust的路径修整"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在我的twitch频道最近的Rust问答环节中，有人问了一个看起来很简单的问题:为什么像SmartString或SmolStr这样的小字符串类型和string一样大小，而像SmallVec这样的小vec类型却比vec大?我知道我刚刚用了形容词simple，但事实是:为了理解这个问题，我们需要一些背景知识。文章链接，https://fasterthanli.me/articles/peeking-inside-a-rust-enumhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://fasterthanli.me/articles/peeking-inside-a-rust-enum"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-05 21:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"窥视Rust枚举（enum）的内部"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"什么是XLS？XLS（加速硬件合成）项目旨在实现硬件 IP 的快速开发，该硬件 IP 还可通过“软件样式”方法作为有效的主机软件运行。XLS 实施了高级综合（HLS）工具链，该工具链根据灵活的高级功能描述生成可综合的设计。它在 GitHub 上完全开源的并使用 Apache 2 开源协议。XLS 在 Google 内部用于从“构建块”例程/库生成前馈管道，这些例程/库可以轻松地重新定向，重用和以对延迟不敏感的方式进行组合。目前尚不可用，但正在进行的工作是通信顺序过程（CSP）样式的 XLS 并发过程的实现，该过程允许管道彼此通信并随着时间的推移进行引入。仓库地址：https://github.com/google/xls"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/google/xls"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-03 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Google - XLS 加速硬件合成"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者有机会在专业环境下参与 Rust STM32F412 项目，目标之一是在公司孵化一个 Rust 知识库。该项目，Loadstone，是一个32kb的安全引导装载程序，针对裸金属设备的医疗行业。在此背景下，作者对 Rust 的裸金属泛型进行分享。原文链接:https://www.ecorax.net/as-above-so-below-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.ecorax.net/as-above-so-below-1/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-03 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"裸机的 Rust 泛型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-03 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步的 Rust HTTP 状态码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Fontdue是一个简单的、no_std(不使用标准库来实现可移植性)、纯 Rust、TrueType (.ttf/.ttc)和 OpenType (.otf) 字体光栅化和布局工具。它努力使与字体的交互尽可能快，并且目前拥有最快的光栅化器。使用示例:项目地址：https://github.com/mooman219/fontdue/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mooman219/fontdue/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-03 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fontdue 项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原文：https://www.reddit.com/r/rust/comments/ildkmw/just_made_my_own_little_ferris/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/ildkmw/just_made_my_own_little_ferris/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-03 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Just made my own little Ferris :)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天，Amazon Web Services (AWS) 宣布全面推出 Bottlerocket，这是一种专为运行容器而打造的基于 Linux 的全新开源操作系统 (OS)。Bottlerocket 仅包括运行容器所需的软件，并且附带事务更新机制。这些属性使客户能够使用容器协调器以最小的中断来管理操作系统更新，从而提高容器化应用程序的安全性并降低运营成本。AWS 提供的 Bottlerocket 映像适用于 Amazon EKS (GA) 和 Amazon ECS（预览版）。Bottlerocket 是作为 GitHub 上的开源项目开发的。https://github.com/bottlerocket-os/bottlerocket详情请见-aws-china:https://amazonaws-china.com/cn/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/详情请见-Github:https://github.com/bottlerocket-os/bottlerocket"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/bottlerocket-os/bottlerocket"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-02 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"「AWS」 Bottlerocket – 专为运行容器而打造的基于 Linux 的全新开源操作系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"关于const fn已经有很多讨论了,这篇文章只是作者个人对问题的所答那为什么const fn有用呢？一个简单的例子更多关于const fn的讨论:https://old.reddit.com/r/rust/comments/ihnnnz/announcing_rust_1460_rust_blog/详情请见:https://www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/iksmgk/psa_what_is_const_fn/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-02 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 1.46.0 stable 的 \"const fn\""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一位Reddit贴主使用全新的常量函数，回顾了作者两年前编写曼德布洛特图小项目。如今的Rust常量函数已经支持while、loop等语句，可以编写较为复杂的函数，并直接将输出结果字符串保存到以const语句定义的全局常量中。相比作者两年前使用类型系统较麻烦的方法，新的方法快捷、便利，思考量更少，开发效率更高。评论认为，相比竞品C++目前的灵活性，Rust语言拥有的编译期保障更强。代码中展示了在常量函数里定义可变变量、使用while循环语句、访问数组下标和调用其它常量函数的方法。需要注意的是，作者使用的全局常量是[u8; SSIZE]类型，其中类型里的常量类型SSIZE也是通过常量运算得到的。我们可以直接把这个类型转换为&str类型；如果我们能确定它是合法的UTF-8串，那么这个转换将是一个零开销函数。贴文链接https://www.reddit.com/r/rust/comments/ijpxz2/const_fn_makes_it_too_easy_to_do_mandelbrots/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-01 18:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"试试用常量函数画曼德布洛特图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在我们编写操作系统内核时，常常使用Rust语言，作为替代C语言的开发方法。Linux每周新闻网报道了一次在线会议，主要讨论用Rust编写Linux内核的可行性。选用Rust是考虑到它在内存安全上的保证更强，且近期安卓、乌邦图系统的大量漏洞也和内存安全有关。参会者强调，他们更专注于如何在新的Linux内核模块上运用Rust语言。Linux内核是庞大的生态，新的Rust语言目前应当兼容已有的C语言二进制接口。Rust语言有较好的包容性，能很好地与其它语言兼容；这种兼容互操作包括从Rust里调用C语言的特性，也反过来包含在C语言里使用Rust函数的支持。对开发而言，跨语言的类型检查也是需要的。Rust提供的bindgen工具可从C语言的头文件生成Rust的函数定义，这对内核开发来说是非常好用的工具。这个bindgen工具未来将需要更多的功能，来适合更多C语言函数标签的定义，对此贡献者分享了一个用Rust语言编写的Linux模块作为例子。参会者认为，即使只用Rust语言作为包装，也对关键性和通用的程序接口有一定的意义。作为适用面广、历史悠久的操作系统，Linux适用于非常多款指令集架构。目前的Rust语言成熟的编译器有rustc，它基于LLVM编写，但不一定支持所有Linux支持的指令集架构。参会成员提出了与已有模块保持兼容的规则和方法，帮助理解和判断是否能用rustc编译兼容性好的模块。如果Rust语言在操作系统内核有更广的指令集架构支持，也将吸引更多的贡献者，丰富Rust语言本身的生态。除了rustc，也存在用C语言编写Rust编译器的项目，也有在GCC框架下添加Rust语言前端的想法，这将帮助Rust编写的驱动程序兼容更多的指令集架构。内核的其它模块也需要和新模块保持二进制兼容性。Linux内核通常使用GCC编译，这和通常使用LLVM编译的Rust语言程序有所区分。在苛刻的条件下，二进制兼容性需要更强的保证。达到这一点，Rust语言目前编写的模块可以和Clang编译器编译的模块共同链接。参会人员提到，在目前的Rust语言开发里，链接GCC编译的库也是十分常见的现象。评论认为，Rust语言开发内核的进展对完善生态是非常有帮助的，最近常量函数语言特性的更新也能促进这一点。这次会议的讨论基于去年阿勒克斯·盖诺和杰弗里·托马斯在去年的Linux安全峰会上的成果，两位贡献者本人也参与了会议。Rust语言团队、长期的Linux内核贡献者乔石·川普利特、Linux内核贡献者格雷格·卡洛-哈特曼和弗洛安·维米尔出席了会议。Linux每周新闻网https://lwn.net/SubscriberLink/829858/281103f9c6fd0dc2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-01 18:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linux每周新闻网：编写Rust语言开发的Linux内核"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"知名的Rust语言静态分析软件rust-analyzer公布了最新的更新日志。Rust语言编译器团队组建了新的“库词法分析”团队（parselib team），专注于与分析软件共用词法分析的中间结果，道路虽然是曲折的，但将对rust-analyzer的开发十分有帮助。一些以“ra_ap”开头的库已经上传到crates.io网站，帮助第三方开发者在rust-analyzer本身之上开发部分的扩展。其它的杂项更新包括支持更多的语法类型、添加了输出日志的参数，修改了与文档有关鼠标悬浮窗的格式，修复了很多问题，有一些内部的性能改进。rust-analyzer项目官网https://rust-analyzer.github.io/thisweek/2020/08/31/changelog-40.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-01 18:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer发布第四十次更新日志"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Headcrab是现代化的Rust语言调试器库。今年八月，Headcrab团队合并了超过二十个提交请求，这包括添加新的反编译命令、栈展开函数和对应的命令等等。一些成员已经在兼容更多平台方面开展工作。针对特定平台，Headcrab现在能利用x86_64的调试寄存器添加断点，能在macOS上访问进程的线程列表，在Linux上由更多平台相关的命令和测试模块。在接下来的九月，Headcrab团队计划发布全新的0.2.0版本。团队将编写更好的文档来吸引开发者，将添加更多的示例程序和典型使用情况，继续支持更多的操作系统平台，完善断点、信号和线程本地变量的支持。Headcrab感谢了本月参与开发的七位开发者，并欢迎更多开发者通过Zulip和他们联系。Headcrab项目官网https://headcrab.rs/2020/08/31/august-update.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-09-01 18:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Headcrab发布八月进度报告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 已经有了很多不错的教科书来帮助大家学习, 但是有时候阅读这些教科书都比较困难, 因为他们大多数是为母语是英语的人准备的. 作者使用更简单的英语来写这本书, 目的是为了让那些母语不是英语的人能够更快的学习 Rust.现在 easy_rust 已经正式完成了,大家可以查看下面链接来观摩学习.https://github.com/Dhghomon/easy_rust/blob/master/README.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Dhghomon/easy_rust/blob/master/README.md"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 17:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"easy_rust 正式完成了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"A new Firebird Extension Library for Rubyhttps://github.com/fernandobatels/rbfbclient一个新版本的 Firebird 的 Ruby 语言扩展库，用 Rust 而不是传统的 C 语言开发而成。目的：安装："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/fernandobatels/rbfbclient"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 17:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust语言开发Firebird的Ruby语言扩展库。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"raft-playgroundhttps://github.com/Diggsey/raft-playground一个同来模拟和测试raft集群的应用，用到raft-zero。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Diggsey/raft-playground"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 17:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"raft-playground"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"term-fireworks - Fireworks for your terminalhttps://blog.darrien.dev/posts/fireworks-for-your-terminal/https://gitlab.com/DarrienG/term-fireworks给终端窗口加入烟花效果。Firworks 是给 terminal 终端写的烟花效果的窗口。  在Rust编程中你只需cargo install firworks 就可以下载和安装可执行文件，目前只支持Linux和MacOS。运行："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gitlab.com/DarrienG/term-fireworks"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 17:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"term-fireworks - 在终端里编入烟花效果"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dircpyhttps://github.com/woelper/dircpy一个递归复制文件夹的工具库。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/woelper/dircpy"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 17:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dircpy"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"【从零到生产】是一系列聚焦于使用 Rust 来开发云原生应用的教程. 本篇为第三章后半部分, 讲述如何处理 HTML 的表单, 数据库连接的建立和使用, 以及如何进行集成测试.感兴趣的同学可以从第一章开始看起.Read morehttps://www.lpalmieri.com/posts/2020-08-31-zero-to-production-3-5-html-forms-databases-integration-tests/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 17:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【从零到生产】 3.5 HTML表单处理, 数据库操作 和 集成测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GlueSQL 正处于早期阶段，但它支持一些基本的SQL查询。主要特点：\n完全用Rust编写\n纯功能执行层\n支持Wasm\n作者在Reddit上表示，他希望在Rust项目中，可以让GlueSQL成为SQLite的替代方案。\nI also hope GlueSQL to take some roles which SQLite is doing, there exists too few SQL database implementations for frontend applications.阅读更多：GitHub Repohttp://github.com/gluesql/gluesql"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 09:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GlueSQL：完全用Rust编写的SQL数据库，同时支持Wasm"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 作为系统语言可以帮我们开发一些底层的东西，例如 ：\n网络服务器\n浏览器\n操作系统模块\nCLI工具\n嵌入式应用\nWasm应用\n阅读更多：Why Rust is a great language to learn in 2020https://dev.to/alexandrudanpop/why-rust-is-a-great-language-to-learn-in-2020-50p1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 09:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【经验贴】为什么你需要在2020年学习Rust？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由 TS McNamara 所著的 Rust in Action 将于明年发售，它已冲顶亚马逊内存管理和并行计算分类新书榜第一名。Rust in Action MEAP V14（预览版）现已可阅读阅读更多：\nE-book\nReddit post\nAmazon book\nOnline reading\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-31 09:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【新书发售】Rust in Action 将于明年三月发行"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"序列化一直是 Rust 的强项，序列化库既成熟又快速。特别是 Serde 在 Rust 1.0.0 发布之前就已经可用，其背后的理念是使用 trait 解耦对象，并从序列化格式中进行序列化/反序列化，这是一个非常强大的思想。格式编写者只需实现 Serde 的 trait 即可，而用户通过#[derive(Serialize，Deserialize)]对其对象进行序列化，而无需考虑格式。当然有各种特定格式的库，这篇博客文章中，将在考虑 API 可用性和性能的情况下比较一些库。博客文章链接，https://blog.logrocket.com/rust-serialization-whats-ready-for-production-today/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.logrocket.com/rust-serialization-whats-ready-for-production-today/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-29 20:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"生产环境选哪个 Rust 序列化库？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"embedded-time，提供了一个完整的持续时间（Duration）和速率（Rate）类型库，以及硬件计时器/时钟的时钟（Clock）抽象以及嵌入式系统中的即时（Instant）类型。此外还提供了软件计时器的实现。crate 链接，https://crates.io/crates/embedded-time"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/embedded-time"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-29 20:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"embedded-time 发布 v0.10"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ebur128 库，是EBU R128 标准的纯 Rust 实现。其是将 C 语言开发的 libebur128 库代码移植到了 Rust，在保持 API 和性能不变的同时，提供完全相同的结果。EBU R128，是欧洲广播联盟（European Broadcasting Union）出的一个关于响度（Loudness）控制的建议书（Recommendation），是用来通知广播公司如何分析和标准化音频，以使每段音频听起来与人耳的音量大致相同。crate 链接，https://crates.io/crates/ebur128Github 链接，https://github.com/sdroege/ebur128"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/sdroege/ebur128"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-29 20:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"EBU R128 库 ebur128"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用户可以使用这些引擎模拟和渲染用 YAML 语言描述的场景。Jan Bender 和 Dan Koschier 在该领域的论文《用于基于流体和固体的物理模拟的平滑粒子流体动力学技术》（Smoothed Particle Hydrodynamics Techniques for the Physics Based Simulation of Fluids and Solids），是对流体模拟的出色介绍。Github 链接，https://github.com/AudranDoublet/opr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/AudranDoublet/opr"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-08-29 20:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中逼真的流体模拟"},"type":"text"}],"type":"title"}},]
