export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天Rust 官方仓库里报告了一个神奇的Bug，该 Bug 似乎动摇了 Rust 的世界法则，该 Bug 的表现如下：正常情况下，最后的 y.x 应该输出 “13”，但是现在还是 “42”。这个结果意味着，代码第7行的可变引用并没有起到作用。是不是很神奇？这个 Bug 让人感觉 Rust 世界的基本法则都崩塌了。Read Morehttps://mp.weixin.qq.com/s/Qr3x-NbhOTlUtYyzlPQ4iQ"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-26 21:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Stable 1.45 中的 \"神奇\" Bug 解读"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"servo是一个使用Rust开发的浏览器，servo-unity这个插件可以在unity构建的在AR/VR世界中展示一个浏览器窗口，在虚拟世界中拥有类似现实中的浏览器体验。本文介绍了这个插件能够实现的功能，以及它的工作原理、架构设计和一些挑战。Repohttps://github.com/MozillaReality/servo-unityRead Morehttps://blog.mozvr.com/a-browser-plugin-for-unity/http://jamesmcm.github.io/blog/2020/07/25/intro-dod/#en)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-26 21:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"servo-unity：Unity的浏览器插件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust的文档已经很全面了，但是很多非英语母语的人理解起来可能比较困难，easy rust用比较容易理解的表述方式组织了Rust文档。能降低文档理解难度，确实能让一部分人受益，如果你想通过这个文档学习，最好以官方文档为主，将这个文档作为参考，否则可能会走上偏路。Repohttps://github.com/Dhghomon/easy_rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-26 21:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Easy Rust 让Rust文档更容易理解"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在Rust项目中，如果你要对私有方法做测试，你该怎么办呢？临时将方法改为public？别再这样做了。你可以不创建tests文件夹，而是添加test模块，然后将方法改为pub(crate)。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-26 21:03"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust项目测试小技巧"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"你正在阅读的这篇文章就是这个web站点用rust重新实现的结果，这归功于大量的努力、调研和咨询。如果有人想要引用go的原始代码实现，也可以从这里得到。如果你发现关于RSSFeed、AtomFeed和JSONFeed的任何问题，请尽快告诉我让我可以修复这些。文章链接https://christine.website/blog/site-update-2020-07-16"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-25 20:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用rust重写web博客"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Langcraft是一个针对Minecraft数据包的代码生成器。目前Langcraft可以没有问题的运行相当多的位码文件,该项目有一个内置支持断点(ish)和检查寄存器/内存值的命令解释器用于调试。所有生成的数据包可以在低于五分钟的时间内，运行在一个真正的Minecraft Java 1.16+世界中。github链接https://github.com/SuperTails/langcraft"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-25 20:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从LLVM IR编译《我的世界》数据包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-analyzer是Rust编程语言的一个新IDE后端。在这篇文章中，我们将用三种方式学习如何制作一个简洁的IDE。它的灵感来自于一篇关于使用datalog进行语义分析的优秀文章。这篇文章只描述了最高级别的架构，要实现一个成熟的IDE还需要做更多的工作。文章链接https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-25 20:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"响应式IDE的三种架构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"将17分钟的nmap扫描变为19秒。使用Rustscan快速找到所有打开的端口，自动将它们导入Nmap。github链接https://github.com/brandonskerritt/RustScanhttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-25 20:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustScan:一个Rust实现的更快的Nmap"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"来自Reddit的热评：I Have a few Arduinos lying around... maybe I can bring them back to life with RustAVR 项目官网的简介：The standard Rust nightly compiler can be used to compile crates for AVR - no compiling from source required.推荐库：https://github.com/esp-rsRead Morehttps://avr-rust.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-24 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 编译器（nightly版）支持 AVR 了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"A search engine for PowerShell cmdlets.Read Morehttps://github.com/mrmonday/find-cmdlet#find-cmdletRead Morehttps://find-cmdlet.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-24 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Find-Cmdlet：PowerShell的搜索引擎，由Rust提供支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Compile time CUDA device checking in Rust对于本实验，我将使用Rust编程语言。具体来说，我将使用tch-rs绑定到libtorch。这允许编写与PyTorch非常相似的代码，但使用Rust。https://github.com/LaurentMazare/tch-rsRead Morehttps://m-decoster.github.io/2020/07/24/compile-time-cuda/Read Morehttps://github.com/LaurentMazare/tch-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-24 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在CUDA设备的编译期用Rust进行检查"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust是一种静态和强类型的系统编程语言。Rust适用于渴望使用某种语言的速度和稳定性的人。Read Morehttps://towardsdatascience.com/learning-rust-by-converting-python-to-rust-259e735591c6#3cb0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-24 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【经验贴】通过将Python转换为Rust学习Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"CLion IDE 的 Rust 编程体验非常不错，但是很贵，JetBrains官网给出了免费获取的方法。Read Morehttps://www.jetbrains.com/clion/buy/#discounts?billing=yearly"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-24 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【福利贴】免费获取CLion的诸多途径"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一本开源书籍《Rust编写推箱子游戏》，目前已完成三个章节的编写，在线阅读地址：https://sokoban.iolivia.me/c01-00-intro.html书籍📚及一些示例、代码仓库地址：https://github.com/iolivia/rust-sokoban"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-23 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 编写推箱子游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 基础设施团队很高兴地宣布，大部分 Rust 的 CI 正在转向GitHub Actions! 在过去的几年中，编译器贡献者的一个主要痛点就是等待PRs被合并，那是一个漫长的等待过程。而这次将大大改善编译器贡献者的体验。原文：https://blog.rust-lang.org/inside-rust/2020/07/23/rust-ci-is-moving-to-github-actions.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-23 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的 CI 将使用 GitHub Actions"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Nixpkgs 最近合并了 PR＃93568，从而使 Nix 软件包管理器可以将软件包交叉编译到 Redox。更多细节请看：https://www.redox-os.org/news/redox-plus-nix-0/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-23 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Nix 交叉编译软件到 Redox"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Condure 是一个高性能 HTTP / WebSocket 连接管理器项目。它的表现形式是服务，代表服务器应用程序管理网络连接，以允许控制来自多个进程的连接。项目地址：https://github.com/fanout/condure"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-23 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Condure"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dijo是一个习惯跟踪器，在您的终端中运行。并且 dijo 可编写脚本的脚本，可与外部程序连接以跟踪事件。感兴趣请看：https://github.com/NerdyPepper/dijo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-23 22:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dijo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rocket是Rust的Web框架,可以轻松编写快速,安全的 Web应用程序,而不会牺牲灵活性、可用性或类型安全性。4 年了Rocket终于可以使用 stable rust 进行编译了!详情请见:https://github.com/SergioBenitez/Rocket/commit/56a617262525de758cb47a0d71049db948f24bbd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/SergioBenitez/Rocket/commit/56a617262525de758cb47a0d71049db948f24bbd"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-22 19:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rocket 终于迎来了stable rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前有 rust 编写 linux kernel module,现在 windows 内核驱动例子也来啦!https://not-matthias.github.io/kernel-driver-with-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://not-matthias.github.io/kernel-driver-with-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-22 19:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 编写 windows 内核驱动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从 2011年的 C++ 智能指针开始,讲述了单一所有权和 RAIIhttps://vale.dev/blog/raii-next-steps"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://vale.dev/blog/raii-next-steps"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-22 19:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"单一所有权和RAII"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"访问 https://tokio.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://tokio.rs/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-22 19:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tokio 换了新网站啦"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库将你的应用和异步运行时库隔离开来（也就是所谓的“包一层”），支持 smol tokio async_std 和 bastionPS: bastion 是一个高可用的分布式容错的运行时https://github.com/bastion-rs/agnostik"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-21 20:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Agnostik -- 用你喜欢的异步运行时吧！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rbatis 是另外一个 ORM 框架，支持异步！支持异步！支持异步！看名字是想要做对标 Mybatis的产品了https://rustcc.cn/article?id=7f331aba-4e66-4928-b6e8-9a980ed16429"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-21 20:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"制作Rust语言异步ORM框架（Mybatis）框架第二弹"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"另外一个用 Rust 和 wasm 制作的页面游戏，玩的时候注意不要被自己的子弹穿越回来消灭自己哈https://justinmimbs.github.io/rs-asteroids/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-21 20:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"来消灭小行星吧！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"21世纪是生物的世纪……咳咳！是生物信息的世纪！这个库包含了多种算法实现，以及支持常用的生物信息数据格式，并且有足够的测试用例来保证功能正确性。即使不玩生物也可以来看看大牛们是怎么组织一个稍微大一点的软件工程项目哈https://github.com/rust-bio/rust-bio"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-21 20:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust的生物信息基础库 rust-bio"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"周末的时候小编更新了一篇用 Rust 来实现一个很简单的游戏副本模型，并运用了抽象工厂模式来解耦。这篇也是本人公众号 【Rust设计模式】专辑的第二篇，希望多多支持哈微信公众号：https://mp.weixin.qq.com/s/ucSKmw6oHpRiByfpboYsMwGitHub原文： https://huangjj27.github.io/rust-patterns/abstract-factory.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-21 20:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用抽象工厂模式来设计游戏副本【小编私货】"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n【Rust日报】2020-07-20\n文章类\n\nRust 模块系统的超清晰解释\n使用 Rust 实现 boids 算法 (Game)\nRate Limiting in Rust Using Redis\n\n\nCrates\n\nNative-Windows-GUI 发布 1.0 stable 版本\npopol 更小的基于 poll 的 non-blocking IO 库\ntide 发布 v0.12.0\nCalcite 用于创建deno plugins的库\n\n\n\nRust 模块系统的超清晰解释\n使用 Rust 实现 boids 算法 (Game)\nRate Limiting in Rust Using Redis\n\nNative-Windows-GUI 发布 1.0 stable 版本\npopol 更小的基于 poll 的 non-blocking IO 库\ntide 发布 v0.12.0\nCalcite 用于创建deno plugins的库\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【Rust日报】2020-07-20"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"文章类"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 的模块系统可能对于新人来说有些困惑,这篇文章通过几个循序渐进的小例子,让你快速且清晰的对 Rust 模块系统有一个基本的认识.Read morehttp://www.sheshbabu.com/posts/rust-module-system/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 模块系统的超清晰解释"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Rust 来实现经典的 Boids 算法的一系列文章的 Part1. 做游戏或者对该算法感兴趣,并且希望来学习 Rust 的同学也可以参考一下.有比较详细的过程和代码.Read more, 关于Boidshttps://blog.bitsacm.in/a-fistful-of-boids/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 实现 boids 算法 (Game)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Redis 来实现 Rate limit.Read morehttps://outcrawl.com/rust-redis-rate-limiting"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rate Limiting in Rust Using Redis"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crates"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Native-Windows-Gui (NWG) 一个基于 win32 的 rust 库. 号称在 Windows 平台下开发 native GUID 最好且唯一的 Rust 库.此外,还有一个发布一个姐妹库 Native-Windows-Derive, 可以让开发者使用 Macro 来快速构建 GUI.Github地址 以及 NGG 指导文档https://github.com/gabdube/native-windows-gui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Native-Windows-GUI 发布 1.0 stable 版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个基于 poll 的最小 non-blocking IO 库. 作者设计的初衷是为了解决 peer-to-peer networking 中大量连接的管理问题. 作者不需要一个拥有大量依赖和复杂特性的 async/await runtime, 仅仅需要一个 non-bloking IO 库.\n比 mio 更小 ( mio 的 10% 大小)\n而且所有的 Rust 标准库可以正常工作(例如 io::Read, io::Write)\n仅依赖libc\n没有 \"runtime\"\nGithub地址https://github.com/cloudhead/popol"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"popol 更小的基于 poll 的 non-blocking IO 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Github文档https://github.com/Srinivasa314/calcite/blob/master/docs/part1.md例子：Github地址https://github.com/Srinivasa314/calcite"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Calcite 用于创建deno plugins的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要变动:新增 ResponseBuilder 更加方便的构建 Response.Server::listen 通过引入新的 Listener trait, 可以提供各种 transport, 默认内置对了 TcpStream,SocketAddr和UnixStream的实现.此外,同时发布的还有 tide::listener::ConcurrentListener,用于处理多个 transports,例如开发者想同时处理 IPV4 和 IPV6.State现在必须要 clone.迁移所有的 trait 使用 async-trait.middleware 中错误处理的改进.Release v0.12.0https://github.com/http-rs/tide/releases/tag/v0.12.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tide 发布 v0.12.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-20 19:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Trait 工作组的目标是完善 Chalk ，以便将其最终用于 rustc 中解决 trait的各种问题。 看上去，工作组的一个Sprint周期是6周左右。Chalk 由多个独立crate组成，其结构：\nchalk-derive :  定义了派生宏（derive proc macros)\nchalk-ir : 基本的「类型库」，用于在 rustc、rust-analyzer和Chalk之间共享\nchalk-solve： 定义 chalk-ir 中类型的Rust 语义\nchalk-engine ： 实现SLG 求解器\nchalk-recursive ： 实现递归求解器\nchalk-parse : 用于测试，将 类似Rust的语法解析为chalk-ir 和  chalk-solve  的类型\nchalk-integration ： 用于为测试提供有用的类型\nchalk： 用于测试，提供REPL\n关于具体什么是 Chalk，可以看看  Chalk Book： http://rust-lang.github.io/chalk/book/what_is_chalk/crates.html目前状态：\n进一步完善 Chalk 对 GAT 的支持。GAT相关 Issues： https://github.com/rust-lang/rust/issues/44265\n提取表示类型的共享库\n支持 .chalk 文件用来debug\n上一个sprint支持了 impl Trait，这个sprint 继续提升对impl Trait的支持\n完善Chalk对Rust语义的支持\n处理生命周期约束\n感觉目前Chalk还有很多工作要做，接下来 官方宣布成员们要休假，可能到9月份再继续工作。。。Read Morehttps://blog.rust-lang.org/inside-rust/2020/07/17/traits-sprint-3.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-19 22:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Trait 工作组 2020 Sprint 3 总结"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近官方受 Rust安全响应工作组通知检查 有关影响crates.io (http://%E6%9C%89%E5%85%B3%E5%BD%B1%E5%93%8Dcrates.io) Web应用程序中令牌生成的安全问题，并且在调查该问题的同时，他们发现了另一个影响crates.io API令牌的漏洞。目前没有证据证明这个漏洞已经被利用了，但是官方还是选择了撤销现在crates.io上所有的API密钥。开发者们可以在 crates.io/me  页面重新生成一个新的。Read Morehttps://blog.rust-lang.org/2020/07/14/crates-io-security-advisory.htmlRead Morehttps://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-19 22:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官宣： crates.io 的API 密钥需要重新生成了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者在通过Rust学习一些操作系统底层的东西，这篇文章是第一篇，记录了他如何在x86_64上引导至裸机Rust。Read Morehttps://micouy.github.io/posts/low-level-pt-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-19 22:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一些底层的学习 Booting to 'Hello Rust!'"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"让我们来讨论一下这个话题（'Will 2020 Be The Year Of Rust In The Linux Kernel?'）！Linus Torvalds also touched on Rust earlier this month.https://developers.slashdot.org/https://www.zdnet.com/article/linus-torvalds-looks-at-the-future-of-linux-kernel-developers-and-development/Read Morehttps://hackaday.com/2020/07/15/will-2020-be-the-year-of-rust-in-the-linux-kernel/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-19 22:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2020年Rust会参与Linux内核编写吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个供个人和雇主使用的，用来发布求职和招聘信息的 Reddit 帖子，具体的发帖规则（Rules）可以看帖子Read Morehttps://www.reddit.com/r/rust/comments/htnv19/official_rrust_whos_hiring_thread_for_jobseekers/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-19 22:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"\"Who's Hiring\", job-seekers and job-offerers"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本文涵盖了  Criterion、valgrind、kcachegrind的使用Criterion 是一个可以用于Stable Rust的基准性能测试库，并且可以生成漂亮的性能测试报告（Web、console）。Repohttps://github.com/bheisler/criterion.rs/blob/master/README.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-19 22:01"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 基准性能测试指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 编译器编译并运行于很多平台之上，但不是所有的平台都被同等支持。Rust 对平台的支持被分为Tier-1，Tier-2，Tier-3三个等级，对其编译和运行的保证程度逐级递减。这次新提案，提升 aarch64-unknown-linux-gnu 到Tier-1等级，处于该等级的平台被认为是“确保可以构建和工作的”，会为此平台建立了自动化测试，向rust-lang/rust仓库主分支提交的修改确保测试通过。RFC 提案链接，https://github.com/rust-lang/rfcs/pull/2959"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/rfcs/pull/2959"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-18 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust新提案：提升ARM64 Linux平台支持到Tier-1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tunnelto，可使你通过公共URL将本地运行的Web服务器公开到Internet。在tokio上使用async-io实现。安装后，使用tunnelto --port 8000，该命令打开一个隧道，并将访问转发到localhost:8000。Github 链接，https://github.com/agrinman/tunnelto"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/agrinman/tunnelto"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-18 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tunnelto"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"基于 actix-web 构建Web服务的一篇介绍文章。你应该在Rust中实现你的下一个Web服务吗？我还不知道，但是我们现在到了至少应该考虑的地方。文章链接，https://brandur.org/rust-web"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://brandur.org/rust-web"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-18 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust开发Web服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该Sprint继续前期的工作：努力使 Chalk 功能完整等。具体可查看下面的文章链接。文章链接，https://blog.rust-lang.org/inside-rust/2020/07/17/traits-sprint-3.html关于 traits 工作组，https://rust-lang.github.io/wg-traits/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-lang.github.io/wg-traits/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-18 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"traits 工作组Sprint 3的总结"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇在Rust中创建基准测试的指南。文章链接，https://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rusthttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-18 18:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中创建基准测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"1.45版最大的两个改动如下：1) 修复了浮点数往小整数转换的时候会导致Undefined behavior的问题（这是在未使用unsafe的时候导致的UB，官方团队称这种为unsound bug）修复方案为：\nas 关键字默认为saturating cast\n这个列子能够很好的理解什么是saturating cast:上面的代码打印出：\n如果不想采用as的默认转换，则需要使用unsafe方法\n2) 稳定了在expression、match pattern和statement中使用函数式过程宏的功能，这是Rocket发布稳定版之前最后一个依赖的nightly feature增加 char in range详细查看官方博客：https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-17 19:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.45发布！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"无船同志的这篇新博客探讨了2020年计划稳定Const Generics的部分功能。Const Generics是Rust开发者们期待多年的新功能，没有const generics，rust的数组永远都不能是第一等公民（first class part of the language)，我们没有办法给任意长度的数组impl某些trait，以至于在标准库中经常看到只给长度为0到32的数组impl trait（也就是大家看到的LengthAtMost32，现在已经有了PR在移除这个trait）。https://github.com/rust-lang/rust/pull/74060具体来说，const generics到底是指什么呢？中文翻译是常量泛型，常规的泛型参数只能是类型（比如Opiton<T>这里的泛型T只能是某个type），有了const generics之后，常量值也能作为泛型参数了！但是，无船同时提到const generic还有两个比较大的局限性，它们还需要多花点时间才能稳定。1) const generic目前只支持原生的整数类型比如无符号整数、有符号整数、bool和char，不允许使用任何复合或用户定义的类型，也不允许使用引用（当然也不允许字符串）。主要的原因是为了保证Rust类型系统的健全性，不过比起第二条，这一条是修复起来相对比较容易的。2) const generic参数不能是基于其他泛型和const的表达式目前只有两种表达式能够允许作为const generic参数：\n普通的const泛型参数。比如，在impl <const N：usize>中，该值可按字面意义用于填充const泛型。\n不依赖其他泛型或const generic(我理解为是二阶const generic?)，并且可以在const上下文运行的表达式（有点绕）;\n就算有上面这两种限制，const generic依然能够实现一些很棒的功能，比如：Rust编译器能够根据传给map函数的闭包中数组的长度自动推算出chunk的大小！链接：https://without.boats/blog/shipping-const-generics/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://without.boats/blog/shipping-const-generics/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-17 19:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"无船同志新博客：Shipping Const Generics in 2020"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章是作者前段时间参加Deno项目的创始人Ryan在讲述Deno内部组织架构的talk之后做的笔记。Ryan的talk: Ryan Dahl - An interesting case with Denohttps://www.youtube.com/watch?v=1b7FoBwxc7E链接：https://dev.to/ajcwebdev/deno-internal-organization-10mj"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dev.to/ajcwebdev/deno-internal-organization-10mj"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-17 19:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Deno项目内部架构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"luminance 之前是包裝 OpenGL 3.3 的庫，作者一直希望將luminance更新的更好。這次提供了 luminance-webgl 與 luminance-gl 支援 webgl 與舊機器luminance-sdl2支援 sdl2luminance-front方便跨平台希望大家繼續關注我链接：https://phaazon.net/blog/luminance-0.40"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://phaazon.net/blog/luminance-0.40"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-17 19:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"luminance-0.40"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"关于 Rust 和 Go 的一些 gRPC 库的基准测试，reddit上有不少评论，讨论了大家关心的一些地方，有兴趣可以看一下。，详情可看原文https://www.reddit.com/r/rust/comments/hs5k36/benchmarking_grpc_in_rust_and_go/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 和 Go 的 gRPC 基准测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"j4rs 是 Rust 的一个库,提供了一些从 Rust 端调用 Java 函数的一些工具。现在已经发布了 v0.12.0  版本。Rust端代码大概是这个样子：Java端的代码是这样的：具体请看原文：https://astonbitecode.github.io/blog/post/j4rs_0.12.0/GitHub 仓库地址：https://github.com/astonbitecode/j4rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://astonbitecode.github.io/blog/post/j4rs_0.12.0/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"j4rs，一个在 Rust 中调用 Java 代码的 Crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者提供了一些思路在 Rust 中实现了函数重载，一个示例的代码：具体请查看原文：https://medium.com/@nrabulinski/function-overloading-in-rust-d591aff64a03"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://medium.com/@nrabulinski/function-overloading-in-rust-d591aff64a03"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中的函数重载"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者在使用 Rust 重写了他的部分 Windows 内核驱动程序，并分享了一些经验，再次过程中的总结，详情请查看博客原文https://out.reddit.com/t3_hrwyl8?url=https%3A%2F%2Fnot-matthias.github.io%2Fkernel-driver-with-rust%2F&token=AQAAQmIQX-R0HIdkl3yL2W3c0VUgs6R3cmuRwPkthSrNtCS84p_1&app_name=desktop2x&user_id=134987470566查看reddit讨论区：https://www.reddit.com/r/rust/comments/hrwyl8/writing_a_kernel_driver_with_rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/hrwyl8/writing_a_kernel_driver_with_rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 编写内核驱动"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"crates.io：https://crates.io/crates/bin_packer_3d/doc：https://docs.rs/bin_packer_3d/1.0.0/bin_packer_3d/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/bin_packer_3d/1.0.0/bin_packer_3d/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个使用了三维拟合算法用来解决讲小盒子放入大盒子里的问题的一个 Crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"chubaodb 是一个分布式高可用的云原生，同时支持传统的分布式文档搜索及存储系统，支持全文检索,聚合查询,向量搜索,标量搜索的功能，采用轻schema策略，尽可能提高了存储文档的灵活度。同时吸取其他类似软件的经验，初心于在有限的计算节点情况下，支持不限容量的存储及计算，同时尽可能低的学习成本，完成尽可能多的需求。https://chubaofs.github.io/chubaodb/zh-CN/introduction.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://chubaofs.github.io/chubaodb/zh-CN/introduction.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"chubaodb：分布式高可用的云原生，同时支持传统的分布式文档搜索及存储系统"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust项目中如果想用存储引擎的话主要是用rust-rocksdb或者Sled，前者是FFI调RocksDB后者是Bw树实现，唯独缺了原生的LSM-tree based实现，因此Fullstop000撸了一个wickdbhttps://github.com/Fullstop000https://github.com/Fullstop000/wickdb"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Fullstop000/wickdb"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust写的LSM-tree based 存储引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以把它看成 safety-guard crate 和 safe crate的结合。比如，如果你的代码是像这样的：https://crates.io/crates/safety-guard用了 pre 的话就可以重写为这样："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pre: 提供对unsafe代码的编译检查帮助"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"点击查看：https://doc.rust-lang.org/nightly/std/项目地址：https://github.com/Cldfire/ayu-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Cldfire/ayu-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nightly rustdoc 现已提供 Ayu theme"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"博客地址：https://mckeogh.tech/post/shallow-water/项目地址：https://github.com/rse-standrewscs/shallow-water"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rse-standrewscs/shallow-water"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust重写FORTRAN科学软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者认为对于一些比较小的程序，虽然cargo也不算重，但还是有点不够轻，所以就写了这个cargo-single。作为一个cargo子命令可以更快地创建较小的文件项目。比如下面程序需要用到 rand crate：就可以把它存为 random.rs 然后用下列命令运行：cargo single run random.rshttps://crates.io/crates/cargo-single"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/cargo-single"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-single : 更方便地构建单文件项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近Rust安全响应工作组最近注意到了有关影响crates.io Web应用程序中令牌生成的安全问题，并且在调查该问题时，我们发现了另一个影响crates.io API令牌的漏洞。没有证据表明这是被别人利用的，但是出于谨慎的考虑，工作组选择撤销所有现有的API密钥。 用户可以在crates.io/me上生成一个新的。https://blog.rust-lang.org/2020/07/14/crates-io-security-advisory.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2020/07/14/crates-io-security-advisory.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-15 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 安全通告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"《Rust之旅》（Tour of Rust）是一个Rust入门教程系列，它将从例子开始，引导初学者尝试使用Rust的各个特性。整个系列包括9个章节，109篇文章，每篇之后都有单独的练习，涵盖Rust语言的大量知识，并带领初学者初步熟悉Rust语言的生态。比较新的语言特性也在计划的开发过程中。这个项目可能是从Tour of Go中获得灵感的，已经发展出自己的网站，并且拥有包含简体中文在内的十种语言翻译，受到广大Rust爱好者的欢迎。官方网站https://tourofrust.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-14 16:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"欢迎来到《Rust之旅》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"游戏开发者Ian Kettlewell制作了一款Rust游戏Wonder，以参加知名的48小时游戏开发比赛Ludum Dare。这款游戏要求玩家绘制路线，引导小球的运动，在唯美的画面中收集所有的圆点来通关。Ian是Unity开发的老手，但这次它选用Rust语言的生态制作，主要是考虑Rust开发WASM较为简单，编译也比Unity的WebGL要节省时间。文章中，作者详细描述了制作这款游戏的技术细节，包括如何产生音效和处理物理碰撞，还有效地使用了async代码编写。游戏艺术设计的灵感来自日本的花札文化，作者在48小时内快速完成设计。最终，作者的游戏获得了大赛综合排名的第71名，而在有趣性上获得了大赛第16名的好成绩。博客链接https://ianjk.com/rust-gamejam/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-14 16:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Wonder：唯美的Rust WASM游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本篇文章中，作者通过改写他的博客网站，体会了Rust开发网页服务端的优势和不足。作者选择了rocket作为开发框架。作者认为Rust非常好的地方在于，很少需要亲自处理生命周期和借用检查器的问题。相比Flask，Rocket充分发挥了Rust过程宏灵活性的优势，这给作者留下了深刻的印象。稍微糟糕一些的部分，可能在于一些trait实现的错误非常长，不便于阅读，还有一些第三方库API的设计可能有小问题。当Rust最终发展为一门生态成熟的语言，作者认为这时候相比Python，Rust在网页开发上会有更多的优势。作者注意到最终成果的资源占用，Rust网页服务器的CPU占用非常低，性能十分良好。文章链接https://stu2b50.dev/posts/rust-is-surpris76171"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-14 16:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust是一门超棒的服务端开发语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本篇文章中，作者用Rust重写了知名的音频去噪库RNNoise。本次作者重写的动机出于原来的C语言项目缺乏维护，随着时间的推移，已经无法在部分平台上编译。由于这个库可能被其它C语言项目依赖，在FFI部分必须保持兼容，尤其是部分结构体的内存布局必须相同，作者认为这是移植工作的痛点之一。探针效应指的是添加测试部分后软件的行为会变得不同，作者本次也遇到了类似的头疼问题，不过重新审阅unsafe代码后，作者找到了问题；作者提到这也是不得不和C语言兼容后，Rust编译器无法帮它找到这个问题，如果只考虑safe代码，编译器是能找到问题的。最终作者测试了库的性能，处理同一段音频，作者用Rust编写的nnnoiseless库需要大约14.5毫秒，原来C语言编写的RNNoise则需要至少17毫秒，重写后性能有了部分的提升。在文章末尾，作者特别感谢了Rust的包管理器cargo，成熟的包管理器帮了他很大的忙。博客链接https://jneem.github.io/nnnoiseless/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-14 16:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nnnoiseless：把多媒体音频代码重写为Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Noah Corona制作了这款库，为yew的生态添加了共享状态的部分。这对开发yew架构的开发者是一件好事情。项目使用MIT协议发布。项目地址https://github.com/intendednull/yew-state--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-14 16:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Yew-state：易用的全局状态存储库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust@oliviff完成了她的《Rust游戏开发》的书，通过一个推箱子游戏的教程介绍Rust和游戏开发的一些概念。https://twitter.com/oliviffRead Morehttps://sokoban.iolivia.me/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-13 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 游戏开发教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #web作者尝试了很多个用于开发前端的Rust库，它们确实实现了它们所展示的功能，但缺点也是很明显的。比如API难以理解，复杂度随着代码量逐渐升高等等，如果从JS的解决方式来看这些问题，就会变的很容易，但作者是个Rust死忠粉，所以他尝试解决Rust开发前端的几个问题：作者按他理想的方式用rust写了伪代码，然后开发了Valerie这个库实现这种方式，一个简单的表单绑定可以这样实现，已经非常接近React了。Read Morehttps://dev.to/emmanuelantony2000/valerie-rethinking-web-apps-in-rust-4cl3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-13 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重新思考使用Rust开发web应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #EFIRead Morehttps://medium.com/@gil0mendes/an-efi-app-a-bit-rusty-82c36b745f49"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-13 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust开发一个UEFI应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #web作者之前的博客是静态网站生成器实现的，使用一段时间后发现各种麻烦，比如修改内容要SSH，用SFTP上传照片等等（其实还是有更方便的办法的），后来作者重写博客使用SSR渲染的方式，在选择语言、选择框架方面做了一些考虑，最终他选择使用Rocket，但是随着开发中发现的一些问题，比如处理multipart/form-data繁琐，数据库ORM设计不合理的地方。Read Morehttps://stu2b50.dev/posts/rust-is-surpris76171\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-13 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rocket 0.4开发服务器的感受"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 编程语言在安全性方面具有一些优势，因此某些 Linux 内核开发人员希望使用它。其中一位 Nick Desaulniers 希望在即将举行的 Linux Plumbers Conference 上进行介绍和讨论。Linux Plumbers Conference 是一个会议，参会的是从事 Linux 工作的顶尖开发人员（包括内核子系统，核心库，窗口系统等）。添加构建内核所需的新工具链的成本相对较高，更不用说人员的成本，需要熟练掌握 Rust 语言以充分审查所有新代码和移植代码。因此，电子邮件中讨论评估 Linux 内核开发社区是否愿意接受这些成本，如果是，那么可能需要清除哪些实际障碍才能真正实现。TL;DR\nNick Desaulniers 表示：“很想会议讨论 Linux 内核支持 Rust ”，较大的疑问是：“我们应该这样做吗？”或“我们如何限制使用它的范围？”\n包括 Greg Koah-Hartmann 在内的大多数人都对参加讨论感兴趣。\nrustc的开发人员 Josh Triplett 表示：“很高兴 Linux 内核成为 Rust 语言开发的重点。如果在内核中构建 Rustic 接口需要一些额外的语言功能，我们应该看看对语言的哪些增强最能满足这些要求。“\nLinus Torvalds 表示：”我不希望我们陷入困境 - 甚至不对任何新的 Rust 支持默认经过构建测试。“\n其中 Linux kernel in-tree Rust support 中的 in-tree，是 Linux 术语，意思是与内核源代码树本身一起存储并与之一起构建内核模块。讨论链接，https://lore.kernel.org/lkml/CAKwvOdmuYc8rW_H4aQG4DsJzho=F+djd68fp7mzmBp3-wY--Uw@mail.gmail.com/T/#u"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://lore.kernel.org/lkml/CAKwvOdmuYc8rW_H4aQG4DsJzho=F+djd68fp7mzmBp3-wY--Uw@mail.gmail.com/T/#u"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-11 20:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Linux 内核支持 Rust 的讨论"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo-todo 是一个用来查看 rust 代码中每个 TODO 的工具。将显示//todo的行数：相关链接：\nGithub，https://github.com/ProbablyClem/cargo-todo\nCrates.io，https://crates.io/crates/cargo-todo\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-11 20:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-todo"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"关于异步内存访问的 Rust 代码，要点是现代 CPU 与缓存有关。下面的 Paper 对该代码的作用有深入描述，感兴趣的可翻阅。Playground 链接，https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=b99e44f23000d3ab90c5ef3a9ab75b55相关 Paper，http://www.vldb.org/pvldb/vol11/p1702-jonathan.pdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://www.vldb.org/pvldb/vol11/p1702-jonathan.pdf"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-11 20:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"异步内存访问"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Miri，是一个针对 Rust 的 MIR（Mid-level Intermediate Representation） 实验性解释器。它可以运行 cargo 项目的二进制文件和测试套件，并检测某些类别的未定义行为。关于如何使 Rust 的编译速度更快，以便开发人员可以更快地进行迭代，这已经有很多讨论。但是另一种解决方案是根本不编译它。Python 之所以开发者友好，原因之一是因为编写一行代码到看到更改结果之间的时间不到一秒钟。miri 会为 Rust 带来同样的开发便利吗？Github 链接，https://github.com/rust-lang/mirihttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/miri"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-11 20:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Miri 解释器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"虽然机器学习的通用语言是 Python， 但是 Python 本身在计算密集型算法中实际上相当慢的。而 Rust 可能比 Python 快 25 倍。对于基于 web 的机器学习应用程序来说，基于 Rust、WebAssembly 和 Node.js 的精简软件栈很有意义。Rust 允许我们编写高性能的机器学习函数。为了运行时安全性、跨平台可移植性和基于功能的安全性，可以将这些 Rust 函数编译成 WebAssembly 字节码。然后，开发人员可以从 Node.js 环境中易用的 JavaScript API 访问这些 Rust 函数。本博文作者向我们展示如何将 Rust 函数编译成 WebAssembly，并从 Node.js 应用程序中调用它们。在这个例子中，我们将演示Rust中两个重要的机器学习任务：K-means 聚类和可视化。详情请看原文：https://www.secondstate.io/articles/machine-learning/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-10 00:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 机器学习应用：K-means 聚类和可视化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在嵌入式 no_std 应用程序中进行并发并发编程？Rust Core Library 中没有对时间片线程的内建支持；该抽象仅在 std 环境中可用（参阅 std::thread)。得益于嵌入式小组的编译器工作，最新的稳定版本将 async/await 功能引入了no_std。那么该使用它呢？协作调度适合所有嵌入式应用程序吗？有软性或硬性实时要求的应用程序如何？https://doc.rust-lang.org/core/index.html带着这些疑问，我们将研究一些常用的嵌入式并发模式，然后研究一些较不常见的嵌入式并发模式。 我们将以实用方式比较它们的运行时特性，以便让你更好地了解哪种适合你的应用程序。详情请看：https://ferrous-systems.com/blog/embedded-concurrency-patterns/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-10 00:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式 Rust 的并发模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"博文将研究如何使用 warp 与 RabbitMQ 集成 Rust Web 应用程序。 示例中将会使用 lapin 库和 deadpool 库一起用于池化连接。https://github.com/CleverCloud/lapin示例比较简单。详情请看:https://www.zupzup.org/rmq-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-10 00:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中使用RabbitMQ"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者最近决定将 Boardgame Lab 的引擎从 TypeScript 切换到 Rust。该应用程序本身是用 Svelte 编写的 单页Web应用。作者本次主要是对游戏应用的逻辑用 Rust/WASM 进行优化。更多经验总结请查看原文：https://nicolodavis.com/blog/typescript-to-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-10 00:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"将 TypeScript 项目向 Rust/WASM 迁移"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"emm...这应该算是招聘吧，Embark Studios 招聘的是 Open Source Engineer，别错过啦：https://www.embark-studios.com/jobs/910166-open-source-engineer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-10 00:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【招聘】在 Embark Studios 从事开源 Rust 项目开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PinePhone 是一款基于Linux的智能手机"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-08 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 PinePhone 上编译 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://fasterthanli.me/articles/getting-in-and-out-of-trouble-with-rust-futures"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://fasterthanli.me/articles/getting-in-and-out-of-trouble-with-rust-futures"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-08 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 嵌入式开发中的并发模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/mtkennerly/ludusavi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mtkennerly/ludusavi"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-08 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ludusavi：PC端游戏备份工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最开始thomastc觉得 Rust 把 await foo 的语法改成 foo.await 有点奇怪，但是和其他语言对比之后，他发现这是个很好的主意。这种写法会使调用链条显得更自然，并且不用考虑使用?https://www.reddit.com/user/thomastc/https://www.reddit.com/r/rust/comments/hnbz78/rust_is_the_only_language_that_gets_await_syntax/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/hnbz78/rust_is_the_only_language_that_gets_await_syntax/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-08 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"只有 Rust 把 await 语法用对了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rustup是Rust语言的工具链配置软件。本次版本更新主要提高软件的易用性、便捷性，增加工作效率。更新支持了更多的操作系统平台：现在，你可以在RISC-V RV64GC指令集的Linux系统，使用rustup安装工具链。本次更新还优化了用户交互部分，以针对nightly版本支持的工具给出不同的提示。更新支持使用更简单的安装方式，来安装各个Rust编译开发需要的模块。还有一些针对特定场合的更改，比如可以编译高达100兆字节的MIPS可执行程序；也对RAM占用有改进，以适用于内存空间可能受限的硬件。本次更新需要特别感谢35位Rustup贡献者的辛勤付出。Rust博客https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-07 15:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"工具链配置软件Rustup已发布新版本1.22.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这篇《迈向云的可信感测：Freta项目简介》中，微软给出了代码分析服务Freta的原型。建设Freta项目是为了达成“可信感测”——侦测、分析内存信息的同时，无法让攻击者发现侦测动作。要达到这一点，Freta需要输入Linux系统完整的内存快照，上传到云服务Freta分析，并通过API返回后续的分析结果。快照可以是Hyper-V、VMWare等虚拟机软件的内存保存格式；返回结果包含所有的系统对象，如所有正在运行的进程、已打开的文件、已经打开的网络套接字等等。为了建造这个分析器本身，内存安全是十分重要的特性，这一部分将通过Rust语言尝试达成。微软研究院希望通过这个项目，跳出恶意软件隐藏与发现的“军备竞赛”怪圈，探索由此能产生的工程设计，希望未来有一天能支持Windows系统，达成实时发现新的隐藏威胁的目的。微软研究院博客https://www.microsoft.com/en-us/research/blog/toward-trusted-sensing-for-the-cloud-introducing-project-freta/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-07 15:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软研究院发布文章，在可信感测平台中拥抱Rust技术"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果您需要支持新的指令集架构、新的操作系统，您应当创建一个新的编译目标。创建新目标并不是轻松的事情，思路可能很复杂。本次Rust嵌入式小组发布的文章，为我们梳理了支持新目标的步骤和技术途径。创建自己的编译目标，包含决定目标三元组、填写目标配置、使用目标配置等三个步骤。填写目标配置时，您应当提供链接器配置、编译器底层架构功能，以及CPU的特性。构建过程中，您可以选择只编译core、alloc库，或者包含自己定义的std库。本篇文章还给出部分技术解答，有助于排除创建过程中遇到常见的问题。嵌入式小组博客https://rust-embedded.github.io/embedonomicon/custom-target.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-07 15:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"嵌入式小组：创建你自己的Rust编译目标"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@killercup撰写了文章《Rust与短字符串》，为我们测试、比较了字符串较短时，Rust最高效处理字符串的方式。字符串常常涉及内存的分配，短字符串的分配和分配器的实现有较大关联。文章从只基于操作系统的简单封装开始，包装自己的全局分配器，以便探测内存使用的情况，包括峰值、操作数、尺寸等等，还给出一个简单的图形化呈现。随后，文章比较了smol_str、smartstring和标准库的实现，以比较各个情况下实现短字符串的好处和不足。文章补充了在长度一定的前提下，From转换、复制、Into转换所需的时间，给出了详细的折线图，以供比较参考。博客文章https://fasterthanli.me/articles/small-strings-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-07 15:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust与短字符串"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是社区提供的异步网络通信包装方式，已经发布了第一个预览版本0.1.0。代码风格和std::net模块比较相似，不同的是它包装操作系统的方法为异步函数。本次项目可以作为非常流行、成熟的async-std库的有机补充，作为异步语句块稳定后的常见状况，async自己需要的生态已经有多种成熟方案，虽然本项目只是一个简单的尝试，也作为完善生态的一种可行途径发布。项目以开源协议Apache、MIT双协议发布，有助于更多用户学习和使用。项目链接https://github.com/stjepang/async-net--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-07 15:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-net：异步网络通信底层封装"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust通过解析1000行JSON字符串到String，SmolStr和SmartString，看看他们的性能和内存特征。干货文章Read Morehttps://fasterthanli.me/articles/small-strings-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-06 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Small Strings in Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #wasmWasmer是一个独立的JIT WebAssembly运行时，旨在与Emscripten，Rust和Go完全兼容。Wasmer运行时可用作嵌入不同语言的库，可以在任何地方使用WebAssembly。Read Morehttps://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-06 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"wasmer到达50000下载量"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustRead Morehttps://www.youtube.com/watch?v=AH2P7Vc0N9s&feature=youtu.be"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-06 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用actix构建身份验证服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #framework作者对目前主流的四个rust web框架对比\nactix-web\nrocket\ntide\nwarp\nRead Morehttps://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-06 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"选择一个Rust web框架，2020年版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #graphics作者分享他使用Rust和GLSL进行pixel share创作的获奖项目，用了不到4k的代码。Read Morehttps://www.codeslow.com/2020/07/writing-winning-4k-intro-in-rust.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-06 21:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust和GLSL进行pixel shader创作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這裡主要使用 c2rust 來做轉換而非人工轉換在clang 9.0的新功能asm gotos加進來後，能翻譯更多的部份但太多的gcc專用語法還是讓很多程式無法翻譯成rust雖然增加了許多擴展進 c2rust 但還是有問題例如c2rust沒辨法翻譯C的巨集是一個很大的問題Read morehttps://immunant.com/blog/2020/06/kernel_modules/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-05 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"將linux kernel程式碼轉換成rust的筆記"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://github.com/mqnfred/dustr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-05 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"DUSTR: 從dart 呼叫Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Gleam是一種靜態程式語言，它可以編譯成Erlang，並直接與其他BEAM語言（例如Erlang，Elixir和LFE）相互操作。Read morehttps://github.com/gleam-lang/gleam"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-05 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gleam 0.10版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Android平台安全負責人Sudhi Herle在昨天的Android開發者每週視頻中說：隨著時間的流逝，我們將繼續對Rust進行投資，看看哪些系統組件最好用Rust編寫。 我們相信Rust將最終從根本上使平台對我們所有用戶安全。Read morehttps://www.youtube.com/watch?v=MNkFSCRUk6E&feature=youtu.be&t=727\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-05 23:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Google的Android將使用Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"so，可以用来搜索 StackExchange 网络内任何站点的命令行工具，其中就包括程序员熟知的 StackOverflow 站点。使用示例如下：Github 链接，https://github.com/samtay/so"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/samtay/so"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-04 19:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"StackExchange 站点的命令行搜索工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Canrun 是 Rust 开发的逻辑编程库，其受到 miniKanren 的启发。http://minikanren.org/示例：相关链接：\n介绍文章，https://esimmler.com/announcing-canrun/\nGithub，https://github.com/tgecho/canrun_rs\nCrates.io，https://crates.io/crates/canrun\nDocs.rs，https://docs.rs/crate/canrun\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-04 19:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Canrun，逻辑编程库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustyPipe，是个 Youtube 提取器，它是用 Rust 重写由 Java 开发的 NewPipeExtractor 项目。https://github.com/TeamNewPipe/NewPipeExtractorGithub 链接，https://github.com/deep-gaurav/rusty_pipe"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/deep-gaurav/rusty_pipe"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-04 19:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustyPipe，Youtube 提取器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Clishé 是鼓励你开发符合自己习惯的命令行的一个迷你框架，它使用了以下技术：\nanyhow，错误处理\nclap，构建cli\nrustyline/shellwords，生成shell\nGithub 链接，https://github.com/mqnfred/clishehttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mqnfred/clishe"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-04 19:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Clishé，迷你CLI框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"【来自 Rust 官博的博文】 Rust 项目是一个大型和多样化的项目，它的活动基本上是由团队来协调的。官方正在尝试对 Libs 团队和 Compiler 团队之间的标准库活动进行重组。在将来，Libs 团队将仅管理标准库的公共 API，而 Compiler 团队将只关心其实现。分离关注点的目的是为了更好地适合两个团队的利益，以更好地支持标准库的需求。更多详情请看原文：https://blog.rust-lang.org/inside-rust/2020/07/02/Ownership-Std-Implementation.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-03 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于 Rust 标准库的管理重组"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详情请看：https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-05-29-Roadmap-2020-2021/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-03 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 编译器团队 2020-2021 roadmap"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"相关 Rust-lang PR：https://github.com/rust-lang/rust/pull/73903reddit上参与讨论：https://www.reddit.com/r/rust/comments/hjk4vw/cargo_and_rustc_running_natively_on_an_iphone_11/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-03 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 iPhone 11 上原生运行 cargo 和 rustc"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"dua(->磁盘使用分析器)使用 Rust 实现，可以方便地了解给定目录的磁盘空间使用情况。项目地址：https://github.com/byron/dua-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-03 00:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dua-cli"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://sharpend.io/7-things-I-learned-from-porting-a-c-crypto-library-to-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://sharpend.io/7-things-I-learned-from-porting-a-c-crypto-library-to-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-02 02:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"把C密码学库移植为Rust语言版，我学到了这七件事"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/jonhoo/griddle"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/jonhoo/griddle"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-02 02:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"griddle: 一种 Hashmap 的变体"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"http://subhojit777.in/implementing-websockets-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://subhojit777.in/implementing-websockets-in-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-02 02:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 实现 WebSockets"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://docs.rs/diffy/0.1.0/diffy/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/diffy/0.1.0/diffy/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-07-02 02:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"diffy: 查找和处理文件之间差异的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustANSSI（法国国家网络安全局），信息系统安全国家机构是一项法国服务，创建于2009年7月7日，负责计算机安全。国家网络安全局向国防和安全事务秘书长报告，以协助总理履行其国防和国家安全职责。ANSSI取代了计算机安全中央局，该局于2001年7月31日取代了SCSSI。他们发布了一份新的Rust开发指南，包括了一些规范、建议和最佳实践，以指导程序员开发安全的Rust应用，充分利用这门语言的可能性。这份指南是法语写的，逃...Read Morehttps://www.ssi.gouv.fr/guide/regles-de-programmation-pour-le-developpement-dapplications-securisees-en-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 20:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ANSSI Rust开发指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #webRead Morehttps://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 20:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust和Rocket开发智能书签工具（web应用）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustemigui是一个使用Rust开发的Web GUI库，编译到webAsemmbly在浏览器中运行，它实现了简单的布局功能，基础的表单组件，滚动条区域，树型组件等。Repohttps://github.com/emilk/emigui/Read Morehttps://emilk.github.io/emigui/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 20:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Emigui - 用Rust实现的web GUI库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #cargo也可以在 .cargo/config 文件中设置[alias] 来改变别名，下面是一些默认别名：更多cargo相关配置和作用规则请点击下面链接。Read Morehttps://doc.rust-lang.org/cargo/reference/config.html?highlight=alias#configuration-format"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 20:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cargo 将 cargo b设置为 cargo build的别名"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rustconst_if_matchhttps://doc.rust-lang.org/beta/unstable-book/language-features/const-if-match.html\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 20:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"#![feature(const_if_match)]和 #![feature(const_loop)]稳定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"compress-tools 0.6.0 releasedhttps://crates.io/crates/compress-tools压缩工具compress-tools 0.6.0发布。compress-tools是基于libarchive的开发的，并提供部分原库的压缩功能。这个工具现在可以解压：\ncompressed files 压缩文件\narchive files 归档压缩文件\nsingle file from an archive 归档创建的单一文件\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/compress-tools"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 02:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"压缩工具compress-tools 0.6.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Announcing tiny 0.6.0 - console IRC client in Rusthttps://github.com/osa1/tinytiny 0.6.0 - Rust语言开发的IRC终端客户端管宣正式发布。安装很简单：https://github.com/osa1/tiny"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/osa1/tiny"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 02:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tiny 0.6.0 - Rust语言开发的IRC终端客户端管宣正式发布。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"An encrypted messenger backed by the Tezos blockchain, written entirely in Rust。https://github.com/mt-caret/mizu/一个基于Tezos区块链的加密通讯软件，完全由Rust开发。很初级，但是私密，去中心化，异步通讯，有趣，类似实现了PGP加密算法的电子邮件系统，尽可能避免通信内容被泄露。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mt-caret/mizu/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 02:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个基于Tezos区块链的加密通讯软件，完全由Rust开发。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Statistics on dynamic linkinghttps://drewdevault.com/dynlib.html你开发部署的程序比如一个普通的系统有经常用到动态链接库吗？统计表明很少。一般系统使用动态链接库的检测可以通过通过一个脚本来统计出来：动态链接库会很快吗？ 答案是不，还是静态链接库快很多，结果：更多的结果和统计大家亲自看原文吧。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://drewdevault.com/dynlib.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 02:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"动态链接库统计分析"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust + Actix + CosmosDB (MongoDB) tutorial API.https://dev.to/jbarszczewski/rust-actix-cosmosdb-mongodb-tutorial-api-17i5在做一个开发项目的时候需要一个简单的API的后台，就打算自己搞一个，Rust是最佳选择，同时也打算以此新学习一门全新的技术。现在微软的Azure CosmosDB也有免费的VM可以用，所以简直就是为学习并快速使用Rust语言做小型项目最完美的环境。完成后的项目代码放在github上：https://github.com/jbarszczewski/plant-server小编注：我很欣赏国外工程师这种学习精神，学习的时候同时就从代码开始原创一个idea并分享出来给社区。利人利己皆大欢喜。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/jbarszczewski/plant-server"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 02:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust + Actix + CosmosDB (MongoDB) API入门教程."},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-29 02:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近 Apple 宣布其电脑的 CPU 将从 X86 转向 ARM，内存模型是它们差异的关键之一。这篇博文介绍两者的差异，Rust 代码在一个 CPU 上是正确的，而在另一个上却会导致竞争条件。博文链接，https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-27 19:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 看 ARM 与 X86 内存模型的差异"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"模糊测试是发现错误，包括完全漏洞的一种高效方式。cargo-fuzz 是一个使模糊测试变得容易的 cargo 子命令。Github 链接，https://github.com/rust-fuzz/cargo-fuzzRust 模糊测试书，https://rust-fuzz.github.io/book/cargo-fuzz.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-fuzz.github.io/book/cargo-fuzz.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-27 19:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"模糊测试 cargo-fuzz"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ANSSI 已发布了 Rust 安全应用指南v1.0，指南的目的是将使用 Rust 语言实现程序的规则，建议和最佳实践放在一起，以便充分利用该语言提供的各种可能性，同时尽可能地将 Rust 开发的应用程序保留在安全区域。Rust 安全指南链接，https://www.ssi.gouv.fr/guide/regles-de-programmation-pour-le-developpement-dapplications-securisees-en-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.ssi.gouv.fr/guide/regles-de-programmation-pour-le-developpement-dapplications-securisees-en-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-27 19:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ANSSI 发布 Rust 安全应用指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不同的编程语言，有不同的方法表示异步。在 Rust 中，延迟计算称为 futures 而不是 promises，实际运行异步代码时需要首先选择一个运行时。文章链接，http://blog.logrocket.com/a-practical-guide-to-async-in-rust/https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://blog.logrocket.com/a-practical-guide-to-async-in-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-27 19:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 异步实用指南"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"幫助開發ios應用程式Read morehttps://github.com/Crabapple-iOS/crabapple"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"iOS tweaks庫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一個使用rust開發native程式的範例Read morehttps://github.com/rousan/electron-with-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"electron rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"直接進入google搜尋的第一個結果Read morehttps://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust跟Rocket建立智慧社交書籤"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用incremental build加速編譯Read morehttps://github.com/not-fl3/nanoserde-bench"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nanoserde 加速編譯"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Windows用的視窗位置管理工具Read morehttps://github.com/TimUntersberger/wwm\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 22:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Windows window manager"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"A/B Street 是一个 Rust 实现的交通模拟游戏，探索道路的微小变化如何影响骑车者，公交用户，行人和驾驶员。项目地址：https://github.com/dabreegster/abstreet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 12:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"A/B Street"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"对于初学 Rust 的朋友来说，所有权和借用是一个棘手的概念。 作者尝试为此提供简单的视觉类比。原文地址：https://webminal.org/rust_ownership_borrowing/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 12:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过 Cloud 文档类比可视化 Rust 的所有权和借用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Egui 是 Rust 编写的即时模式 GUI，编译为 Webassembly，可以在 WebGL 上运行，该项目目前为 Alpha 状态，项目地址：https://github.com/emilk/emigui/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 12:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Egui"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个比较实用的教程：https://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-26 12:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 和 Rocket 构建一个智能书签工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rhai 是一种用于 Rust 的嵌入式脚本语言，可以安全简单地为任何应用添加脚本语言。支持Windows, Linux 和 MacOS所有的CPU以及 WebAssembly。https://github.com/jonathandturner/rhai"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/jonathandturner/rhai"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rhai: 用于 Rust 的脚本语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/RustCrypto/hashes/pull/167"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/RustCrypto/hashes/pull/167"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCrypto 的 sha-1 and sha2 现在支持 x86 和 ARM 的硬件加速了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://www.garrensmith.com/blogs/fortuna-rs-couchdb-view-server"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.garrensmith.com/blogs/fortuna-rs-couchdb-view-server"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 构建一个更快的 CouchDB 查看服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"lemmy 使用rust开发的 reddit 的替代品https://github.com/LemmyNet/lemmy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/LemmyNet/lemmy"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lemmy 发布 0.7.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust with WebAssembly: Simple explanation with a nice examplehttps://blog.knoldus.com/rust-with-webassembly-simple-explanation-with-a-nice-example/Rust搞定WebAssembly: 一个好例子让你一文读懂。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.knoldus.com/rust-with-webassembly-simple-explanation-with-a-nice-example/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 02:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust搞定WebAssembly: 一个好例子让你一文读懂。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Tips for Faster Rust Compile Timeshttps://endler.dev/2020/rust-compile-times/Rust语言的运行效率，一直都是可以更C/C++比肩，但是如果谈到编译时间？哈哈，不一定了，是真慢，因为大量的编译检测和工作。所以需要看看这些技巧。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://endler.dev/2020/rust-compile-times/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 02:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust语言缩短编译时间技巧"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"PyO3 now supports stable Rust!https://github.com/PyO3/pyo3/issues/5#issuecomment-647094806https://github.com/PyO3/pyo3Rust语言的Python语言绑定现在支持稳定版本的Rust了。PyO3 supports Python 3.5 and up. The minimum required Rust version is 1.39.0."},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/PyO3/pyo3/issues/5#issuecomment-647094806"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 02:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"PyO3 now supports stable Rust!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rooster - Personal Web Server with Rusthttps://github.com/elasmojs/roosterRooster - Rust开发的个人静态网页服务器，是作者用来作实验性的个人网页服务器，目前只有～2M左右大小的单一可执行文件。下载Download：\nWindows 32 bit\nWindows 64 bit\n安装Installation:Just copy rooster executable to your web root folder and run!把可执行文件拷贝到网页根目录就可以运行了！ 看下面两种部署方式：\ndefault mode\n\nYour web root folder\n\nindex.html\nrooster.exe\n\n\n\n\nwith customized configuration\n\nYour web root folder\n\nindex.html\n\n\nrooster.exe\nrooster.cfg\n\n\n\nYour web root folder\n\nindex.html\nrooster.exe\n\n\n\nindex.html\nrooster.exe\n\nYour web root folder\n\nindex.html\n\n\nrooster.exe\nrooster.cfg\n\nindex.html\n鼓励原创精神！！！"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/elasmojs/rooster"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 02:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rooster - Rust开发的个人网页服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Zero To Production In Rust #2: Learn By Building An Email Newsletterhttps://www.lpalmieri.com/posts/2020-06-21-zero-to-production-2-learn-by-building-an-email-newsletter/从零开始学习Rust语言到精通用于生产系统级别水平，计划写成一本开放的，自由的每次一篇博客文章的形式出版的开放书。用户可以通过提供的链接的网站订阅更新和进展。这篇是系列第二章《学习创建邮件新闻》。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.lpalmieri.com/posts/2020-06-21-zero-to-production-2-learn-by-building-an-email-newsletter/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 02:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从零学习Rust语言到能用于生产系统应用 #2: 学习创建电邮新闻应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"qwy16"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2020-06-25 02:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},]
