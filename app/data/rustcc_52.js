export const propertiesForNewPages = [{ "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "明天开始陆续给大家发货，请注意查收邮件" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Rust周边」帽子和贴纸到齐了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustCoreTeam新加入的是Manishearth和Skade。Read Morehttps://internals.rust-lang.org/t/new-members-for-the-rust-core-team/9575" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust核心团队加入了两员大将" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#protobuf该库支持proto2和proto3Read Morehttps://github.com/danburkert/prost/releases/tag/v0.5.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Protocol Buffers库prost发布0.5版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#JTAG #book #embededJTAG介绍（摘自网络）：JTAG是最基本的通讯协议之一，大家可以理解为与RX TX或者USB的道理是一样的，只是一种通讯手段，但与RX TX以及USB有很重大的不同，那就是这个JTAG协议是最底层的，说的通俗一点，一般来说，手机里边，CPU是老大，对吧？但在JTAG面前，他就不是老大了，JTAG协议就是用来控制CPU的，在JTAG面前CPU变成喽啰了。一般的协议是求着CPU读写字库的程序，但JTAG可以读写CPU的程序，命令让CPU啥活都干。这份指南（rust-raspi3-OS-tutorials）是Rust嵌入式官方工作组出品的。该教程旨在旨在为Rust系统编程语言中的Raspberry Pi 3上的裸机编程提供简单的参考代码。重点是利用Rust的零开销抽象来编译可读，简洁和安全的精益代码（至少在裸机硬件上是安全的）。它只是针对不同的主题分出不同的教程，不是完整的OS教程，也许在不远的将来可以实现一个完整内核的教程（但不要相信我说的）。Read Morehttps://github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/master/0B_hw_debug_JTAG" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」Rust树莓派3指南新增JTAG章节" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#youtube #game #sdl本视频大概20分钟。我有个计划，希望招募（凭各人兴趣）一些社区的人，制作Rust相关的双语视频，把youtube的搬运到B站，我个人精力实在有限，如果感兴趣可以私聊我。Read Morehttps://www.youtube.com/watch?v=LMlX2tF_IsI&feature=youtu.be" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」Rust SDL游戏开发系列 #1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#clion #ideRead Morehttps://medium.com/@zaver.max/remote-development-and-debugging-of-rust-with-clion-39c38ced7cc1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用CLION远程开发和调试Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#web #nodejs一个简单的介绍，包括工具对比Read Morehttps://medium.com/@gruberbastian/intro-to-web-programming-in-rust-for-nodejs-developers-1a9c048c4de1" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为NodeJS开发者介绍Rust Web开发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Ruby #reap此工具可以用来优化Ruby应用的内存和调试内存泄漏。reaphttps://github.com/djudd/reap" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "reap: 用于解析Ruby Heap Dump（堆转储文件）的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#python该文作者平时使用Python来完成大数据处理，但是Python的性能让他堪忧。他考虑用C/CPP来改善代码，但是又考虑到C和Cpp很难掌握，即便难掌握，也会遇到很多内存管理和段错误的问题，所以他再三考虑之后，选择了Rust。作者写了个简单的代码示例，介绍了如何在Python中使用Rust编译出来的动态库。Read Morehttps://www.simernes.com/?p=514" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「简单示例」用Rust扩展Python" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#youtube #arrow演讲者是DataFusion的作者Read Morehttps://www.youtube.com/watch?v=iQcOW2fVX2c\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-11 15:43" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」介绍RMS和Apache Arrow" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#channel作者最近使用了crossbeam-channel 0.3，发现有个issues提出一个问题：channel的send是不是默认panic？，基本上每个.send后面都跟着.unwrap()。https://github.com/crossbeam-rs/crossbeam/issues/314该文作者认为这样的写法是有问题的，并且在文章中罗列了两点原因。同步状况下还没什么问题，但是一旦和future异步一起使用，就会有麻烦。Read Morehttp://www.randomhacks.net/2019/03/08/should-rust-channels-panic-on-send/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust的channel是否应该在没有接收者的时候Panic" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#double_ratchet #algorithm #imDouble Ratchet（双棘轮）算法是端到端即时通信加密算法之一，允许两个用户安全地进行通信：它为用户提供机密和真实的通道，包括前向保密和未来保密。目前Crait和Whatsapp这两款IM产品就使用该算法加密通讯。Read Morehttps://github.com/sebastianv89/double-ratchet" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Double Ratchet算法的Pure Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustToolTeam主要是独立出来一个核心（core）工具组作为领导，来解决子工具组的各种协调和规划问题。Read Morehttps://internals.rust-lang.org/t/tools-team-changes/9569" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust Tool Team的变化" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustLangTeam本贴记录了Rust语言工作组会议相关跟踪记录，感兴趣的可以关注，还会有讨论的油管视频放出。Read Morehttps://internals.rust-lang.org/t/lang-team-working-group-sync-meetings/9573" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust语言工作组会议跟踪贴" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#type_system该贴作者是做大数据的，使用Spark。Spark因为输入数据的大小变化和GC的原因，导致运行时内存会产生难以预测的波动。他接触了Rust之后产生了这个问题，Rust的类型系统能否减少或消除运行时内存的不确定性？Read Morehttps://www.reddit.com/r/rust/comments/ayu6un/could_rusts_type_system_guarantee_memory_space/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」Rust类型系统可以保证内存空间上限吗？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded目前针对ARM Cortex MCU，支持Linux和Windows。zmuhttps://github.com/jjkt/zmu" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」微控制器的系统级仿真器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#simd #T1HAT1HA是Fast Positive Hash的实现。Read Morehttps://www.reddit.com/r/rust/comments/ayla9m/rust_implementation_for_t1ha_fast_positive_hash/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现的T1HA可以达到40GiB/s" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ZhangHanDong" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm #lispwasphttps://github.com/wasplang/wasp\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-09 23:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasp: Rust实现的用于编写wasm的Lisp方言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#vedio该系列视频，每一集只有五分钟左右。作者是Pat Shaughnessy，《Ruby原理剖析》的原作者，现在在学习Rust。质量挺好的，大家可以看看，他的特色是图文并茂。Read Morehttps://www.youtube.com/channel/UCVgTakRms47ldJIb05JFkQw" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」五分钟Rust系列" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Rust2019RoadmapRead More: RoadMap RFChttps://github.com/rust-lang/rfcs/pull/2657" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 2019 Roadmap 即将发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#futures作者整理这个列表的目的是为了促进0.3的稳定，这些库还在用0.1，如果一直不用0.3，那么futures 0.3就很难更快地稳定。另外也方便社区的开发者为其做贡献。Read Morehttps://www.reddit.com/r/rust/comments/aygqrg/libraries_missing_for_futures_03/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "整理还未使用Futures 0.3的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#interact #cli可以通过命令行查看运行时程序状态，这个用来调试代码很方便了。\ninteract\nbook example\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "interact: 运行时自省框架" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#web从评论区的actix作者的回复中得知一个消息：actix-web下个版本将支持Rocket风格的路由注册机制。Read Morehttps://www.reddit.com/r/rust/comments/aybr4e/rocket_and_actix_web_benchmark/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "actix-web和rocket框架性能比较" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#benchmarkCriterion是第三方Rust基准测试库，还提供了额外的统计和图表功能。\nRead More\ncriterion.rs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Criterion对Rust项目进行基准测试" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded #bmp这两个库用于嵌入式环境处理图像相关。Read Morehttps://wapl.es/rust/2019/03/04/embedded-graphics-0.4.7-bmp-support.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」Embedded Graphics 0.4.7 和 TinyBMP 0.1.0发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #ecs本文作者花了24小时制作了一个小游戏，这篇文章阐述了他在实际应用ECS模式的一些经验，结合他的网球类游戏进行了讲解，值得一看。Read Morehttp://iolivia.me/posts/entity-component-system-explained/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ECS模式在网球游戏中的应用" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#private_field结论：构建setter/getter方法是最安全的Read Morehttps://blog.knoldus.com/safe-way-to-access-private-fields-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中安全访问私有字段的方法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#sgx\nRead More\nrust-sgx\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-08 23:33" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust可信计算开发平台介绍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "\n帽子还在制作中，店家应该周末会发货给我。\n镭射贴第一次做的不太满意，又让店家重新制作了。再多等两天。\n预计下周可以发货。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rusty棒球帽周边定制活动状态报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#thisweekinrust里面罗列一些可以参与的贡献，比如Rust和TiKV的issues，以及这周Rust的一些更新动态。想要给Rust做贡献，可以参考我这篇文章：如何给Rust做贡献，可以帮助你快速开始。https://zhuanlan.zhihu.com/p/53247517Read Morehttps://this-week-in-rust.org/blog/2019/03/05/this-week-in-rust-276/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "This Week in Rust 276期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#const_fn该文简单介绍了const fn的用法和注意事项。Read Morehttps://blog.knoldus.com/no-more-run-time-enjoy-compile-time-function-evaluation-using-const-fn-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "享受const fn带来的编译时函数执行" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ml #pytorch #ocaml\nRust bindings for PyTorch: tch-rs\nocaml-torch\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为PyTorch实现Rust绑定和OCaml绑定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#clitimeyhttps://github.com/ptrbrynt/timey" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "timey: 支持在命令行对时间戳和字符串互相转换的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#approveapi #tokioApproveapi服务可以通过电子邮件、短信、移动推送请求用户可以实时地对任何内容进行批准确认。该库基于tokio实现\napproveapi\napproveapi-rs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "可以操作approveapi的Rust库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#future0.3 #async基于futures 0.3来实现gen-streamhttps://github.com/vorot93/gen-stream" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gen-stream: 基于生成器的Stream实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Speakeasy #Rust #actixSpeakeasy编程是一门新语言，该组织建立它的目的是为了解决更通用的问题。只关注语法，语义，生态系统指导等，不包括解释器或编译器。Speakeasy旨在为每个开发人员提供更轻松，更高效的软件开发;经验丰富的退伍军人，好奇的用户，成人，儿童等。我们的范围包括来自其他语言和学科的课程和概念;我们将把目标放在一个简单，有序的开发者体验上。Torchbear为Speakeasy编程语言提供了一个简单但功能强大的通用解释器。它可以帮助用户进行Web自动化，嵌入式编程，数据分析，数值计算......其他能想到的。目前，以Lua语言为教学语言。没有编程背景的人可以在15分钟内学习Lua。（没搞懂这个项目，目测是给普罗大众学习编程和解决问题用的，感觉要上天。）torchbearhttps://github.com/foundpatterns/torchbear" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "torchbear: 为Speakeasy编程语言实现的编程环境" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#meetup东京在3月20日，要举办一场友好的Rust比赛+派对。该派对的主题是用tokio（会有一个准备好的tokio helper crate）来编写一款多人游戏，然后用此游戏来相互对抗。（这个活动有意思）\nRead More\nevent 详细\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "东京Rustaceans集会" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#raytracer在这篇文章中，作者将讨论如何将用C＃/C++代码库编写的光线跟踪器移植到Rust，然后利用Rust的一些特性来进行简单的优化。这篇文章主要是写给那些认为将C#/C++代码移植为Rust代码只需要简单的代码翻译的人。如果这么想的话，就会错过真正了解Rust的机会。Read Morehttps://medium.com/@cfsamson/from-48s-to-5s-optimizing-a-350-line-pathtracer-in-rust-191ab4a1a412" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从46s到5s  - 优化350行Rust代码实现的光线跟踪器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#WebGPUwgpu-rs是基于gfx-hal的原生WebGPU实现。\nRead More\nwgpu-rs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Gfx-rs组织宣布新的项目wgpu-rs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeddedWG摘要：\nJames Munns发布了一系列使用Rust开发家庭无线传感器节点网络的视频，专注于IoT主题\n工作组正在收集的带有视觉效果（图片或视频）的酷炫嵌入式Rust项目展示\n一些库的发布信息\nRead Morehttps://rust-embedded.github.io/blog/newsletter-16/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-07 14:28" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」嵌入式工作组报告 第16期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustConAsia2019Read Morehttps://ruby-china.org/topics/38200?from=timeline&isappinstalled=0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "通告： [北京][2019年4月20日] RustCon Asia 第一届 Rust 亚洲技术大会" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustRust是工业编程语言的一个重大进步，它重点是弥合了底层系统编程和高级应用程序编程之间的鸿沟。但目前Rust编程的缺点是缺乏一个用于证明Rust程序的有效工具，之前也有很多类似的工作但是不太理想。该论文展示了Oxide了形式化语义，重新使用类型系统构建了Rust所有权和借用这个核心机制，来推理Rust的行为，并且希望研究人员能将其作为Rust工作的基础。氧化：Rust的本质（Oxide: The Essence of Rust）https://arxiv.org/abs/1903.00982Arxiv平台Rust相关论文整理：\nRust在安全领域的应用： Angora: Efficient Fuzzing by Principled Search\nRust实现的Tsetlin Machine\nTsetlin Machine 对模式识别优化的论文地址\nRust加密API的可用性如何？\n使用Javascript安全地管理Rust数据的生命周期\n优化编译器的未来方向\nMesh：可避免灾难性内存碎片的内存分配器\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Oxide：无限接近Rust所有权和借用本质的形式化语义模型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#vimVim用户注意了。alehttps://github.com/w0rp/ale/pull/2332" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ALE现在通过RLS支持了Clippy" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#servo\nRead More\nGSoC\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Google编程之夏项目：改进WebDriver支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #ecs作者用Rust开发了一款个网球主题的模拟小游戏，耗费了大概24个小时，游戏虽然没完成，但是他拥有了一些经验想要分享给你。涉及ECS模式。Read Morehttp://iolivia.me/posts/24-hours-of-rust-game-dev/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust开发游戏24小时经验谈" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#graphql #warp #juniper #diesel #apirust_graphql_api_boilerplatehttps://github.com/mattdamon108/rust_graphql_api_boilerplate" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust + Warp + Juniper + Diesel编写Graphql API的模板项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#TransactionalStorageEnginepersy是一个Rust编写的简单事务存储引擎persyhttps://gitlab.com/tglman/persy\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-06 13:58" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "persy 0.4发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#WiresharkCloudflare公司开源的用于解析Wireshark过滤器语法，并将它们编译器为可执行的IR。该库用于该公司提供的防火墙服务规则解析，所以使用Wireshark的过滤器语法作为DSL。解析语法一般有三种方式：\n使用状态机、正则等按字符进行解析\n使用解析器组合器，比如nom或combine这种工具\n完全自动化的生成器，可以根据提供的语法自动生成一个解析器，比如pest\n但是该库并没有用nom或pest，而是选了第一种解析方式。并且在文章里给出了一些提升解析器性能的经验：\n他们认为Rust标准库提供的字符串API完全够用。\n使用IndexMap替换了HashMap来进一步提升了两倍性能。\n使用trait对象动态分发和闭包来避免实现JIT而带来的一些问题。动态分发的执行效率出乎他们的意料。\n选择使用Rust语言实现，对于支持WASM提供了巨大的方便。\n该库已经用于Cloudflare公司的生产项目。说明： Cloudflare是一家提供CDN、DNS、DDoS 防护和安全服务的公司。该公司曾经声称自己抵挡“在一秒钟内的流量接近于谷歌(Google)的全球搜索引擎在一个小时内的流量”的攻击。\nRead More\nwirefilter\nindexmap\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-05 21:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust构建类似于Wireshark过滤器那样的执行引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm本教程教你如何用Rust提供的wasm工具链开发React App。Read Morehttps://prestonrichey.com/blog/react-rust-wasm/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-05 21:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "集成React + Rust + WASM指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job新加坡TenX公司，成长型创业公司，产品是基于云的支付平台，并且支持数字货币。其他消息不详。Read Morehttps://functional.works-hub.com/jobs/software-engineer-in-singapore-singapore-c9d67?utm_source=reddit&utm_medium=job-tenx&utm_campaign=t.leland" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-05 21:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「招聘」「新加坡」使用Rust构建下一代支付系统" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#MerkleBIT #blockchain\nRead More\nmerkle_bit\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-05 21:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现一个Merkle（默克尔）树状数组" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ansible\nRead More\nansible-vault-rs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-05 21:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ansible-vault-rs: Ansible Vault解密库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#blockchain该文展示了如何使用bulletproofs进行零知识证明\n[Read More](https://medium.com/coinmonks/\nzero-knowledge-proofs-using-bulletproofs-4a8e2579fc82)\nbulletproofs\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-05 21:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Bulletproofs进行零知识证明" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lua #vmlusterhttps://github.com/kyren/luster" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "luster: Rust实现的lua虚拟机" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#crate今天这位叫 liuchong国内开发者，上了reddit的热贴，希望这位朋友看到以后删除你恶意上传的crate。Read Morehttps://www.reddit.com/r/rust/comments/awtj6z/what_do_you_think_about_claiming_crate_names/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "恶意占用crate名字这种行为必须抵制和唾弃" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#music #spotifySpotify是一个数码音乐服务平台\nSpotify\nncspot\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现的Spotify客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#template_engineramhorns是一个实验性类Moustache的模板引擎。该作者（Pairtytech的工程师）写了这篇文章，主要记录他为ramhorns中动态模板提升性能的方案。在Rust的世界里有很多模板引擎，可以分为静态模板和动态模板。\n静态模板引擎，在编译时渲染。比如Askama。\n动态模板引擎，需要在运行时进行渲染，比如Moustache，Handlebars和Zola（Rust实现的静态站点生成器）使用的Tera。\n对于静态站点生成器，必须使用动态模板。而动态模板和Askama的性能存在5~30倍左右的差距。这让作者比较困惑，他在阅读了Askama和其他动态模板引擎的源码之后，发现Askama可以直接使用Rust类型渲染模板，而动态模板则需要一个中间结构表示，比如这种：然后通过序列化和HashMap这类数据结构在运行时获取相应的字段和值去渲染模板。这虽然有效，但是这种中间结构付出了沉重的代价。并且对于已经存在内存中的数据结构是完全冗余的。作者罗列了可能出现的开销：\n如果要将字段名称和值转为字符串，则需要创建HashMap，这会双倍耗费堆内存。\n如果有一个Vec或者是一些其他要展现的东西，比如帖子列表。将不得不创建一个新的Vec和多个HashMap。\n每次对HashMap的插入和查找，都会有哈希处理带来的额外开销。\n而静态模板引擎完全没有上述的开销。ramhorns如何优化？使用宏来生成代码，并且使用比较字符串的hash值来代替直接比较字符串。使用了Fnv库。并且在模板预处理中使用相同的Hasher。ramhorns中没有使用serde，而是使用了Content trait。利用宏，为Post结构生成如下代码：这样就避免了在运行时使用HashMap。优化的结果如何？作者和其他的模板引擎做了性能测试，发现ramhorns不仅比其他动态引擎更快，而且还比静态引擎Askama更快（其实Askama也有很大改进空间，Wearte项目就是案例）。作者说，也许再过一段时间，Hugo就不会说自己是「世界上最快的」静态网站生成器了。\nRead More\nWearte\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ramhorns中的动态模板" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli #file_share状态：WIP。支持从命令行轻松安全地通过Firefox Send服务上传和下载文件。Firefox Send可以通过安全、私密且受加密的链接发送文件，链接到期后文件将从网上彻底抹除。\nffsend\nFirefox Send 服务\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ffsend: Firefox Send服务的命令行客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustsim报告里阐述了nphysics和nalgebra两个库进两个月以来的状态和改进。Read Morehttps://www.rustsim.org/blog/2019/03/01/this-month-in-rustsim/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rustsim第四期报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#deno #js #typescript什么是Deno？\n使用Rust实现\nJavaScript和Typescript运行时\n实现ES5模块\n可以简单地把Deno看作是Node.js的替代品。但是Deno旨在实现和浏览器相同的功能。你可以用Deno实现一个浏览器和服务器都可以使用的程序。Deno的前景可以，但是目前还属于早期阶段。Read Morehttps://43081j.com/2019/01/first-look-at-deno\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-04 14:09" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Deno一瞥：JavaScript/TypeScript运行时" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#node.js作者用Rust重写了Node.js实现的一个小接口，但是流量很大，每秒180个请求。之前Node.js版本技术栈：\nkoa，框架\npino，日志\nrequest，转发请求\nRust版本技术栈：\nactix-web, 框架\nserde-json, 序列化处理json\nslog-json，日志\nreqwest，转发请求\n作者使用的是reqwest::async异步请求。Rust版本部署之后，CPU使用率较Node.js版本下降了90%，内存使用量降下了一半。这些数据更有助于作者说服他的同事们使用Rust，分享出来也可以帮助大家来说服公司使用Rust。Reddit 讨论https://www.reddit.com/r/rust/comments/aw94xp/i_ported_a_small_api_from_nodejs_to_rust_and_was/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust重写Node.js实现的接口之后所带来的震惊" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async #awaitNiko发表了这篇博客，阐述了async/await当前的状态：\n建立了async/await实施小组。该小组属于编译器团队，但是专注于具体的实现。\n在async/await稳定之前，还需要确定一个重要的问题：「该稳定什么？」。\nNiko所考虑的是，为了什么目的而稳定。如果稳定的目的是「促进async/await被广泛使用」，那么首先应该解决的就是await语法。如果稳定的目的是「让早起的使用者们开始更多地使用它们」，则只要不存在向后兼容的问题就可以。这两个目的都可以，但是如果选择后者，则需要传达更多的细节，以防止「早期使用者们」遇到下面的问题时不会被拒之门外。当前的问题：\n实施问题。实施组现在发现一个严重阻碍进度的问题：「issues/54716」，以及一些影响开发者体验的问题。另外也没有大量的活跃贡献者来参与async/await的实现工作。\n语法问题。对于await语法的讨论结果，由withoutboats在整理中。为了稳定aysnc/await，其实也并不一定非要稳定await语法，也可以先稳定await!宏。这个方案有利于早期的使用者，但是对于更广泛的大众来说，似乎并不是那么令人满意。所以可以像try!宏那样，先稳定宏，然后再稳定具体的语法。（让子弹飞一会）\n解决难题。作为一个社区最常做的事情之一，就是找到一种方法来解决真正难以解决的问题。await语法问题正是一个契机，可以帮助优化社区的讨论流程和工具。\n总之， async/await即将到来：Niko已经迫不及待地想看看人们用它来构建什么了。\nRead More\nissues/54716\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Async/Await状态报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded有人在Reddit发帖询问此问题，他用的是Arduino，但是使用Cpp和Rust都非常痛苦。即便使用针对Arduino的Rust版本avr也不太稳定，所以他想问问什么硬件更适合入门者？回复中有人提到，使用基于ARM Cortex-M的硬件，比如STM-32 uC更好，Rust对该硬件体系支持的更好。可以配合discovery book一书学习。 评论中也有其他建议可以看看。\nReddit 讨论\ndiscovery book\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust讨论」用什么硬件可以更容易地开始用Rust进行嵌入式开发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ffi该文作者之前实现了battery库，该库用到了battery-ffi库，专门封装了一些FFI接口，给主库使用。他在这篇文章中写下了编写FFI的一些注意事项。可以看作是一个FFI最佳实践来学习。Read Morehttps://svartalf.info/posts/2019-03-01-exposing-ffi-from-the-rust-library/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为Rust库公开FFI接口" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#azure\nRead More\nAzure Pipelines \n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust项目如何使用Azure云的Pipelines服务" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tween #animationTween动画可以对对象进行缩小，放大，旋转，渐变，位移等操作，用于在游戏或应用中实现一些渐变类动画动作。最早是伴随Flash技术出现的。现在该技术已经用在了web前端和手机App中。该库中包含了两个示例，可以看看。tweek-rusthttps://github.com/wasm-network/tweek-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tweek-rust: Rust实现的Tween动画工具包" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#langattohttps://github.com/zesterer/atto" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Atto： Rust实现的一个简单的函数式语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#udp #game该库在UDP的基础上实现了TCP的一些功能。它被用于Amethyst游戏引擎中。laminarhttps://github.com/amethyst/laminar" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "laminar: 用于多人游戏的半可靠UDP协议实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mirMIRAI的目标是成为Rust的静态分析工具。MIRAIhttps://github.com/facebookexperimental/MIRAI\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-02 12:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "MIRAI: 来自Facebook实验室的Rust MIR抽象解释器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "欢迎大家来RustCon Asia面基" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust划重点：\nPin API稳定，向async/await迈进了一步\nconst fn改进\nRead Morehttps://blog.rust-lang.org/2019/02/28/Rust-1.33.0.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.33 Stable发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game该公司的这个决定和Rust语言本身并无关系。主要是因为该项目之前的主程kyrenn离职了。并不意味着Rust不能做游戏开发，Rust完全胜任该公司游戏的开发，估计他离职了公司没有找到合适的Rust主程，游戏也比较着急吧。但是不可否认的是Rust在游戏的生态现在还未成熟，kyrenn说，他自己仍然会用Rust开发游戏，但是他可能会是世界上最慢的游戏开发者，因为你需要做更多的底层的「脏活累活」。Read Morehttps://www.reddit.com/r/rust/comments/avwxq1/chucklefish_is_no_longer_using_rust_for_witchbrook/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "chucklefish不再使用Rust开发该公司新游戏Witchbrook" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mozilla该文以Quantum CSS为案例，探讨「用Rust重写」对真实世界的影响。概要： Rust虽然无法捕捉全部的安全漏洞，但是可以消除重大的安全漏洞，并且可以让开发人员专注于程序逻辑的正确性和健壮性。Read Morehttps://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Mozilla」用Rust重写浏览器组件的意义" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tar #cliRust实现。谨慎使用，它会删除原始的tar文档。tarohttps://gitlab.com/antonok/taro" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "taro: 就地tar文件提取器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmwasmer是一个服务端wasm解释器。最近发布了0.2.0版本，号称性能提升了100倍。Read Morehttps://medium.com/wasmer/running-webassembly-100x-faster-%EF%B8%8F-a8237e9a372d" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasmer : 性能提升100倍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm该系列文章主要探讨WebAssembly中的缺陷。Microwasm是与Wasm兼容的格式，可以被运行时有效地使用，并由LLVM等编译器生成。它目前在Lightbeam(将wasm生成机器码的实验工具)的Microwasm分支中实现。由以下三步生成：\nCompiler IR->Microwasm;\nWasm->Microwasm;\nMicrowasm->Native.\n该作者团队还在维护一个wasmtime库，它们引入了Microwasm是为了进一步提升性能，并且为Microwasm编写后端比wasm更加容易。因为Microwasm生成的汇编代码比Wasm直接生成的汇编代码更加简单。\nRead More\nlightbeam\nwasmtime\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」WebAssembly的麻烦 Part 4 ： Microwasm" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#javafxRead Morehttps://astonbitecode.github.io/blog/post/rust-javafx/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在JavaFX UI中使用Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#textlayoutXi Editor的作者raphlinus之前写的博文说，文本布局是Rust GUI生态缺失的部分。skribo就是他为了弥补这个缺失的生态而开的新坑，用于全面改进文本处理。\nRead More\nskribo\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "skribo：底层文本布局库启动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embededRead Morehttps://zhuanlan.zhihu.com/p/57918979\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-03-01 12:17" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」Cortex-M3 入门指南（三）：时钟总线与复位时钟控制器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#C这系列文章不错，教你用C从头开始构建一个sqlite数据库，感兴趣的可以换成Rust来实现。当然，去年也有人写Rust实现关系数据库的文章，可惜烂尾了。Read Morehttps://cstack.github.io/db_tutorial/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列文章」从零开始构建数据库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Amethyst #game\nRead More\nslides\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」Rust Auckland 2019-02-25：Amethyst游戏引擎介绍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#meson #build.rs该文作者在尝试将Rust和Meson集成。这篇文章记录了他在此过程中使用build.rs的一些经验。\nRead More\nmeson\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust build脚本与Meson" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#template\nramhorns\nMustache\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ramhorns: 实验性Mustache-like模板引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#GPIO该库基于GPIOZero库。为Raspberry Pi的GPIO设备提供简单接口。rust_gpiozerohttps://github.com/rahul-thakoor/rust_gpiozero" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」rust_gpiozero 发布 0.2版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Blockchain\nRead More\n代码\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列视频」如何用Rust构建属于自己的加密货币 Part 1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#kcov\nrust-kcov\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用rust-kcov为Rust测试代码生成HTML测试报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gnvim基于GTK，不需要electron。gnvimhttps://github.com/vhakulinen/gnvim" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gnvim: neovim的GUI" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#haskell #high_kind_type包括applicative、functor、monad以及type class等。higherhttps://github.com/bodil/higher" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "higher: Rust实现的类Haskell高阶类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Optimizemin-sized-rusthttps://github.com/johnthagen/min-sized-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「教程」min-sized-rust: 该库演示了如何最小化Rust二进制大小" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#error_handle如果是错误，则返回包含所有错误的Vec数组multi_tryhttps://github.com/JoshMcguigan/multi_try\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:30" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "multi_try: 方便组合多个Result并返回一个包含所有结果的元组" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "现在数量已齐，明天截止，最后一天报名团购，有想要的从速。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」Rusty棒球帽明天截止" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tokioRead Morehttps://summerofcode.withgoogle.com/organizations/5982287680765952/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tokio入选为Google代码之夏的开源项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lang支持Rust FFI\nforge\nplayground\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Forge:  Rust实现的一种轻量级的动态语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#npmnpm Registry实用Rust来解决CPU密集型任务产生的瓶颈问题。在该PDF中阐述了具体的问题以及解决方案。在寻找解决方案的过程中，NPM团队最先排除了C/CPP/Java。因为在他们的工程思想中，C/Cpp不再是一个合理的选择。主要是担心安全问题。由于需要部署jvm，也排除了Java。然后选择了Go或Rust。然后团队使用Go花了两天时间重写了授权服务，在这个过程中，该团队对Go的依赖管理失望了。因为NPM本身就是一个包管理工具，他们的工程文化不接受这样的Go。而他们对Rust的评价是这样的：惊人的依赖管理，以及促使你必须思考程序的正确性。用Rust重写服务，确实比用js和Go耗费时间长。当然这段时间也包含了他们的学习成本。并且Rust社区非常友好，有问题可以及时回复。Rust编写的第一个简单的服务程序用在生产中一年半，没有发出任何的警报。这导致他们团队很快就忘记了该程序的存在。。\nRead More\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust和npm白皮书" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "作者：月泉针对Rust的生命周期及所有权机制的一些知识写了一篇文章，希望能够帮助群里的各位书友理解这些知识。期待更多的学习分享。Read Morehttp://yuequan.org/rust_ownership_lifetime.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "来自Rust读者群的分享：Rust生命周期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#job旧金山的Brave软件公司，正在寻找暑期的Rust实习生。为了安全的考虑，该公司决定用Rust重写C/Cpp的广告模块。持续三个月。如果你恰好在旧金山留学，不妨试试。Read Morehttps://www.reddit.com/r/rust/comments/av50om/rustrelated_summer_internship_at_brave_software/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Brave软件公司寻找暑期Rust实习生" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli #sdsd是一个替代sed和awk的命令行工具，支持正则表达式语法sdhttps://github.com/chmln/sd" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sd 0.5发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#popOSSystem76公司(Redox背后的公司)的PopOS周报。这篇报告里说，System76公司的桌面项目都是用Rust实现的。那是不是意味着他们的PopOS中的桌面项目都是Rust实现的呢？popOS看上去还不错。\npopOS\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pop周报" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pijul #gitpijul是用Rust实现的类似于git的版本管理工具。\npijul\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pijul开发日志 Part 4" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cliRust实现的命令行小工具ffhttps://github.com/vishaltelangre/ff" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ff: 通过文件名查找文件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cli这篇文章帮你揭开Rust命令行参数的神秘面纱。Read Morehttps://blog.knoldus.com/working-with-command-line-arguments-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "如何使用命令行参数" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#playermod是一种音乐格式。\nRead More\n代码\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "用Rust实现一个mod播放器 Part 1" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmWAS（不是WASM）是一个简单的WASM内存分配器，旨在捕获WebAssembly编译器和应用程序中的内存问题。was-not-wasmhttps://github.com/jedisct1/was-not-wasm" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WAS: 用于捕获wasm编译器和应用程序内存问题的内存分配器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#concurrency该文分别展示了五种语言的安全并发模型：\nClojure： Alternative 并发模型\nRust： 所有权机制（ownership）\nPony：引用能力（Reference Capabilities），Pony 语言中每种变量的类型都包含了有关如何在 actor 之间分享数据的信息。有点像Rust的借用检查器。\nErlang：Actor模型\nDart：Actor模型，在Dart里叫Isolates（逻辑上隔离内存）。\nRead Morehttps://sites.google.com/a/athaydes.com/renato-athaydes/posts/fearlessconcurrencyhowclojurerustponyerlanganddartletyouachievethat\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-28 12:29" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Clojure，Rust，Pony，Erlang和Dart分别如何实现无畏并发" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust通过此命令升级Rust 1.33开启测试1.33的更新简要：\n整数类型在match中可以使用范围表达式穷尽了，比如u8类型，可以用0..=255来匹配，不再需要_ => unreachable!()了。\nif let和while let支持多模式匹配。\nconst functions中现在可以使用let绑定、赋值、表达式语句以及irrefutable的模式匹配\n支持unsafe const fn。\n可使用cfg_attr指派多个属性\n可以使用#[repr(packed)]指定特殊的对齐方式\nextern函数在恐慌时的行为默认是Abort，以前这里是未定义行为。\nLLVM支持的最低版本是6.0\n编译器新增了很多平台的编译target支持。\nRelease Notehttps://github.com/rust-lang/rust/blob/stable/RELEASES.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 1.33 预发布测试开启" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#battery支持Linux、Mac、Windows。通过该库提供的命令，可以在终端查看电池相关的信息。Read Morehttps://svartalf.info/posts/2019-02-25-introducing-battery-crate/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "battery: 用于收集笔记本电脑电池信息的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#STM可用于实现并发数据结构，其性能和无锁数据结构相差无几。Read Morehttps://github.com/mtak-/swym" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "swym： 实验性软件事务内存库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Mozilla希望协助Moziila将Rust带到Hololens平台。目前Firefox Reality浏览器即将登陆Hololens2。" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Mozilla正在寻找懂UWP的专业人士" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Visualize它是对cargo-graph库的分支，同样是基于graphviz库，可以可视化依赖项的关联。作者号称该库是对cargo-graph的改进。\ncargo-deps\ncargo-graph\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-deps: 可视化项目中的依赖库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded\nRead More\ninternet-of-streams\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」从零开始使用Rust构建嵌入式传感器节点平台" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#qcon来自去年QCon San Francisco 2018的视频。作者非常看好Rust。\nRead More\n文本\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」是时候用Rust重写操作系统了吗？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo主要是方便库作者在更新lib.rs或main.rs文件的文档注释之后，不用再重复地去修改Readme中的说明。cargo-sync-readmehttps://phaazon.net/blog/cargo-sync-readme" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-sync-readme: 可以根据Rust文档自动在README中生成Markdown小节" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#archery  #arc #rc因为Rust目前还未支持高级类型（比如直接将Rc和Arc用作类型参数），所以该库使用了「rust-higher-kinded-types-already」一文中介绍的方法(用trait模拟)，实现了对Arc和Rc的统一抽象。这样做的目的是为了在不需要跨线程处理数据的时候，可以节省Arc的开销。建议：该库基于unsafe实现，谨慎使用\nrust-higher-kinded-types-already\narchery\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "archery: 提供了对Rust中引用计数指针的进一步抽象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#confRead Morehttps://www.rustlab.it/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustLab： Rust意大利Conf大会启动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mesh三角网格在图形学和建模中广泛使用，用来模拟复杂物体的表面。tri-meshhttps://github.com/asny/tri-mesh" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tri-mesh: 三角网格（triangle mesh）数据结构库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#atsamd21有人提交了新的PR已经支持SAMD51 HAL\natsamd\nPR\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」atsamd21微控制器支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#mineCraftMcExhttps://github.com/McEx/McEx" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "McEx: Rust和Elixir共同实现的MineCraft服务器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#DyanmoDBDynamoDB是一个Amazon的云NoSQL数据库服务。dynomitehttps://github.com/softprops/dynomite\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-26 12:56" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dynomite: 用于和DynamoDB的相互转换类型" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #wasm该作者准备参加Roguelike游戏挑战赛，用Rust实现了一个可跨平台运行的游戏demo。本文是该demo的一个教程。\nRead More\n代码\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "编写桌面版和Web版Roguelike游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#VisualizingRust编译器可以生成flowgraph IR，然后通过graphviz这个软件就可以生成流程（FlowGraph）图。cargo inspect这个工具把graphviz调用命令集成进去了，新版本可以方便地生成流程图了。Read Morehttps://jonathansteyfkens.com/posts/visualizing-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用graphviz可视化Rust代码流程图" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gitRust实现的命令工具，只需要把git-req设置好环境变量，即可成为git的子命令。\ngit-req\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "git-req: 轻松查看GitLab和GitHub中的合并请求" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embededRead Morehttps://josh.robsonchase.com/embedded-bootstrapping/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」开发环境指引" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#psd #parser #wasmRust实现的PSD文件解析工具，还有个在线使用wasm的demo。\npsd\nlive demo\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "psd: PSD文件解析器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#vrHoloLens 2是微软混合现实眼镜的第二代。Rust为HoloLens 2提供了更安全的体验。Read Morehttps://www.windowscentral.com/firefox-reality-browser-hololens-2" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Firefox Reality浏览器即将登陆Microsoft's HoloLens 2" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ScientificComputing有博主宣布要写Rust和科学计算的系列文章，本文是该系列的首篇文章。该作者的日常工作是机器学习，他在多次使用Rust进行相关的实验之后发现，Rust语言在这个领域将大有可为，并让他感觉非常激动。作者反观了Python统治下的机器学习世界，其生态系统爆炸的原因是因为有很多基础库，比如NumPy，SciPy，Pandas等。大多数项目是构建在NumPy和SciPy之上。如果Rust也拥有这些核心的基础库会怎么样？抱着这样的想法，作者加入了维护ndarray库的队伍中。他贡献了一堆PR之后，诞生了一个独立的crate：ndarray-stats。这个系列的文章，将围绕ndarray来阐述。在这篇文章中，他着重讲解了Rust中的Vector数组，以及使用Vector来计算线性代数中的点积（scalar product）。并且他和Python做了相应的性能测试比较：Rust的Vector的性能是Python List的近1000倍。是Numpy库的近6、7倍快（有点欺负Python的感觉）。本文的目的只是通过简单的例子介绍一下Rust的所有权，下一篇将进入正式的科学计算内容。Read Morehttps://www.lpalmieri.com/posts/2019-02-23-scientific-computing-a-rust-adventure-part-0-vectors/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列博客」 Rust与科学计算 Part 0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#IDETabNine是使用Rust实现，基于机器学习的智能编程语言自动完成程序，用于各种编辑器和IDE。可惜不是开源软件，需要付费。这篇帖子里有人吹它，可以看看是否值得入手。\nRead More\n官网\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "TabNine is awesome" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustAudio该贴作者发贴号召Rust社区分散的那些音视频组织联合起来，在2019年搞点事！比如RustAudio GitHub组和RustVST小组等。\nRustAudio\nRustVST\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustAudio 2019 社区号召贴" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#image基于image库实现imagenehttps://github.com/AlmightyFloppyFish/imagene\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-25 22:34" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "imagene: 通用图像处理工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#video作者介绍：Jon，目前是MIT的一名Phd，带领小组团队实现了Noria项目（一个并发数据库）。他的导师戏称他：东半球Rust第一人（参加他的另一个演讲视频：Rust at speed — building a fast concurrent database）。他经常直播Rust视频，最早日报中介绍过的是他直播Rust异步的视频课程，长达4小时。今天这个视频长达5小时，是讲解如何用Rust实现用户态的TCP协议，遵循RFC793和RFC 1122。\nRead More\n源码：rust-tcp\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-24 12:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」实现TCP Part I" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#iot该文作者是一名专门从事嵌入式系统的安全顾问。他认为Rust肯定会在物联网、网络和嵌入式开发中占有一席之地，但没有人可以100%地完全杜绝漏洞，Rust也不行。因此，Rust安全代码工作组已经开始关注，如何利用Rust的内置解决方案来进一步提高关键代码的保护。比如，在生产环境中，如何知道有哪些安全漏洞需要更新？这也是Rust安全工作组在2019年要解决的问题，Rust要及时地向任何类型的生产部署提供安全更新。除了Rust团队之外，其他安全单位的工作人员也在思考此类问题，并且有一个安全研究项目（SECONDS），该文作者及其他很多安全公司的人参与了该项目。一共评估了非Rust语言实现的37000个开源组件，发现了96321个漏洞。平均每个组件2.5个漏洞。SECONDS项目的报告也可以作为一个现成的参考，可以丰富RustSec安全数据库。另外，Rust社区也提供了cargo-crev安全审计工具。Read Morehttps://medium.com/@flundstrom2/manage-security-vulnerabilities-in-embedded-iot-devices-with-rust-14aeabada68b" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-24 12:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust管理嵌入式物联网设备中的安全漏洞" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#aoc2018Read Morehttps://phaazon.net/blog/aoc-18-hindsight" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-24 12:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "对Advent of Code 2018挑战赛的总结" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm基于Web IDL实现，为Rust或C等其他语言提供语言无关的Dom功能。wasm-modulehttps://github.com/richardanaya/wasm-module\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-24 12:14" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "wasm-module: 方便操作dom的js库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "决定只定制棒球帽，不弄书签了。发货日期： 满10人就开团了，下单以后一周左右。\n材质：毛腈，Rust logo使用刺绣工艺\n大小： 头围 56~62，均码，可调节大小\n颜色三种： 黑、黄、橘 （参见图1~3，后两张是店家的实物效果图）\n一顶帽子配套两个镭射标贴： Rust吉祥物螃蟹和Rust logo各一个，可以贴到帽子上，或者你想贴的其他地方。\n价格构成：一共50元。\n帽子成本： 30 （10人以上的价格）\n镭射标签:  5元 （两个一共）\n邮费预付： 15（看地区，多退少补），或者邮费到付也可以。\n价格透明，此次定制活动的初衷是因为我自己喜欢，所以想找人平摊费用，我并没有收取中间差价，但也不能我自己亏本。意向购买者，给我发邮件 247026628「at」qq.com ，要求：\n详细的收件地址和电话\n数量和颜色\n图样：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「通告」Rusty 棒球帽团购活动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustTeamRust官方团队发出变更说明：\nNick Cameron（nrc）离开了Mozilla加入了PingCAP，但依然会共同领导Cargo团队。\nAaron Turon决定退出核心团队，以便专注于工程工作和语言设计团队。他依然留在Rust团队中。\nAshley Williams加入了Cloudflare并计划在那里开展Rust和WASM集成。她将留在核心团队。\nSteve Klabnik离开了Mozilla，但仍留在核心团队中。\nRead Morehttps://blog.rust-lang.org/2019/02/22/Core-team-changes.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Rust官方团队变更说明" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#nikoblogRust核心团队领导者Niko，在这篇文章里写下了2019以及未来三年Rust团队的努力方向：\nRust 2015是稳定，Rust 2018是生产，Rust 2021的目标是成熟。2019年将主要火力集中在很多未完成的特性上。比如特化、GAT、const泛型等。同时，也将继续改进Rust Reference，以及Unsafe代码指南等。\n让Niko更兴奋的事，还并非语言的改进。他更关注改变工作组的运作方式。每个工作组将围绕一个特定的目标，并且持续在每周会议上进行沟通交流。这些会议也会向社区开放记录。\n会独立开一个语言团队的git仓库，并以此为「基地」完成工作。\n成立活跃工作组：\n\ntrait工作组：专注于制定和实现特化、GAT、impl Trait等和trait相关的工作。\n语法工作组：专注于完成由RFC 1331描述的语法规范。Rust的语法不能由rustc的行为来定义，而是应该出台一个具体的规范。\n异步工作组：专注于async-await语法和future特性的启用。只关注语法层面，不关注生态。\nunsafe代码指南工作组：专注于Unsafe代码开发规则的制定，「允许做什么，不允许做什么」。\nFFI工作组：专注于确保Rust和C能够更加无缝地交互，提升开发体验。\n\n\n\ntrait工作组：专注于制定和实现特化、GAT、impl Trait等和trait相关的工作。\n语法工作组：专注于完成由RFC 1331描述的语法规范。Rust的语法不能由rustc的行为来定义，而是应该出台一个具体的规范。\n异步工作组：专注于async-await语法和future特性的启用。只关注语法层面，不关注生态。\nunsafe代码指南工作组：专注于Unsafe代码开发规则的制定，「允许做什么，不允许做什么」。\nFFI工作组：专注于确保Rust和C能够更加无缝地交互，提升开发体验。\n上面罗列的事情，只是一个新的起点，它意味着当前Rust团队正在专注的事情。这些事情完成之后，再专注于其他新的事情。新的事情将会列在「愿望单」上面，并公布出来，等到有时间或能力实现的时候，再逐个实现它们。Read Morehttp://smallcultfollowing.com/babysteps/blog/2019/02/22/rust-lang-team-working-groups/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方思考」Rust团队在2019年将要做什么" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#template不过，昨天Askama作者曝出yarte涉嫌抄袭Askama。但yarte的性能看上去更好一些。rust-template-engine-benchmarks-in-nightlyhttps://github.com/rust-iendo/template-benchmarks-rs#rust-template-engine-benchmarks-in-nightly-" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust 模板引擎性能比评" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#C该文作者用C和Rust分别实现了网络协议demo，并对它们做了比较：\nRust实现花了400行代码，依赖12个crate\nC版本911行代码和另外140行头部声明，依赖libuv和openssl\n本文作者是C工程师，他用C游刃有余，但是对于用Rust实现，他认为把太多时间都用在和编译器斗争上面了。他也体验到了Rust的一些好处，比如编译通过的代码更加可靠，而C代码则需要反复测试。但是它认为，C代码即便写错了，反复修改的反馈回路也会更短，因为Rust编译时间太长（也许是因为作者编译C习惯了，所以无法忍受Rust的编译速度）。他其实更喜欢C的简单性，所以他想，也许有Go对他来说就够用了。他认为Rust试图又做底层工作，又提供了更高级的抽象，然而他没有感受到这样做的好处是什么？（个人观点：文章描述还是客观，这篇文章是C工程师的视角，我认为可能他还是带着C语言思维和体验去看待Rust，比如，他已经习惯了在代码「编译以后再发现错误再修改」这种「常规」行为，面对Rust编译器的种种限制，反而会有些不耐烦，而没有意识到Rust编译器这样做的原因是什么。Reddit讨论贴里有很多评论者也和我持有相应的观点：即便你是一个C语言熟手，要用Rust，还需要适应一段时间Rust的概念。）\nRead More\nReddit 讨论\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "C和Rust实现网络协议的比较练习" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#dwm1000该库用于支持使用Decawave DW1001无线收发器芯片的无线通信。Read Morehttps://users.rust-lang.org/t/release-dwm1001-board-support-crate-version-0-1-0/25558" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」dwm1001 0.1.0发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gstreamerRead Morehttps://gstreamer.freedesktop.org/news/#2019-02-22T15:00:00Z" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Gstreamer Rust绑定库 0.13.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#DWARF一个解析DWARF debug格式的库gimlihttps://github.com/gimli-rs/gimli" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gimli 0.17.0 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#algorithm本篇文章是讲用Rust实现波函数坍缩（Wave Collapse Function）算法。该算法用于生成游戏地图，比如开放世界的无限地图，永远没有尽头。\nRead More\n配合食用：该算法原理中文白话讲解\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "波函数坍缩算法" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game源码库是Gravism，Reddit讨论贴里有演示动图。\nGravisim\nReddit讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用rust_sdl2编写的通用重力模拟器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#IoT #LTE该公司在基于新的Cortex-M33驱动的 nRF9160 LTE SiP器件上成功运行了Rust，即将推出全新的低功耗物联网链接设备。P.S : LTE是物联网窄带蜂窝物联网技术。Read Morehttps://www.reddit.com/r/rust/comments/atkxw4/rust_now_runs_on_the_new_cortexm33_based_nordic/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-23 14:18" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」42 Technology宣布：最新的LTE技术已经受到Rust之力加持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#xi_editorXi Editor的作者raphlinus写的博文，记录了他最近的一些工作进展：\n\nRust中的GUI：他最近的主要工作是将XiEditor中用的原生Rust GUI库druid迁移为跨平台。其中重点是2D图形抽象库piet，已经达到了最小可用阶段。piet库基于Cairo 2D图形引擎实现跨平台。\n\n\n文本布局。这是Rust GUI生态缺失的部分。Raphlinus开了个新坑：「low level text layout」\n\n\n在Mac上运行Druid，是大目标，目前只有druid-shell可以运行。\n\n\n考察了winit，决定自己实现跨平台的窗口创建库。Raph认为winit适合3D游戏，但不适合一般的GUI。不使用winit的另一个原因是VST，他需要更精细化的访问窗口创建过程。\n\n\nMarkDown解析库pulldown-cmark项目目前遇到了困难，Raph认为该代码库存在根本性的问题，所以他重启了一个分支（new_algo）。\n\n\nRead More\n\n\ndruid\n\n\npiet\n\n\nProject roadmap: low level text layout\n\n\npulldown-cmark\n\nRust中的GUI：他最近的主要工作是将XiEditor中用的原生Rust GUI库druid迁移为跨平台。其中重点是2D图形抽象库piet，已经达到了最小可用阶段。piet库基于Cairo 2D图形引擎实现跨平台。文本布局。这是Rust GUI生态缺失的部分。Raphlinus开了个新坑：「low level text layout」在Mac上运行Druid，是大目标，目前只有druid-shell可以运行。考察了winit，决定自己实现跨平台的窗口创建库。Raph认为winit适合3D游戏，但不适合一般的GUI。不使用winit的另一个原因是VST，他需要更精细化的访问窗口创建过程。MarkDown解析库pulldown-cmark项目目前遇到了困难，Raph认为该代码库存在根本性的问题，所以他重启了一个分支（new_algo）。Read Morehttps://raphlinus.github.io/personal/2019/02/20/more-small-updates.htmldruidhttps://github.com/xi-editor/druidpiethttps://github.com/linebender/pietProject roadmap: low level text layouthttps://docs.google.com/document/d/1aw41q_izail-p99mN8dHrJeh9tMQ-Pldi54W6m7MHU8/editpulldown-cmarkhttps://github.com/raphlinus/pulldown-cmark" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-22 12:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "xi-editor最新进展" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gtkRead Morehttps://gtk-rs.org/blog/2019/02/21/new-release.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-22 12:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Gtk-rs新版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rocket最近升级到了Rocket 0.4版本，可以参考学习。realworld-rust-rockethttps://github.com/TatriX/realworld-rust-rocket" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-22 12:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "realworld-rust-rocket: Rocket Demo项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargocargo-geiger，用于检测项目及其依赖中的Unsafe。最新版本可以支持扫描 #![forbid(unsafe_code)]cargo-geigerhttps://github.com/anderejd/cargo-geiger" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-22 12:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "cargo-geiger 0.6 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm\nRead More\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-22 12:23" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "WebAssembly 报告 11期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#askamaAskama，一个受Jinja（python模板引擎）启发的新的Rust模板渲染引擎，新版本性能提升了2倍。Read Morehttps://github.com/djc/askama/releases/tag/0.8.0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "askama 0.8发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#CryptographyMundane是一个加密库，新版本增加了RSA支持。mundanehttps://mundane.googlesource.com/mundane" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Mundane 0.3发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustconf这是官方举办的RustConf 2019，在4.22和23号举办。国内的朋友可以看看RustConAsia。\nRustConf:Read More\nRustConAsia\nRustConAsia: 早鸟票\nRustConAsia: 讲师议题报名\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustConf 2019 FCP也启动了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#weekly包含了本周TiKV的issues，看到有两个easy的，如果愿意可以选择趁手的提交PR。Read Morehttps://this-week-in-rust.org/blog/2019/02/19/this-week-in-rust-274/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust Weekly本周周报" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pbrtrs_pbrt是对《Physically Based Rendering,PBRT(光线跟踪：基于物理的渲染) 》这本书中代码的Rust实现。Read Morehttps://www.rs-pbrt.org/blog/2019-02-19-v0-5-1-release-notes/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rs-pbrt v0.5.1发布日志" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#FFIRead Morehttps://rushsteve1.us/wp/getting-started-with-rust-ffi/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust FFI简要指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeded_wg本期总结了Rust All Hands 2019讨论会上的要点，这些要点非常明确，和其他工作组相比，足够细化，比如具体稳定哪个API之类。Read Morehttps://rust-embedded.github.io/blog/newsletter-15/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "嵌入式工作组报告第15期" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#msdos有人准备让Rust支持MS-DOS。Read Morehttps://www.reddit.com/r/rust/comments/ask2v5/dos_the_final_frontier/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "DOS：最后的边疆" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#design_pattern该文章介绍了Rust常用的设计模式：Builder模式。Read Morehttps://oribenshir.github.io/afternoon_rusting/blog/building-rust" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust中的Builder模式" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm #jsRead Morehttps://developers.google.com/web/updates/2019/02/hotpath-with-wasm" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用WebAssembly替换App中JavaScript的Hot Path" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm这篇短文告诉你用Rust编写WebAssembly的优势，要点：Read Morehttps://opensource.com/article/19/2/why-use-rust-webassembly" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为什么要用Rust写WebAssembly？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cross_comile当你身边仅有一台Linux机器，如何编译到macOS呢？这篇文章告诉你怎么做。Read Morehttps://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "在Linux上为macOS交叉编译Rust程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pythonpyrs库的作者写的博文，介绍了如何使用MonkeyType辅助生成Rust代码，主要是解决转换过程中类型推断的问题。pyrs库是一个将Python代码转换为Rust代码的Python库。MonkeyType是一个Python库。该库可以在收集Python运行时类型并生成静态类型注释。\nRead More\n如何将Python代码转为Rust：Read More\nMonkeyType\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-21 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "将Python代码转换为Rust代码的类型推断问题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RustConAsia\nRead More\n早鸟票\n讲师议题报名\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「正式介绍」 首届 RustCon Asia" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeddedembedded-sdmmc-rshttps://github.com/thejpster/embedded-sdmmc-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」embedded-sdmmc-rs: 该库支持读取FAT格式的SD卡" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#template新库，采用handlebars风格的语法yartehttps://github.com/rust-iendo/yarte" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "yarte: 号称最快的模板引擎" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust该文作者学习Rust一年，这一年内给Rust提交了100个PR。他写下此文作为总结。其中大部分PR是给Clippy做贡献，接下来他也打算继续给Clippy做贡献。大家学习Rust是不是也可以定这样一个小目标呢？\nRead More\n100个PR列表\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "给Rust提交100个PR是什么感觉？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#learnPunchtop是该文作者用Rust和JS实现的一款使用Chromecast作为音频输出设备的音频游戏。大约有3700行Rust代码。适合新人去学习。文章中总结了他的学习心得。Read Morehttps://hyperbo.la/w/reflections-on-learning-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "通过实现Punchtop来学习Rust的思考" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ffi通过FFI，包装为一个Rust的crate。作者说是会支付费用（几百美刀）。Read Morehttps://www.reddit.com/r/rust/comments/asii9i/translate_api_functions_of_a_c_lib/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "付费小任务：将C库API接口翻译为Rust" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#videoGOTO Berlin 2017大会视频，站在现在这个时间点上来回望这个视频，Read Morehttps://www.reddit.com/r/rust/comments/asa1vr/why_is_rust_successful_with_florian_gilcher_49min/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」为什么说Rust是成功的" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#jobsHolochain，区块链公司。Read Morehttps://holo.host/careers/rust-developer/该公司也发布了Holochain开发者预览版Read Morehttps://medium.com/holochain/developer-preview-0-0-4-alpha-and-enabling-full-authority-over-data-for-holo-users-3cc8794855d4" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Holo正在招聘Rust工程师（100%远程工作）" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gRPC #DgraphDgraph 是一个可扩展的，分布式的，低延迟的图数据库。该客户端使用gRPC和服务端通信。依赖的库是grpcio。dgraph-rshttps://github.com/Swoorup/dgraph-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dgraph-rs: Rust实现的Dgraph客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#diesel值得一看。Read Morehttps://github.com/rust-lang/rfcs/issues/798#issuecomment-465324544" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Diesel核心开发者在一个旧的issues下澄清了社区对Diesel的一些误解" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ELK #Kibanacodealong提供了一组开源工具，帮助你搜集项目的数据来进一步了解团队状态和项目进展。基于Rust和ELK和Kibana实现。codealonghttps://github.com/codealong/codealong" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "codealong: 为项目提供可视化数据" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game纯开源项目，没有商业化，于2013年启动，现在寻找一些Rust开发者参与游戏开发。看上去好像「我的世界」类的沙盒多人多角色RPG游戏。\nRead More\nveloren/game\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-20 12:27" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "寻找有空闲时间的Rust开发者参与开源项目" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lifetime #ide本文作者探讨了为Rust编辑器或IDE实现生命周期可视化的一种方案，期待能有人接受他的想法，做出更优秀的Rust工具。去年有人实现了一个Atom编辑器插件，提供了生命周期可视化原型。但是随着NLL的引入，之前的那个工具应该不太适合使用了。所以作者设计了一种新的可视化方案。Read Morehttps://blog.adamant-lang.org/2019/rust-lifetime-visualization-ideas/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "生命周期可视化讨论" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#unix  #corss_compileMinix启发了Linus实现Linux的微内核。该文作者尝试将Rust标准库移植到Minix平台，以便Rust代码在Minix下运行。So there were two things I did that summer. Nothing. And read the 719 pages of 《Operating Systems: Design and Implementation》. ---  摘自Linus Torvalds自传《Just For Fun》\nRead More\nrust-minix\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为Minix平台交叉编译Rust代码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#generator #async这是无船同志对于Generator MVP设计的第二篇文章。在第一篇文章里提到，Generator如何返回除()之外的类型，所以在这篇文章中探讨了Generator与问号语法集成的问题和解决思路。\nRead More\nReddit 讨论\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Generators II: 关于「问号语法糖」的问题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#crates.ioGame Engine和Games作为crate类别都不太好。Game Engine是游戏行业特定事物，搜索出的工具也不都是游戏引擎。Games也比较有误导性，并不是建议将其命名为For Fun。如果crates.io的分类不满足你的需要，也可以效仿这个案例发个issues来增加或细化分类。Read Morehttps://github.com/rust-lang/crates.io/issues/1598" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "crates.io issues: 重命名Game Engine和Games" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#textalyzer #cli目前只限分析英文，如果你学习Rust不知道该做什么项目，不妨做一个支持中文的类似的工具?textalyzerhttps://github.com/ad-si/textalyzer" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "textalyzer： 可视化的命令行文本分析工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#anevicon #performance #test负载生成器是产生虚拟用户（实际压力），用于性能测试场景。当在一台电脑上无法模拟大量的虚拟用户的时候，就可以通过多个Load Generator来完成大规模的性能负载。aneviconhttps://github.com/Gymmasssorla/anevicon" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "anevicon: 强大的基于UDP的负载生成器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#filecoinFilecoin的复制证明（Proof of Replication）游戏，以鼓励参与者通过调试参数、完善代码等方式促进复制证明的优化。什么是复制证明？找了一篇介绍文：「IPFS:Filecoin和复制证明」。\nreplication-game\nIPFS:Filecoin和复制证明\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Filecoin的复制游戏：最快的复制算法对抗赛" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#user_agentuap-rshttps://github.com/davidarmstronglewis/uap-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "uap-rs: User Agent解析器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#knoldusKnoldus号称全世界最大的Scala和Spark服务提供商，今天官方博客上对Rust进行了宣传。看来它们也是打算或已经用了Rust。Read Morehttps://blog.knoldus.com/you-can-live-without-exceptions-if-you-are-using-rust/\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-19 13:47" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Knoldus Blog：如果你用Rust，你将不会产生异常" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustc求别问背景音乐是啥。Read Morehttps://vimeo.com/317852618" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「视频」可视化Rust编译器演进历史" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gameRead Morehttps://itch.io/c/449652/rustlang-games" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "itch.io上面使用Rust实现的游戏合集" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lyonLyon是一个基于GPU的2D图形渲染库。作者在本文回顾了2018年Lyon的进展。Read Morehttps://nical.github.io/posts/lyon-2018.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Lyon 发布0.13版本" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cpp #allocatorMesh目前用于C/C ++应用程序的压缩内存管理，它是malloc的替代品。论文中显示，未来计划支持Go和Rust。\nReddit 讨论\n论文\n代码\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Mesh：可避免灾难性内存碎片的内存分配器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game基于「ryanisaacg/quicksilver」实现，quicksilver是一个纯Rust实现的2D 游戏引擎 ，支持桌面和Web（wasm32-unknown-unknown）Read Morehttp://rickyhan.com/jekyll/update/2019/02/17/kingston-crabfight.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Kingston Crabfighting： 汇编指令猜谜游戏" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#soak #ood #game\nRead More\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "soak: 用于将数据从Array-of-Structs布局转为Struct-of-Arrays布局" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#tokio用于非线程安全情况下必须从单线程中访问对象的情况。tokio-lockhttps://github.com/indutny/tokio-lock\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-18 13:25" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "tokio-lock：从单独的tokio任务中访问对象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async #awaitNiko锁定了该issue，这意味着，await语法的讨论即将进入下一个阶段。在All Hands会议上，官方团队讨论了async/await，事情虽然变得更加清晰，但是还未对await语法达成共识。所以暂时锁定了该issue，然后内部会进行一些针对性讨论，随后在生成报告。所以在这个阶段，issue里进一步的讨论已经起不到什么作用了，所以在官方报告出来之后，再进行下一个阶段的讨论。Read Morehttps://github.com/rust-lang/rust/issues/57640#issuecomment-464152929" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-17 14:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」讨论await语法的issues已被锁定" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#GoReleaserGoReleaser是Go语言社区的一个分发工具，它可以轻松地分发Go二进制文件。该文作者通过Hack GoReleaser的构建过程来达到支持Rust的目的。Rust也有类似的工具，cargo-release/ cargo-deliver/ cargo-hublish，但作者说这些工具目前还不如GoReleaser完善。Read Morehttps://medium.com/@jondot/shipping-rust-binaries-with-goreleaser-d5aa42a46be0" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-17 14:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用GoReleaser分发Rust二进制文件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#syswall对于每个系统调用，程序会阻止子进程的执行，并询问用户是否应该允许系统调用。 因此，syswall可以充当进程和OS内核之间的安全屏障。状态：WIPsyswallhttps://github.com/polaris64/syswall" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-17 14:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Syswall: Rust实现的系统调用防火墙" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#game #amethystRust实现的游戏引擎Amethyst发布了一个简单的2019 Roadmap。Amethyst Roadmap 2019https://github.com/amethyst/amethyst/blob/master/docs/ROADMAP.md\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-17 14:11" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Amethyst Roadmap 2019 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustconfAsia首届RustConf Asia会议，将在北京时间 4月20~4月23号举办。其中两天为主题演讲，另外两天是workshop。现在已经可以购买早鸟票，也开放了演讲主题申请。\n大会官网\nCFP\n早鸟票\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-16 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "RustConf Asia 大会来了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#llvmXtensa 是第一个专为嵌入式单芯片系统而设计的微处理器，支持xtensa的LLVM出现，这意味着，以后ESP32系列物联网开发板也可以支持Rust了。Read Morehttps://esp32.com/viewtopic.php?t=9226&p=38466" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-16 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为LLVM添加Xtensa支持" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Algorithm对于给定的地理位置和时间点（UTC），该库可以计算日出/日落，极地日，极夜，或方位角和天顶角的时间点。基于chrono实现，spa-rshttps://github.com/frehberg/spa-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-16 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "spa: 计算太阳位置的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#filecoin #proofsFilecoin是一个去中心化存储网络，也叫做Filecoin的区块链，Filecoin进行了ICO，代币名称为FIL。Filecoin与IPFS是两个项目，IPFS是底层协议，并没有ICO。Filecoin最近几天刚宣布开源，也有其他几个项目是Rust实现。Filecoin是做在IPFS其上的激励层，通过token激励模式，在IPFS上构建了一个去中心化存储市场，共同点就是他们都是实现存储和检索的资源共享交换。rust-proofshttps://github.com/filecoin-project/rust-proofs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-16 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-proofs: filecoin协议证明库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#web3以太坊实现的JSON-RPC多传输客户端。web3.js的Rust实现。rust-web3https://github.com/tomusdrw/rust-web3" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-16 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-web3：以太坊web3.js的Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#shellscript该库提供了一个宏，允许在Rust函数中调用任何语言编写的shell脚本。shellfnhttps://github.com/synek317/shellfn\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-16 12:32" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "shellfn: 支持Rust内调用shell脚本的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#RubyRead Morehttps://www.reddit.com/r/rust/comments/aqonf8/moving_from_ruby_to_rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "从Ruby到Rust经验谈" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#thread_safeFearless Security系列文章一共三篇，是Mozilla工程师对于Security的探讨，本文是第二篇，探讨了线程的安全性，以及Rust如何保证线程安全。Read Morehttps://hacks.mozilla.org/2019/02/fearless-security-thread-safety/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「Fearless Security系列」Part 2: 线程安全" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#headless_chromePuppeteer库是Node实现的一个无头浏览器，通过该库可以自动化浏览器的大多数动作。rust-headless-chrome则是Rust实现的类似的库。rust-headless-chromehttps://github.com/atroche/rust-headless-chrome" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-headless-chrome: Puppeteer库的Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embeddedOxidize是一个专注于Rust嵌入式设备和微控制器的活动， OxidizeConf应该是首届嵌入式Rust大会吧。将于4.27在柏林举办。感兴趣可以关注。Read Morehttps://cfp.oxidizeconf.com/events/oxidize-2019" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」OxidizeConf 大会CFP启动" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#protobufprotobuf-converthttps://github.com/witnet/protobuf-convert" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "protobuf-convert：序列化Protobuf3的库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#blockchain国外一家创业公司的开源产品。nimiq/core-rshttps://github.com/nimiq/core-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "nimiq: 基于浏览器的区块链" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#inert建议：新库，谨慎使用，可供学习参考。inerthttps://github.com/nox/inert" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "inert: 在同步上下文中访问非同步的值" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gtk_rs以gtk-rs开发过程中的一些小功能为案例，讲解了如何在闭包中使用Rc和RefCell。Read Morehttp://sireliah.com/niusy/gtk_rust_mutable_object_in_closure/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "gtk-rs案例：在闭包中使用可变对象" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "一个小型2D图形库，用于在嵌入式图形LCD上绘制内容，如SSD1306 OLED显示屏。配合sh1106驱动使用。效果：\nembedded-graphics\nsh1106\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」embedded-graphics: 小型2D图形库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm并通过webpack和web-ext进行热加载。\nrustwasm-addon\nwebpack-webext-plugin\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-15 11:08" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust和Wasm写的firefox插件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm\n进一步探讨了wasm-pack 1.0 RoadMap\n深入探讨了wasm的模块化工具包的相关细节\n讨论如何在Cargo中添加某些通用的构建hook，可以将wasm-pack转换为针对wasm开发的hook实现\n讨论wasm支持多线程，以及如何将Rayon库应用于wasm。\nRead Morehttps://rustwasm.github.io/2019/02/13/this-week-in-rust-and-wasm-010.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust ALL-Hands大会WASM工作组会议纪要" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#debug这篇文章介绍了Rust 1.32引入的dbg!的用法。Read Morehttps://blog.knoldus.com/are-you-still-using-println-in-rust-for-debugging/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "你还在用println宏来调试Rust代码？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "这周的三个issues比较简单，成为TiKV贡献者的机会就在眼前：" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "为TiKV贡献的机会来了" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cpp（cpp用智能指针编写的程序，安全性就可以和Rust持平吗？很可能不行）作者在几个月前，运行了Rust和Cpp的一些数据结构的基准测试，发现Rust实现的RB tree明显慢于cpp。这个现象让作者感到奇怪，因为以他的经验，Rust和Cpp的性能不会产生这么明显的差距。所以，他就进行了进一步测试。结果发现：cpp的shared_ptr智能指针并不总是原子性的进行引用计数，这是cpp速度快的原因。这说明，shared_ptr在某些并发情况下，会发生数据竞争、悬空指针或内存泄漏等风险。Read Morehttp://snf.github.io/2019/02/13/shared-ptr-optimization/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "shared_ptr: （并不是总是）原子引用计数智能指针" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gitpatch库用于解析和处理git的patch文件，新版本支持Rust 2018.Read Morehttps://users.rust-lang.org/t/patch-0-5-released/25265?u=sunjay" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Patch 0.5 发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#zig该文作者之前用Rust实现一个支持aarch64 RPI3的微型裸机操作系统。后来又从Rust切换到了Zig语言。文章中阐述了他切换的理由：\n二进制大小。Zig生成5K，Rust生成的22k。对于RPI3主板来说，更小的二进制大小显然比较合适。除非Rust可以有其他编译魔法压缩二进制大小。\n编译时间。Zig的编译时间在0.465s左右。但是Rust的编译时间对作者来说就是难以忍受了。\n分配器和标准库。Zig更加易于使用。\n代码调试、学习曲线。Zig小而简单，学习更容易上手。也许对于该作者来说，Rust的学习曲线过于高。尤其是写嵌入式代码，Unsafe Rust让他头疼、混乱。\n（看来Rust在嵌入式领域，还有很多努力空间。）Read Morehttps://sjdh.us/2019/02/11/continuing-with-zig.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "ARM开发：从Rust迁移到Zig" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#swcswc是用Rust实现的一个js编译器，并且支持es2019、jsx和typescript。已经进入GitHub语言总趋势榜单。swchttps://github.com/swc-project/swc" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "swc 1.0之后，GitHub关注度增长比较快" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasmdodriohttps://github.com/fitzgen/dodrio\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-14 14:03" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "dodrio: Rust和WebAssembly实现的的实验性虚拟DOM库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Security针对昨天的那篇《微软：70％的安全漏洞都是内存安全问题》的文章，Diesel的作者Sean写了这篇文章。因为网上有很多言论，他们的观点是：不是因为编程语言的问题，而是因为写代码的人太菜，所以才出现这种安全问题。Sean并不同意这种观点。本文中，Sean结合具体的案例，来说明一个问题：Rust编译器捕获的错误，是有可能超出程序员经验之外的，没有程序员是全能的。期望更好的程序员，完全不是对人类的合理期望。我们需要像Rust这样带有安全防护的语言来防止错误。 难道开车上路，有更好的司机，就不需要安全带了吗？我们不应该对软件开发人员和编程语言放在一起评判。(Sean 的这个观点，我比较赞同)Read Morehttps://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-13 10:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "不，不是因为「程序员菜」" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ide为什么要有这个库？ 因为IDE现在功能不太完善，不能为宏代码提供正确的代码完成功能，影响开发。proc-caesarhttps://github.com/matklad/proc-caesar" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-13 10:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "proc-caesar: 破坏IDE的代码完成功能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#traitObject该文作者对trait对象做了一个比较系统的梳理。Read Morehttps://tratt.net/laurie/blog/entries/a_quick_look_at_trait_objects_in_rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-13 10:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "trait对象一瞥" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#all_hands_2019这是Ralfj参加Rust官方All Hands大会后的回顾，只挑了他自己感兴趣的点进行了记录。Ralfj感兴趣的点都是和Unsafe Rust的安全性相关。比如UCG（unsafe code guidelines）和Miri。我感兴趣的一个点是他提到：Miri已经开始运行了libcore和liballoc的单元测试。这有助于发现标准库中可能的未定义的行为。或者更确切地说，单元测试所涵盖的标准库的部分没有未定义的行为。Ralfj这几个月都是为这个目标努力。文章里也有详细会议讨论记录的链接。Read Morehttps://www.ralfj.de/blog/2019/02/12/all-hands-recap.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-13 10:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」All-Hands 2019回顾" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#keepass #hibpKeePass是一个免费的开源密码管理器，可以帮助您以安全的方式管理密码。您可以将所有密码放在一个数据库中，该数据库使用一个主密钥或密钥文件锁定。因此，您只需记住一个主密码或选择密钥文件即可解锁整个数据库。使用当前已知的最佳和最安全的加密算法（AES和Twofish）对数据库进行加密。Have I Been Pwned（HIBP），是一个数据泄密聚合网站，专门披露数据泄漏事件和帮助用户确认自己的密码是否泄露的账号安全网站。hibp-checkhttps://github.com/samueltardieu/hibp-check\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-13 10:00" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "hibp-check: 依据HIBP检查您的Keepass数据库是否泄密" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "《Rust编程之道》截止今天，修订了115条勘误，第一次近距离体验到集体智慧的强大。其中有一些重要的勘误，我把它们打上了「精选」Label，读者朋友们看书学习的时候，可以方便查看。也可以通过选择章节Label，来查看一些勘误。Closed 状态代表我已经修订了稿件。接下来，我会对这些勘误进行归档，整理一份电子版小册子，方便读者查阅。 ​​​​" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "通告一则" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#ffi5亿次调用耗费时间（毫秒）简要排名：Read Morehttps://github.com/dyu/ffi-overhead/blob/master/README.md" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "比较各种编程语言的FFI开销" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#k8s还属于实验状态。不过该作者是Kubernetes GitHub组织的成员。kubernetes-rshttps://github.com/anguslees/kubernetes-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现的Kubernetes API 客户端" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#m68k_llvmM68k 处理器是美国 Motorola 公司开发的高性能处理器， 具有高性价比、高集成度等特点，在工业自动化设备、控制设备、医疗仪器系统、安全系统等领域多有应用。现在为Freescale 公司所有。有人为M68K实现了一个LLVM后端，现在该作者想把Rust编译器移植到M68K-LLVM后端。\nRead More\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」将Rust编译器移植到M68K" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#semverSteve（对，就是刚从Mozilla离职的那位），他也是Semver组织的一员，他们现在准备制作新的语义化版本规范。为什么？语义化版本控制诞生于2009年的Ruby社区，随着Bundler的流行，也传播到了Node社区，npm也随之跟进。然后就是Rust的Cargo，都进行了支持。但是语义化版本也有很多缺点。所以他们想要改进。并且专门针对Cargo来进行尝试。拭目以待。\nRead More\nSemver Org\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "SemVer：语义化版本的下一步" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#async #generator无船同志新的博文，主要探讨了接下来要对Generator进行重新设计，目标是一个MVP（最小可行性产品，minimum viable product）。当前虽然在Nightly中可用，但还是比较简陋，所以现在开始对其进行精致的设计。大目标也是为了Rust异步可以早日稳定。\nRead More\nReddit 讨论贴\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「系列博文」Generator I：迈向MVP" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Security微软安全工程师Matt Miller上周在以色列举行的BlueHat安全会议上表示，在过去的12年中，大约70％的微软补丁是为了修复内存安全漏洞。Read Morehttps://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "微软：70％的安全漏洞都是内存安全问题" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#errorhandle为什么要干掉Unwrap？滥用unwrap()会导致生产环境中出现各种恐慌。该文作者通过一些代码示例来告诉你如何干掉Unwrap！Read Morehttps://dmerej.info/blog/post/killing-unwrap/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "干掉Unwrap！" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#android #apk #cli #decompiler\napk-decompiler\nRead More\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-12 14:01" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "apk-decompiler：Rust实现的apk反编译工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gfx #Vulkan基于gfx-hal实现的渲染引擎，API模仿Vulkan。特点是API的安全性更高。rendyhttps://github.com/omni-viral/rendy" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rendy:" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cryptoorion是一个用纯Rust编写的加密库，它尽可能最小化unsafe代码的使用。本次更新属于重大的版本改进，包括重新设计了接口，新增了很多加密算法支持，以及提升性能等。orionhttps://github.com/brycx/orion" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "orion 0.13发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#memory该文章的作者打算写一系列关于Rust中内存的文章，包括栈、堆、全局内存分配器、编译器优化等内容。但目前只有一份前言发布了，可以先关注下。看博客高大上的界面，估计作者能写完。Read Morehttps://speice.io/2019/02/understanding-allocations-in-rust.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust内存模型介绍" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#python\nRead More\npyrs\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Pyrs：将Python代码自动转换为Rust的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pythonRust实现，类似于pyenv的Python解释器管理工具，可以下载并编译指定的版本，并轻松切换它们。目前只支持MacOSX，后续支持Linux和Windows。\npycors\nReddit 讨论\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "pycors： Python解释器管理工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#layer4 #load_balancer\nconvey\nRead More\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "convey: Layer 4的负载均衡器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#emacs #ctags #etags为Cargo项目创建 ctags/etags，新版本支持Windows 10.rusty-tagshttps://github.com/dan-t/rusty-tags" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rusty-tags 发布3.4.0版" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#babel #swcswc是babel 和 closure compiler二合一的Rust实现。潜力不错，但感觉目前依旧缺乏文档。\nswc\nRead More\n\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-11 23:38" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "swc 发布1.0" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustguide #anssi法国ANSSI（国家信息系统安全局）开放的Rust指南，它并不是Rust教程，而是一份使用Rust进行安全应用程序开发的示例和建议。有时间我会把它翻译成中文。\nReddit 讨论贴\n官方网站报道\nrust-guide\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "rust-guide： 法国国家信息系统安全局开放了Rust安全开发指南" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#3Deuchttps://github.com/zesterer/euc" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "euc：一个3D渲染库" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gameRoguelikes是指程序生成的Rogue模式的RPG游戏，死亡是永久性的。2005年，roguelike社区建立了一年一度的活动，即7DRL挑战赛，开发者在七天内挑战创建这样一个roguelike。距离新的挑战赛开始还有18天。所以，有人用Rust实现了一个可以开发支持Web和Desktop的Roguelike游戏模板库quicksilver-roguelike，方便你使用Rust挑战。\nreddit 讨论贴\n7drl-challenge-2019\nquicksilver-roguelike\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用Rust挑战Roguelike游戏比赛" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#main作者为此还创建了一个独立的crate：exit\nRead More\nexit\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用main函数的问号语法糖自定义程序退出码" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#java这哥们最近在面试一个工作，但是公司要求他必须学习Rust。但他只会Java，所以来Reddit求助，到底是否应该学习Rust呢？Rust前景如何？Reddit的朋友给了他很多建议。感兴趣的可以看看。总的来说，大伙基本都认为Rust的光明未来。Reddit 讨论贴https://www.reddit.com/r/rust/comments/aospj8/switching_to_rust_from_javaspring/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」我是否应该放弃Java而转投Rust？" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#gtk_rs使用gtk-rs的人，在IRC或其他交流平台经常出现的一个问题就是：「如何从另一个线程修改UI的状态？」。由于GTK只允许主线程访问其UI状态，所以才出现这种问题。所以作者为gtk-rs实现了一个新的API：一个类似于Rust标准库的与GLib/GTK主线程集成的MPSC Channel API，方便开发者处理这个问题。该文是作者对这个过程的经验之谈。Read Morehttps://coaxion.net/blog/2019/02/mpsc-channel-api-for-painless-usage-of-threads-with-gtk-in-rust/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "使用MPSC Channel在GTK中轻松使用线程" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#asw_sns #push_notificationsns-push-notificationshttps://github.com/davidpdrsn/sns-push-notifications" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "sns-push-notifications：用于使用AWS SNS给iOS和Android推送通知" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#fit目前支持Garmin Edges 1000和520设备（Garmin出品的，用于骑行的GPS智能码表）。fit-rshttps://github.com/richardbrodie/fit-rs\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-10 14:26" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "fit-rs: 用于读取和解码运动设备生成的FIT文件" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#raytracersimple-raytracerhttps://github.com/ebobby/simple-raytracer" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "一个简单的光线跟踪算法Rust实现" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#wasm并且做了一个在线的demo。worley-noise是一个Rust实现Worley Noise算法的库。该算法也被称为Cell Noise，属于计算机图形学方面的算法。该算法用于生成符合一定规律的花纹，比如花豹、奶牛、长颈鹿身上的花纹，或者是河滩干裂、干涸的盐碱湖形成的图纹，等等。该算法也被用于仿真地理地形生成。\nworley-noise\nonline demo\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "有人尝试将worley-noise库转成了WASM" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rust有人在Reddit寻求关于Rust生产效率和故障率的相关数据，评论中有人贴出了一些数据，以及经验。值得看看。Reddit 讨论贴https://www.reddit.com/r/rust/comments/aohq6u/rust_velocity_and_defect_rates/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「讨论」寻找Rust的生产效率和故障率的相关数据" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embedded #wifi该库是对IEEE 802.15.4标准的部分实现，支持no_std。目前用于dw1000库，该库用于支持使用Decawave DW1000无线收发器芯片的无线通信。IEEE 802.15.4 42是低速率无线个域网（wireless personal area networks）的标准。 它被用作更高级协议的基础，如6LoWPAN，Zigbee或Thread。Read Morehttps://users.rust-lang.org/t/first-release-of-ieee802154-0-1-partial-implementation-of-the-ieee-802-15-4-standard/25094" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」ieee802154 0.1版本发布" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#fuchsia #zircon #magentaZircon是Google操作系统的内核，之前这个内核名字叫Magenta，现在改名为Zircon，是C/C++开发的。有了这个Rust API，意味着可以使用Rust来开发额外的系统代码。Read Morehttps://fuchsia-docs.firebaseapp.com/rust/auth_cache/index.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Fuchsia和Zircon的Rust接口" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#Pin\nReddit 讨论\nPlayground\n相对指针相关视频\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Rust实现相对指针(Relative Pointers)" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#pistonRead Morehttp://blog.piston.rs/2019/02/08/what-is-happening-7/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Piston项目过去8个月动态报告" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#editor #terminalAcceptedhttps://github.com/hatoo/Accepted" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Accepted: 一个终端文本编辑器" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#lang  #wip号称可以用于开发快速原型设计和高性能的应用，目前是WIP状态。astrohttps://github.com/astrolang/astro" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "astro: 又一个用Rust实现的新语言" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cliprocshttps://github.com/dalance/procs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "procs: 代替ps命令的工具" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#staticheaplesshttps://github.com/japaric/heapless" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "heapless: 提供了不需要动态分配的数据结构" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#cargo #crate一个有趣的crate.thankhttps://github.com/brown121407/thank\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "thank: 展示你项目中依赖的crate信息" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#rustAturon宣布退出Rust Core Team，意味着他将不再参与Rust工作组的管理工作，他更想作为一名Rust工程师做一些工程工作。他将继续留在Mozilla的Rust团队。接下来他的精力将分配在：\n完善编译器、GAT和特化。\n继续研究Tide框架。\nAturon的退位，同时也是Rust Core Team汲取新的血液的机会。Rust即将进入新的阶段，成熟与可持续性，有新人加入，意味着有新的思维，拭目以待。Read Morehttps://internals.rust-lang.org/t/aturon-retires-from-the-core-team-but-not-from-rust/9392/2" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「官方」Aturon宣布退出Rust Core Team" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#metricsmetered-rshttps://github.com/magnet/metered-rs" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "metered-rs: 帮助你测量生产项目的性能" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#auditing #security该文章提供了一份审计清单，在你在开始审核使用Rust编写的加密软件时，你可以通过检查以下几项内容来保证一定的安全性：\n查看clippy警告。\n构建并运行所有单元测试。\n查看Cargo.toml的依赖项。\n寻找unsafe代码块，并作出安全评估。\n寻找unwrap的使用风险。\n寻找潜在的整数溢出（Debug模式下会在运行时panic，但是release模式下会静默）。\n寻找是否存在不应该被公开的私有类型。\n查找任何递归函数，评估它们是否有栈溢出的风险。\n如果使用FFI，则需要查找调用的外部代码，如果相关，则需要将这些代码作为审计的子项目。\n确定可以便于进行模糊测试的API，并记下来。\n查找使用了哪些加密原语，哪些第三方库，并记下加密组件的任何新实现。\n查找任何涉及加密和安全的RNG内容。rand::thread_rng在大多数情况下应该没问题，但是当OS RNG初始化失败之后，将回归到弱RNG（弱随机数生成）。\n对于敏感值在使用后是否应该归0？在Rust里应该使用Drop trait来实现它，而不是显式地指定。\n此列表并不是详尽无遗的，所以在对Rust代码做安全审计的时候，最重要的是理解代码的逻辑。Read Morehttps://research.kudelskisecurity.com/2019/02/07/auditing-rust-crypto-the-first-hours/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「安全审计」审计Rust加密库的第一步" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#embedded_hal #VRBosch Sensortec是九轴运动传感器品牌，BNO055是产品型号，IMU是惯性量测单元。主要用于VR产业，防眩晕，采集运动数据之类。bno055https://github.com/eupn/bno055" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「嵌入式Rust」bno055： Bosch Sensortec BNO055 9轴传感器Fusion IMU驱动程序" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#learnrust该文章通过一个简单是示例，告诉你如何根据编译器的错误来学习并调试代码。Read Morehttps://dmerej.info/blog/post/letting-the-compiler-tell-you-what-to-do/" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "「入门向」让编译器告诉你该怎么做" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#librsvg作者在继续完成Librsvg用Rust完全重写的工作，最近作者碰到了一个与「librsvg允许在SVG中引用哪些文件」有关的问题，为了防止一些恶意的SVG安全攻击。文章不长，但也是一个实际项目的经验，值得看看。Read Morehttps://people.gnome.org/%7Efederico/blog/refactoring-allowed-urls-in-librsvg.html" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "Librsvg: 重构允许的URLs" }, "type": "text" }], "type": "title" } }, { "Author": { "rich_text": [{ "text": { "content": "ChaosBot" }, "type": "text" }], "type": "rich_text" }, "Intro": { "rich_text": [{ "text": { "content": "#javascript「天真烂漫（hassle-free）」意味着「使用简单，没有麻烦」。特点：\n可靠：从Node版本到软件包管理器，可确保项目中的每个人都使用相同的开发环境。\n通用：在每个shell和每个主要操作系统中享受相同的命令行体验。\n快速：Notion使用Rust实现，并作为静态可执行文件部署以获得最佳性能。\nnotionhttps://github.com/notion-cli/notion\nTelgram Channel\n阿里云语雀订阅\nStemmit\nRust.cc论坛\nGitHub\n" }, "type": "text" }], "type": "rich_text" }, "Link": { "rich_text": [{ "text": { "content": "" }, "type": "text" }], "type": "rich_text" }, "Time": { "rich_text": [{ "text": { "content": "2019-02-09 12:55" }, "type": "text" }], "type": "rich_text" }, "Title": { "title": [{ "text": { "content": "notion：一个“天真烂漫”的JavaScript工具链管理器" }, "type": "text" }], "type": "title" } },]
