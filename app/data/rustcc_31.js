export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此 crate 提供针对密码的 traits 和类型，使用这个 crate 的 crates 有：\nargon2\npbkdf2\nscrypt\n所以比如 PasswordHash::verify_password 这个函数可以使用多种密码算法的 hash，但是可以一次性验证，代码如下：https://github.com/RustCrypto/traits/tree/master/password-hash"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/RustCrypto/traits/tree/master/password-hash"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-10 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustCrypto 发布 password-hash crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rustls 是一个用 Rust 写的现代 TLS（安全传输协议） 库。目前已经被纳入了为 CURL 的一个 backendcurl 对以下这些 features 都有一些可替换的 backends ：https://daniel.haxx.se/blog/2021/02/09/curl-supports-rustls/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://daniel.haxx.se/blog/2021/02/09/curl-supports-rustls/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-10 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CURL 支持  RUSTLS"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://youtu.be/Lh262L63asA"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://youtu.be/Lh262L63asA"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-10 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【视频】1Password 开发者炉边谈话：介绍 Rust 宏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://crates.io/crates/shmem-ipc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/shmem-ipc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-10 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"shmem-ip : Linux 上非信任进程的高性能通信组件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最新的VSCode版本中有一个 PR，以防止提示弹出窗口过度滚动。 以前你将鼠标悬停在符号上来阅读相应文档，如果继续向下滚动至底部，则滚动将继续并将从文档窗口弹出。 现在，此问题已得到解决。🎉https://www.reddit.com/r/rust/comments/lgccv5/ysk_vscodes_most_recent_update_fixed_a_quirk_in/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/lgccv5/ysk_vscodes_most_recent_update_fixed_a_quirk_in/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-10 23:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"VSCode 修补了关于 Rust 工作流中的一个怪异的 bug"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前基金会董事有：AWS，Google, HUAWEI, Microsoft, Mozilla官网地址：https://foundation.rust-lang.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-09 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"官宣，Rust基金会正式成立！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"May 3, 2021 「快来探索是什么使Rust成为新的云原生开发的绝佳选择，并了解当今社区如何使用Rust。」活动地址：https://events.linuxfoundation.org/cloud-native-rust-day/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-09 22:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linux 基金会也开班讲 Rust 了？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"E834159672"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今日，Rust Core 团队宣布成立 Rust 基金会，创始成员包括微软、谷歌、华为、亚马逊、Mozilla 。据悉，作为一个非盈利组织，该基金会旨在推广 Rust 编程语言及其生态系统。作为 Rust 项目的发起者，Mozilla 现已将包括商标等在内的所有基础设施资产，转移到了新成立的 Rust 基金会。基金会临时执行董事、核心团队成员 Ashley Williams 表示：“对于 Rust 来说，今天着实是一个让人难以置信的激动时刻。我在大约 5 年前撰写了第一行代码，能看到该项目走到现在这么远，也确实让人感到不可思议”。新的 Rust 基金会创始成员承诺，将在未来两年时间里提供超过百万美元的预算，用以开发相关服务、计划和活动，以支撑 Rust 项目维护者们构建最佳的 Rust 案例，而这只是一个新的开始。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-09 10:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近Clubhouse因为Elon Musk突然大火，使用termchat可以在终端进行聊天。GitHubhttps://github.com/lemunozm/termchat"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 22:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"termchat：一个终端聊天软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ht 是 HTTPie的Rust克隆版本。以下是对比：HTTPiehttps://github.com/httpie/httpiehtGitHubhttps://github.com/ducaale/ht"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 22:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ht：HTTPie 的clone版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"exercism[.]io 是一个在线编程训练平台支持Rust语言。阅读原文https://exercism.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 22:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"exercism[.]io：一个在线编程训练的平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"fpgk8s是用Rust写的在Kubernetes上使用FPGA的一个方法https://github.com/kubernetes/kubernetesk8s-deviceplugin提供Kubernetes设备插件的API绑定。https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/GitHubhttps://github.com/hasheddan/fpgk8scrates[.]iohttps://crates.io/crates/k8s-deviceplugin"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 22:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fpgk8s：在k8s上使用FPGA的最简单方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"DST 是 Dynamic Sized Type 的缩写，意思是动态大小类型，表示在编译阶段无法确定大小的类型。crates[.]iohttps://crates.io/crates/dsthttps://rustcc.cn/blog_with_author?author_id=2b94dbc4-c79f-43c0-b3c2-f143596ea535"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 22:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dst：使用DST的数据结构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"喜欢使用 Emacs 的小伙伴如果想开发 Rust, 可以参考这篇文章进行详细的设置.原文链接https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 21:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Emacs 配置 Rust 开发环境"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"HighwayHasher 是一个 js 的 binding, 作者使用 Rust 实现了 google的 HighwayHash的, 提供了性能更好的 hash 方法.最终是以 js 的 npm 包的形式提供给 node/browser 等调用.下面是他的一些特征.\nIsomorphic: Run on node and in the browser with the same API\nFast: Generate hashes at over 700 MB/s when running in web assembly\nFaster: Generate hashes at over 8 GB/s when running on native hardware\nSelf-contained: Zero runtime dependencies\nAccessible: Prebuilt native modules means no build dependencies\nSmall: 10kB when minified and gzipped for browsers\nRun same test suite in node and browser environments\nMinimal dev dependencies\n原来链接https://nickb.dev/blog/leveraging-rust-to-bundle-node-native-modules-and-wasm-into-an-isomorphic-npm-package"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 21:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"HighwayHasher: HighwayHash的 Rust 高效实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文是作者将自己的所学的 Rust 知识整理到这里. 感兴趣的同学的可以看一下.原文链接https://www.greyblake.com/blog/2021-02-07-rust-knowledge-refinement/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 21:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 知识精炼"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该文是 使用 Rust 构造一个 OpenStreetMap 的 app的第一部分.原文链接https://blogg.bekk.no/building-an-openstreetmap-app-in-rust-part-i-2adf72c75229"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 21:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 构造一个 OpenStreetMap app: part I"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tantivy 是一个搜索引擎库, 类似 lucene, 但是用 rust 写的.目前  0.14 版本已发布.github地址https://github.com/tantivy-search/tantivy--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-08 21:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tantivy: 0.14 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"欢迎来到新一期的“This Month in Rust OSDev”。在这些帖子中，我们将定期概述Rust操作系统开发生态系统中的显著变化。这个系列是在GitHub上公开开发的。您可以随意打开pull请求，其中包含您希望在下一期中看到的内容。如果您在本页发现一些问题，请通过创建issue或使用我们在本页底部的评论表单来报告。文章链接，https://rust-osdev.com/this-month/2021-01/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-osdev.com/this-month/2021-01/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-06 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Month in Rust OSDev"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ruffle是用Rust编程语言编写的Adobe Flash Player仿真器。Ruffle使用WebAssembly同时针对桌面和web。Ruffle处于概念验证阶段，目前可以运行早期Flash动画和游戏。基本的ActionScript1.0/2.0支持已经到位并正在改进；ActionScript3.0支持即将推出。有关更多信息，请阅读项目路线图。Github 链接，https://github.com/ruffle-rs/ruffle"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ruffle-rs/ruffle"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-06 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ruffle"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"哈喽，Rustaceans！Trunk团队有一系列的项目更新要宣布，其中之一就是我们有了一个新的网站trunkrs.dev! 我们在一组两篇博文中写了关于这个新站点、新版本以及与Trunk相关的各种其他主题。看看他们，让我们知道你的想法。文章链接，https://www.reddit.com/r/rust/comments/ldmen5/trunk_v08_new_site_maintainers_release_blog_posts/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/ldmen5/trunk_v08_new_site_maintainers_release_blog_posts/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-06 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Trunk v0.8|新网站，维护人员，发布和博客文章"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"大家好。。。我是一名埃及开发人员，毕业于计算机科学，从2008年开始从事一些编程活动（C#，HTML，CSS，JS），从2012年开始从事技术支持工作。在COVID-19之后，我第二次学习Python（我在2013年学习了Python），然后学习了Rust。文章链接，https://www.reddit.com/r/rust/comments/ldhcnr/getting_started_to_a_professional_rust_careerhttps://www.reddit.com/r/rust/comments/ldhcnr/getting_started_to_a_professional_rust_career/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-06 22:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"开启职业rust生涯"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"News"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 语言团队2月3号第一次召开了规划会议，并总结了会议纪要。从今以后，语言团队计划每个月的第一个星期三举行这样的会议。举行规划会议的目的：\n\n检查我们正在进行的项目的状态\n\n\n计划本月剩余时间的design meeting\n\n检查我们正在进行的项目的状态计划本月剩余时间的design meeting本次会议的主要内容：\n\ncontinued progress on polish, new traits (继续改进优化新的trait)\n\n\nmaking plans to stabilize async functions in traits (制定稳定Trait中async函数的规划)\n\n\nworking on a vision document that lays out a multi-year vision for how async I/O should look/feel in Rust (编写一份愿景文档规划未来几年Rust 异步IO的愿景)\n\ncontinued progress on polish, new traits (继续改进优化新的trait)making plans to stabilize async functions in traits (制定稳定Trait中async函数的规划)working on a vision document that lays out a multi-year vision for how async I/O should look/feel in Rust (编写一份愿景文档规划未来几年Rust 异步IO的愿景)\nmin const generics 很快就要稳定了\n\n\ncontinued progress on the implementation, things are going well\n\n\nwe will likely add a capture! macro to use for migration; it would force the capture of a particular local variable (and not some subpath of it)\n\ncontinued progress on the implementation, things are going wellwe will likely add a capture! macro to use for migration; it would force the capture of a particular local variable (and not some subpath of it)链接：https://blog.rust-lang.org/inside-rust/2021/02/03/lang-team-feb-update.html会议纪要：https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-02-03-Planning-Meeting.md#project-updates-and-discussion"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-02-03-Planning-Meeting.md#project-updates-and-discussion"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust语言团队二月份第一次会议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果迁移之后，在no_std模式下也可以使用Error trait了。链接：https://github.com/rust-lang/rust/pull/77384#issuecomment-772835929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-lang/rust/pull/77384#issuecomment-772835929"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 错误处理工作组计划将Error trait迁移至 core 模块"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Article"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前段时间知乎上很火的迟先生的博客，写的不错，推荐一看。链接：https://www.skyzh.dev/posts/articles/2021-01-30-async-random-read-with-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.skyzh.dev/posts/articles/2021-01-30-async-random-read-with-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 Rust 中实现基于 io_uring 的异步随机读文件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者花费大量篇幅解读了如何改进WebRender中Texture atlas分配的问题。链接：https://nical.github.io/posts/etagere.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nical.github.io/posts/etagere.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Improving texture atlas allocation in WebRender"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Release"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"linux_once内部使用Linux的futex，不像标准库使用CondVar来实现Once。好处是极大地简化了实现代码，并且不需要unsafe。非Linux平台下，这个crate是依然采用标准库的Once。链接：https://crates.io/crates/linux_once"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/linux_once"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"linux_once - 一个linux平台的std::sync::Once替代crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Miscellaneous"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"《Black Hat Rust》是一本基于Rust编程语言深入研究攻击性、安全性的书。最终出版预计2021年7月，书篇预估320页。如果你是一名安全的从业者，应该会对此书非常感兴趣。链接：https://academy.kerkour.com/black-hat-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://academy.kerkour.com/black-hat-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"新书：《Black Hat Rust》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Twitter网友分享，他把自己的Electron写的应用迁移至Rust的Tauri，内存使用从300M降低至6M，二进制大小从195M降至7M！核心业务逻辑也是用Rust编写，通过Neon绑定到Nodejs。链接：https://twitter.com/victorhqc/status/1356990383792791555"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://twitter.com/victorhqc/status/1356990383792791555"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-05 20:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"从Electron迁移至Tauri"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"根据ZDNet报道，由Google资助并由Internet Security Research Group领导的Apache Web服务器将设置为接收新的基于Rust的mod_ssl模块（以将Apache HTTP Web服务器项目的关键组件从容易出错的C编程语言移植到一种更安全的替代品Rust中），该模块将基于 Rustls ; 开发了Rust开源库，以 替代基于C的OpenSSL项目。https://www.zdnet.com/article/a-rust-based-tls-library-outperformed-openssl-in-almost-every-category/阅读原文https://www.zdnet.com/article/google-funds-project-to-secure-apache-web-server-project-with-new-rust-component/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Google资助项目以使用新的Rust组件保护Apache Web服务器的安全"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"IntelliJ Rust是一个基于IntelliJ的IDE的开源Rust插件，支持IntelliJ平台最新的2020.3版本。最新版更新增添了一些新的功能：\n为函数和方法添加Change Signature重构（Refactor | Change Signature或Ctrl+ F6）（通过@Kobzol）\n介绍Share in Playground操作以在play.rust-lang.org上共享您的代码。您可以通过Tools | Rust | Share in Playground或通过上下文菜单调用它\n注释一个空函数的错误返回类型（通过@Kobzol）\n灰显禁用的cfg_attr 属性\n...etc阅读原文https://intellij-rust.github.io/2021/02/01/changelog-140.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IntelliJ Rust 插件今日更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Andrey @ozkriff Lesnikóv 在推特表示gfx-rs 有所更新：gfx-rs ecosystem releases v0.7https://twitter.com/ozkriff阅读原文https://gfx-rs.github.io/2021/02/02/release-0.7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gfx-rs：Rust中低层，跨平台图形和计算抽象库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Drogue IoT 是一个试图将可重用和高效的组件引入嵌入式Rust的团队，本文讲述了“如何在Rust中开始使用LoRa“。ps:  LoRa是一种低功率远程无线协议阅读原文https://blog.drogue.io/rust-and-lora/Repohttps://github.com/drogue-iot/drogue-device"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"好文推荐：《Rust和LoRa》"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"摘录：让我们快速准备WebAssembly的开发环境Rust通常cargo使用命令构建，但是WebAssembly有一个叫做wasm-pack的工具，它可以很方便地完成很多事情，所以让我们安装它。https://github.com/rustwasm/wasm-pack阅读原文https://zenn.dev/beijaflor/articles/da789ea779c005Repohttps://github.com/beijaflor/wasm-markdown-bench"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust和WebAssembly创建爆炸性的Markdown编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-analyzer是一个用于IDE的实验性Rust编译器前端。阅读原文https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/architecture.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer 内部体系结构文档更新！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"decimal-rs 在选择依赖项serde后，可实现序列化和反序列化（ serde::Serialize and serde::Deserialize ）。Cargo | Authorhttps://crates.io/crates/decimal-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"decimal-rs 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nOptic观察开发流量并了解您的API行为\nOptic通过将流量与当前规范相区别来检测API更改\nOptic为每个拉取请求添加准确的API更改日志\nRepohttps://github.com/opticdev/optic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Optic：使用实际流量来记录和测试您的API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Lanpeng"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"据几天前的消息微软正在组建一支Rust团队。现在，微软 Reactor 将在3月份将举办两次Rust课程，以下是课程预告。课前准备：不需要具有 Rust 经验，但是如果您有使用其他编程语言的经验会更佳。适合人群：该研讨会面向想要学习 Rust 的开发人员。不需要具有 Rust 经验，不过如果您有使用其他编程语言的经验会帮助你更快的学习 Rust 语言。参与本次分享，你将收获：如果您想更熟悉更多的 Rust 相关知识，包括：变量，数据类型，函数，集合类型和控制流，则应该参加此研讨会。主办方：微软 Reactor 上海 是微软为构建开发者社区而提供的一个社区空间以下图片版权由 微软 Reactor 所有阅读原文https://mp.weixin.qq.com/s/TS3R8MNF_t09HmYNHMMHTg"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-03 22:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软的Rust课程将在下月开课"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"前些日子 Rust 不适合 Web一文引起了热议，今天就有热心群友推荐了一个 Rust Web 模板项目：https://www.infoq.cn/article/MDqSIGbH5JO2kIVG7Pel\n使用 .env 文件管理环境变量\n使用 diesel 来处理数据库迁移\n配合 cargo-watch 监控开发时程序修改，方便调试\n支持 cargo-tarpaulin 做测试覆盖率\nrepo： https://github.com/svenstaro/rust-web-boilerplate"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-02 23:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Web 模板项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"特点：\n不可变 -- 运行在不可变（Immutable）数据库之上，自动保存数据变动历史\n低门槛 -- 自研（函数）计算平台，接口简单，在网页上完成代码部署\n可信赖 -- 自研区块链型数据库，自动保存所有数据变动历史，无需备份，无需担心删库或黑客侵扰，安全可追溯\nGitHub 组织：https://github.com/immux"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-02 23:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"IMMUX -- 新的可信存储引擎 + 函数市场"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 Learning to Fly: Let's create a simulation in Rust!的 第二部分.在这一系列的文章中,作者会从头到尾带领大家使用 Rust 实现一个基本 feed-forward 的神经网络.原文地址https://pwy.io/en/posts/learning-to-fly-pt2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-01 23:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 创建一个模拟器(part 2)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本来可以作为 pdf 解析库的入门教程, 对 解析 PDF 感兴趣的同学可以参考一下.原文链接https://adventures.michaelfbryan.com/posts/parsing-pdfs-in-rust/?utm_source=reddit&utm_medium=social&utm_campaign=parsing-pdf-documents"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-01 23:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 解析 PDF"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由于difference.rs 不再维护了, 所以作者决定亲自出手, 该库基本上可以满足diff的一切需求.ps: 作者也是 redis.rs 的作者.github 地址https://github.com/mitsuhiko/similar"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-01 23:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"similar: 一个现代化的 diff 库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"luojia 老师的开源项目, RustSBI v0.1.1 版本发布.RustSBI是RISC-V下引导启动软件的一个实现。它支持常见的硬件核心和模拟器，能够引导启动符合RISC-V SBI标准的操作系统，这包括Linux、rCore等。本次更新支持了RISC-V SBI最新的“HSM”和“SRST”标准模块，提高了RustSBI作为库的易用性，补充了部分文档，为两个参考实现修复了若干个小问题。项目RustSBI已经被收录入RISC-V SBI规范标准文档。SBI标准定义了RISC-V架构下，操作系统内核的引导启动方式，和它所调用的硬件二进制接口。随着本次更新，使用RustSBI的“terminus_bl”项目也走入稳定，它能在自研的terminus模拟器下引导启动Linux系统。github地址https://github.com/luojia65/rustsbi--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-02-01 23:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustSBI version v0.1.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"自从2015年5月15号 Rust 1.0 稳定版发布以来，Rust发展已经经历了五个半年头。头三个年头，Rust发展是缓慢的。直到Rust 2018 Edition发布开始，Rust便逐渐开始走入各大企业。我在2018年发起《Rust日报》之初，全球范围内应用Rust的动态还是寥寥无几，我还在发愁去哪里寻找Rust的动态。但是到了2020年底，《Rust日报》已经不再为Rust动态而发愁，几乎每天都会有新的项目和文章冒出来，覆盖了Rust应用领域的方方面面。足以见证Rust的发展趋势。然而，这些Rust动态，有90%都是出自国外社区。其实近两年，Rust在国内也陆陆续续有一些公司开始采用，国内也逐渐看了一些优秀的Rust学习原创文章。在去年 RustChinaConf2020大会上，我们也看到了很多国内公司和开源社区的个人项目。然而，目前国内各大应用Rust的公司和Rust社区都还缺乏很多原创的精品输出，或者，有很多精品输出，还被隐藏在互联网信息洪流中，未被我们发现。在当前的这种背景环境下，办一份电子杂志的想法就由此诞生了。所以，各位Rustacean们，《Rust中文精选》今天创刊了！ReadMore:https://rustcc.cn/article?id=557f15a5-2097-4bf8-a4c0-e6c95d9f71a3ReadMore:https://rustmagazine.github.io/rust_magazine_2021/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rustmagazine.github.io/rust_magazine_2021/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 21:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"《 Rust 中文精选》2021年第一期正式发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pure Rust 100% safe bzip2 decompressor !即将推出的功能\n并行解码支持\nbzip2编码支持\nno_std支持\nReadMore:https://crates.io/crates/bzip2-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/bzip2-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 21:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"纯Rust实现的bzip2解压缩器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这篇博客文章中，比较了每种语言下FFI的速度。从一开始，作者会说Rust会比Go快，因为Go具有运行时。而且，Golang的cgo会产生大量的调用开销。但问题是，速度会变慢多少？在生产中使用Golang是否可行？ReadMore:https://wutch.medium.com/rust-ffi-vs-golang-ffi-cgo-59e6ea3a83c6"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://wutch.medium.com/rust-ffi-vs-golang-ffi-cgo-59e6ea3a83c6"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 21:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust FFI vs golang FFI"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"postage-rs，一个Rust 异步通道库，可以更轻松地在 Rust 异步中开发基于消息的应用，提供了丰富的通道集，以及具有 combinators（组合子）的通道优化 Sink/Stream。更多详细信息，请参考作者的博客文章链接，https://implaustin.hashnode.dev/announcing-postage"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://implaustin.hashnode.dev/announcing-postage"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 10:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"postage，Rust 异步通道库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustPython 是用 Rust 实现的 Python 3（CPython >= 3.5.0） 解释器。 RustPython 可以将 Python 嵌入到 Rust 程序中；也可以将 RustPython 编译为 WebAssembly，这样开发者可以在浏览器中运行其 Python 代码。项目文档链接，https://rustpython.github.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rustpython.github.io/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 10:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustPython"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Tide，一个快速开发 Web 应用的 Rust Web 框架，是 http-rs 项目的一部分。示例代码：详情可参见 Tide v0.16 版本说明链接，https://github.com/http-rs/tide/releases/tag/v0.16.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/http-rs/tide/releases/tag/v0.16.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 10:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tide 发布v0.16"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本项目为 Rustc Dev Guide 的中文翻译。因为原项目还在变动期，为了翻译方便，所以此翻译项目组织结构就不和原项目保持一致了。https://github.com/rust-lang/rustc-dev-guide\n官方原文在线阅读\n中文版在线阅读\n中文版翻译仓库地址\n招募翻译志愿者要求：\n热爱 Rust，对 Rust 已经有一定了解\n想深入了解 Rust 编译器\n想为 Rust 编译器做贡献\n业余时间充足\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 10:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustc Dev Guide 中文翻译志愿者招募"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"即时通讯加密软件 Signal Messenger 正在招聘分布式系统 Rust 开发者，帮助其使得隐私通信更简单。具体的要求，参见招聘链接，https://jobs.lever.co/signal/7aa1ff1f-bd43-4359-82c7-8703d8b842d9https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://jobs.lever.co/signal/7aa1ff1f-bd43-4359-82c7-8703d8b842d9"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-31 10:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"招聘 - Signal 分布式系统 Rust 开发者"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Wesley Wiser在推特上宣布加入微软，并宣布它们正在组建Rust编译器团队。https://www.reddit.com/r/rust/comments/l7c8ro/microsoft_is_building_a_great_rust_team/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-29 20:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软正在组建一支强大的Rust团队。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要的收入是通过捐赠，包括Patreon网站，paypal,和接收到的一些比特币和以太坊。《Redox OS Summer of Code》是主要的支出预算，其他网站服务的支出，包括亚马逊的EC2，Jenkins服务器，Gitlab服务。开源项目的明细能做到公开、明细还是非常值得社区学习的。https://www.reddit.com/r/rust/comments/l71mwg/redox_os_finances_2020/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-29 20:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Redox OS 最近公布了2020年的财务明细。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://notamonadtutorial.com/ballista-a-distributed-compute-platform-made-with-rust-and-apache-arrow-5f4d1f51c698"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-29 20:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ballista，使用Rust和Apache Arrow构建的分布式计算平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/ceigel/rfid-audio"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-29 20:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"作者用Rust编写的stm32的MP3播放器："},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"评论区的答案很有帮助：https://rustcc.cn/article?id=5cdea462-8695-498f-b1bb-cd9d0adfabfc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-29 20:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何在内网使用已下载的crate-io包"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baoyachi"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"内容不限：https://github.com/RustMagazine/rust_magazine_2021"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-29 20:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"首份《Rust月刊杂志》非常欢迎大家投稿。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust的函数部分要学习的东西对于新手来说出奇的多，该文介绍了如何理解阅读rust的函数，同时分析了rust函数的每种功能以及对应的函数签名。这是该系列的第一部分。Read More：https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何阅读Rust函数，第1部分"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"datanymizer是由rust所写的数据库匿名器。Read More：https://evrone.com/datanymizer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://evrone.com/datanymizer"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"datanymizer - 具有灵活规则的强大数据库匿名器。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"就像名字的意思那样，偏执狂（paranoia）是一个可以查看你的代码是否被优化掉的库。通常使用的时候需要导入两个库：用例：Doc: https://docs.rs/paranoia/0.1.3/paranoia/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/paranoia/0.1.3/paranoia/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"paranoia - 查看你的代码是否被优化掉"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该播放器通过将RFID卡显示给Mfrc522读卡器来选择mp3播放列表。 带有用于暂停，前进，后退和上一步的按钮，以及与PWM引脚相连的用于状态编码的LED。Github: https://github.com/ceigel/rfid-audio"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ceigel/rfid-audio"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rfid-audio - 一个用 Rust 写的 stm32l431 的 mp3播放器。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该游戏是Teki是Tōhō系列的开源同人游戏，目前还是开发的早期阶段。在线玩: https://o2sh.github.io/teki/Github: https://github.com/o2sh/teki"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/o2sh/teki"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Teki - 使用SDL2和OpenGL由Rust编写的游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"375。Read More：https://this-week-in-rust.org/blog/2021/01/27/this-week-in-rust-375/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/01/27/this-week-in-rust-375/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 375"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该项目是Bomberman的Bevy复刻。由我和 reddit 上认识的网友@rgripper共同开发。虽然是复刻但是因为没找到原版游戏的相关美术资源，所以美术资源是另找的。游戏目前有不少已知的小bug（比如胜利状态下按ecs键会卡死，也是刚刚一不小心试出来的。），其实游戏主体在一周之前基本写好了，但是因为对游戏在wasm版本下的性能不满意，所以重构了一下，整个开发过程对我来说，重构是最难受的部分吧，对rapier的不熟悉是难受的主要原因。重构的时候对我来说有三个选择，第一个选择是使用rapier来重构，由物理引擎来处理碰撞这些，游戏的成品也确实是用的这种方法，但当时选择这个的原因是脑袋一热就选的，仅仅是为了自己熟悉rapier的api，最好的选择肯定不是这个，但考虑到后几个游戏一定会有用到rapier的情况，所以也还可以接收。第二个选择就是将地图作为bevy的资源进行管理，每次更新一些游戏内部的状态时，同时更新地图，这种方法我一点都不喜欢，在受性能问题困扰之前我的做法是查表，然后对查出来的结果进行处理，开发过程十分有趣，native版本的性能也十分强悍，可惜wasm卡顿实在无法接收，就选择了重构。这当中有些有趣的事以及某些做法的具体原因会在现在被鸽了之后才会补上的项目总结里详细说明。还有第三个选择是用bevy_tilemap来重构，有这个意愿是因为之前在bevy的discord群里看到该库的作者做的demo，很符合bomberman这种游戏。在线玩的版本在国内很有可能打不开，所以建议是clone该项目之后自己编译试玩，当然也还有一个原因是新修复的版本很有可能来不及编译部署到github上。关于现在被鸽了之后才会补上的项目总结，很希望得到各位对bevy感兴趣的同谋提出感兴趣的问题，我有能力解答的问题，会在之后的项目总结里回复大家。以及，最后，这个游戏只是我和@rgripper的起点，但也不仅仅是我们的起点，如果你也有兴趣一起用bevy写一个游戏项目，你也可以加入我们，这也将成为你的起点！在写了近6000行的bevy之后，我明显感受到基本没有用到生命期相关的rust新手很害怕的东西，甚至通过bevy的一些概念，让我加深了对并行等相关知识的认识和理解，也希望即使你只是rust新手，但不要害怕上手去写一些rust代码。我们决定的下一款游戏是西米岛的复刻，虽然肯定做不到像素级的复刻，但是会尽可能的去实现大部分功能，欢迎大家一起。Github:  https://github.com/rgripper/rusty-bomber在线玩: https://rgripper.github.io/rusty-bomber/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rgripper.github.io/rusty-bomber/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 21:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rusty-bomber - 小编私货"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://arzg.github.io/lang/20/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://arzg.github.io/lang/20/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 00:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust  写一个语言，第 20 章：测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"谷歌出品，Evcxr包含以下四个 crate:\nevcxr_jupyter : Jupyter 内核\nevcxr_repl :Rust 交互式解释器（REPL)\nevcxr: 上面两个 crate 的共用代码库，也可自己拿来玩\nevcxr_runtime: 与Evcxr交互的函数与 trait\nhttps://github.com/google/evcxr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/google/evcxr"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 00:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Evcxr ：Rust 交互式解释器（REPL）以及Jupyter内核"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://blog.logrocket.com/unsafe-rust-how-and-when-not-to-use-it/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.logrocket.com/unsafe-rust-how-and-when-not-to-use-it/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 00:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"博客：如何以及什么时候（或者不）使用 Unsafe Rust ？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"受到 Erlang 启发，可以用于任何可编译为 wasm 的语言https://github.com/lunatic-solutions/lunatic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lunatic-solutions/lunatic"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-28 00:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lunatic：快速、鲁棒性并且可扩展的服务端运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"编写“太素”桌面操作系统的文章更新到第十二期。本期文章在前文成果的基础上，开始编写一个简单的桌面系统结构。这包括桌面、窗口和其中的控件，以及文字标签的显示方式。太素OS是一个RISC-V架构、Rust编写的操作系统内核。作者在系列文章中介绍，“太素”的名字来源于道家五太之一，可以演化万物。这个项目实现了包含图形处理器在内的外部设备控制，实现了包含缓冲区的磁盘文件系统，基于进程和线程的任务系统，正在开发中的图形接口，当然也包括中断、内存页和块设备等操作系统常见的概念。作者@大树之下制作项目的初衷是出于对编程和创造的热情。操作系统博大精深，它知识丰富的内涵吸引了作者，大树之下一做就是一年。在系列文章中，作者肯定了RISC-V在架构设计上的先进性。作者编写系列文章的初衷，是节省内核写手们查找资料的时间和精力，出于开源和共享精神，将自己整理的知识以教程的形式馈赠给网友。https://www.zhihu.com/people/zos-13文章链接，项目链接https://zhuanlan.zhihu.com/p/346692185"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-26 20:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"太素桌面系统：基于RISC-V架构的Rust系统内核（十二）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Lemmy是一个类似于Reddit、Lobsters的网络论坛项目，上一个版本在去年十月发布。本次更新重新编写了Lemmy的数据库结构，发布了Lemmy API的v2版本。本次的更新公告也在Lemmy论坛里发布。更新公告给出了主要的新增内容。在Lemmy服务端方面，将数据库的表示层从裸的SQL迁移到了Diesel，提高了安全性和易用性。这次更新发布的v2版本程序接口，支持分级的数据表示对象。此外，更新优化了每次查询的延迟，并且增加了一些测试样例。在论坛维护方面，增加了封禁账户功能，修复了与发帖时标记地区有关的小错误，修复了楼层的子楼回复没有消息提示的问题。在文档和用户界面方面，也给出了若干项功能更新和优化。论坛软件Lemmy的生态也在蓬勃发展。一个适用于多平台的Lemmy客户端Lemmur发布了第一个版本，适用于iOS的客户端Lemmer也发布了一个新版本。本次更新公告感谢了这些生态软件的维护者和支持者。更新公告https://lemmy.ml/post/49280"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-26 20:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lemmy论坛项目发布v0.9.0版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Criterion是基于统计的Rust代码性能测试软件。现在，用户可使用Criterion测试异步函数的性能；这项更新需要启用软件的'async'特性。Criterion还针对async-std、tokio和futures等调度器和实现部分实现做了专门的支持，现在可以查看针对这些调度器的性能测试报告。更新的其它内容包括许多优化和修复。一些已经弃用的旧函数不再被支持，开发者需要留意是否使用了这些函数。另外，作者发布了实验性的内置测试器库Iai，也包含在本次的更新公告中。更新链接https://bheisler.github.io/post/criterion-rs-0-3-4/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-26 20:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Criterion项目发布v0.3.4版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Reddit网友u/PXaZ对Rust的枚举类型做了讨论和归纳。网友指出，Rust的枚举类型设计非常优秀，他在写Typescript的时候，总是怀念Rust风格的枚举类型。帖子链接https://www.reddit.com/r/rust/comments/l594zl/everywhere_i_go_i_miss_rusts_enums/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-26 20:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"无论我去哪儿，我总是想念Rust的枚举类型"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"知名的Rust语言静态分析器发布了此次更新公告。现在，rust-analyzer项目每六周都会给出指向性的路线清单，指导下一个阶段的主要工作。补全为类型扩展函数的trait时，现在会提示trait中的函数名。当一个trait整体被标注为弃用时，补全提示中也会标记它所有的函数为弃用。在宏中给出的测试函数，现在也拥有了方便的“运行”按钮，就和在宏外面写的一样。编写函数内代码时，函数的常量范型也会出现在补全清单中。其它的更新内容包括若干项小修复和内部性能提升。更新公告https://rust-analyzer.github.io/thisweek/2021/01/25/changelog-61.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-26 20:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer发布第六十一期更新公告"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 越来越被更多的人喜爱, 很多小伙伴也想入坑. 这篇教程可以帮助零基础的小伙伴了解 Rust.原文链接https://www.educative.io/blog/rust-tutorial-from-scratch"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-25 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 教程: 从头开始学 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Criterion.rs 是 rust 常用的性能测试库之一. 目前 v0.3.4版本已经发布.主要特性: 现在内置支持async的性能测试了.同时作者也发布了 Iai 0.1.0 版本:Iai 也是一个实验性质的性能测试工具, 主要解决云上的性能测试不准确的问题. 感兴趣的同学可以看一下.原文链接https://bheisler.github.io/post/criterion-rs-0-3-4/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-25 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Criterion.rs v0.3.4 和 Iai 0.1.0发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"RustyHermit 是一个 Rust 编写的 unikernel. Unikernels 是一种应用镜像,这种镜像直接将 kernel 作为一个 library, 所以这种镜像不需要安装操作系统.下面是他和 linux 的性能对比:原文链接https://rust-osdev.com/showcase/rusty-hermit/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-25 19:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"RustyHermit: Rust写的 unikernel"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"InfoQ 发起编程语言排行榜，每月一次，截止到当月最后一天，来给你喜欢的语言投一票吧。不过这个投票，好像很容易变成比谁人多！如果只是想看看 Rust 在国内的人气，还是可以的！https://www.infoq.cn/talk/D8KkBjOlm7RtKkPlwDLdRead Morehttps://www.infoq.cn/talk/D8KkBjOlm7RtKkPlwDLd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-24 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"给你喜欢的 Rust 语言投一票吧"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@hamatti 开发了一个CLI工具 nil-235 在 terminal 展示曲棍球比赛的结果。https://twitter.com/HamattiRepohttps://hamatti.github.io/nhl-235/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-24 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"nil-235 在terminal展示曲棍球比赛结果"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@therealjpster 在树莓派 Pico上成功运行了Rust，https://twitter.com/therealjpsterRead Morehttps://twitter.com/therealjpster/status/1353026324198285312"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-24 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Raspberry Pi Pico 上运行 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@AnirudhRowjee开发了一份vim配置，能够在Rust出现代码提示的时候展示提示代码的文档，这是vimrc的地址https://twitter.com/AnirudhRowjeeRepohttps://github.com/anirudhRowjee/dotfiles/blob/master/.vimrc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-24 21:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在vim上的Rust代码提示和文档展示"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"delay-timer是一个基于时间轮算法构建的库，它使管理定时任务或定期执行任意任务变得容易。轻松构建用于运行延迟/定期任务的容器。可以把它看作crontab，可以处理同步异步任务，支持动态添加/取消/删除，支持单个任务来配置并行的最大任务数，运行时等等。Github 链接，https://github.com/BinChengZhao/delay-timer文章链接，https://www.reddit.com/r/rust/comments/l3bley/delaytimer_v020_release_to_cratesio_cycle_task/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/l3bley/delaytimer_v020_release_to_cratesio_cycle_task/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-23 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"delay-timer v0.2.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"大家好，我刚刚发布了cargo cache 0.6.1！在6.0.0发布几个小时后，有一个bug被报告，所以我很快发布了一个point版本。变化包括：...文章链接，https://www.reddit.com/r/rust/comments/l32d8i/cargo_cache_06_released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/l32d8i/cargo_cache_06_released/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-23 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo cache 0.6 发布!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rumqttd是一个纯粹的rust mqtt代理，它关注性能、健壮性和嵌入到其他项目中的能力。这个版本主要关注稳定性。这是针对paho mqtt测试套件以及我们的内部测试套件进行测试的。试试看，让我知道你的想法：）Github 链接，https://github.com/bytebeamio/rumqtthttps://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/bytebeamio/rumqtt"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-23 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rumqttd v0.5发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"News"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"张汉东老师打算今年搞一份Rust完全开源的中文电子杂志：中文名《Rust 精选》，英文名《Rust Magazine》。在线阅读地址： https://rustmagazine.github.io/rust_magazine_2021/index.html预计每个月最后一天正式发刊，首发于 Rust 中文社区的各个渠道（论坛、公众号），当然也包括 Rust 视界TG频道。欢迎大家来投稿，每个月总得给自己一个静下心来总结和输出的机会吧。期待你的干货，直接给RustMagazine GitHub 仓库发 PR 就可以了。希望这份杂志能成为连接公司、社区、高校、学术界和个人的一个开源的纽带。链接：https://github.com/RustMagazine/rust_magazine_2021"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/RustMagazine/rust_magazine_2021"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"首份Rust月刊杂志邀请大家一起参与"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在windows crate中，你可以使用直接从描述API的元数据中生成的代码来调用过去、现在和未来的任何windows API。链接：https://kennykerr.ca/2021/01/21/rust-for-windows/Github: https://github.com/microsoft/windows-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/microsoft/windows-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【重磅】微软发布了 Rust for Windows crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Release"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"structsy是一个用来持久化struct/enum的可嵌入式数据库。好像应用场景不是很明确，大家可以看看。链接：http://structsy.rs/release03.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://structsy.rs/release03.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"structsy 0.3发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"EmbarStudio开发的自动生成项目release note的小工具。Github:https://github.com/EmbarkStudios/relnotes"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/EmbarkStudios/relnotes"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"relnotes"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Miscellaneous"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://this-week-in-rust.org/blog/2021/01/20/this-week-in-rust-374/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/01/20/this-week-in-rust-374/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-22 20:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 374"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我们采访了 1Password 的工程副总裁 Michael Fey。通过采访去了解他们为什么选择 Rust 开发他们的产品，Rust 对于以安全为中心的应用程序有哪些好处，以及如果你正在用 Rust 开发类似的东西，你应该研究哪些有用的库，有哪些可取的经验。原文：https://serokell.io/blog/rust-in-production-1password"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://serokell.io/blog/rust-in-production-1password"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-21 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的产品实践：1Password"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ballista 用 Rust 实现的概念验证分布式计算平台，使用 Apache Arrow 作为内存模型。它建立在一种体系结构之上，这种体系结构允许将其他编程语言作为一级公民进行支持，而不需要为序列化付出代价。仓库地址：https://github.com/ballista-compute/ballista"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ballista-compute/ballista"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-21 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ballista：分布式计算平台"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Structsy 发布新版本，主要带来了大量的新特性、修复和更新。这个版本使用了最新版本的Persy，并进行了所有相关的改进。根据这个版本对枚举的 Rust 结构支持，枚举可以单独保存，也可以嵌入到其他枚举或结构中，支持简单的变体，或者具有单个嵌入值的变体。对于查询部分，现在可以在过滤器中添加排序，具有简单变体的枚举也可以在过滤器中使用，还修复了在考虑事务更改时过滤数据时对嵌入式结构的过滤。除了查询中的过滤器之外，现在还可以使用简单的投影来只返回想要的字段。原文：http://structsy.rs/release_0_3.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://structsy.rs/release_0_3.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-21 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Structsy 0.3 版本更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"更换了团队leader，以及其他一些其他成员信息的变更https://blog.rust-lang.org/inside-rust/2021/01/19/changes-to-rustdoc-team.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2021/01/19/changes-to-rustdoc-team.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-20 23:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustdoc团队更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个简单的例子:https://github.com/mkhan45/slang-v2"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mkhan45/slang-v2"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-20 23:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用rust写的脚本语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/seanmonstar/warp"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/seanmonstar/warp"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-20 23:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"web 服务器 Warp v0.3.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"以及目前rust GUI 库的现阶段状况https://dev.to/davidedelpapa/rust-gui-introduction-a-k-a-the-state-of-rust-gui-libraries-as-of-january-2021-40gl#comments"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dev.to/davidedelpapa/rust-gui-introduction-a-k-a-the-state-of-rust-gui-libraries-as-of-january-2021-40gl#comments"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-20 23:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust GUI 编程介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章作者是一位物理学研究生，他往常都在Matlab和Python上做科学计算。作者使用Rust重写了生物膜虚拟程序。为此，作者推出了bacon-sci库。博客地址https://aftix.xyz/home/bacon/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-19 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust的科学计算"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Reddit网友给出了自己的讨论。推文地址https://www.reddit.com/r/rust/comments/l0bcmz/whats_the_best_way_to_run_a_private_cargo_registry/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-19 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"创建私有cargo仓库的最佳方法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"推文地址https://www.reddit.com/r/rust/comments/kzcc88/a_single_issue_with_rust_that_kills_me_every_time/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-19 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust有个小问题，每次做科学计算都会遇到"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@hUangjj 12月27号在周末的时候尝试着给 env_logger 添加了 wasm 的支持，欢迎大家提点建议Pull Request链接https://github.com/env-logger-rs/env_logger/pull/148"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-19 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"给env_logger 追加 wasm 支持"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洛佳"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"数据库内核研发 @中国移动云能力中心 ，是PingCAP 的合作伙伴，中移（苏州）软件技术有限公司。职位信息概览职位名称：数据库内核研发职位类型：社招薪资范围：35k 起工作地点：苏州经验要求：硕士及以上，1~3 年相关工作经验简历请投递至 talents@tidb.io。求职邮件模板请参考 求职邮件模板职位详情https://pingcap.com/community-cn/careers/chinamobile/engineer/来自 日报小组 hUangjj"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-19 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"中国移动云Rust语言新硬件分布式数据库社招"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该 PR 将会使如下的 API 稳定:\nslice::split_inclusive\nslice::split_inclusive_mut\nstr::split_inclusive\n目前该 PR 已经合并到 rust 主分支, 并且将在 1.51 中发布.github pull requesthttps://github.com/rust-lang/rust/pull/77858"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-18 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"split_inclusive 特性已经稳定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"LibHunt 根据 reddit 上大家提及到库的热度来排序出一些热门的 rust 库.对于调研阶段的同学来说,是一个很好的工具.libhunt的主页地址https://www.libhunt.com/lang/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-18 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"LibHunt: 根据reddit 被提及状态展示 rust 库的热度"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 <<从零到生产>> 的 第七部分. 在这一章里, 作者演示了:\n如何使用 reqwests 来写一个 REST API client.\n如何来使用 wiremock 来进行测试.\n原文链接https://www.lpalmieri.com/posts/how-to-write-a-rest-client-in-rust-with-reqwest-and-wiremock/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-18 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"How To Write A REST Client In Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该 twitter 快速的介绍了 Rust 在 facebook 中的使用历程:twitter原文https://twitter.com/alexvoica/status/1350049393471324161--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-18 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Facebook使用 Rust 的简单介绍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rocket Lab 是小型卫星发射领域的全球领导者。团队有500人，而且每周都在增加。当然，这是在美国的工作。期待国内也会有！链接：https://www.rocketlabusa.com/careers/positions/flight-software-engineer-ii-auckland-new-zealand-3653845/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.rocketlabusa.com/careers/positions/flight-software-engineer-ii-auckland-new-zealand-3653845/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 要上太空了！RocketLab 招聘 Rust 工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这篇教程里，作者依照javscript的传统，教你用Rust写一个todo应用。你会学到：\nRust中的错误处理\nOption的使用\nStruct和impl\n终端输入输出\n文件操作\n所有权和借用\n模式匹配\n迭代器和闭包\n使用外部crate\n链接：https://www.freecodecamp.org/news/how-to-build-a-to-do-app-with-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.freecodecamp.org/news/how-to-build-a-to-do-app-with-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"入门教程：用Rust写一个todo应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章中作者从伪代码出发，一步步教你实现一个爱情计算器。作者称这是线上最通俗易懂的Rust入门指南，你怎么认为呢？快来试试吧。链接：https://masteringbackend.com/posts/rust-programming-the-ultimate-guide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://masteringbackend.com/posts/rust-programming-the-ultimate-guide"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Programming Language: The Ultimate Guide"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者分享了自己刚开始学Rust的一些想法和与其它语言的对比。链接：https://dev.to/hb/rust-initial-thoughts-4jka"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://dev.to/hb/rust-initial-thoughts-4jka"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust: Initial thoughts"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章中作者分享了关于如何将Future::{try_}join和{try_}join!以一种更一致的形式加入标准库中的思考，以及对于const-eval可能起到的作用的讨论。链接：https://blog.yoshuawuyts.com/future-join-and-const-eval/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.yoshuawuyts.com/future-join-and-const-eval/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"关于Future::join设计的思考"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新的文章翻译来啦。原文标题：Async/Await原文链接：https://os.phil-opp.com/async-await/#multitasking公众号：Rust 碎碎念翻译 by：Praying链接： https://mp.weixin.qq.com/s/OL7_usSmY_gAZzYYydyr8A"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mp.weixin.qq.com/s/OL7_usSmY_gAZzYYydyr8A"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【译】Async/Await（二）—— Futures"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Broccoli 是一个2D broad-phase碰撞检测库。Broccoli 这个名字的由来很有意思：如果我们把 \"broad-phase collision\" 简写成 \"broad colli\"，然后很快地念它，听着就像 \"broccoli\" 。GitHub：https://github.com/tiby312/broccoli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tiby312/broccoli"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Broccoli - Fast 2d broad-phase collision detection crate!"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章中作者分享了在课余时间用Rust重写生物膜仿真过程中遇到的问题。由于crates.io上找不到SciPy的代替品，作者自己实现了一个bacon-sci。https://crates.io/crates/bacon-sci链接：https://aftix.xyz/home/bacon/GitHub: https://github.com/aftix/bacon"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/aftix/bacon"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的科学计算"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"whfuyn"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"shadow-rs是一个使得程序能在运行时读取到编译过程中信息的库，这些信息包括：\nCargo.toml 中的项目版本\n依赖信息\ngit commit\n编译中用到的Rust工具链\nbuild类型，debug版还是release版\n等等\n之前想要增加加自定义信息会很麻烦，在0.5.14支持了自定义钩子后就容易多啦。链接：https://www.reddit.com/r/rust/comments/kylam5/shadowrs_0514_support_custom_hook/GitHub: https://github.com/baoyachi/shadow-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/baoyachi/shadow-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-17 23:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"shadow-rs 0.5.14 支持自定义钩子"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"webrtc.rs，用 Rust 重写 Pion WebRTC (http://Pion.ly)。目前 v1.0 仍然处于开发中，欢迎开源贡献者提PR。其路线图如下：https://webrtc.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"News"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"2020年，Deno 项目有了很多进展，几个大型基础设施的重构，API 趋于稳定，v1.0 版本的发布等。Deno，是 Rust 实现的使用 V8 引擎的 JavaScript 和 TypeScript 安全运行时。博客文章链接，https://deno.land/posts/deno-in-2020"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://deno.land/posts/deno-in-2020"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Article"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个版本发布了稳定的 async_std::channel 子模块，并引入了 tokio v1.0 的功能，同时，移除了不赞成使用的sync::channel类型。async-std v1.9.0 的链接，https://github.com/async-rs/async-std/releases/tag/v1.9.0warp，一个超级便捷，可组合的 Web 服务器框架，其构建于 hyper 之上。GitHub Merge 的链接地址，https://github.com/seanmonstar/warp/pull/753#issuecomment-761093937https://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/seanmonstar/warp/pull/753#issuecomment-761093937"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-16 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Release"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天开始Rust日报尝试新的方式组织内容，分为如下几个板块：\n\nNews：当天官方或社区有关Rust的最新新闻\n\n\nArticle：当天社区新发布的值得阅读的Rust博客文章\n\n\nRelease：当天社区crate或相关工具版本发布或更新\n\n\nMiscellaneous：其他内容\n\nNews：当天官方或社区有关Rust的最新新闻Article：当天社区新发布的值得阅读的Rust博客文章Release：当天社区crate或相关工具版本发布或更新Miscellaneous：其他内容有任何问题或建议欢迎留言反馈，大家一起让Rust日报越来越好！"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"News"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Const Generics 计划在1.50版进入stable，官方今天在nightly的Reference上已更新好相关文档。链接：https://doc.rust-lang.org/nightly/reference/items/generics.html#const-generics"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://doc.rust-lang.org/nightly/reference/items/generics.html#const-generics"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Nightly的Reference已上线Const Generics的文档"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Article"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章对几乎目前Rust社区较为流行的GUI框架做了整体的调研，druid和iced表现还不错。链接：https://www.boringcactus.com/2020/08/21/survey-of-rust-gui-libraries.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.boringcactus.com/2020/08/21/survey-of-rust-gui-libraries.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust GUI框架的全调研"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Releases"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://github.com/heroiclabs/fishgame-macroquad"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/heroiclabs/fishgame-macroquad"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fish Game - 一个使用macroquad游戏引擎和Nakama游戏后端开发的多人游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Gleam 是使用Rust编写的Erlang VM上的静态类型编程语言。下面是多线程版的Hello world示例代码：链接：https://gleam.run/news/gleam-v0.13-released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gleam.run/news/gleam-v0.13-released/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Gleam v0.13发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://github.com/lukechu10/ellalang"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lukechu10/ellalang"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ellalang 又一个使用Rust编写的新语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Boa 是一个使用Rust开发的实验性质的新一代JavaScript引擎。链接：https://boa-dev.github.io/2021/01/14/boa-release-11.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://boa-dev.github.io/2021/01/14/boa-release-11.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Boa v0.11发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rkyv是一个类似于FlatBuffers的序列化框架，作者声称zero-copy。主要适用于游戏开发领域。链接：https://github.com/djkoloski/rkyv/releases/tag/v0.3.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/djkoloski/rkyv/releases/tag/v0.3.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rkyv 0.3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Miscellaneous"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接:https://rust-gamedev.github.io/posts/newsletter-017"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-gamedev.github.io/posts/newsletter-017"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust GameDev 第17期月报"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"链接：https://this-week-in-rust.org/blog/2021/01/13/this-week-in-rust-373/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/01/13/this-week-in-rust-373/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust #373"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Folyd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"蚂蚁集团时序数据库 CeresDB 团队持续招聘 Rust 技术专家，层级 P6~P8，从事 TP/AP 融合时序数据库的研发，满足金融时序、监控、IOT 等场景下的海量时序数据的存储、多维查询下钻和实时分析需求。岗位职责：\n\n时序 AP/TP 引擎的研发，包括行列存储、查询及优化、分析和复制等组件研发，设计软硬件结合方案，满足海量数据下低成本的存储、多维查询下钻以及实时分析的需求。\n\n\n数据库分布式架构研发，解决高可用、高可靠问题，达到金融级容灾标准。\n\n\n内置计算引擎、查询语言及金融时序智能业务等工程方案设计及研发。\n\n\n数据库周边配套工具及平台研发，持续提升运维和运营效率。\n\n时序 AP/TP 引擎的研发，包括行列存储、查询及优化、分析和复制等组件研发，设计软硬件结合方案，满足海量数据下低成本的存储、多维查询下钻以及实时分析的需求。数据库分布式架构研发，解决高可用、高可靠问题，达到金融级容灾标准。内置计算引擎、查询语言及金融时序智能业务等工程方案设计及研发。数据库周边配套工具及平台研发，持续提升运维和运营效率。岗位要求：\n\n扎实的计算机基础，良好的编程的素养。\n\n\n有 C/C++/Java/Rust/Golang 使用经验，熟练使用语言及平台工具，乐于技术钻研。\n\n\n有长期从事存储、数据库领域研发的兴趣和决心，对 Influxdb/OpentTSDB/Kdb+ 以及 ClickHouse/Apache Drill 等存储系统有使用或者了解更佳。\n\n扎实的计算机基础，良好的编程的素养。有 C/C++/Java/Rust/Golang 使用经验，熟练使用语言及平台工具，乐于技术钻研。有长期从事存储、数据库领域研发的兴趣和决心，对 Influxdb/OpentTSDB/Kdb+ 以及 ClickHouse/Apache Drill 等存储系统有使用或者了解更佳。工作地点杭州、上海和北京。欢迎联系 boyan@antgroup.com"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-15 20:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"蚂蚁金服正在招聘Rust工程师"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"据jynelson回复，在接下来的几天，他将要发表一篇博客，给大家介绍这些性能提升是来自哪些地方。https://www.reddit.com/user/jynelson/[Read More]](https://www.reddit.com/r/rust/comments/kwlpv3/great_improvement_in_rustdoc_performance_in_the/)：https://www.reddit.com/r/rust/comments/kwlpv3/great_improvement_in_rustdoc_performance_in_the/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-14 16:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在过去四个月，rustdoc的性能有了很大的提升！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"glynnormington整理了网络上大部分有关rust的mdbook，有官方的，也有非官方的。值得注意的一点是大家关注的rust宏小册很多人以为一直没有更新，但是其实有另一个团队重新在原来的基础上，更新了新的版本，目前已收录到该书库中。https://www.reddit.com/user/glynnormington/Rust 书记宝库: https://lborb.github.io/book/title-page.htmlRead More: https://www.reddit.com/r/rust/comments/kwiwb8/the_little_book_of_rust_books/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/kwiwb8/the_little_book_of_rust_books/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-14 16:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 书籍宝库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Ultron是基于Web的单空间文本编辑器，具有语法突出显示功能，完全用rust编写。Github: https://github.com/ivanceras/ultron"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ivanceras/ultron"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-14 16:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ultron - 由rust编写的基于web的文本编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原帖主在使用迭代器的过程中，发现这两个api期望的闭包参数不一致：而且发现在使用过程中这样的差异会导致代码不好看：any:filter:于是就在reddit上发帖询问这样设计的原由。高赞回复：因为any会消耗迭代器，所以在使用之后不需要返回迭代器中的项(这就是为什么它需要一个Self::Item)。对于filter，过滤之后仍然需要在后续操作中继续使用它的项，如果通过闭包消耗掉它们，后续就无法使用它的项了。所以它需要一个 &Self::Item，以便它可以在之后返回 Self::Item。(Since any will consume the iterator, it doesn't need to return the items in it after use (which is why it takes a Self::Item). For filter, the resulting iterator still needs to return its items after use, and it can't do that if it consumes them through the closure. So it takes an &Self::Item, so it can return Self::Item later.)Read More: https://www.reddit.com/r/rust/comments/kw91u1/why_do_iteratorany_and_iteratorfilter_expect/今天是新的一年里我第一次发日报，过去几个月都是用Downtime的花名参与，不过从新的一年里都用Cupnfish了，以后的日子里请大家多多指教。最近一直在尝试bevy，下下周发文之前希望自己也能顺便写个使用感受。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/kw91u1/why_do_iteratorany_and_iteratorfilter_expect/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-14 16:43"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么Iterator::any和Iterator::filter期望不同的闭包？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"开源安全公司（Open Source Security，Inc）自豪地宣布，它为Rust的GCC前端的全职和公共开发工作提供了资金。在此博客文章中，作者将详细介绍我们参与的动机以及公众将因这项努力而获得的利益。ReadMore:https://opensrcsec.com/open_source_security_announces_rust_gcc_funding"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://opensrcsec.com/open_source_security_announces_rust_gcc_funding"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-13 23:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Open Source Security, Inc.宣布为Rust的GCC前端提供资金"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者选择Rust作为运行时库的实现语言，并且希望使同一库可用于不同的编程语言。最初，选择从对三种语言的支持开始：\nRust：因为这是我们的实现语言。\nC ++：这是我们熟悉的低级语言，仍然是嵌入式设备领域中最成熟的语言之一。\nJavaScript / TypeScript：因为它是一种非常流行的动态语言。\nRust库（也称为板条箱）分为两部分，共享实现板条箱和精简惯用的API条板箱。对于JavaScript，我们使用Neon公开API。Neon使我们能够方便地编写JavaScript API和创建NPM包。https://github.com/neon-bindings/neonC ++部分更具挑战性。ReadMore:https://sixtyfps.io/blog/expose-rust-library-to-other-languages.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://sixtyfps.io/blog/expose-rust-library-to-other-languages.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-13 23:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"其他语言调用Rust - C++"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Thirtyfour是一个用于Rust的Selenium / WebDriver库，用于自动化网站UI测试。它支持完整的W3C WebDriver规范。经过Chrome和Firefox的测试，尽管任何与W3C兼容的WebDriver都可以使用。ReadMore:https://github.com/stevepryde/thirtyfour"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/stevepryde/thirtyfour"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-13 23:24"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的 WebDriver库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"为什么我们 Rust 已经有了 Rustc 还需要一个基于 gcc 的编译后端呢？基于以下几点理由：原文：https://www.reddit.com/r/rust/comments/kv6bol/rustgccgccrs_gcc_rust/项目仓库： https://github.com/Rust-GCC/gccrs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-12 22:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 gcc 编译 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-12 22:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust snmp开源项目自愿者招集倡议"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"尽管被称作简单网络管理协议，SNMP确是在2021年的今天，仍然被使用的最为广泛的TCP/IP 应用协议，几乎所有的数据中心网络设备，以及支撑数据中心运作的基础架构设备，均使用SNMP协议与集中管理站进行通信。SNMP协议的完善，是Rust生态完善必不可少的一部分。更多详情： https://mp.weixin.qq.com/s/7udNuUUIpv12RACvBe3Y3g"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-01-12 22:41"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"背景"},"type":"text"}],"type":"title"}},]
