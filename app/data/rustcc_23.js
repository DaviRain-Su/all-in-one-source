export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Plotters 是一个绘图库，设计用于以纯 Rust 渲染图形、绘图和图表。支持各种类型的后端，包括位图、矢量图、活塞窗口、GTK/Cairo 和 WebAssembly。在有的人看来，这仍然不是\"非常\"便捷，尤其是在 debug 的时候，仍然需要花费一点精力来绘制。debug_plotter 这个库帮我们实现了这个需求，通过 plot! 宏，可以快速完成图像绘制，可视化程序运行情况。仓库地址https://crates.io/crates/debug_plotter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-09 14:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"plotters ：快速绘图工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Findex 用 Rust 编写并使用 GTK 渲染，可以通过 css 非常轻易地定制化仓库地址https://github.com/mdgaziur/findex"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-09 14:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Findex ：高度可定制的高性能 finder"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这一系列文章，将带领大家看一看 Rust 生态系统中动态加载的状态，并介绍如何从头实现一个插件系统。原文链接https://nullderef.com/series/rust-plugins/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-09 14:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Plugins in Rust：插件开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"欢迎阅读新一期的“本月 Rust OSDev”。在这些帖子中，我们定期概述了 Rust 操作系统开发生态系统中的显着变化。本系列在 GitHub 上公开。随意在那里打开拉取请求，其中包含您希望在下一期中看到的内容。https://github.com/rust-osdev/homepage/原文链接https://rust-osdev.com/this-month/2021-10/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-09 14:10"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Month in Rust OSDev"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"“我懂其他语言，我不需要学Rust”——听起来很熟悉吗? 如果你还没有开始学习Rust，你可能想要改变你的态度。根据技术培训公司O 'Reilly最近的一项研究，与其他编程语言相比，用Rust编写代码的开发人员的平均工资最高。原文链接https://thenextweb.com/news/move-over-python-rust-highest-paid-programming-language-2021"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-08 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"超越python, Rust是2021年薪酬最高的编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 编写自己的博客 系列的第二部分，用 Rust 来编写自己的 webserver.原文链接https://www.rotoclone.zone/blog/posts/webserver"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-08 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"编写自己的博客: 第二部分 webserver"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"欢迎来到Rust GameDev工作组的第27期月刊通讯。Rust是一种追求三合一的系统语言:安全性、并发性和速度。这些目标与游戏开发紧密结合。我们希望为任何希望在开发过程中使用Rust的人建立一个诱人的生态系统!原文链接https://gamedev.rs/news/027/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-08 20:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Month in Rust GameDev"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用示例：GitHub：https://github.com/epilys/rsqlite3"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-07 22:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rsqlite3：Rust重写sqlite3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Meadowlark 由音乐家制作，供音乐家使用，是适用于 Linux、Mac 和 Windows 的免费开源 DAW（数字音频工作站）。它旨在为世界各地的艺术家提供易于使用且功能强大的录音、作曲、编辑、声音设计、混音和母带制作工具，同时还具有直观性和可定制性。目前还处于开发阶段，设计图：GitHub：https://github.com/MeadowlarkDAW/Meadowlark"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-07 22:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Meadowlark：开源数字音频工作站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Mac 安装：使用例子：GitHub：https://github.com/SpectralOps/keyscope"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-07 22:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"keyscope：密钥工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用：文档：https://docs.rs/trycmd/0.2.1/trycmd/GitHub：https://github.com/assert-rs/trycmd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-07 22:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"trycmd：CLI测试用例工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用方法：GitHub：https://github.com/agourlay/dlm"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-07 22:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"dlm：简单HTTP下载管理器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"向量 A B 相乘并将结果存入 C 的例子：GitHub：https://github.com/UpsettingBoy/gpgpu-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-07 22:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gpgpu-rs：基于wgpu的GPU计算库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 社区现在有很多优秀的博客，我感觉做这么一个栏目挺好，给大家推荐一些优秀的Rust 学习博客，也作为一个学习资源的备份。第一期的主角是 fasterthanli.me ，作者是 Amos 。弹钢琴、玩乐高长大的90 后游戏 Boy ，之前用 Java，现在用 Rust。关于他更详细的介绍可以参考 : https://fasterthanli.me/about为什么第一期就推荐他呢？ 因为他的文章写的好。他的博客文章写的系统且细腻入微，引导你思考。如果你学习 Rust ，那么强烈推荐 Amos 的博客：  https://fasterthanli.me/如果你觉得他的文章对你有很大帮助，可以适当支持一下他的写作：https://www.patreon.com/fasterthanlime"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-06 22:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 优秀博客推荐 第一期  | https://fasterthanli.me/"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"涉及领域： 游戏、芯片、汽车、AI 安全\n动视（activision） 游戏公司  ： https://www.activision.com/\nARM 芯片公司 ： https://www.arm.com/\n丰田汽车（TOYOTA）:    https://www.toyotaconnected.com/\nZAMA : AI 端到端加密,用于保护云中的 AI 应用程序 https://github.com/zama-ai/concrete\nRust 基金会正在推动 Rust 在各个领域广泛应用https://foundation.rust-lang.org/members/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-06 22:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"本月新加入 Rust 基金会的公司"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Findex，高度可定制的高性能查找器，用 Rust 编写并使用 GTK。Github 链接，https://github.com/mdgaziur/findex"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mdgaziur/findex"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-06 22:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Findex"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Facebook 的 BOLT 项目，用于优化二进制文件编译性能，即将被添加到 LLVM 的官方源代码树及其 mono 代码库中。文章链接，https://www.phoronix.com/scan.php?page=news_item&px=BOLT-Nearing-LLVM-Monorepohttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.phoronix.com/scan.php?page=news_item&px=BOLT-Nearing-LLVM-Monorepo"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-06 22:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Facebook 的 BOLT 项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近，Rust 已成为安全系统级编程的有前途的替代方案。在为程序员提供细粒度的硬件控制的同时，其强类型系统强制执行许多安全属性。然而，Rust 的安全保证不是灵丹妙药。正如大量研究报告的那样，运行时崩溃和内存安全错误仍然困扰着 Rust 开发人员，导致破坏性的可利用漏洞。在本文中，我们通过对 Rust 执行静态分析，展示并评估了一个用于 Rust 程序的全自动错误检测框架 -- MirChecker 。基于对 Rust 代码库中发现的现有错误的观察，MirChecker 的方法会跟踪数字和符号信息，通过使用约束求解技术检测潜在的运行时崩溃和内存安全错误，并向用户输出信息性诊断信息。我们的实验表明 MirChecker 可以检测我们代码片段中的所有问题，并且能够在实际场景中执行错误查找，-- https://mssun.me/research/ccs21mirchecker.html信号是 linux 上进程生命周期的重要组成部分，但使用它们需要小心，正因为可能是因为需要特别小心所以限制并不明显。在这篇文章中，我们来看看什么是信号公认的挑战性的问题之一：信号处理程序的限制。-- https://www.jameselford.com/blog/working-with-signals-in-rust-pt1-whats-a-signal/Rust.cc 论坛: 支持 rss微信公众号：Rust 语言中文社区https://rustcc.cn/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-06 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一篇介绍 Rust 中自引结构的文章，值得一读。Self Referential Structs in Rust: https://arunanshub.hashnode.dev/self-referential-structs-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://arunanshub.hashnode.dev/self-referential-structs-in-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-04 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中的自引用结构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者 Paul E. McKenney 是 Linux Kernel Memory Model 的主要维护者，有三十年并发经验。文章试图讨论可供 Rust 语言选择的几种内存模型，并期望能够对社区有所帮助。What Memory Model Should the Rust Language Use?: https://paulmck.livejournal.com/66175.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://paulmck.livejournal.com/66175.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-04 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 语言应该使用什么内存模型？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 415: https://this-week-in-rust.org/blog/2021/11/03/this-week-in-rust-415/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/11/03/this-week-in-rust-415/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-04 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 415"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 官方安全应急响应工作组发布了 Rust 编译器安全公告（CVE-2021-42574） ，宣称该工作组被告知 Rust 编译器存在一个安全问题，这个安全问题可能会导致 「人眼审查」的 Rust 代码 与 「编译后给机器用的」机器码 完全不一致。这个安全问题并不是 Rust 编译器自身的缺陷导致的，而是由 Unicode 相关的双向算法 漏洞（CVE-2021-42574）而导致的。而利用这个 Unicode 漏洞的攻击方法叫做：特洛伊之源（Trojan Source）ReadMore:https://zhuanlan.zhihu.com/p/428305373"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://zhuanlan.zhihu.com/p/428305373"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-04 09:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"针对于特洛伊之源看 Rust 如何处理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要更新有路由、参数提取器、错误处理部分。ReadMore:https://github.com/tokio-rs/axum/releases/tag/v0.3.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tokio-rs/axum/releases/tag/v0.3.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-04 09:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"axum发布 0.3 版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ReadMore:https://github.com/ouch-org/ouch"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ouch-org/ouch"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-04 09:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ouch Rust 编写的压缩和解压缩工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Use Rust for embedded developmenthttps://opensource.com/article/21/10/rust-embedded-development?sc_cid=7016000000127ECAAY篇首语：Rust的高性能、可靠性和生产力使其适合于嵌入式系统。在过去的几年里，Rust在程序员中获得了热情的追随。技术趋势来来往往，因此很难区分新事物带来的兴奋与技术优势带来的兴奋，但RT-Thread社区开发人员Liu Kang认为Rust是一种真正设计良好的语言。Kang说，Rust旨在帮助开发人员构建可靠、高效的软件，它从一开始就是为了这个目的而设计的。在本文中，Kang演示了Rust的许多关键特性，这些特性正是Rust适合嵌入式系统的原因。Rust有如下特性使其特别适合嵌入式开发：\n高性能：快速和高度优化的内存模型；\n可靠性：内存错误可在编译期间被发现和排除；\n生产力：优秀的文档、带有有用错误提示的友好编译器和一流的工具。有一个集成的包管理器和构建工具，支持自动补全和类型检查的智能多编辑器，一个自动格式化程序，等等。\nRust被设计成保证内存安全和高性能，而嵌入式程序常常遇到的是内存问题，使用Rust可以保证编写的程序只要通过编译器检查即是内存安全的，以下是使用Rust进行嵌入式设备开发能获得的好处：\n强大的静态代码分析；\n灵活的内存模型；\n无畏并发；\n互操作性；\n可移植性；\n社区驱动；\n在这里，作者以如何在RT-Thread项目中调用Rust静态链接库的代码为例：第一步，使用Rust工具创建和编写静态链接库类型的项目；第二步，交叉编译，生成静态链接库；第三步，生成C代码的头文件（使用cbindgen）；https://github.com/eqrion/cbindgen第四步，调用Rust生成的库文件（使用SCons编译工具来集成代码）。这里指的是如何在Rust中调用C代码，然后Rust代码再被C代码调用，由于最终还是C代码调用Rust代码，因此关注点还是把Rust代码编译为静态链接库，然后供C代码调用。在嵌入式开发中使用Rust可以享受Rust的所有特性带来的优势，而无需牺牲灵活性或稳定性。有关嵌入式Rust编程（以及RT-Thread本身）的更多信息，请查看RT-Thread项目的YouTube频道。记住，嵌入式也可以是开放的。一种新的面向嵌入式系统的开源操作系统项目地址：https://www.rt-thread.org/【完整版】使用 Rust 进行嵌入式开发https://mp.weixin.qq.com/s/9QGIM7xkjZNxI7SYj5kDlw"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.rt-thread.org/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-02 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust进行嵌入式编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Horcrux: Implementing Shamir's Secret Sharing in Rust (part 1)https://gendignoux.com/blog/2021/11/01/horcrux-1-math.html就像我在之前一篇博客中提到过的那样，归因于内存安全、强类型、简单易用的单元测试和高性能等特性，我认为Rust是一门极好的用来实现加密算法的编程语言。Horcruxs是一个用来展示如何用Rust来实现Shamir共享密钥算法的程序例子，目前它还不能被用于生产中。从这篇博客开始，作者将从基本的数学原理开始讲起，并带领读者学习如何用Rust来实现Shamir共享密钥算法（关于Rust实现部分的讲解需要等到下一篇博客，有兴趣的读者可以关注作者的动态）。项目地址：https://github.com/gendx/horcrux"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/gendx/horcrux"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-02 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Horcrux：在Rust中实现Shamir密钥共享（第1部分）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"What sort of mature, open-source libraries do you feel Rust should have but currently lacks?https://www.reddit.com/r/rust/comments/qkt2j7/what_sort_of_mature_opensource_libraries_do_you/总结一下帖子下提到的呼声比较高的库：更多想法和细节欢迎围观该讨论帖。https://www.reddit.com/r/rust/comments/qkt2j7/what_sort_of_mature_opensource_libraries_do_you/Rust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-02 20:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【Reddit讨论帖】你觉得Rust目前还缺乏哪些成熟的开源库？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust1.56.1引入了两个新的lints，以减轻最近披露的一个安全问题的影响，CVE-2021-42574。我们建议所有用户立即升级，以确保其代码库不受安全问题的影响。如果已经安装过 Rust,使用如下命令升级:rustup update stable原文链接https://blog.rust-lang.org/2021/11/01/Rust-1.56.1.htmlCVE-2021-42574 相关说明https://blog.rust-lang.org/2021/11/01/cve-2021-42574.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-01 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.56.1 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo-feature 是一个 cargo 的插件,用于管理依赖的特性.github 地址https://github.com/Riey/cargo-feature"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-01 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-feature: 发布0.60版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 <<Rust 中实现 Hazard Pointers>> 的第三部分,一如既往的高质量视频.油管视频https://youtu.be/tGn0mQF0804"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-01 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中实现 Hazard Pointers (part 3)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"信号是linux上过程生命周期的重要组成部分，但与它们一起工作是令人担忧的。在这篇文章中，我们将看看什么是信号，只是一个具有挑战性的方面：对信号处理程序的限制。原文链接https://www.jameselford.com/blog/working-with-signals-in-rust-pt1-whats-a-signal/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-11-01 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中操作signals"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-31 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"20210905"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n阅读原文 https://github.com/readme/featured/rust-programming\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-31 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust开发者如何让Web更安全"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@mgattozzi 写了一个Rust executor项目，只有一个文件，只使用了标准库的功能，这个项目有良好的注释，帮助开发者理解像 tokio_rs 这样的库底层的逻辑。\nRepo https://github.com/mgattozzi/whorl\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-31 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个Rust executor教学项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n阅读原文 https://www.osohq.com/post/cross-platform-rust-libraries\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-31 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何实现一个跨平台的Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者使用Rust开发一个WebGPU renderer并编译到 WebAssembly，目前这个 renderer 已经支持了 GLTF。\nRepo https://github.com/takahirox/wgpu-rust-renderer\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-31 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust开发WebGPU renderer"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"lidongjies"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Node 不是最快的框架，也不是最慢的，v8 的速度创造了奇迹，但是如果我们在 Node 和 Rust 之间设置不公平的战斗，NodeJS将会失败。这篇文章介绍了如何使用Neon将Rust程序在Node.js中使用，它类似于C/C++的native模块。\n阅读原文 https://yieldcode.blog/supercharge-nodejs-with-rust/\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-31 21:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust增强你的NodeJS"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是在SPIR-V compute shaders上重建的autograph的第一个版本，可以使用rust-gpu从Rust源代码编译！要在 crate 中使用autograph，请将其添加为 Cargo.toml 中的依赖项：Gitlab 链接，https://github.com/charles-r-earp/autograph/tree/v0.1.0文章链接，https://www.reddit.com/r/rust/comments/qiwtet/autograph_v010/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/qiwtet/autograph_v010/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-30 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"autograph：Rust的机器学习库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这应该是可用的crate版本，旨在提供不会死锁的互斥锁。这个crate使用wait-die scheme方案来实现这一点。如果Mutex:：lock调用可能会死锁，它将返回一个Err(Retry)，请求调用方删除所有持有的锁并再次尝试获取它们。这由retry_循环函数处理。Gitlab 链接，https://crates.io/crates/cooptex文章链接，https://www.reddit.com/r/rust/comments/qis8zy/cooptex_deadlockfree_mutexes/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/qis8zy/cooptex_deadlockfree_mutexes/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-30 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cooptex -无死锁 Mutexes"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该项目实现了一个基本的OpenGL渲染pipeline。没有使用依赖项，从零开始就完全使用Rust。你可以在这里在线试用Gitlab 链接，https://github.com/dzharvis/rusterizer#readme文章链接，https://www.reddit.com/r/rust/comments/qixyuw/simple_3d_renderer_written_in_rust/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/qixyuw/simple_3d_renderer_written_in_rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-30 19:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rusterizer：用Rust编写的简单3D渲染器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个博客系列。作者 Jimmy Hartzell 是一个高频量化领域的长时间的 C++ 程序员和指导员。在他使用了一段时间 Rust 后，他认为 Rust 几乎在所有能使用 C++ 的地方，都比 C++ 好。新开的项目坑，应该优先选择 Rust。Blog：https://www.thecodedmessage.com/posts/hello-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.thecodedmessage.com/posts/hello-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"再见，C++，你好，Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者认为，Rust不仅是写起来爽，其在整个工作流（工程开发，集成测试，部署等流程），体验都是极棒的。不愧是一门现代编程语言。文章很长，详细讲述了如何在完整的工作流中使用 Rust。值得一读。https://fasterthanli.me/articles/my-ideal-rust-workflow"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://fasterthanli.me/articles/my-ideal-rust-workflow"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"我的 Rust 项目工作流"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者目的是练手和教学用，不是为了替代 Linux Kernel.https://github.com/nuta/kerla"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/nuta/kerla"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kerla - 一个兼容 linux kernel 的操作系统内核项目"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Rust 重写了编译器，实现了 3 倍的刷新提升和 5 倍的编译速度提升https://nextjs.org/blog/next-12"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nextjs.org/blog/next-12"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Next.js v12 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"无依赖，支持 no_stdhttps://github.com/rspencer01/microjson"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rspencer01/microjson"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"microjson - 支持 no_std 的 JSON 解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"pest 是著名的 Rust 解析器框架，现在作者好像停止维护了。需要有人接手。有意者请参与讨论：https://github.com/pest-parser/pest/discussions/547"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/pest-parser/pest/discussions/547"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pest 项目找维护人"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者以 Oso（一个授权框架）为例，详细描述了如何如何使用 Rust 开发跨平台的库，给各个前端使用。https://www.osohq.com/post/cross-platform-rust-libraries"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.osohq.com/post/cross-platform-rust-libraries"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何使用 Rust 开发跨平台库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"视频教程油管https://youtu.be/5rwnWfMJflU"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"福利 - 宏快速开发心得"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这里有一个 Rust 实现的 Web LocalStorage API，用于非浏览器环境。https://github.com/richardanaya/web-local-storage-api"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/richardanaya/web-local-storage-api"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-27 21:20"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Web Local Storage API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Niko 是 Rust Team 的 leader，在他最近的 Baby Steps 系列文章中，详细阐述了 async trait 背后设计的考量，也不乏对 trait 动态派发更加深入的说明。更让我们兴奋的是，从中可以看到，Rust 团队正在积极推动 async trait 和 generic associated types 的进展。dyn async traits 系列博客 (一共 6 小节)https://smallcultfollowing.com/babysteps//blog/2021/09/30/dyn-async-traits-part-1/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-26 14:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"如何实现 aysnc trait"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Jonhoo 的 Crust of Rust 系列是不可多得的 rust 进阶资料。在这个视频中，他非常详细地说明了函数，函数指针，闭包之间的区别，以及它们如何作用于 Fn* trait，同时提到了 Fn 类型如何处理动态派发。Youtube 地址https://www.youtube.com/watch?v=dHkzSZnYXmk&t=2993s"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-26 14:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crust of Rust 系列之 - functions, closures and their traits"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Twitter 运行着数百个缓存集群，在内存中存储数百 TB 的小对象，内存缓存至关重要，需要兼顾性能、可靠性和效率。Pelikan 是 Twitter 的用于内存缓存的开源和模块化框架，可替换 Memcached 和 Redis，并获得更好的性能。三位工程师，采用各自的方法将 Rust 添加到 Pelikan 的 C 代码库。不仅通过 fii 重用 C 中的许多核心组件，还用同样快速的 Rust 实现替换服务器的网络和事件循环。P99 conf 地址https://www.p99conf.io/session/whoops-i-rewrote-it-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-26 14:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 重写缓存数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当你从其它语言转向 Rust 的时候，可能已经积累了一些经验。这通常是一件好事，意味着你不需要从头来过，但是，之前遗留的坏习惯可能让你的代码呈现一些坏味道。作者在这篇文章中，指出了 Rust 新手常常出现的一些问题，获益颇多。文章地址https://adventures.michaelfbryan.com/posts/rust-best-practices/bad-habits/#hungarian-notation"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-26 14:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 新手的坏习惯"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Jon和Ben讨论了Rust 1.54 和 1.55 版本的亮点。并且将相关内容列了出来。原文链接https://rustacean-station.org/episode/039-rust-1.54-1.55/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-25 20:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.54和1.55 中的 新功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"egui是一个简单，快速，高度可移植的Rust即时模式GUI库。Egui 可以在网页上运行，甚至可以在你最喜欢的游戏引擎中运行（即将支持)。egui的目标是成为最容易使用的Rust GUI库，以及在Rust中制作web应用的最简单方式。目前 0.15 版本已经发布.原文连接https://emilk.github.io/egui/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-25 20:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"egui: 0.15 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Himalaya的目标是将电子邮件逻辑提取到一个简单(但可靠)的CLI API中，可以直接从终端、脚本、ui中使用……可能性是无穷的!github 地址https://github.com/soywod/himalaya"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-25 20:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"himalaya: 0.5.1版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"不同于 https://cheats.rs/,  这是另外一份 Rust Cheat Sheet, 格式为 PDF.下载链接https://letsgetrusty.com/wp-content/uploads/2021/10/LGR-Cheat-Sheet.pdf--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-25 20:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 小抄"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SeaORM 是一种关系 ORM，可帮助您在 Rust 中构建轻量级和并发的 Web 服务。\n异步：依赖 SQLx\n动态：基于 SeaQuery\n可测试\n服务导向\n来看个 Select 的例子：设计思想：「分层抽象」，几乎所有的东西都是可配置的，编译时不知道底层数据库是什么（数据库无关）。使用 API 时有不同的阶段，有两个维度来导航 SeaORM 代码库，“阶段” 和 “抽象”。\n首先是「申报阶段」，实体和它们之间的关系是用 EntityTrait、ColumnTrait 和 RelationTrait 等定义的。\n其次是「查询构建阶段」\n\n最顶层是 Entity 的 find*、insert、update、delete 方法，可以直观的进行基本的 CRUD 操作。\n再往下一层是 Select、Insert、Update 和 Delete 结构，它们每个都有自己的 API 用于更高级的操作。\n再往下一层是 SeaQuery SelectStatement、InsertStatement、UpdateStatement 和 DeleteStatement，它们有丰富的 API 供您处理 SQL 语法树。\n\n\n三是执行阶段。一组单独的结构，Selector、Inserter、Updater 和 Deleter，负责针对数据库连接执行语句。\n最后是解析阶段，此时查询结果被转换为 Rust 结构体以供使用。\n\n最顶层是 Entity 的 find*、insert、update、delete 方法，可以直观的进行基本的 CRUD 操作。\n再往下一层是 Select、Insert、Update 和 Delete 结构，它们每个都有自己的 API 用于更高级的操作。\n再往下一层是 SeaQuery SelectStatement、InsertStatement、UpdateStatement 和 DeleteStatement，它们有丰富的 API 供您处理 SQL 语法树。\n因为只有执行和解析阶段是特定于数据库的，我们可以通过替换它们来使用不同的驱动程序。与 Diesel 对比：官网：https://www.sea-ql.org/SeaORM/GitHub：https://github.com/SeaQL/sea-orm支持多种算法，使用方法如下：GitHub：https://github.com/RustCrypto/block-ciphersDarkFi 是一个匿名的 DeFi 网络。它的目标是提供灵活的私有原语，可以用来创建任何类型的应用程序。 DarkFi 使用零知识密码学的进步，并创建了一种合同语言和开发人员工具包，旨在使匿名工程对开发人员具有高度的可访问性。官网：https://dark.fi/GitHub：https://github.com/darkrenaissance/darkfi"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-24 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sea-orm：异步动态 ORM"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 实现的，通过 TCP、（相互）TLS 或 DNS（权威服务器或直接连接）隧道传输 TCP 或 UDP 流量。整体架构如下：图片地址：https://img.gejiba.com/image/zqi53每个可执行文件包含 2 个组件，通过客户端 stream 通道（字节读取器和写入器元组）进行通信：\n客户端监听器绑定套接字并将传入和传出的流量转为新的流。\n客户端 tunneler 将流读取器和写入器转为隧道协议。\n服务器 untunneler 根据隧道协议绑定套接字并将隧道流量转换回原始流。\n服务器转发器将流写入器和读取器转换回流量。\n基于 TCP 的流量被简单地转换为流。  基于 UDP 的流量转换取决于隧道协议。基于 UDP 的流量还需要一种方法来识别现有客户端以继续其会话。解决方案是内存中的客户端缓存，它将客户端的标识符映射到其对应的流。GitHub：https://github.com/dlemel8/tunnelerHelium 网关应用程序是一项旨在在基于 Linux 的 LoRaWAN 网关上运行的服务。它旨在与典型的 LoRa 数据包转发器一起运行，并通过 Semtech 的网关消息传递协议（GWMP，使用 JSON v1 或 v2）进行连接。Helium Gateway 应用程序会做两件事：\n从网关服务获取区块链上下文，例如路由表和 OUI 端点；这意味着应用程序不需要维护区块链副本的完整分类帐。\n将数据包连接并路由到适当的 OUI 端点（如 Helium 路由器）。\nGitHub：https://github.com/helium/gateway-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-24 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tunneler：隧道工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"高效、轻量、可配置的文件管理器。实现很简单：它在某些目录（可以配置）中取一个文件，然后组织它们，最后将它们移动到一个目录（也可以配置）。大概就是这么个效果：注意 Before 中每一个文件的「最后一部分」，他们会被转换为 After 中的目录。GitHub：https://github.com/Eolien55/FileClassed一个最小的 64 位 Rust 内核和一堆配置脚本，可用于使用 Nightly-Rust 编译器引导操作系统开发。使用 Rust OsDev 社区构建的工具如 xbuild、bootimage、bootloader crates，并将所有这些工具配置为协同工作。从而开发人员不必担心 toochain 的配置。工具链构建并配置项目以使用 x86_64-unknown-none 目标。 一些功能包括：\n配置整个环境的脚本。\n构建内核并使用 Qemu 模拟的脚本。\nVS Code RLS 配置。\nGitHub：https://github.com/Narasimha1997/rust-kernel-barebones使用方法如下：GitHub：https://github.com/didibear/simple-undo\nUnderstand Rust's Borrow Checker in 5 Minutes - YouTube\n提升 mongodb 性能的经验：Making slow Rust code fast | patrickfreed's blog\n泛型：jeffa.io - Rust Guide: Generics Demystified Part 1\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-24 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"FileClassed：批处理文件管理器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Infinitree，具有 3 层缓存的可扩展，加密嵌入式数据库。Github 链接，https://github.com/symmetree-labs/infinitree"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/symmetree-labs/infinitree"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-23 20:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Infinitree，嵌入式数据库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Quickwit，我们正在为大数据构建最具成本效益的搜索引擎。我们的整个搜索引擎是用 rust 开发的，搜索的核心是由一个名为tantivy的库提供的。https://github.com/quickwit-inc/quickwit人们经常问为什么tantivy 在基准测试中的表现优于Lucene，这是一个复杂的问题。许多人认为这是 Rust 比 Java 更快的故事之一，真相要复杂得多。https://github.com/quickwit-inc/tantivy博客文章 链接，https://quickwit.io/blog/search-a-sorted-block/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://quickwit.io/blog/search-a-sorted-block/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-23 20:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个很酷的 Rust 优化故事"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-motd，用 Rust 开发的每日消息（MOTD，Message of the Day）实用程序。Github 链接，https://github.com/rust-motd/rust-motd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rust-motd/rust-motd"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-23 20:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 无 runtime 依赖的每日消息"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SimpleRenamer，一个简单而智能的批量文件重命名工具。Github 链接，https://github.com/Inspirateur/SimpleRenamer"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Inspirateur/SimpleRenamer"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-23 20:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 批量重命名工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"weather-station，运行和监控自己的开源气象站所需的一切。气象站将测量值发送到 API 服务器进行收集，然后 API 服务器将这些数据提供给用户加载到其计算机或移动设备上的 Web 应用程序 (PWA)。Github 链接，https://github.com/codi-hacks/weather-stationhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/codi-hacks/weather-station"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-23 20:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 开源气象站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"性能是开发人员为他们的应用程序选择 Rust 的主要原因之一，文章强调对 Rust 代码进行概要分析和基准测试以查看任何瓶颈并修复它们是很重要的。并使用cargo bench Criterion.rs 运行基准测试\nhttps://patrickfreed.github.io/rust/2021/10/15/making-slow-rust-code-fast.html\nROAPI是一个 API 服务器，用户无需编写任何代码即可公开 CSV、JSON 和 Parquet 文件。ROAPI 由 4K 行 Rust 组成。\nhttps://tech.marksblogg.com/roapi-rust-data-api.html\nRust 不支持可选的函数参数、关键字参数和函数重载。为了克服这个限制，rust 开发人员经常应用 builder 模式。它需要一些额外的编码，但从 API 人体工程学的角度来看，它提供了与关键字参数和可选参数类似的效果。\nhttps://www.greyblake.com/blog/2021-10-19-builder-pattern-in-rust/\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-22 22:12"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"今天是 10 月 21 日，根据 Rust 每 6 周一个版本的迭代速度，全新的 1.56.0-stable (2021 edition) 将会与大家见面。你准备好向 2021 edition 的迁移了吗？快把工具链更新起来吧。Announcing Rust 1.56.0 and Rust 2021: https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-21 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 宣发 1.56.0 ，迈入 2021 edition"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"elasticsearch-dsl-rs 是 Elasticsearch DSL 的 Rust 实现，特性如下：\n强类型查询\n强类型聚合\n自动跳过空查询\n不依赖 elasticsearch-rs，可以作为独立库来方便 HTTP 客户端调用 ElasticSearch\nGitHub - vinted/elasticsearch-dsl-rs: https://github.com/vinted/elasticsearch-dsl-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/vinted/elasticsearch-dsl-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-21 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"elasticsearch-dsl-rs - 用 Rust 写就的 Elasticsearch DSL"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 413: https://this-week-in-rust.org/blog/2021/10/20/this-week-in-rust-413/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2021/10/20/this-week-in-rust-413/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-21 23:31"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 413"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"克隆容器进程和父子通信。本系列的第一部分描述了文件系统布局以及运行时如何将容器进程囚禁在容器的根文件系统中。https://penumbra23.medium.com/container-runtime-in-rust-part-i-7bd9a434c50a第二部分更深入地探讨了实现，并展示了运行时如何创建子进程以及它们如何通信，直到用户定义的进程启动。它还将描述如何设置伪终端并展示其重要性Unix 套接字。到本部分结束时，我们应该有一个可与 Docker 互操作的基本运行时。ReadMore:https://itnext.io/container-runtime-in-rust-part-ii-9c88e99d8cbc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://itnext.io/container-runtime-in-rust-part-ii-9c88e99d8cbc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-20 23:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的容器运行时 - 第二部分"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库可以安全地初始化动态大小类型 (DST)。ReadMore:https://github.com/nolanderc/dyn_struct"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/nolanderc/dyn_struct"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-20 23:18"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 的动态类型 dyn_struct"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rs_merkle: an advanced hash tree library for Rusthttps://www.reddit.com/r/rust/comments/qaqb68/rs_merkle_an_advanced_hash_tree_library_for_rust/rs-merkle是一个高级的Rust merkle树库。基本功能包括构建Merkle树、创建和验证单个和多个元素的Merkle证明，即多重证明。高级功能包括对树进行事务性更改，并回滚到以前提交的任何树状态，类似于Git。该库有两个主要结构。第一个是MerkleTree，它构建了一棵树，可用于验证数据完整性并生成Merkle证明。第二种是MerkleProof，可用于验证集合中是否包含项目。这个库是高度可定制的。哈希算法和树的构建方式可以通过Hasher trait进行配置。关于Merkle树Merkle树，也称为散列树，用于验证两个或多个参与方是否拥有相同的数据，而无需交换整个数据集合。Merkle树被用于Git、Mercurial、ZFS、IPFS、比特币、以太坊、Cassandra等许多领域。例如，在Git中，Merkle树用于查找本地和远程存储库状态之间的增量，以便通过网络仅传输它们之间的差异。在比特币中，Merkle树用于验证交易是否包含在区块中，而无需下载整个区块内容。ZFS使用Merkle树快速验证数据完整性，提供保护，防止幻象写入、磁盘固件中的错误、电源浪涌和其他原因导致的静默数据损坏。示例：验证Merkle证明：项目地址：https://github.com/antouhou/rs-merkle项目文档：https://docs.rs/rs_merkle/1.0.0/rs_merkle/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://docs.rs/rs_merkle/1.0.0/rs_merkle/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-19 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rs-merkle：一个用Rust编写的高级散列树库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Builder pattern in Rusthttps://www.greyblake.com/blog/2021-10-19-builder-pattern-in-rust/由于Rust不支持函数的可选参数和具名参数，也不支持函数重载，建造者模式在Rust中被广泛使用。以下是一个使用建造者模式创建一个User结构体的代码示例：要点："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-19 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在Rust中使用建造者模式"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Another terminal multiplexer for team leads.https://www.reddit.com/r/rust/comments/qb71h8/another_terminal_multiplexer_for_team_leads/sila - 读作[shila]，巴利语中代表「道德」；这是一个简单的终端多路复用器，用rust编写，使用yaml格式的配置文件配置项目。基本用法：项目地址：https://github.com/alxolr/silaRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/alxolr/sila"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-19 20:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sila: 另一个用于团队指导的终端多路复用器。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是 介绍 Rust 中六边形架构实践的一系列文章中的第 7 篇： Long-lived repositories。之前的的系列如下：\n#1 - Domain\n#2 - In-memory repository\n#3 - HTTP API\n#4 - Refactoring\n#5 - Remaining use-cases\n#6 - CLI\n强烈推荐.原文连接https://alexis-lozano.com/hexagonal-architecture-in-rust-7/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-18 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的六边形架构：7. Long-lived repositories"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Vial是一个小型web框架，用于在Rust中创建小型web“站点”。它只包含一些用于交付老式的、服务器端呈现的HTML的基本特性:请求路由、表单数据解析、响应构建和提供静态文件资产。我们的目标是一个小型的、精简的核心，它能够快速编译，并且具有尽可能少的依赖性。将其用于HTML内容:创建想法原型，测试概念，或者甚至编写小型个人应用程序.原文连接https://vial.rs/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-18 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Vial: 一个微型 web 框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"从9月8日到10月7日，OpenSUSE帮助我主持了一个关于开发人员如何在他们的环境中使用Rust的调查。作为SUSE和OpenSUSE中Rust包的维护者，对我来说，更好地了解人们如何使用Rust是很重要的，这样我们才能做出符合社区工作方式的决定。所有的数据都可以在这里找到原文连接https://fy.blackhats.net.au/blog/html/2021/10/08/results_from_the_opensuse_2021_rust_survey.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-18 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OpenSUSE 2021 Rust Survey的结果"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SixtyFPS是一个工具包，可以有效地为任何显示器开发流畅的图形用户界面:嵌入式设备和桌面应用程序。我们支持多种编程语言，如 Rust, c++和JavaScript。我们的设计目标是:\n轻量级: 只需要几百千字节的RAM，并且不需要太多的处理能力。\n简单明了: 程序员和设计师应该感到高效，能够享受设计和开发过程。不管目标语言是什么，api都应该是一致的、易于使用的和直观的。高质量的文档应该描述api，教授概念和如何使用它们。\n本机: 我们支持许多不同的目标平台，从嵌入式设备到桌面，包括移动和网络。用户和开发人员都应该对每个平台感到熟悉。外观、感觉和体验应该符合用户对本机应用程序的期望。\ngithub地址https://github.com/sixtyfpsui/sixtyfps--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-18 20:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sixtyfps: 一个高效的GUI开发工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一些编程语言，如 Java 或 Scala，提供了不止一种方式来表达“lack of value”的概念。传统上，一个特殊的null值用于表示根本不引用任何值的引用。然而，随着时间的推移，我们了解到使用null 可能非常容易出错，并且会导致许多麻烦，例如 NullPointerException在最意想不到的时刻出现错误使程序崩溃。因此，现代编程风格建议null尽可能避免使用更好的Option,Optional或Maybe数据类型（在很多语言中叫法不同，但概念是一样的）。不幸的是，人们认为 Java 中的可选值可能会带来性能损失。在这篇博文中，我将尝试回答是否属实，如果性能惩罚真的存在，那么严重程度如何。文章链接，https://pkolaczk.github.io/overhead-of-optional/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://pkolaczk.github.io/overhead-of-optional/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-16 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在java和rust中返回Optional的开销对比"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用Criterion.rs和火焰图进行性能调优。性能是开发人员选择应用程序的首要原因之一。事实上，这是Rust-lang.org主页“为什么选择Rust？”部分列出的第一个原因，甚至要排在在内存安全之前。这也是有充分理由的——许多基准测试表明，用Rust编写的软件速度很快，有时甚至是最快的。不过，这并不意味着所有用Rust编写的东西都能保证速度。文章链接，https://patrickfreed.github.io/rust/2021/10/15/making-slow-rust-code-fast.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://patrickfreed.github.io/rust/2021/10/15/making-slow-rust-code-fast.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-16 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"让你的rust代码变得更快"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"onetun在您的本地系统上打开一个TCP端口，流量从该端口转发到WireGuard网络中对等方的TCP端口。它不需要对操作系统的网络接口进行任何更改：您不需要拥有root访问权限，也不需要在本地系统上安装任何WireGuard工具即可使其正常工作。唯一的先决条件是在远程WireGuard端点上注册对等IP和公钥；这些是WireGuard端点信任onetun对等点和路由数据包所必需的。Gitlab 链接，https://github.com/aramperes/onetun文章链接，https://www.reddit.com/r/rust/comments/q92cu4/onetun_crossplatform_userspace_wireguard/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/q92cu4/onetun_crossplatform_userspace_wireguard/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-16 20:23"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"onetun：跨平台、用户空间WireGuard端口转发器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"值得一提的是，这个项目并没有用到区块链，但是其号称实现了零信任 zero-trust，相关领域的同学可以关注一下。它怎样工作的：https://redact.ws/how-it-works仓库：https://github.com/pauwels-labs/redact-client"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/pauwels-labs/redact-client"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-13 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"redact: 构建去中心化的、端到端加密的网站的工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://www.youtube.com/watch?v=bnnacleqg6k"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.youtube.com/watch?v=bnnacleqg6k"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-13 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"福利：Rust中的类型驱动API设计 视频讲解"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://youtube.com/watch?v=rDoqT-a6UFghttps://youtube.com/watch?v=rDoqT-a6UFg&feature=share"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-13 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"福利：Rust数据类型的内存布局可视化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它是 MeiliSearch 和 ElasticSearch 的竞品。其基于 tokio-rs，hyper 和 tantivy 进行开发。提供 REST 接口。现已发布 v0.6 版。持续关注。https://github.com/lnx-search/lnx"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lnx-search/lnx"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-13 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lnx: 一个基于 tantivy 的搜索引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Substrate 全球开发者最重要的开发者大会。https://sub0.substrate.io/program/--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://sub0.substrate.io/program/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-13 23:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sub0大会开始：柏林时间 13~14日"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"想要结合Flutter 和 Rust 之间的优点吗?这里来了!特性:\n内存安全\n类型支持\n零拷贝\n异步编程\n易于使用\n轻量\n易于代码评审\nPrue-Dart 兼容\ngithub 地址https://github.com/fzyzcjy/flutter_rust_bridge"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-11 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Dart/Flutter <–> Rust binding 开源了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Phantom 类型是在运行时中从不使用的类型，但有助于在编译时强制执行某些约束。对其感兴趣的同学可以通过本文一探究竟.原文链接https://www.greyblake.com/blog/2021-10-11-phantom-types-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-11 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust中的 Phantom 类型 👻"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者: 这篇文章是给像我这样的新手 开始使用PIC32 和 Rust进行编程的。所以本文的步骤非常的详尽, 感兴趣的小伙伴可以跟着动手试试.原文链接https://gill.net.in/posts/pic32-blink-led-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-11 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 进行 PIC32 单片机编程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"WasmEdge 集Rust的性能和JavaScript的易用性于一身在我的前一篇文章中，我讨论了如何将JavaScript代码嵌入Rust程序。然而，对于JavaScript开发人员来说，需要的往往是相反的——将Rust函数合并到JavaScript api中。这使得开发人员可以用“纯JavaScript”编写程序，同时还可以利用Rust的高性能功能。使用WasmEdge Runtime，您可以做到这一点。原文链接https://www.secondstate.io/articles/embed-rust-in-javascript/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-11 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 编写高性能的 javascript API"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者: 你好!我是一名倾向于函数式编程的Java开发人员，这也是我了解Rust的原因。随着时间的推移，我开始喜欢《Rust》，所以我做了笔记以快速参考。现在，我觉得我已经学到了足够多的关于Rust的知识，也记录了足够多的文档，所以我想在reddit的这个子版块分享一下git仓库.github地址https://github.com/sumeetdas/succinct-rust--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-11 20:37"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Java 开发者分享的 Rust 学习笔记"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Databend 旨在成为一个开源的弹性可靠云仓库，它提供极快的查询，并结合了云的弹性、简单性、低成本，旨在使数据云变得容易。Databend 受 ClickHouse 启发，计算模型基于 apache-arrow，主要包括三个组件：https://github.com/clickhouse/clickhouse\nmeta service 层\n计算层\n存储层\n结构如下图所示：官网：GitHub：datafuselabs/databend: An elastic and reliable Cloud Data Warehouse, offers Blazing Fast Query and combines Elasticity, Simplicity, Low cost of the Cloud, built to make the Data Cloud easyhttps://github.com/datafuselabs/databend"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Databend: 弹性可靠高效的云仓库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 没有使用垃圾回收器，而是借助精密、复杂的类型系统，这样做使得 Rust 很高效，但相对难以学习和使用。本文作者们为 Rust 设计了一个可选的基于库的垃圾回收器。为了验证效果，文章对来自 633 人班级的志愿者进行了一项随机对照试验，总共收集了 428 名学生的数据。结果发现，对于需要管理复杂别名的任务，使用垃圾回收器的用户更有可能在可用时间内完成任务，而完成任务的用户只需要大约三分之一的时间（4 小时与 12 小时）。将来希望扩展 Bronze 跟踪器以跟踪可能传递地包含对 GC 对象引用的任意对象。还希望调查使用 GC 的影响，不仅是针对复杂的别名场景，而且是为了减轻总体所有权的影响；也许这样做可以使学习曲线变平，并且帮助用户更积极地使用 Rust。很有意思的想法，详细可阅读下方论文。作者主页：Michael Coblenzhttp://www.cs.umd.edu/~mcoblenz/Paper：Does the Bronze Garbage Collector Make Rust Easier to Use? A Controlled Experimenthttps://arxiv.org/pdf/2110.01098.pdfGitHub：mcoblenz/Bronzehttps://github.com/mcoblenz/Bronze/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Bronze: Rust 垃圾回收器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust-to-Rust ffi，标准类型的 ffi-safe 等价物，并创建在启动时加载的库。对于 Rust-to-Rust ffi，重点是创建在程序启动时加载的库，以及加载时类型检查。这个库允许定义可以在运行时加载的 Rust 库，即使它们是使用与依赖它的 crate 不同的 Rust 版本构建的。相关文章：Plugins in Rust: Diving into Dynamic Loading | NullDerefhttps://nullderef.com/blog/plugin-dynload/GitHub：rodrimati1992/abi_stable_crates: Rust-to-Rust ffi,ffi-safe equivalents of std types,and creating libraries loaded at startup.https://github.com/rodrimati1992/abi_stable_crates/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"abi_stable: 动态加载"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"每次开发时自动执行：\n带缓存的 CI：检查、测试、代码风格\n推送新标签时自动执行：\n构建多平台二进制文件\n创建 GitHub 版本\n更新 Homebrew\nGitHub: SpectralOps/rust-ci-release-template: A Github Actions based CI release template for Rust binarieshttps://github.com/SpectralOps/rust-ci-release-template"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-ci-release-template: Rust 二进制 CI 发布模板"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"bkt 是一个子进程缓存实用程序，可用作命令行二进制文件和 Rust 库。在 shell 提示、交互式应用程序（例如 fzf）和轮询其他进程的长时间运行的程序中非常有用。GitHub：dimo414/bkt: bkt is a subprocess caching utility, available as a command line binary and a Rust library.https://github.com/dimo414/bkt"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bkt: 子进程缓存工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"支持以下格式：\nGzip\nZlib\nMgzip\nBGZF\nRaw Deflate\nSnap\n安装使用GitHub：sstadick/crabz: Like pigz, but rusthttps://github.com/sstadick/crabz"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"crabz: 跨平台、快速压缩和解压缩工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个用于 Minecraft 服务器的在线/离线全功能代理。基于为 Minecraft 1.8+ 优化的、定制的数据包解析器，通过以流方式解析数据包而不是一次性加载到内存来最大限度地减少内存使用。包含客户端和服务器。GitHub: 101arrowz/mc-proxy: Minecraft proxyhttps://github.com/101arrowz/mc-proxy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"mc-proxy: Minecraft 多人代理和拦截器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"已经有一段时间没有了解 Polkadot / Substrate，但他们创建互操作区块链（在 Polkadot 中称为 “平行链”）生态系统的雄心勃勃的计划每个月都在加快推进。最近一些有趣的 Substrate 项目：\nPontem - the Experimentation Platform for Diem：Pontem 不是 Diem，而是一个运行 Move VM 的网络，构建在 Substrate 上。\nSubspace Network：白皮书声称解决了所谓的农民困境。\nCrust - Chain to Decentralized Cloud：一种分布式加密 IPFS 固定服务，依赖于可信执行环境来验证用户空间是否在其 “有意义的工作证明” 共识算法下执行其计算和存储职责。\n网址：RiB Newsletter #28 - Rust in Blockchain ❤ rib.rshttps://rustinblockchain.org/newsletters/rib-newsletter-28/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust In Blockchain 28 期"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n关于架构：Alexis Lozano\nRust 和创业公司：Building a startup with Rust | Synth\nRust 与 Kotlin：What Rust could learn from Kotlin | by Cédric Beust | Oct, 2021 | Medium\n如何为 Rust 项目写 Dockerfile：Writing dockerfile in rust project | windsoilder.github.io\n形式程序验证与 SMT：Introduction - Verification For Dummies: SMT and Induction by OCamlPro\nRust Mock：faux - faux\n使用 Rust 进行 kernel 开发：Using Rust for kernel development [LWN.net]\nRust Linux Kernel 系列文章：So You Want to Rust the Linux Kernel? - Paul E. McKenney's Journal — LiveJournal\n如何构建具有副作用的快速、分布式和灵活的分析管道：Spark and Rust - How to Build Fast, Distributed and Flexible Analytics Pipelines with Side Effects\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-10 23:09"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"文章/书籍推荐"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Android平台提供了对用Rust开发本地操作系统组件的支持。\n\nAndroid Rust 模块 ： https://source.android.com/setup/build/rust/building-rust-modules/android-rust-modules\n\n\nhello Rust example: https://source.android.com/setup/build/rust/building-rust-modules/hello-rust-example\n\n\nAndroid Rust 模式: https://source.android.com/setup/build/rust/building-rust-modules/android-rust-patterns\n\nAndroid Rust 模块 ： https://source.android.com/setup/build/rust/building-rust-modules/android-rust-moduleshello Rust example: https://source.android.com/setup/build/rust/building-rust-modules/hello-rust-exampleAndroid Rust 模式: https://source.android.com/setup/build/rust/building-rust-modules/android-rust-patterns还有其他模块介绍，详细请看：https://source.android.com/setup/build/rust/building-rust-modules/overview"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-09 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【官方】安卓团队正式介绍 Android Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#[cfg()] 信息现在将出现在文档中（默认情况下不再需要使用 #[doc(cfg())]！）https://github.com/rust-lang/rust/pull/89596P.S  Rustdoc team leader Guillaume Gomez 将在 RustChinaConf 2021 大会上有精彩分享"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-09 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"一个实用的  rustdoc 改进刚刚在 nightly 中合并"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Relm4，建立在 gtk4-rs 基础上，使开发更易用、更简单、更快速。博客链接，https://aaronerhardt.github.io/blog/posts/announcing_relm4_v0.2/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://aaronerhardt.github.io/blog/posts/announcing_relm4_v0.2/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-09 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Relm4 v0.2"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"gfx-rs 是一个为 Rust 带来高效跨平台图形的项目，\nwgpu 建立在 wgpu-hal 和 naga 之上，为图形应用程序提供安全性、可访问性和便携性。\nnaga 在语言之间翻译着色器程序，包括 WGSL，提供着色器验证和转换，确保在 GPU 上运行的用户代码安全高效。\n现发布 wgpu v0.11 和 naga v0.7。博客链接，https://gfx-rs.github.io/2021/10/07/release-0.11.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://gfx-rs.github.io/2021/10/07/release-0.11.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-09 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"gfx-rs"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\nAsync\nImpl trait\nDyn upcasting\n泛型关联类型\n具体内容请看官方博客链接，https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.htmlhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-09 23:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Lang 团队 10 月更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Choi-Jungwoo"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"深挖了一下 tremor-runtime 项目背后的公司，原来是 Wayfair 。Wayfair 是美国最大的家具电商，2017 年市值就达58亿美元，前身是早在2002年就成立的CNSStores。亚马逊都吃不下它。Tremor 应该是 Wayfair 公司旗下的开源项目，已经进入 CNCF 。今年九月份还召开了一次小型的线上的 Tremor Confhttps://community.cncf.io/events/details/cncf-tremor-community-presents-tremor-con-2021去年（2020）3月份的一次分享：Rust 如何为 Wayfair 省掉数千个核心和TB级的内存的成本 ：2020-03-31-RustAndTellBerlin-functionshttps://www.tremor.rs/slides/2020-03-31-RustAndTellBerlin-functions.pdf从2018年开始， tremor 就是跑在了 wayfair生产环境中，每天处理10兆字节的数据，或每分钟100亿条消息，每秒1000万个指标。tremor 降低了成本，减少了复杂性，巩固和简化了操作环境，以激发SRE的乐趣，减少NOC的工作量，并降低运营成本。最近有一个 Rust  插件开发系列文章，也是出自 tremor 项目的 GSoC 挑战：rust-plugins ，已经发布了四篇。https://nullderef.com/series/rust-plugins/tremor-runtimehttps://github.com/tremor-rs/tremor-runtimearrow2https://github.com/jorgecarleitao/arrow2在2021年的Linux Plumbers大会上，Linux的Rust开发者们都在那里进行了许多富有成效的讨论。在维护者峰会上，Miguel Ojeda从Plumbers中走出来，在一个不同的场合谈论Rust。要怎样才能让Rust补丁被合并？他得到的答案是令人鼓舞的，即使不是完全承诺的。阅读原文https://lwn.net/Articles/870555/Rustcc论坛: 支持rss微信公众号：Rust语言中文社区https://rustcc.cn/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-08 18:47"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"expectrl 是一款自动化测试实用工具，专为交互式应用程序设计，支持：\n创建进程\n控制进程\n与进程 IO 进行交互\n示例GitHub - zhiburt/expectrl: https://github.com/zhiburt/expectrlCrates.io - expectrl: https://crates.io/crates/expectrl"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/expectrl"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-07 23:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[生态] expectrl v0.2.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"系列文章 Plugin Development Kit in Rust 在近日发布了关于动态加载的新内容。Plugins in Rust: Diving into Dynamic Loading: https://nullderef.com/blog/plugin-dynload/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nullderef.com/blog/plugin-dynload/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-07 23:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[文章] Rust 插件开发 - 深入理解动态加载"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Reddit 最近的一篇帖子中，作者回顾了曾被广泛讨论过的 Rust 的优点，并认为这可能对经验较少的程序员有益：Reddit - Rust can be good for less experienced programmers: https://www.reddit.com/r/rust/comments/q2gwse/rust_can_be_good_for_less_experienced_programmers/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/q2gwse/rust_can_be_good_for_less_experienced_programmers/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-07 23:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[观点] Rust 可能有益于经验较少的程序员"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由 Rust (bevy) 开发的自走棋游戏。https://github.com/topics/bevyReadMore:https://github.com/yopox/LD49"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/yopox/LD49"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-06 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[Rust游戏] - \"自走棋\""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"九月对于 GCC Rust 来说又是一个伟大的月份。完成了特征解析的里程碑，现在进入了控制流，它侧重于模式匹配语义。ReadMore:https://thephilbert.io/2021/10/04/gcc-rust-monthly-report-10-september-2021/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://thephilbert.io/2021/10/04/gcc-rust-monthly-report-10-september-2021/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-06 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GCC Rust 月报 #2021 九月"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Hurl是一个 HTTP 客户端，它执行以简单纯文本格式定义的 HTTP 请求。Hurl 非常好用，它可以发送 HTTP 请求，从 HTTP 响应中提取数据。如果未指定输入文件，则从标准输入读取输入。默认输出到标准输出。要输出到文件，请使用 -o 选项：默认情况下，Hurl 执行所有 HTTP 请求并输出最后一次 HTTP 调用的响应体。ReadMore:https://hurl.dev/docs/man-page.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://hurl.dev/docs/man-page.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-06 23:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Hurl - 命令行工具，简单纯文本格式定义HTTP请求"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Mimic: A Gameboy emulator written in Rust that can be played on the command linehttps://www.reddit.com/r/rust/comments/pzq52u/mimic_a_gameboy_emulator_written_in_rust_that_can/项目说明：Mimic是一款用Rust编写的开源Gameboy模拟器，可以使用命令行界面作为屏幕和输入设备。该项目试图为Gameboy制作一个易于使用和学习的模拟器，该模拟器可用于解释模拟一个系统所需的概念，而不会让读者感到不知所措。模拟器的核心逻辑完全使用safe rust 编写，没有JIT编译器，屏幕/IO逻辑与模拟器核心功能保持分离以降低复杂性。因此，它的性能并不理想，但Gameboy是一个旧系统，因此理想的性能对于全速运行游戏来说不是必要的。项目示例：俄罗斯方块：Pokemon：项目地址：https://github.com/jawline/Mimic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/jawline/Mimic"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-05 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mimic: 一款用Rust语言编写的命令行Gameboy模拟器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Boa release v0.13https://boa-dev.github.io/2021/09/30/boa-release-13.html项目说明：Boa是一个用Rust语言编写的实验性Javascript词法分析器、解析器和编译器。它可以相当容易地嵌入到Rust项目中，也可以从命令行使用。Boa的存在也是为了作为EcmaScript规范的Rust实现，我们可以在某些领域利用Rust及其奇妙的生态系统来制造一个快速、并行和安全的引擎。Boa由Jason Williams在2019年JSConf欧盟大会上首次介绍，目前官方已经实现了该语言的一部分特性。在这个版本中，Boa与ECMAScript标准的一致性已经增长到官方ECMAScript测试套件（Test262）的41.97%；已经解决了40个问题，并且合并了105个请求。此版本带来了一些新特性，例如支持从JavaScript调用Rust闭包，以提高JS和Rust之间的更好互操作性。项目地址：https://github.com/boa-dev/boa项目主页：https://boa-dev.github.io/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://boa-dev.github.io/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-05 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Boa发布v0.13"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"I created a bittorrent client in Rusthttps://www.reddit.com/r/rust/comments/pxwkdr/i_created_a_bittorrent_client_in_rust/动机首先，我喜欢Rust。该项目的创建纯粹是为了在使用Rust编写代码的过程中获得乐趣。我对我的日常使用的bittorrent客户端不满意，因此想知道从头开始创建一个新客户端需要多少工作。我把它优化到下载torrent文件既可靠又相当快的地步，我自己也用了几个月。它对我来说已经足够好了，在写这篇文章的时候，我不打算进一步扩展它，因为它对我来说是有效的。所以简而言之，它不是“功能完整”，但是“对我来说足够好”。开源的目的仅仅是希望任何人发现它有用或者想要做出贡献。支持的功能\n顺序下载;\n继续下载磁盘上已存在的文件;\n使用文件名的正则表达式选择性下载;\nDHT支持。允许磁铁链接工作，并使更多的对等点可用;\nHTTP API.\n代码特性\n基于Serde的bencode序列化/反序列化器;\n自己实现的序列化/反序列化的二进制协议。还有其他一切：）\n支持多个SHA1实现，因为这似乎是最大的性能瓶颈。默认值是openssl，因为它是我的基准测试中最快的;\n理论上rqbit所使用的库是可重用的;\n没有unsafe.\n项目地址：https://github.com/ikatson/rqbitRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ikatson/rqbit"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2021-10-05 15:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rqbit：用Rust语言编写的BitTorrent客户端"},"type":"text"}],"type":"title"}},]
