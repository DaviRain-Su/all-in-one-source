export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Apollo 正在构建软件平台帮助用户在应用程序和服务中统一 GraphQL。包括：\nApollo Studio：管理 GraphQL 生命周期的免费的端到端平台。\nApollo Federation：用于构建分布式图的行业标准开放架构。\nApollo Client/：Web 开发最流行的 GraphQL 客户端，同时也有 IOS 和 Android 端。\nApollo Server： 一个用于生产的 JavaScript GraphQL 服务器，可连接到任何微服务、API 或数据库。\nGitHub：https://github.com/apollographql/router"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-22 23:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ApolloRouter：统一GraphQL"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Privaxy 是一个 MITM HTTP代理，位于 HTTP 会话应用程序（例如 Web 浏览器和 HTTP 服务器，例如为网站提供服务的应用程序）之间。通过在两端之间建立双向隧道，Privaxy 能够基于 URL 模式阻止网络请求，并将脚本和样式注入 HTML 文档。GitHub：https://github.com/Barre/privaxy"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-22 23:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"privaxy：下一代跟踪器和广告拦截器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个私密的 AI 推理服务器，关注模型推理的隐私性。目前支持常用的自然语言和图像模型。流程大致如下：官网：https://www.mithrilsecurity.io/文章：https://blog.mithrilsecurity.io/introducing-blindai/GitHub：https://github.com/mithril-security/blindai"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-22 23:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"BlindAI：AI隐私推理"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Rust 和 WASM 写一个贪吃蛇的游戏。教程地址：https://www.youtube.com/watch?v=iR7Q_6quwSI"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-22 23:40"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"贪吃蛇游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"SeaORM，Rust实现的ORM。文档，https://www.sea-ql.org/SeaORM/docs/index"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-21 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"SeaORM v0.8.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Tauri，开发跨平台桌面应用的工具集。文档，https://tauri.studio/v1/about/intro"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-21 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tauri"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"spotify-player，终端音乐播放器。GitHub链接，https://github.com/aome510/spotify-player#introduction"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-21 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"spotify-player"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"red-monkey，Redis 故障注入代理。GitHub链接，https://github.com/Toyota-Connected-India/red-monkeyhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-21 21:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"red-monkey"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 1.61.0 stable 正式发布，赶快升级到最新稳定版本体验 Rust 带给你的强劲动力吧 :)\n支持自定义 main 函数 ExitCode\nconst fn 增强\n为 locked stdio 提供静态句柄\nAnnouncing Rust 1.61.0: https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-20 00:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.61.0 stable 正式发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cmder 旨在提供易用和可扩展的 API，并且不牺牲速度和性能。构建器接口的语法借鉴了 commander-js 。GitHub - ndaba1/cmder：https://github.com/ndaba1/cmdercrates.io - cmder: https://crates.io/crates/cmder"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/cmder"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-20 00:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cmder - 简单、轻量级和可扩展的命令行参数解析器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 443: https://this-week-in-rust.org/blog/2022/05/18/this-week-in-rust-443/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/05/18/this-week-in-rust-443/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-20 00:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 443"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个博客是用Rust生成的，没有Javascript。这篇文章将探讨这个博客是如何在性能、可访问性和SEO方面比其竞争对手Jekyll更好。ReadMore:https://blog.imbleau.com/blogging-like-a-rustacean/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.imbleau.com/blogging-like-a-rustacean/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-18 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"像rustacean一样写博客"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新功能\n\n#12253添加绑定模式提示\n\n\n\n#12244在 } 之后显示闭合提示\n\n\n\n#12274 #12275 处理文档模板辅助中的getter和 setter\n\n\n#12276改进生成 impl  Deref\n\n\n#12285实现提示的提示\n\n\n#12253添加绑定模式提示https://github.com/rust-analyzer/rust-analyzer/pull/12253#12244在 } 之后显示闭合提示https://github.com/rust-analyzer/rust-analyzer/pull/12244#12274 #12275 处理文档模板辅助中的getter和 setterhttps://github.com/rust-analyzer/rust-analyzer/pull/12274#12276改进生成 impl  Derefhttps://github.com/rust-analyzer/rust-analyzer/pull/12276#12285实现提示的提示https://github.com/rust-analyzer/rust-analyzer/pull/12285ReadMore:https://rust-analyzer.github.io/thisweek/2022/05/17/changelog-129-5.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-analyzer.github.io/thisweek/2022/05/17/changelog-129-5.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-18 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-analyzer 更新日志 #129.5"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"mook"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在终端中显示有向图ReadMore:https://github.com/Lol3rrr/termgraph)"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Lol3rrr/termgraph"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-18 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Termgraph - 在终端中显示有向图"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由 Rust社区 组织的 2022 Rust Forum 将于5月24日在线上举办。本次活动是免费的，持票人将在活动结束后不久获得录像。详情如下：https://www.skillsmatter.com/Rust Forum2022年5月24日在这场为期半天的免费活动中，我们将探索Rust的现在和未来，由Niko Matsakis、Cecile Tonglet、Diego Aranha和Katharina Fey四位独家主讲人做演讲。请在此处领取免费门票：https://events.skillsmatter.com/rust-forum-2022本次论坛主题包括：\nRust异步历史、框架和模式 —— Katharina Fey；\n在Rust中试验更快的椭圆曲线 —— Diego F. Aranha；\nRust独特的所有权概念：实例和重要性 —— Cecile Tonglet；\nRust 2024 —— Niko Matsakis\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://events.skillsmatter.com/rust-forum-2022"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-17 16:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust社区举办的2022 Rust Forum 将于5月24日在线上举办"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"padme v0.0.1 - A Gameboy emulator enginehttps://www.reddit.com/r/rust/comments/ur5rmn/padme_v001_a_gameboy_emulator_engine/Padme（Pixel As Dot-Matrix Emulator，像素点阵模拟器），padme-core是一个Gameboy模拟器引擎。它本身不依赖libstd或动态内存，这使得它更容易在任何嵌入式平台或web组件中使用。特性\nno_std\n计时器\nDMA\nCPU 反汇编程序\n带fifo的像素处理器单元\n外部屏幕\n外部串行端口\n操纵台\nRom，MBC1，MBC3\n集成测试\n音频处理器单元\nTODO\n支持MBC2、MBC4、MBC5、MBC6、MBC7\n为每个模块添加单元测试\n项目地址：https://github.com/alexlren/padme-core在线模拟器：https://padme.cc"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://padme.cc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-17 16:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"padme v0.0.1 - Gameboy模拟器引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pinging.net - An open-source website for monitoring you internet connection with a backend written in Rusthttps://www.reddit.com/r/rust/comments/ur55hj/pingingnet_an_opensource_website_for_monitoring/pinging.net 通过运行多个测试快速确定您是否在线。然后，它会通过重复测试（包括每秒一次“网络ping”）继续监控您的连接，以帮助识别间歇性网络问题。https://pinging.net/项目目标\n可信赖的不要让用户猜测网站是否因为他们的互联网而没有加载，或者网站是否关闭；\n快速网站，不要让用户等待，即使连接速度很慢；\n提供多个测试，所有这些测试都只使用浏览器；\n非技术用户可以理解；\n提供简明的教程和链接以了解更多信息；\n允许在pinging.net之外托管（例如，在私有云上）。\n非目标（目前）\n速度测试。有许多网站提供这种服务，托管成本将大幅增加。\nGitHub链接：https://github.com/benhansenslc/pinging"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/benhansenslc/pinging"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-17 16:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pinging.net - 一个通过用Rust编写的后端监控你的互联网连接的开源网站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"ls-interactive - an interactive directory browser for the terminalhttps://www.reddit.com/r/rust/comments/ur0wrn/lsinteractive_an_interactive_directory_browser/⚡ 特征\n🌟 使用箭头键在文件夹之间导航；\n🌟 使用Enter键浏览文件夹；\n🌟 使用Shift+Enter键打开终端中的文件夹（cd到文件夹）；\n🌟 使用Ctrl+Enter在文件管理器中打开文件夹；\n🌟 使用Enter键打开带有本机应用程序的文件；\n🌟 顶部按钮(📁 ..) 打开父目录；\n🌟 按Esc退出；\n🌟 键入任何内容以使用模糊搜索筛选当前文件夹内容；\n项目地址：https://github.com/Araxeus/ls-interactiveRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Araxeus/ls-interactive"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-17 16:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ls-interactive：基于终端的交互式目录浏览器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个 c 程序员学习 Rust 的视频, 今天来实现一个 LinkedList.视频链接https://www.youtube.com/watch?v=SWgv49mzDj0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-16 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 实现 LinkedList"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tabled 可以为 struct 和 enum 快速生成 各式各样的表格. 目前已经发布 0.7.0 版本.原文链接github地址https://github.com/zhiburt/tabled/blob/master/CHANGELOG.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-16 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tabled: 0.7.0 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"notan 项目旨在成为一个简单和可移植的一层, 在它上面设计和制作你自己的多媒体应用，而不用担心太多平台相关的代码。目前版本已发布 0.4.0 版本.原文链接https://github.com/Nazariglez/notan/releases/tag/v0.4.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-16 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"notan: 0.4.0 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"国外 Rust 基础学习视频, 介绍 Rust 中的基础数据类型: Integer.原文链接https://incredible.dev/watch/ind-mij-ton--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-16 19:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust数据类型: Integer"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baymax-xhl"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个使用 Rust、WebAssembly 和 Typescript 构建的协作式降价编辑器。它是 100% 免费和开源的！立即尝试：https ://letsmarkdown.comhttps://letsmarkdown.com/GitHub：https ://github.com/Cveinnt/LetsMarkdown.comhttps://github.com/Cveinnt/LetsMarkdown.com"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-15 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust、WebAssembly 和 React 构建的实时协作 Markdown 编辑器！"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baymax-xhl"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个支持反序列化/序列化 RESP3 的小型库GitHub：https://github.com/tidwall/redcon.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-15 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Redcon - 适用于 Rust 的 Redis 兼容服务器框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"baymax-xhl"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"韩语的 Easy Rust 即将完成。这将在本周完成（大部分只剩下几个异步视频）但我们必须在两周内移动，所以最后的那些将不得不等待一段时间，但足够接近让r/rust知道。如果您有任何想要学习 Rust 的韩国朋友，请随时将他们指向此处的播放列表，该列表目前有 171 个视频。https://www.reddit.com/r/rust/对创建这个播放列表的积极反应帮助我用另一种语言重新制作了整个东西，因为那里有很多人写过他们直到遇到播放列表才理解 Rust 是如何工作的。这本书确实有韩语翻译，其他几本书正在或将要翻译（我知道的 Rust in Action 和 Rust for Rustaceans 正在开发中）所以这方面也有一些改进，但视频内容真的很难在韩语中找到。大多数评论都认为在观看了几十个这样的视频后理解这本书是多么容易。Marketwise 我在韩国担任 Rust 开发人员，所以工作确实存在，我不时在 LinkedIn 上看到这里提到的公司的职位。您通常会从考虑其优点的公司或寻找了解“Go/C++/Rust”或类似选择的人的角度来看待它。这是韩国 Rust Discord 中考虑使用它的公司的一个示例：https://www.tsnlab.com/hire저희 회사에서 또 신규 직원을 모집하게 되었습니다。러스트 못 하고 C만 하셔도 괜찮습니다。(C의 한계를 느끼고 러스트로 서서히 갈아탈 예정)我们公司正在寻找另一名员工。如果你只知道 C 也没关系（我们已经感受到了只使用 C 的局限性，并且正在慢慢计划过渡到 Rust）是的，LinkedIn 的大部分职位都是关于加密的（我的工作不涉及任何加密），所以这是需要考虑的。完成所有视频后，我计划进行实时编码。上周我尝试了一个 egui 应用程序，但我可怜的笔记本电脑不能同时做四件事（OBS Studio + VS Code + Powershell + egui 应用程序在它自己的窗口中）并且每次之后都完全冻结大约20-40分钟。我发现我喜欢实时编码（无需准备！），在我得到一台更好的计算机之前，我想我会尝试一些更简单的东西，比如使用 tui 和 crossterm 的 CLI，所以只为 Powershell 提供一个额外的窗口。所以 6 月份的计划是完成剩余的视频并实时编码韩英文字处理器。我还想知道现在是否是时候开始考虑再次将 RustCon Asia 放在一起了，因为边界正在开放。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-15 12:27"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"YouTube 上的韩语 Easy Rust 基本完成"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"此版本最大的变化是 Lapce 将 GPU 后端从 Wgpu 更改为 OpenGL，以实现更好的兼容性，特别是双源混合功能使我们能够进行子像素文本渲染。除此之外，我们还通过 Swash 添加了文本整形支持。以及许多其他小错误修复和新功能（基本编辑器功能）。我们非常感谢您的反馈。。。Github 链接，https://github.com/lapce/lapce文章链接，https://www.reddit.com/r/rust/comments/uo8wl6/lapce_release_v010/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/uo8wl6/lapce_release_v010/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-14 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lapce release v0.1.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在收集有关如何为我们的 Qovery 基础架构编写 GRPC 或 Websocket 服务器的信息时，我遇到了很多资源。但是，尽管许多指南提供了对futures的深入讲解，但他们非常缺乏关于 Stream API 如何在 Rust 中工作的信息。而且，更重要的是，如何正确使用它。可悲的是，您不能对Stream视而不见。一旦你超除了的 REST API 的简单请求/响应协议，流、异步生成器等的概念就不可避免地出现了。文章链接，https://www.qovery.com/blog/a-guided-tour-of-streams-in-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.qovery.com/blog/a-guided-tour-of-streams-in-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-14 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 中的 Streams 指引"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"地震是日本等许多国家日常生活的一部分。 git-eq 是一个简单的 git 命令，可以在紧急情况下快速保存本地更改。这个项目深受 git-fire 的启发。该命令的作用：\nadd所有这些文件（即使您不在根目录中）\n使用默认消息或提供的消息commit\n...\nGithub 链接，https://github.com/jmevel/git-eq文章链接，https://www.reddit.com/r/rust/comments/upglbu/eat_sleep_rust_10_days_of_strict_quarantine_here/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/upglbu/eat_sleep_rust_10_days_of_strict_quarantine_here/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-14 22:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"git-eq：(aka git earthquake)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Druid 的作者，Raph Levien，发现即便是 Druid 架构也很难契合 Rust 这种 强类型、不允许共享可变性 的编程语言，于是决定重新尝试一些新点子，目标是做一个现代响应式（Reactive）、声明式UI（组件容易组合）并且具有高性能的架构。原博客：https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-13 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Xilem: 一个用 Rust 写 UI 的架构"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"该库通过给出与 rust_decimal 类似的库名以达到欺骗受害者依赖该库，从而达到传播恶意程序的目的。该库封装了一次 Decimal::new 函数，并且试图在该函数调用时检查是否存在 GITLAB_CI 环境变量。如果检测到 GITLAB_CI 变量，则下载一个二进制文件到 /tmp/git-updater.bin 中，但对该二进制文件的分析不可用。原文：https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-13 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rustdecimal 恶意库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"fornjot 旨在创建下一代 Code-CAD 应用，但是仍然处于早期项目状态原文：https://www.fornjot.app/blog/fornjot-0.6/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-13 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fornjot 0.6 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"huangjj27"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n引入了 rocket_db_pools 支持\n引入了 mutual TLS 和客户端证书 支持\n追加了 local_cache_once! 宏来请求本地存储\n引入了 shutdown fairings\n发布页： https://rocket.rs/v0.5-rc/news/2022-05-09-version-0.5-rc.2/变更日志：https://github.com/SergioBenitez/Rocket/blob/v0.5-rc/CHANGELOG.md#version-050-rc2-may-9-2022"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-13 22:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rocket 0.5.0-rc.2 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"去年，我在Shopify的团队实现了YJIT，一个用于CRuby的新的即时编译器（JIT），它最近作为Ruby 3.1的一部分被上游化。因为CRuby代码库是用C99实现的，所以我们也决定用C99实现YJIT，这样与CRuby代码库的其他部分的集成就会尽可能的简单。然而，我们发现用纯C语言实现JIT编译器很快就变得乏味了，而且随着我们不断为YJIT增加功能，我们发现我们项目的复杂性变得难以管理。附上reddit热评：我大体上同意你所写的，但有几个地方我觉得失败的原因不在于语言本身，而在于你打算如何使用它的文档，以及为什么它被做成这样。This is how to convert a C string to a Rust string according to Stack Overflow:(根据Stack Overflow的说法，这就是如何将C语言字符串转换为Rust字符串。)我不是这种事情的专家，但假设我没有搞砸，你更有可能看到有经验的Rust开发者这样写出同样的一系列转换。另外，Rust手册中的CStr页面在 \"将外部C语言字符串转换为Rust字符串 \"的标题下实际上提供了一个类似的例子。(用.to_string_lossy()避免unwrap或错误传播的步骤，因为它用U+FFFD REPLACEMENT CHARACTER替换了任何不是有效的UTF-8的字节。)However, it’s definitely an area where Rust prioritizes safety above ergonomics and user-friendliness(然而，这绝对是Rust公司将安全性置于人体工程学和用户友好性之上的一个领域。)在这种特殊情况下，它与安全无关，更多的是与可组合性有关。出于同样的原因，Rust有Rc<T>、Arc<T>、Mutex<T>、RWLock<T>和任何你想与之组合的第三方东西，而不是ArcMutex<T>等等，没有hello().to_string_panicking()将这一系列的检查和转换结合到一个函数中。）The unsafe blocks act as a trap door into a universe where the rules of the Rust type system aren’t enforced.(unsafe块就像一扇陷阱之门，进入一个不遵守Rust类型系统规则的宇宙。)这篇文章是给Rust老手看的，但实际上一直在试图纠正新手对不安全区块的一个常见误解，你的措辞就是这样的：unsafe并没有放松对现有语言结构的任何检查，也没有取消对如何使用它们的任何要求。它只是允许你访问额外的语言特性。无论你是否使用as和raw指针强行为同一分配创建第二个&mut，LLVM IR仍然会得到noalias这样的注解，因此，仍然会调用未定义行为(Undefined Behaviour)，所以说unsafe不遵守这些规则，有点像暗示你可以走到高速公路上，因为unsafe拆除了安全栅栏。(有时公路工人需要在公路上工作，但如果你在一个视野盲区的拐角处放置 \"道路封闭标志 \"并认为你现在是安全的，那么人类走到公路上的能力并不能神奇地阻止各种汽车向你飞来)Why do I need to wrap every C function call into an unsafe block?(为什么我需要把每个C函数的调用都包装成一个unsafe的块？)这样做的话，如果有什么东西发生故障或损坏，grep unsafe可以为你指出正确的方向，而对PR的审计也知道应该把最多的注意力放在哪里。The Rust compiler knows I’m calling a C function and that this function doesn’t follow the Rust typing rules. Am I really telling the compiler anything by wrapping each individual C function call into an unsafe block? A C function call is by definition “unsafe”, I shouldn’t have to tell the Rust compiler that. Having to write unsafe every time I call a C function seems like it adds unnecessary friction. A constant reminder that the Rust compiler is"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://shopify.engineering/porting-yjit-ruby-compiler-to-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-12 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[博文] 我们将YJIT Ruby编译器移植到Rust的经验"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"空气中闪烁着期待的光芒，今年最受欢迎的编程语言会是谁呢？地址: https://stackoverflow.blog/2022/05/11/stack-overflow-2022-developer-survey-is-open/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://stackoverflow.blog/2022/05/11/stack-overflow-2022-developer-survey-is-open/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-12 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2022年StackOverflow开发者调查已经开始"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是我比较C++和Rust的系列博客的下一篇文章，作为一个有多年低延迟系统C++程序员经验的人，现在已经非常喜欢Rust。这篇文章的重点是C++程序员普遍声称它是多范式的，以及这实际上是一个问题，因为C++的特性会相互冲突。通常情况下，当人们宣称C++的特性相互冲突时，他们并没有完全证实这一说法。博文: https://www.thecodedmessage.com/posts/2022-05-11-programming-multiparadigm/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.thecodedmessage.com/posts/2022-05-11-programming-multiparadigm/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-12 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"[博文] C++中的多范式其实很糟糕"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 442: https://this-week-in-rust.org/blog/2022/05/11/this-week-in-rust-442/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/05/11/this-week-in-rust-442/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-12 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 442"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cargo-hackerman 是最近发布的一个实用工具，主要用于解决以下问题：可以通过 cargo install cargo-hackerman 的方式快捷安装，详细使用方式可以查看官方文档github 仓库地址cargo 地址https://github.com/pacak/hackerman"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-10 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-hackerman 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"由于 Rust stable 版本中的 const 泛型还缺少一些重要的特性，因此无法完全替代 generic-array 这样的第三方库。hybrid-array 从头开始设计，将 const 泛型和 typenum 相结合，既具备 typenum 的丰富表达力，又具备将数组大小常量指定为关联类型的能力。同时，hybrid-array 是 100% 安全代码！Enjoy it！https://github.com/fizyk20/generic-arraygithub 仓库地址https://github.com/RustCrypto/utils/tree/master/hybrid-array"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-10 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hybrid-array 发布 v0.1 版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"koavf 在 Azure 存储组工作，近日他在 reddit 上发起了 \"Rust is hard, but does it matter?\" 的讨论，并且附上了他的观点，同时引起了广泛的讨论，来看看他是怎么结合工作来看待这一问题的吧。原文链接https://jmmv.dev/2022/05/rust-is-hard-but-does-it-matter.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-10 18:22"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 很难，值得吗？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"遇到 段错误 不要慌, 作者带你来解锁段错误的所有神秘之处.原文链接https://luqman.ca/blog/achievement-unlocked-rustc-segfault/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-09 20:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"成就解锁: rustc segfault"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者最近想在自己的  OpenWrt 路由器上运行 Rust 程序, 于是写了一个简单的 dns client, 并且成功在 OpenWrt上运行.原文链接https://blog.dend.ro/building-rust-for-routers/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-09 20:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为 OpenWrt 路由器编译 Rust 代码程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Recursive Descent Parser 是一种自上而下的解析器实现方式. 本来通过 Rust 来介绍如何实现该种解析器.原文链接https://www.huy.rocks/everyday/05-08-2022-parsing-recursive-descent-parser"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-09 20:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Recursive Descent Parser"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Pointless 是一块无尽的画布, 可以当做白板使用. 使用 Tauri 和 React 构建.github 地址https://github.com/kkoomen/pointless"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-09 20:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pointless: 无尽的画布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"DLHN 是一个超快的小数据序列化结构库.github地址https://github.com/otake84/dlhn--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-09 20:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"DLHN: 一个超快的小数据序列化结构库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用真实数据 seed 开发数据库，同时保证敏感数据的安全。特点如下：\n支持 PostgreSQL，MySQL，MongoDB 的数据备份和存储。\n用虚假数据替换敏感数据。\n适用于大型数据库（>10GB）。\n数据库子集化：将生产数据自动缩小的合理大小。\n一行命令使用生产数据启动本地数据库。\n动态数据（解）压缩\n即时数据加解密。\n完全无状态（无服务器、无守护进程）和轻量级的二进制文件。\n使用自定义转换器。\n主页：https://www.replibyte.com/Demo：https://www.youtube.com/watch?v=IKeLnZvECQwGitHub：https://github.com/Qovery/replibyte"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-08 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"replibyte"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用方法：\n-l：列出的目录层级，默认所有的\n-p：忽略的目录\n-s：排序规则\nGitHub：https://github.com/solidiquis/erdtree"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-08 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"erdtree"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用于快速矩阵乘法的希尔伯特曲线（单线程），文章主要关注二维矩阵，及如何提高执行速度。文章地址：https://github.com/TC5027/blog/blob/master/hilbert.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-08 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"快速矩阵乘法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"磁盘对象存储垃圾回收，支持更高级别的 KV 存储和数据库。支持 4 个方法：\nread：专为低延迟、并发读取对象设计。\nwrite_batch：专为大容量、高吞吐量的写入设计，适合将预写日志压缩为特定对象的一组更新。除了元数据更新的短暂瞬间，不会阻止 read。\nmaintenance：压缩已经碎片化的备份存储文件，会阻止 write_batch 的并发调用。\nfile_statistics：返回备份存储文件中活动对象和总对象的统计信息。\nGitHub：https://github.com/komora-io/marble"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-08 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"marble"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust + Wasm 的 Go 语言 Playground，是个不错的 Wasm 实践。地址：https://github.com/oxfeeefeee/goscript-playgroundGitHub：https://github.com/oxfeeefeee/goscript-playground"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-08 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"go-script playgroud"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 是构建 Kubernets 生态系统的好语言吗？本次分享将探讨这一问题。包括：\nRust VS Golang 用于 k8s 的使用案例\nRust 相对于 Golang 的优势\nRust 的理想 Kubernets 使用案例\n真实的案例\nDevOps 和 k8s 的 Rust 生态状态\n视频：https://www.youtube.com/watch?v=9icztoT4JVs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-08 23:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust与k8s生态"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-osdev组织下的项目更新\nx86_64\nuefi-rs\nbootloader\nmultiboot2\nmultboot2-header\nuart_16550\nvolatile\nxhci\n其它项目更新\nrust-embedded/rust-raspberrypi-OS-tutorials\nmetta-systems/vesper\nphil-opp/blog_os\n详细月报链接，https://rust-osdev.com/this-month/2022-04/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://rust-osdev.com/this-month/2022-04/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-07 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust OSDev 四月月报"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Fornjot，Rust 实现的CAD。V0.6版本说明链接，https://github.com/hannobraun/Fornjot/releases/tag/v0.6.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/hannobraun/Fornjot/releases/tag/v0.6.0"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-07 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fornjot v0.6"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rtree.rs，Rust 实现的快速 R-tree，其移植自 Tile38 中的实现。https://github.com/tidwall/tile38Github 链接，https://github.com/tidwall/rtree.rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/tidwall/rtree.rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-07 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"R-tree 的 Rust 实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Goscript，一个Go playground，通过使用 Rust + Wasm 提供支持。https://goscript.dev/Github 链接，https://github.com/oxfeeefeee/goscript-playgroundhttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/oxfeeefeee/goscript-playground"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-07 23:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust+WASM 实现的Go playground"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"文章介绍了如何用 Rust 构建爬虫抓取和解析 HTML，\nhttps://kerkour.com/rust-crawler-scraping-and-parsing-html\n事实证明，几十年来，我们在输出无 bug 程序方面表现不佳。试图去寻找“银弹”逻辑的计算机程序似乎注定要失败。代码审查是一个比较好的解决办法，虽然代码审查的实践还在逐步进行，尤其是在开源文化成为主导的情况下，但情况仍然不是太乐观：原因是因为它需要花费大量时间和金钱。相反，如果我们可以有一个伙伴，随时可用，永不疲倦，并且锦上添花，这不会花费开发人员的薪水，这将帮助我们在软件投入生产之前避免软件中的错误？让我们看看现代编译器和类型系统如何帮助防止许多错误，从而帮助提高每个人的安全性并降低软件生产和维护的成本。Rust 强制执行RAII（资源获取即初始化），这使得泄漏资源几乎是不可能的：它们在被丢弃时会自动关闭。到现在为止还挺好。但是当我们想要处理许多项目时，事情可能会很快变得非常糟糕我们刚刚创建了一个死锁，因为互斥锁没有在预期的时候释放，而是在函数结束时释放。同样，Rust 中的 RAII 有助于防止未释放的互斥锁：假设我们正在跟踪在线商店中产品的状态：但是，如果我们添加了 StatusArchived Status = 3 变量而忘记更新这条 switch 语句，编译器仍然很乐意接受程序并让我们引入一个错误。在 Rust 中，非穷举 match 会产生编译时错误：据我所知，不可能在安全的 Rust 中创建对无效地址的引用。甚至更好的做法是，你不必使用 null 指针来表示不存在的东西，因为 Rust 有 Option 枚举。假设我们正在处理用户帐户：很好，但是现在，我们需要添加字段 AllowedStorage int64 到 User 结构中。如果我们忘记更新CreateUser函数，编译器仍然会愉快地接受代码而不做任何更改并使用int64:的默认值0，这可能不是我们想要的。而下面的 Rust 代码会产生一个编译时错误以上是部分例子，但智能编译器是错误和代码审查的终结吗？答案当然不是！但是强大的类型系统和相关的编译器是任何想要大幅减少软件中的错误数量并让用户/客户满意的人的首选武器。\nhttps://kerkour.com/bugs-rust-compiler-helps-prevent\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-06 21:38"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Kani Rust Verifier（简称 Kani）发布了第一版，这是一个用于证明 Rust 代码属性的开源自动推理工具。像其他自动推理工具一样，Kani 提供了一种使用数学技术明确检查代码的属性在任何情况下是否为真的方法。通过这种方式，Kani 可以帮助您用更少的 bug 编写更好的软件。https://github.com/model-checking/kani/releasesGithub - model-checking/kani：https://github.com/model-checking/kaniAnnouncing the Kani Rust Verifier Project：https://model-checking.github.io/kani-verifier-blog/2022/05/04/announcing-the-kani-rust-verifier-project.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://model-checking.github.io/kani-verifier-blog/2022/05/04/announcing-the-kani-rust-verifier-project.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-05 23:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Kani Rust Verifier 发布了第一版"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇博客文章的目的是试图想象一个拥有 GATs 的“光明未来”。考虑了一些人们希望使用 GATs 的模式，以及如何将 GATs 整合进标准库的 traits 中，以及一些暂时不起作用但期望未来能够有用的问题。尽管现在 GATs 仍然有一些已知的缺点，但是没关系。GATs 已经很强大了，正如你将看到的，这里也提到一些关于如何使它们在未来变得更强大和符合人体工程学的想法。A shiny future with GATs： https://jackh726.github.io/rust/2022/05/04/a-shiny-future-with-gats.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://jackh726.github.io/rust/2022/05/04/a-shiny-future-with-gats.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-05 23:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"文章 - GAT 的光明未来"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 441: https://this-week-in-rust.org/blog/2022/05/04/this-week-in-rust-441/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/05/04/this-week-in-rust-441/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-05 23:50"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 441"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Single Page Applications using Rusthttps://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/WebAssembly（wasm）允许用JavaScript以外的语言编写的代码在浏览器上运行。如果你没有注意到，所有主要的浏览器都支持wasm，全球超过90%的用户都有可以运行wasm的浏览器。由于Rust编译成wasm，那么是否有可能纯粹在Rust中构建SPA（单页应用程序），而不编写一行JavaScript？简而言之，答案是肯定的！在这篇博客中，我们将建立一个名为“RustMart”的简单电子商务网站，该网站将有两个页面：\n主页：列出客户可以添加到购物车中的所有商品；\n商品详情页：单击商品卡时显示商品详细信息；\n作者使用这个例子是为了测试建造现代SPA（单页应用程序）所需的最低能力：\n在多个页面之间导航，无需重新加载页面；\n在不重新加载页面的情况下发出网络请求；\n跨多个页面重用UI组件的能力；\n更新UI层次结构不同层中的组件；\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-03 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust构建单页应用程序"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust-protobuf 3.0https://www.reddit.com/r/rust/comments/ugn1cy/rustprotobuf_30/rust-protobuf 3.0已发布，与版本2相比，最大的变化是：\n完整的运行时反射（例如，按名称查找字段并设置字段值）；\n基于运行时反射，根据protobuf JSON映射规范对JSON映射的原生支持（即使可能，也很难用serde正确实现）；\n动态消息（从.proto文件创建描述符，无需生成代码；检查它们、实例化消息、编辑消息、写/读等）；\nrust-protobuf最大的缺失特征是：\n消息的arena分配。有些人要求它，但不清楚如何实现（保持API符合人体工程学，保持API安全等）；这将是一个重要的项目。\n项目地址：https://github.com/stepancheg/rust-protobuf/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/stepancheg/rust-protobuf/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-03 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-protobuf 3.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"odd-cat"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Version 0.9.0 of the u/rustlang Kafka client library has been releasedhttps://www.reddit.com/r/rust/comments/ugzc3o/version_090_of_the_urustlang_kafka_client_library/项目地址：https://github.com/kafka-rust/kafka-rustRust.cc 论坛: 支持 rsshttps://rustcc.cn/微信公众号：Rust 语言中文社区https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/kafka-rust/kafka-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-03 19:45"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kafka-rust：Apache Kafka的Rust客户端 V0.9.0 版本已经发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者最近花了几天时间调整 Nushell 的 GitHub Actions CI pipeline，结果得到了回报: CI过去大约需要30分钟，现在接近10分钟.主要通过以下手段加速:\n使用 Rust cache\n将 build 和 test 分开\n在 cargo build 之后再运行 clippy\n使用 cargo nextest\n原文链接https://www.reillywood.com/blog/rust-faster-ci/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-02 18:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"让 Rust 的 CI 加速 2~3倍速度"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GAT 是一个未稳定的特性,可能会在未来的几个版本中稳定下来, 他可以让我们写出如下代码. 本文探讨了一些更好的替代方案的可能性.原文链接https://sabrinajewson.org/blog/the-better-alternative-to-lifetime-gats"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-02 18:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Lifetime GAT 更好的替代方案"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用 Rust 和模板构建一个简单的静态网站.原文链接https://kerkour.com/rust-static-site-generator"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-02 18:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"100 行 Rust 代码构建一个静态网站"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"egui 是一个使用 Rust 编写的 简单、快速、高度可移植的即时模式GUI库。Egui可以在网页上原生运行，也可以在你最喜欢的游戏引擎中运行。目前 0.18.1 版本发布了.原文链接https://github.com/emilk/egui/blob/master/CHANGELOG.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-02 18:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"egui: 0.18.1 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rmodbus 是一个构建快速可靠的modbus驱动的应用程序的框架。原文链接https://github.com/alttch/rmodbus--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-02 18:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rmodbus: 0.6 版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用Rust写了一个简单的 git trophy 生成器.它类似于https://skyline.github.com/，但它可以离线工作。Github链接:：https ://github.com/PicoJr/git-trophy 。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-01 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用 Rust 编写的 git trophy"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个新版本有一些新功能可能会让开发人员感兴趣，他们正在研究持续分析。即通过线程id和线程名拆分profile；以及在线程内分析程序特定部分的能力（它也适用于 Tokio 和 Async）。该库实际上并没有进行任何分析（Rust 的分析器是 pprof-rs：https ://github.com/tikv/pprof-rs ），但它的目标是管理分析器返回的数据（在后端抽象）和将此数据发送到 Pyroscope 服务器（或导出到火焰图，尽管这是在命令行应用程序中实现的）。https://github.com/tikv/pprof-rs对于多线程示例，您可以查看此处：https ://github.com/pyroscope-io/pyroscope-rs/blob/main/examples/multi-thread.rshttps://github.com/pyroscope-io/pyroscope-rs/blob/main/examples/multi-thread.rs对于分析结果的样子：Github链接:https ://github.com/pyroscope-io/pyroscope-rshttps://github.com/pyroscope-io/pyroscope-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-05-01 22:44"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Pyroscope Profiler 0.5 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust BSON 库（bson crate）的 2.2.0 版本引入了一个“原始”BSON API，它使我们能够在 Rust MongoDB 驱动程序（mongodb crate）中实现一些内部性能改进，并且在某些情况下，可以用户利用它来显着提高查询性能，包括通过使用 serde 的零拷贝反序列化功能。在这篇文章中，我将演示如何使用这个新的 API，并提供一些例子来说明它可以帮助你加快阅读速度。文章链接，https://patrickfreed.github.io/rust/2022/04/27/unlocking-greater-performance-in-the-mongodb-rust-driver-via-raw-bson-and-zero-copy-deserialization.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://patrickfreed.github.io/rust/2022/04/27/unlocking-greater-performance-in-the-mongodb-rust-driver-via-raw-bson-and-zero-copy-deserialization.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-30 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过 BSON 和零拷贝反序列化在 MongoDB Rust 驱动程序中解锁更高的性能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个轻量级库，可帮助您检测生成的异步任务的失败情况，而无需 .await 其句柄。当您产生大量的任务但希望在发生问题时快速失败的时候很有用。Github 链接，https://github.com/kkaatii/pandet/文章链接，https://crates.io/crates/pandet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://crates.io/crates/pandet"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-30 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pandet (v0.1.1)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"binarytom"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Accord 是一个基于 TCP 的即时消息聊天系统，使用 Rust 编写。目标是保持极简主义，但不以牺牲可用性为代价。Github 链接，https://github.com/loipesmas/accord文章链接，https://www.reddit.com/r/rust/comments/ueuhtn/i_offer_you_accord_v010/https://rustcc.cn/blog_with_author?author_id=dd4a77ca-2042-459e-901a-b8f9bfeb7db0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/ueuhtn/i_offer_you_accord_v010/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-30 22:48"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"accord (v0.1.0)"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Shuttle 是一个开源应用程序平台，它使用 traits 和注释来配置您的后端部署。\n快速开始\n依赖shuttle-service于Cargo.toml：\n并确保您的 Crate 有一个 cdylib 输出目标：\n简单使用示例\n完整的示例可以在github中找到https://github.com/shuttle-hq/shuttle/tree/main/examples/rocket\n部署\n您的服务将立即在{crate_name}.shuttleapp.rs. 例如：\nhttps://docs.rs/shuttle-service/latest/shuttle_service/\nPulsar Rust 客户端。\nhttps://github.com/wyyerd/pulsar-rs\nconsdb 社区优秀 Rust 持续学习计划，用 Rust 构建时序数据库系列内容。\nhttps://github.com/cnosdb/presentations/tree/main/Use%20Rust%20To%20Make%20A%20TSDB\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-29 23:36"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"jaq专注于三个目标:\n\n正确性：jaq的目标是为jq提供一个更正确和可预测的实现，同时在大多数情况下保持与jq的兼容性。\n\n\n性能。我创建jaq的初衷是为了解决jq启动时间长的问题，在我的机器上，启动时间约为50ms。这在处理大量小文件时尤其明显。jaq的启动速度是jq的30倍，在许多其他基准测试中也优于jq。\n\n\n简单性：jaq的目标是拥有一个简单而小的实现，以减少潜在的错误，并促进贡献。\n\n正确性：jaq的目标是为jq提供一个更正确和可预测的实现，同时在大多数情况下保持与jq的兼容性。性能。我创建jaq的初衷是为了解决jq启动时间长的问题，在我的机器上，启动时间约为50ms。这在处理大量小文件时尤其明显。jaq的启动速度是jq的30倍，在许多其他基准测试中也优于jq。简单性：jaq的目标是拥有一个简单而小的实现，以减少潜在的错误，并促进贡献。Github: https://github.com/01mf02/jaq"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/01mf02/jaq"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-28 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"jaq是JSON数据处理工具jq的一个克隆版本。"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Plotters是为渲染数字、绘图和图表而设计的绘图库，采用纯Rust语言。Plotters支持各种类型的后端，包括bitmap, vector graph, piston window, GTK/Cairo 和 WebAssembly。plotters-rs: https://github.com/plotters-rs/plotters一篇有关社区变动的博文： Plotters is back! : https://aaronerhardt.github.io/blog/posts/plotters_is_back/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://aaronerhardt.github.io/blog/posts/plotters_is_back/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-28 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Plotters回来了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Spacedrive是一个开源的跨平台文件资源管理器，由一个用Rust编写的虚拟分布式文件系统驱动。前端用到了Tauri。https://github.com/tauri-apps/tauriGithub: https://github.com/spacedriveapp/spacedrive官网: https://www.spacedrive.app/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.spacedrive.app/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-28 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Spacedrive 一个开源的跨平台文件资源管理器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Cupnfish"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 440: https://this-week-in-rust.org/blog/2022/04/27/this-week-in-rust-440/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/04/27/this-week-in-rust-440/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-28 20:21"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 440"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"lunatic实现为易于启动和管理大量的轻量级进程（像erlang一样），已经实现了：\n创建，取消和等待进程\n精细的进程权限控制\n进程提权\n基于管道的消息通信\nTCP网络\n文件系统访问\n分布式节点\n着重体现一个鲁棒性。https://lunatic.solutions/blog/writing-rust-the-elixir-way-1.5-years-later/https://github.com/lunatic-solutions/lunatic"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lunatic-solutions/lunatic"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lunatic - 受Erlang启发的一个WebAssembly runtime"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"语法与lua差不多。由rust实现。https://github.com/hush-shell/hush"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/hush-shell/hush"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"hush - 一个更好的Unix shell脚本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"原理是通过低耗能蓝牙BLE协议获取设备的数据。https://github.com/macbury/m365"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/macbury/m365"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"m365 - 用于获取小米m365滑轮车信息的库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是本系统的第三篇。https://kerkour.com/rust-crawler-implementation"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://kerkour.com/rust-crawler-implementation"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"入门辅导：使用rust实现一个爬虫"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用这个软件把一天做的事都记下来。https://github.com/krvoje/clockking"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/krvoje/clockking"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"clockking - 时间管理速记软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/coloradocolby/thokr"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/coloradocolby/thokr"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"thokr - 顺滑的打字练习软件"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"核心是rust实现的一个runtime。作者兴奋地水了一贴。https://www.sanskar.me/hello_robyn.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.sanskar.me/hello_robyn.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Robyn - 这个py web框架已经有20w的下载量了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"经常在命令行下工作的程序员都知道分页器的作用和重要性。这个小工具或许可以一试。https://github.com/arijit79/minus"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/arijit79/minus"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"minus - 命令行下的分页器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目的是为了形成更好的 Azure Rust SDK 的设计。感兴趣的可以去填下。https://aka.ms/rust_survey"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://aka.ms/rust_survey"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软产品经理在搜集rust程序员在云原生开发上的需求"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"脚本是go的语法规范，用于rust程序的嵌入和调用。https://github.com/oxfeeefeee/goscript"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/oxfeeefeee/goscript"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"goscript - 发布goscript"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"怎么用，看一下下面这个就领会了。用于调试和原型处理很方便。https://github.com/01mf02/jaq"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/01mf02/jaq"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-27 22:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"jaq - 强大的JSON数据处理工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Atuin 使用 SQLite 数据库来保存你的 shell 历史命令，并且记录了一些额外的信息，因此可以非常方便快速地查找，同时，它还提供了在不同机器之间同步历史记录的功能，并且是完全加密的。Atuin 支持 zsh/bash/fish 这三种 shell，同时还提供了 shell 插件，用起来非常顺手，详细信息可以参考其 github 主页。github 地址https://github.com/ellie/atuin"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-26 14:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Atuin - 更好的 shell 历史记录搜索器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"最近 reddit 发起了一个讨论：你为什么喜爱 Rust？如果说服别人使用 Rust？这里摘录几个答案：\nCargo\n模式匹配\n迭代器\n无畏并发\nrayon\nTraits 系统\n性能\n\nwindows 下安装非常便捷\n高性能\nCargo\n通常较为有效的编译错误提示\nenums 和模式匹配\n内存安全\n通过 iterator 做到了声明式编程，同时不牺牲性能\n内存管理类似于 C++，但是相较于让你为程序执行时的意外随时做好准备，Rust 强大的编译器会帮助和引导你写出安全的代码"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-26 14:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"为什么 Rust 是 Stack Overflow 最受欢迎语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"rust 日报 babpstep"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Lunatic 为所有编译为 WebAssembly 的编程语言提供了一个类似于 Erlang 的运行时，最近发布了 v0.9.0 版本，增加了完整的兼容 cargo 的测试框架，感兴趣的不妨去 github 详细了解。github 地址https://github.com/lunatic-solutions/rust-lib/releases/tag/v0.9.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-26 14:04"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"lunatic 发布 v0.9.0 版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"调研问卷还在继续，截止5.15，大家多多支持.调查问卷链接https://wj.qq.com/s2/10103665/e87c/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-25 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust语言在中国大学内普及状况调研问卷"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Sphinx 是一种受 Lua 和 Python 启发的动态类型编程语言，完全使用 Rust 实现.他看起来是这样的.github 地址https://github.com/mwerezak/sphinx-lang"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-25 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Sphinx: 一个 Rust 编写的动态编程语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"music_note 是一个刚发布的音乐理论库, !#[no_std], 支持 和弦分析，scale iterators 和 midi.crate地址https://docs.rs/music-note/0.1.0/music_note/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-25 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"music_note: 一个 !#[no_std]的音乐理论库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"gensmusic"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"platforms: 该库提供了编程访问方式的 Rust 支持的平台的信息, 这些信息均来自 Rust 的编译器. 目前 v3.0 版本发布.github 地址https://github.com/rustsec/rustsec/tree/main/platforms--"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-25 20:19"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"platforms: v3.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个简单、便携、高性能、ACID、嵌入式的 Key-Value 存储工具。使用纯 Rust 编写，受 Imdb 启发，更多细节可阅读下面的设计文档。Benchmark：设计文档：https://github.com/cberner/redb/blob/master/docs/design.mdGitHub：https://github.com/cberner/redb"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"redb：嵌入式DB"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"主要对 async_std，Tokio 和 smol 三个进行比较。结论如下：\nasync_std 和 smol 非常接近标准库，并在某些负载上更优。\nTokio 似乎受到 CPU-bound（Rust）异步任务的不利影响。\nTokio 在 localhost 引入 8µs、在网络上引入 10 µs 的延迟。\nasync_std：https://async.rs/Tokio：https://tokio.rs/smol：https://github.com/smol-rs/smol文章链接：https://zenoh.io/blog/2022-04-14-rust-async-eval/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust异步框架评测"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Passerine 植根于 Scheme 和 ML 风格的语言 —— 它是对编程语言所期望的一切的顶峰，包括希望一切尽可能简约、简洁的愿望。 Passerine 的核心是具有模式匹配、结构类型、基于纤程的并发和句法扩展的 lambda 演算。https://en.wikipedia.org/wiki/Fiber_(computer_science)关于纤程可以阅读：https://github.com/Tencent/flare/blob/master/flare/doc/fiber.md 和 https://stackoverflow.com/questions/796217/what-is-the-difference-between-a-thread-and-a-fiber官网：https://www.passerine.io/GitHub：https://github.com/vrtbl/passerine"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Passerine：小巧简洁可扩展的功能脚本语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"AGE 是 postgres 的开源后端，允许用户在 postgres 上执行与图相关的操作。https://age.apache.org/代码中的 query 是图查询语言 Cypher，比较有名的Neo4j就是用的它，事实上，Cypher 是 Andrés Taylor 在位 Neo4j 工作时发明的。GitHub：https://github.com/dzordzu/rust-apache-age"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-apache-age：AGE连接器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个防止密钥提交到源代码的命令行工具。有以下特点：\n关注预提交：从一开始就防止密钥被提交比后面处理要容易的多。\n速度极快：比其他工具快 95 倍。\n始终本地操作：仅本地执行，永远不会发送数据。\n误报率低：基于概率方法，比其他工具更准确。\n没有依赖的单个二进制文件。\nGitHub：https://github.com/sirwart/ripsecrets"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ripsecrets：防止密钥提交"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"项目旨在在 Windows 上提供丝滑的 Docker 体验。可用作 Docker Desktop、DockerMsftProvider 或 Mirantis Container Runtime 的替代品。支持 Win 和 Linux 容器。Mac 下可以用：https://github.com/abiosoft/colimaGitHub：https://github.com/slonopotamus/stevedore"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"stevedore：Win下更好地使用的Docker"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"pydantic 的核心功能。使用示例：GitHub：https://github.com/samuelcolvin/pydantic-core"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pydantic-core：pydantic验证"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"提供有关有效 Rust 平台信息的编程访问。需要 Rust 1.40 或更高。GitHub：https://github.com/rustsec/rustsec/tree/main/platforms"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust平台crate"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"命令行工具，用于从 Postgres 表创建 Rust 源代码实体。生成 enums 和 structs：GitHub：https://github.com/spanasik/pg2rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pg2rs：pg到rust源码"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"长琴"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"\n新手资源：https://apollolabsblog.hashnode.dev/35-rust-learning-resources-every-beginner-should-know-in-2022\nNim，Zig，Rust，C++编译时间评测：https://castillodel.github.io/compile-time-evaluation/\n一个项目中引入两个不同版本的 crates：https://reltech.substack.com/p/including-two-versions-of-a-rust?s=r\n对 DynamoDB 全文检索：https://jakejscott.com/full-text-search-for-dynamodb-using-lambda-efs-tantivy-and-rust\n命令行参数解析工具 clap 使用：https://blog.logrocket.com/command-line-argument-parsing-rust-using-clap/\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-24 23:07"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"资源和教程"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Fleet 是 Rust 的极速构建工具。 使用 Fleet 进行编译的速度比使用 cargo 快 5 倍。目前，由于 Fleet 处于 beta 阶段，仅支持 rustc nightly。官网，https://fleet.rs/Github链接，https://github.com/dimensionhq/fleet"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/dimensionhq/fleet"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-23 23:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Fleet，构建速度提高5倍"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Diesel 发布 v2.0，包含以下主要功能：\n完全类型检查 GROUP BY 支持\n支持表别名\n支持通过相应类型定义选择子句\n支持 UNION/INTERSECT 查询\nGithub链接，https://github.com/diesel-rs/diesel"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/diesel-rs/diesel"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-23 23:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Diesel v2.0"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Crumsort，混合快速排序/合并排序，该排序是不稳定的、自适应的、无分支的，并且具有出色的性能。Github链接，https://github.com/scandum/crumsort"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/scandum/crumsort"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-23 23:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Crumsort，比 pdqsort 更快的排序算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Magnus，用 Rust 编写 Ruby 扩展 gem，从 Rust 二进制文件调用 Ruby 代码。Github链接，https://github.com/matsadler/magnushttps://rustcc.cn/blog_with_author?author_id=207704d2-4f5e-4219-a631-6ab4ab4d8929"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/matsadler/magnus"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-23 23:35"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Magnus, Rust 的 Ruby 绑定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"EAHITechnology"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust Async 工作组的主要目标之一是允许无处不在（尤其是在 traits 中）开 async fn 。在这篇文章中，我想提炼一些提议的设计，并展示如何实现特征中的异步函数。我们将研究一种可行的方法，尽管我想强调这不是唯一的方法，我们最终将采用的设计的许多细节仍在制定中。\nhttps://blog.theincredibleholk.org/blog/2022/04/18/how-async-functions-in-traits-could-work-in-rustc/\n要构建 Web 应用程序，您需要跨一系列主题做出架构决策。Ruby on Rails或Django的美妙之处在于它们为您做出这些决定，因此您可以立即开始构建您的 Web 应用程序。他们还通过大量文档支持这些决定。Rust on Nails是一个利用现有解决方案的框架，可满足全栈开发的需求。我们查看需要做出的每个决定，然后引入解决方案并将所有内容打包，以便它们协同工作。这是一个固执己见的框架，它是 Cloak 的构建方式，请参阅 Cloak Github Repo。https://github.com/purton-tech/cloak值得称赞的是 Nails 采用了一个新的概念 Development Environment as Code -- 开发环境即代码。采用 Visual Studio Code Remote - Containers 扩展允许您用户将 Docker 容器用作功能齐全的开发环境。这解决了以下问题：\n\n使您以外的开发人员能够快速上手；\n\n\n停止诸如“它在我的机器上工作不了”之类的问题；\n\n\n允许您将开发环境检查到 git 中。\n只要在 VSCode 中安装 devcontainer 扩展，然后设置 Rust 环境即可。\n\n\nhttps://cloak.software/blog/rust-on-nails/\n\n使您以外的开发人员能够快速上手；停止诸如“它在我的机器上工作不了”之类的问题；允许您将开发环境检查到 git 中。只要在 VSCode 中安装 devcontainer 扩展，然后设置 Rust 环境即可。https://cloak.software/blog/rust-on-nails/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-22 23:59"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"https://github.com/rubygems/rubygems/pull/5175 已合并，预计 Ruby 3.2 将正式支持工作机制：完整示例： https://github.com/rubygems/rubygems/tree/f91ee8a6465e220f61795d539f7e901b224561fb/test/rubygems/test_gem_ext_cargo_builder/rust_ruby_example博客介绍： https://briankung.dev/2022/01/31/sneak-preview-writing-ruby-gem-native-extensions-in-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://briankung.dev/2022/01/31/sneak-preview-writing-ruby-gem-native-extensions-in-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rubygems （Ruby 包管理工具）已经支持 Rust 写扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Learning and Programming Challenges of Rust: A Mixed-Methods Study论文通过对 100 个与 Rust 相关的 Stack Overflow 问题进行人工筛查，实施了一项实证研究。(1) 哪些安全规则对学习和编程具有挑战性？(2) 在哪些情况下，安全规则会变得更难应用？(3) Rust 编译器是否对调试违反安全规则的情况有足够的帮助？简报：https://www.youtube.com/watch?v=STjQxTu3tS8论文：https://songlh.github.io/paper/survey.pdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://songlh.github.io/paper/survey.pdf"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"简报&论文 - Rust 的学习和编程挑战：混合方法研究"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"PsiACE"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"新一期的 Rust 周报速递发布，快来看看有哪些内容你曾经关注过 :)This Week in Rust 439：https://this-week-in-rust.org/blog/2022/04/20/this-week-in-rust-439/https://github.com/PsiACE"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://this-week-in-rust.org/blog/2022/04/20/this-week-in-rust-439/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 23:25"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"This Week in Rust 439"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"之前 matz 说自己更喜欢 zig，但尊重社区的决定引入 Rust 。引入 Rust 的 价值主张：\nRust 类型系统将及早发现更多错误，有助于防止新错误\n更容易管理 YJIT 日益增长的复杂性\n更容易维护代码库，更少的“footguns”\n对新手来说更容易，因为编译器会捕获更多错误\n更好的性能，因为可以实现更复杂的优化\n更容易添加对新平台的支持（这会增加复杂性）\nRust 拥有成熟且易于安装的工具，例如源代码格式化程序和编辑器插件\nRust 作为一个编程语言社区，背后有着极大的热情。这可能会转化为对 YJIT 和 Ruby 的更多热情。\nYJIT 的新 Rust 版本与 C 版本达到了同等水平，因为它通过了所有 CRuby 测试，能够运行所有 YJIT 基准测试，并且执行类似于 C 版本（因为它以相同的方式工作并且大部分生成相同的机器代码）。甚至加入了一些设计改进，例如更细粒度的常量失效机制，预计这将对 Ruby on Rails 应用程序产生重大影响。https://github.com/ruby/ruby/pull/5826之前的讨论 https://bugs.ruby-lang.org/issues/18481"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Ruby yjit 用 Rust 重写的 PR 已经提交"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 Fiberplane，作者最近遇到了一个有趣的挑战：他们的库超出了我们用于富文本编辑器的库。他们曾经使用 Slate.js —— 一个很好的编辑器，但是当实现我们自己的富文本原语进行协作编辑时，发现我们自己他们的原语和 Slate 的数据模型之间的脱节在某种程度上是一个障碍。所以决定 使用 Rust 和 React 创建富文本编辑器。原文阅读：https://fiberplane.dev/blog/creating-a-rich-text-editor-using-rust-and-react/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://fiberplane.dev/blog/creating-a-rich-text-editor-using-rust-and-react/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 Rust 和 React 创建富文本编辑器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"MnemOS v0.1.0 版本发布，它一个小型的通用操作系统，用Rust编写。MnemOS是为受限硬件设计的，包括微控制器。目前，Adafruit Feather nRF52840 Express是唯一支持的内核硬件平台。对其他目标和架构的支持正在计划中。内核代码仓库：https://github.com/jamesmunns/pellegrino详情请看：https://jamesmunns.com/blog/mnemos-initial-release/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://jamesmunns.com/blog/mnemos-initial-release/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MnemOS 首次发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"fast_fp 提供了一组原始类型，支持对许多操作进行快速数学编译器优化。这些优化允许编译器通过放宽 IEEE 754 浮点运算的一些要求来潜在地生成更快的代码。使用示例：项目地址:https://github.com/standard-ai/fast_fphttps://github.com/Jancd"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/standard-ai/fast_fp"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2022-04-21 00:06"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"fast_fp 项目"},"type":"text"}],"type":"title"}},]
