export const propertiesForNewPages = [{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"亚马逊云服务的 Rust SDK: Rusoto 发布 0.41.0 版。 有如下更新\n新增 HttpClient::from_builder\n新增 AWS App Mesh service。(可以为每个服务提供一致的可见性和网络流量控制)\n对 non signing clients 提供了支持\n更多信息前往GitHub查看https://github.com/rusoto/rusoto/releases"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-09 23:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"亚马逊云服务 SDK: Rusoto 新版本发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个独立开发游戏，用 Rust开发。 受到了《魔方世界》，《塞尔达传说：旷野之息》，《矮人要塞》和《我的世界》等许多游戏的启发。虽然画面还有点粗糙，但确实是可以玩的。感兴趣的同学可以关注一下官网 或者 Gitlabhttps://www.gamingonlinux.com/articles/keep-an-eye-on-veloren-an-open-source-multiplayer-voxel-rpg-written-in-rust.15155"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-09 23:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 开源像素风 RPG 游戏：Veloren"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"根据 ssloy 的图像渲染课程 实现的“动态大爆炸”图片。https://github.com/ssloy/tinyrenderer/wiki查看源码https://github.com/disDeal/rustaboom"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-09 23:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"500行 Rust 代码渲染出 “大爆炸” 图片"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"挺肥"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人觉得 Facebook 的 Libra 不够开放，所以基于 Libra 推出了 Rust 开源项目 OpenLibrahttps://www.openlibra.io/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-09 23:08"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OpenLibra: FaceBook Libra 的替代品"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"LacneQin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"当前，crates无法正式指定MSRV。 结果导致用户无法检查是否可以在不构建工具箱的情况下在其工具链上构建crates。 这也引发了关于如何应对MSRV暴增时如何处理crates版本更新的争论，保守的方法是考虑类似破例更改之类的更改，这可能会阻碍整个生态系统采用新功能或导致版本号膨胀，从而使其难以保持接下来几个版本的crates是最新的。 另一方面，对于较旧的编译器版本，使用更宽松的更新方法可能会导致crates损坏。该版本RFC增加了在Cargo.toml中使用rust字段时指定最低支持Rust版本（MSRV）的功能：更多消息前往GitHub查看。https://github.com/newpavlov/rfcs/blob/msrv/text/0000-min-rust-version.md新版本的cargo-bloat工具已经发布，部分Windows获得了支持。现在，您可以在 gnutarget 上更新。https://github.com/RazrFalcon/cargo-bloat此外，cargo-bloat还获得了可选的JSON输出、v0 mangling功能支持以及更好的 xargo / cross 编译支持更新。前往GitHub查看更多。https://github.com/RazrFalcon/cargo-bloat****主要新功能\n导入未解决的项目时自动代码生成的最普通的intentions和快速修复功能类似 Implement members，Specify type explicitly，Add remaining patterns。在之前，此类项目被标记为未解决，必须手动导入\n\n\n改进Find Usages模式绑定的操作流程\n\n\n考虑Specify type explicitly 在intentions中的类型别名\n\n\n现在Create New Issue可以在Help菜单中找到操作\n\n改进Find Usages模式绑定的操作流程考虑Specify type explicitly 在intentions中的类型别名现在Create New Issue可以在Help菜单中找到操作更多更新内容前往GitHub查看。https://intellij-rust.github.io/2019/10/07/changelog-107.html纯Rust实现的零知识证明系统 —— OpenZKP前往GitHub下载体验。https://github.com/0xProject/OpenZKP\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-08 22:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"通信使用 UDP socket 实现，用键盘弹钢琴。我惊叹的是，作者的想象力和愿意做这些“无聊”的事情的能力。Repo: https://github.com/ritiek/piano-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ritiek/piano-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-07 22:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"piano-rs - 在终端下多人同时弹钢琴"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"开始是想引入一个设施，在 Rust 中实现热加载功能。写着写着，就写出一门语言出来了。What started out as experimentation with hot reloading in Rust, has culminated in Mun: a programming language empowering creation through iteration - in the early stages of development. The entire toolchain will continue to be written in Rust, as it is our preferred language of development. We are actively using and contributing to a variety of crates in the ecosystem, such as salsa, rowan, and inkwell. [edit: Presently, you cannot use Mun as a programming language, its syntax is extremely limited, and its documentation is far from complete; but we wanted to launch a platform for us to share progress updates, engage with the community, and gauge interest.]官网：https://mun-lang.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mun-lang.org/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-07 22:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Mun - 用 Rust 写的语言"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Spotify 是瑞典著名的音乐服务，作者用 tui 给它写了一个终端下的界面。Repo: https://github.com/Rigellute/spotify-tui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Rigellute/spotify-tui"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-07 22:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Spotify 的终端下的界面"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"快来看官方新出的号召文博客：https://blog.rust-lang.org/inside-rust/2019/10/07/AsyncAwait-WG-Focus-Issues.html--\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/inside-rust/2019/10/07/AsyncAwait-WG-Focus-Issues.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-07 22:34"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Async 基础设施差不多了，是时候抛光打磨了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这只是一个起步阶段的不完全清单，可以看到，除了著名的 Facebook, Microsoft 等大公司在招聘 Rust 高级开发者之外，还有大量的创业公司在招聘 Rust 开发人才，开了眼界了。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-06 23:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Veloren，一个Rust语言实现的开源，多玩家角色扮演游戏。更多信息https://www.gamingonlinux.com/articles/keep-an-eye-on-veloren-an-open-source-multiplayer-voxel-rpg-written-in-rust.15155"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-05 19:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Veloren，角色扮演游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"tiny，一个Rust语言实现的群聊客户端，发布了其v0.5版本。Githubhttps://github.com/osa1/tiny"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-05 19:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tiny v0.5发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一网友有个优化任务，约6K行的Fortran-90，他发帖征求优化建议。更多信息https://www.reddit.com/r/rust/comments/ddlggk/6k_lines_of_fortran90_needs_optimizing/--https://rust.cc/section?id=ce0fe0fb-1ac6-413a-b535-59e4a8e74b6c\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-05 19:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"【优化建议征求】Fortran-90需要优化"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"codey ratio 紀錄rust的壓力測試Read morehttps://christine.website/blog/compile-stress-test-2019-10-03"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"編譯壓力測試"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"想要追蹤rust team的最新資訊就來吧Read morehttps://blog.rust-lang.org/inside-rust/index.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"inside rust 上線"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一步一步教你從底層實作http serverRead morehttps://curiosityoverflow.xyz/posts/linda/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"寫一個 http server part 1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"幫你排除不安全的crateRead morehttps://blog.rust-lang.org/inside-rust/2019/10/03/Keeping-secure-with-cargo-audit-0.9.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 cargo-audit 0.9 來保障安全"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"nix 是一個可以自由滾動更新版控的 linux結合rust的穩定高效Kubernetes是用於自動部署、擴展和管理容器化應用程式的開源系統。Read morehttps://github.com/saschagrunert/kubernix"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"KuberNix 由Nix和Rust製作的Kubernetes集群"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"給初學者看的Read morehttp://intorust.com/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通過Into Rust 視頻向我的同事介紹 rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Start: https://gitlab.redox-os.org/redox-os/orbtkExamples: https://gitlab.redox-os.org/redox-os/orbtk/tree/master/examplesOrbTk是由Redox OS項目發起的跨平台Rust UI-Toolkit。 當前的開發版本（0.3）是重新設計的 ，具有完整的新代碼庫和現代api，這要歸功於Redox OS社區的反饋\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-04 22:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"OrbTk Rust UI-Toolkit 0.3"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"截至发稿，rust-lang/rust 主仓库为 10,0006 次commit！！！https://github.com/rust-lang/rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-03 21:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-lang 主仓库突破 10,0000 次 commit"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"类似于 client-go 的客户端，可以用 Rust 来编写更高效的 Kubernetes 控制器！在过去的几个月里，博主使用 Rust 中编写了很多的 kubernets 专用代码。尽管 Kubernetes 本身是用 Go 语言编写的，但我发现我通常可以用 Rust 编写更简洁、可读和稳定的 Kubernetes  代码。例如，我最近在 Rust 和 Go 中编写了功能相当的 CRD 控制器。Go 版本有 1700 多行代码，并装载了样板文件和自动生成的代码。而 Rust 版本只有127行！！！它更容易理解和调试…而且写起来绝对更快。博文原文请看：http://technosophos.com/2019/08/07/writing-a-kubernetes-controller-in-rust.htmlGitHub 仓库地址：https://github.com/clux/kube-rs了解更多请看 reddit 讨论https://www.reddit.com/r/rust/comments/dchmfq/kube_rust_kubernetes_client_in_the_style_of/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-03 21:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"k8s 的 rust 客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Tonic 是一个基于 http/2 的 gRpc 实现，专注于高性能、互操作性和灵活性。Tonic 这个库是为了提供对异步/等待的一流支持，并作为使用 Rust 编写的生产系统的核心构建块。https://github.com/hyperium/tonicTonic 的目标是提供更多开箱即用的工具。它已经支持许多特性，并计划支持更多特性!以下是功能列表:\n纯 rust 实现(openssl 例外)\n通过 tonic-interop 测试互操作性\n双向流\n自定义元数据\n功能齐全的 HTTP/2 客户端和基于 hyper 的服务器\n基于 openssl 或 rustls 支持的 TLS\n可靠性特性，如超时、速率限制、并发控制等\ngRPC 拦截器\n...\n还有更多，了解详情请点击\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-03 21:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Tonic: gRPC 将支持 async/await"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前支持：powf, exp, log10, log2, log, ln, trunc, fract, copysign，了解更多请查看：https://crates.io/crates/micromath/0.4.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-03 21:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"micromath v0.4.0：快速、微型嵌入式的数学库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"关键词：nlp、xml、text-processing这个库目前处于 alpha 阶段，它可能已经用于读取 FoLiA 文档和从头创建文档。注意，这个库还没有实现验证!您必须通过运行另一个 FoLiA 验证器来确保您的 FoLiA 文档是有效的，因为这个库还不能保证生成有效的 FoLiA。使用示例，从文件中读取并查询所有单词：了解更多请点击查看https://github.com/proycon/folia-rust\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-03 21:02"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"folia：处理 FoLiA XML 格式的高性能Rust库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 已经从创新阶段转变为早期采用阶段，这主要是由于它在基础设施和网络数据平面空间(例如，Habitat和Linkerd 2.0)中的应用。Rust 语言也逐渐成为 WebAssembly 的天然合作伙伴，帮助提高人们的认识。此外 Facebook 选择使用 Rust 实现其 Libra 加密货币。详情请查看详细报告https://www.infoq.com/articles/programming-language-trends-2019/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-02 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"InfoQ 趋势报告- Rust 从创新阶段转变为早期采用阶段"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"使用Parcel bundler工具，将Three .js代码和Rust代码合并到同一个web页面中。更多请查看 Parc3l, 在线演示Demohttps://medium.com/@cwervo/parc3l-combining-three-js-rust-and-webassembly-c1e643ef7681"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-02 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Parc3l"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Kubernetes API 的 Rust 客户端详情查看GitHub kubernetes-rusthttps://github.com/ynqa/kubernetes-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-02 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"kubernetes-rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"用 Rust 编写 Linux Kernel 模块，详见YouTube视频https://youtu.be/RyY01fRyGhM"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-02 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Linux Security Summit 2019"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 1.39 发布的 beta 版本中，将支持 async-await 语法，预计2019 年 11 月 7 日发布。当 async-await 稳定之后，意味着 Rust 经过多年的努力之后终于使得效率和异步I/O 得到支持。详情请查看链接https://blog.rust-lang.org/2019/09/30/Async-await-hits-beta.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-02 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Async-await 开始 beta 测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"test-case 是一个用于生成测试用例的过程性宏属性，这个 crate 设计来源于NUnit 和 JUnit，并且派生和继承了 /u/sasik520这个版本发布之后，这个宏能够稳定运行，并且更好的支持 errors 以及信息名字。使用用例：详情请查看 Github 链接https://github.com/frondeus/test-case/releases/tag/v0.3.1\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-02 22:16"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Test-Case crate 发布 0.3.1 版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"LacneQin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Shawl是一个用Rust编写的能够将任何程序作为Windows服务运行的包装程序。它可以处理Windows服务的API，因此您原本的程序只需要响应ctrl-C 或者SIGINT。创建需要作为服务来运行的项目，只需将Shawl与您的项目捆绑在一起，将其设置为入口点，然后通过CLI传递指令来运行。了解更多：crates.ioGitHubhttps://crates.io/crates/shawlRust语言为我们提供了许多非常强大的工具，为应用程序提升了灵活性和可扩展性（例如特征、枚举、宏等），但是所有这些都是在编译时完成的。但是为了获得我们所希望的灵活性，我们希望能够在运行时添加新功能。这可以使用一个称为动态加载的技术来实现。https://en.wikipedia.org/wiki/Dynamic_loading何为动态加载？动态加载是所有主流操作系统提供的一种可以在运行时加载库的机制，以便用户检索函数或变量的地址。然后可以像使用其他任何指针一样使用这些函数和变量的地址。在* nix平台上，dlopen()函数用于将库加载到内存中，然后dlsym()能够让您通过其符号名称获取指向某变量的指针。需要记住的一点是，符号不包含任何类型信息，因此调用者必须将指针转换为正确的类型。通常，通过与某种类型的协定提前完成加载库来完成.例如，头文件需要声明\"cos\"函数为 fn(f64) -> f64.来自man dlopen的示例：其中LoadLibraryA\\(\\)， GetProcAddress\\(\\)以及FreeLibrary\\(\\)分别代替了dlopen()，dlsym()和dlclose()。https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryalibloading提供了一个高品质的Rust接口以及底层平台的动态加载机制。https://docs.rs/libloading/阅读博客原文了解更多。http://adventures.michaelfbryan.com/posts/plugins-in-rust/详细教程请参阅http://web.eecs.utk.edu/~smarz1/osblog/最近，Rust团队收到了有关使用旧版Cargo构建crates的安全问题的反馈，这些crates使用了新版Cargo中添加的软件包重命名功能。如果您使用的是2018年5月10日发布的Rust 1.26.0，则不会受到影响。此漏洞的CVE为CVE-2019-16760。https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16760问题概述可以通过Cargo.toml和[dependencies]区域配置Cargo，使其依赖于不同的crates，例如在crates.io中的crates。还可以通过多种方式配置crates的依赖，例如，如果您依赖serde并启用该crates，则derive的特征将如下所示：Rust 1.31.0 引入了Cargo的新功能 package，这是一个在本地重命名crates的可选方法。例如，如果您在本地更喜欢使用serde1，可以将serde进行更改：https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#cargo-features正是由于添加了package密钥，Cargo才以不同的方式编译crates。该功能最初是在Rust 1.26.0中实现的，但当时还不稳定。但是，对于Rust 1.25.0及更低版本，Cargo会忽略这个package关键字，并将依赖项行编译为：https://github.com/rust-lang/cargo/pull/4953这意味着，当使用Rust 1.25.0及更低版本进行编译时，它将尝试下载 serde1 crates。黑客可以将serde1的名字建立在crates.io上，虽然长得像serde 1.0.0但是却是恶意的代码。总而言之，在Rust 1.25.0及更低版本中，将忽略使用package关键字来重命名依赖项Cargo.toml。使用Rust 1.25.0及更高版本时，Cargo会忽略package并下载错误的依赖关系，而该依赖关系可能被crates.io认为是恶意软件包。这不仅会影响您自己在本地编写的清单，还会影响发布到crates.io的清单。例如，如果您发布的crates依赖于crates.io上的serde1，则添加了您的依赖项的用户如果使用Rust 1.25.0及更低版"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"http://web.eecs.utk.edu/~smarz1/osblog/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-10-01 16:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #cpp知乎专栏CPP工程师的Rust迁移之路新文章\n继承与组合（后）\n继承与组合（下）\n继承与组合（中）\n继承与组合（上）\nRead Morehttps://danielkeep.github.io/tlborm/book/README.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-29 18:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CPP工程师的Rust迁移之路 - 继承与组合（后）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #crateRead Morehttps://www.reddit.com/r/rust/comments/damavd/ann_aesgcmsiv_v010_highperformance_misuse/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-29 18:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"aes-gcm-siv 高性能身份验证加密"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #cppRead Morehttps://robert.ocallahan.org/2018/09/more-realistic-goals-for-c-lifetimes-10.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-29 18:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"现代C++(17/20)和Rust在安全方面的比较"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#http3 #rust推荐视频 HTTP over QUIC is the next generationhttps://www.youtube.com/watch?v=idViw4anA6ERead Morehttps://blog.cloudflare.com/http3-the-past-present-and-future/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-29 18:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"HTTP3 过去，现在和未来"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#crate #cargo\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-29 18:52"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"cargo-audit 一个发现漏洞的CI工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Yew是一个Rust框架，用于使用WebAssembly创建多线程前端应用程序。更多信息https://github.com/yewstack/yew/releases/tag/0.9.0"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-28 17:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Yew v0.9发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Amethyst-imgui提供包imgui-rs在Amethyst游戏引擎中的集成。v0.5版本支持Docking功能。Github更多信息https://github.com/amethyst/amethyst-imgui"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-28 17:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Amethyst-imgui v0.5"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"neural-net, Rust语言写的一个\"教学型\"神经网络库。Githubhttps://github.com/ccbrown/neural-net"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-28 17:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"neural-net"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"rust_cmd_lib, 常见的rust命令行宏和utils，可轻松编写类似于任务的shell脚本。Githubhttps://github.com/rust-shell-script/rust_cmd_lib--https://rust.cc/section?id=ce0fe0fb-1ac6-413a-b535-59e4a8e74b6c\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-28 17:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust_cmd_lib"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://azriel.im/will/2019/09/27/focus/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-27 19:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"will 2d動作遊戲更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://blog.cloudflare.com/http3-the-past-present-and-future/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-27 19:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"CloudFlare 增加 HTTP/3 and QUIC 支援"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://twitter.com/steveklabnik/status/1177304867624411136"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-27 19:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"再大約六星期後就會有 Async/await 了"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"範例Read morehttps://github.com/taiki-e/pin-project"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-27 19:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pin-project 符合人體工學的 pin 保護功能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"增加了16個新的apiexample future::joinRead morehttps://github.com/async-rs/async-std/releases/tag/v0.99.7"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-27 19:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-std v0.99.7 released"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"reddithttps://www.reddit.com/r/rust/comments/d9l79d/official_rrust_whos_hiring_thread_for_jobseekers/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-27 19:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 求職專帖"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 官方今天如期发布了 1.38。这次的主要改进有：\n流水线编译，提升 10%～20% 的性能\n#[deprecated] 标签，明确标出某些功能不推荐使用了。（不需要在注释里面标注了）\nstd::any::type_name，用于调试时打出类型名字\n比如：会打印出想要啊。还有很多其它改进，请查看原文。Read More: https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-26 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.38 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Repo: https://github.com/segfaultsourcery/bumper-rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/segfaultsourcery/bumper-rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-26 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bumper-rs - 打出你的 Cargo.toml 版本号"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Repo: https://github.com/herzrasen/pkghist"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/herzrasen/pkghist"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-26 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"pkghist - 获取 Pacman 包管理的版本历史"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 操作系统来啦！Drone is an Embedded Operating System for writing real-time applications in Rust. It aims to bring modern development approaches without compromising performance into the world of embedded programming.目前只支持 ARM® Cortex®-M3/M4 ，但是设计成平台无关的。Offical Site: https://www.drone-os.com/Repo: https://github.com/drone-os"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.drone-os.com/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-26 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Drone OS 0.10 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个库提供：\nNon-trivial static assertions and type guards.\nTyped list that supports insertion, removal and look-up.\nTrait-level Boolean and Option\nSome little tools on tuple types.\nRepo: https://github.com/jerry73204/rust-type-freak\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/jerry73204/rust-type-freak"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-26 22:51"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"type-freak - runtime-free 类型集合"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Nushell(简称Nu)是一种新型的shell，它采用现代的结构化方法来处理命令行。它与来自文件系统、操作系统和越来越多的文件格式的数据无缝地工作，使构建强大的命令行管道变得容易。Nushell 0.3.0 更新特性：\n新的表格设计\n\n原生支持多种文件格式，包括：bson, tsv, sqlite, 和 url-encoded 字符串\n新的命令\n\nhelp - 内置的帮助系统\nreverse - 逆序表格\nlast - 跟 first 命令类似，但是从表格的尾巴开始返回 n 行数据\nembed - 以当前表格为开始创建一个新的表格\nfetch - 通过 URL 获取内容\npost - 通过 post 指定的 URL 获得结果\npwd - 展示当前目录\nenv - 访问一些重要的路径和环境变量配置\npivot - 旋转表格进行行转列\necho - 内置的 echo 命令\n— 增强错误提示\n\n\n\nhelp - 内置的帮助系统\nreverse - 逆序表格\nlast - 跟 first 命令类似，但是从表格的尾巴开始返回 n 行数据\nembed - 以当前表格为开始创建一个新的表格\nfetch - 通过 URL 获取内容\npost - 通过 post 指定的 URL 获得结果\npwd - 展示当前目录\nenv - 访问一些重要的路径和环境变量配置\npivot - 旋转表格进行行转列\necho - 内置的 echo 命令\n— 增强错误提示\n\nShell 特征提醒\n插件支持\n支持 Docker\n更多请查看 Nushell 0.3.0http://www.jonathanturner.org/2019/09/nushell_0_3_0.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-25 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Nushell 0.3.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个用于在计算机图形的上下文中处理带符号的距离字段，特别是基于光线行进的渲染器的工具包。上图就是在 rayn 借助 sdfu 根据自己定义的路径绘制的图形，代码类似于：Repo: sdfu - Signed Distance Field Utilitieshttps://github.com/termhn/sdfu/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-25 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"sdfu - Signed Distance Field Utilities"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 1.38.0 计划在 9 月 26 日发布，发布日志可以查看 https://github.com/rust-lang/rust/blob/master/RELEASES.md可以通过以下方式尝试："},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-25 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 1.38.0 pre-release 开始测试"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"通过设计将运行时计算减少到最小, DSTs 由特征操作符操作。也就是说，使用Rust的相关类型和泛型，我们可以构建 non-trivial 的类型，比如 lists 和 key-value map\nTList: 可以以任意类型作为 key 的list\nKVList: 跟 TList 类似，包括额外的数据\nBoolean: 布尔类型\nMaybe: 与 std::optoin::Option 类似的特质\ntuple types\nCounter: 用于构建递归特征操作符的convient类型\nControl flow\nRepo 链接：rust-type-freakhttps://github.com/jerry73204/rust-type-freak\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-25 22:49"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"type-freak - 一组类型数据结构、特征操作符和有用的 Rust 类型别名的集合"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"LacneQin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Graphlib是一个为图数据结构提供通用且易于使用的API的rust图形库，它的API与std::collections中的其他数据结构相似，它是为了在Purple协议中使用而构建的。更新日志：\n现在可以在使用dot功能的时候标记图像顶点。\n添加了Graph::map() API，该API将Graph <T>映射到了Graph <E>。\n前往GitHub了解更多信息https://github.com/purpleprotocol/graphlibPurple是一种高度可扩展的通用去中心化分类账协议，最先进的算法和架构设计。Purple有可能达到每秒处理数以千计的事务之高效率，这或将推动去中心化分类账技术的主流应用。Purple协议对其支持的应用程序类型是未知的，他支持的应用程序可以是任何东西，从没有属性的简单的已发行资产到成熟的去中心化保险单或KYC。但目前这个协议仍然是实验性质的，还需要在一个大型网络上进行压力测试之后才能确定其是否能稳定使用。前往GitHub了解更多https://github.com/purpleprotocol/purpleergo-pin 21 是一个提供更符合人体工程学的堆栈固定API的实验。当前的主要用例是在异步函数中，但对于std::pin::Pin API的其他用例（例如不稳定生成器特征的使用等）也很有用。使用ergo-pin，您只需在一个项目上应用该属性，即可在该项目内使用 PIN! 宏来连接一切表达式：点击这里了解更多https://docs.rs/ergo-pin/0.1.0/ergo_pin/观察一个用Rust和Kotlin编写的小程序，为何Rust版本会比Kotlin的慢？主要原因就是分配了很多新的Vecs。想要提速的第一部是使用预定大小初始化Vecs，下一步是不使用Vecs，而是通过使用其他数据结构（例如Iterator）或使用预分配的缓冲区来优化这些分配。最后，进行一些格式上的修正以及一些细微的更改（例如使用u32代替usize来实现）等。结果新版本并不完美，但至少解决了主要问题，以下是测量反映出来的结果：render本身是一个特征、结构和宏的组合，它们统一并增强了构成树形数据结构的体验，最适合HTML和XML渲染，但也可以与其他例如ReasonML的Pastel终端颜色库一起使用。前往GitHub了解更多https://github.com/Schniz/render.rs开源代码https://github.com/gothame/rflaskProvide两个宏可为您减少两行代码。经历了10个月，他的最新版本终于发布上了crates.io。ndarray为通用元素和数字提供n维数组，其实质与Python的NumPy类似。新增功能：集成 rayon 支持：将yanon支持移入Crate。可以从数组运行并行迭代器，并行化Zip原语，以对多个数组或其他NdProducers进行锁步迭代。Raw 视图：如果ArrayViewMut类比于＆mut T，则新的RawArrayViewMut类似于* mut T，并作为数组视图。这对于我们的内部组件来说是一个有用的低级原语，它将帮助我们编写与正在开发的不安全代码准则兼容的Rust程序。Approx 支持：ndarray现在支持更灵活的近似比较。改良 azip!() 语法：azip是用于在多个数组或NdProducers上编写锁步循环的宏，现在它的语法与通常的for循环更相似。更多升级：新方法.as_standard_layout()新数组存储类型CowArray新方法.mean()运行时能够检测到的SIMD支持的matrixmultiply前往GitHub了解更多https://github.com/rust-ndarray/ndarrayhttps://intellij-rust.github.io/2019/09/23/changelog-106.htmlhttps://andygrove.io/2019/09/datafusion-0.15.0-release-notes/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://andygrove.io/2019/09/datafusion-0.15.0-release-notes/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-25 00:11"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个用Rust编写的QUIC实现运行测试http 0.9程序(neqm -client和neqm -server)\ncargo build\n./target/debug/neqo-server 12345 -k key --db ./test-fixture/db\n./target/debug/neqo-client http://127.0.0.1:12345/ -o --db ./test-fixture/db\n运行测试http3程序(neqm -client和neqm -http3-server)\ncargo build\n./target/debug/neqo-http3-server [::]:12345 --db ./test-fixture/db\n./target/debug/neqo-client http://127.0.0.1:12345/ --db ./test-fixture/db\nRepo：https://github.com/mozilla/neqo"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/mozilla/neqo"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-23 21:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"neqo - 一个用Rust编写的QUIC实现"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个模块化的Web框架围绕async/await进行构建，它是由Rust Async生态系统工作组积极开发的，目前还没有准备好投入生产使用使用案例Repo：https://github.com/rustasync/tide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/rustasync/tide"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-23 21:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tide - 授权每个人构建HTTP服务"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"NativeScript是GDNative的一个扩展，它允许动态库向Godot注册脚本，Repo：https://github.com/GodotNativeTools/godot-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/GodotNativeTools/godot-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-23 21:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"godot-rust - Rust绑定Godot游戏引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"它是一个用于Blender解析.blend文件的库使用案例Repo：https://github.com/lukebitts/blend\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/lukebitts/blend"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-23 21:56"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"blend -  .blend文件的解析器和运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"S3 是亚马逊的存储服务。这个库是 rust 实现的客户端，功能相当丰富，基本涵盖了 Amazon S3 的所有功能。Repo: https://github.com/yanganto/s3rs"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/yanganto/s3rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-22 23:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"s3rs - Amazon S3 富客户端"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"我们都知道，目前Rust在Native GUI框架这一块，还是非常短的一个短板。但是并不意味着没有探索，Neutrino就是一个尝试。它是基于 web-view 的。利用 html 和 css 渲染页面。来看看效果吧。希望这个项目能坚持做下去（因为太多的Rust GUI项目半途而废啦）。Repo: https://github.com/alexislozano/neutrino"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/alexislozano/neutrino"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-22 23:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：Neutrino - MVC GUI 框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"类似于 Linux 上著名的 wesnoth（就不要与《文明》比了吧）。长这个样子：还可以在线玩：https://ozkriff.itch.io/zemerothRepo: https://github.com/ozkriff/zemerothRead More: https://ozkriff.games/2019-09-21--devlog-zemeroth-v0-6/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/ozkriff/zemeroth"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-22 23:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"zemeroth - 2D六角形轮回制策略游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者关于 weld（机器学习中间组件框架） 的长篇博文。作者的以下思路，我觉得很重要，这也是 Rust 想在科学计算，机器学习领域等大展身手的一个可能的方向：After working for weeks with Python’s and R’s data science stack I started to ask my self if there could be a common intermediate representation, similar to CUDA, that could be used by many languages. There should be something better than reimplementing and optimizing the same methods in each language. In addition to that, having a common runtime that could optimize the whole program instead of each function separately would be better.weld 的核心开发者之一是 Matei Zaharia，它也是 Spark（对，就是那个 scala 大数据流式计算框架） 的创建者。他们选择 Rust 来实现 weld 的原因在于：\n最小 runtime，可以方便嵌入其它语言，比如 Java 和 Python\n可以用函数式范式编程，方便编译器优化\n很好的社区和高质量的包，让开发更容易\nRead More: https://notamonadtutorial.com/weld-accelerating-numpy-scikit-and-pandas-as-much-as-100x-with-rust-and-llvm-12ec1c630a1?gi=97f3d8faf344\nWeld\nGrizzly\nWeldNumpy\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://notamonadtutorial.com/weld-accelerating-numpy-scikit-and-pandas-as-much-as-100x-with-rust-and-llvm-12ec1c630a1?gi=97f3d8faf344"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-22 23:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"重磅：利用 Rust 和 LLVM 构建中间表示平台，加速 numpy, scikit 和 pandas 栈 100x 的速度"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rust 的嵌入式尝试，作者记录得很仔细。Read Morehttps://medium.com/@ly.lee/build-an-nb-iot-gps-tracker-on-stm32-l476-with-apache-mynewt-and-embedded-rust-8c095a925546?source=friends_link&sk=f3e802795d4fd7d569f0d67679e8c9e6--\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-22 23:32"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"在 STM32 L476 上利用 Mynewt 和 嵌入式 Rust 开发 NB-IoT GPS 跟踪器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"cbor-diag-cli，一款使用简洁二进制对象表示（Concise Binary Object Representation，CBOR）的诊断工具。该工具可以解析二进制，十六进制和诊断符号格式表示的CBOR项。 然后将它们输出为二进制，十六进制（带有或不带有注释）和诊断符号（紧凑或“漂亮”）。更多信息https://crates.io/crates/cbor-diag-cli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-21 11:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust官方CLI工作组发布一款诊断工具：cbor-diag-cli"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"更多信息https://lists.llvm.org/pipermail/llvm-announce/2019-September/000085.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-21 11:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"LLVM 9.0.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"测试这个需要首先更新到最新的nightly版本。更多信息https://internals.rust-lang.org/t/exploring-crate-graph-build-times-with-cargo-build-ztimings/10975"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-21 11:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用cargo build -Ztimings可视化构建crate的时间"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"更多信息https://github.com/lukebitts/blend"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-21 11:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"blend: .blend文件的解析器和运行时"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"如果你希望使用Rust内置的JavaScript引擎执行脚本，那么MiniV8可能适合你。更多信息https://github.com/SkylerLipthay/mini-v8--https://rust.cc/section?id=ce0fe0fb-1ac6-413a-b535-59e4a8e74b6c\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-21 11:17"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"MiniV8: 用于Rust的最小嵌入式V8引擎"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"讓大家自由轉換兩種格式，有線上版Read morehttps://github.com/PSeitz/toml-to-json-online-converter"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"toml <--> json 轉換器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"編譯比rand快十倍，簡單快速的隨機數產生器Read morehttps://crates.io/crates/oorandom"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"oorandom 輕量prng偽隨機數產生器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"目前firefox的團隊正在研究rust與c++編譯後的中繼檔整合優化的可能性當前C++與rust都是各自優化，但希望經由LLVM的函數內聯達到優化目前firefox成功做到跨語言LTO，但並沒有成功優化，之後團隊經過了努力，也只優化了一小部份函數。目前在Windows，macOS和Linux上已經為Firefox版本構建了跨語言LTO幾個月，而Mozilla的底層工具團隊對LTO的結果非常滿意。雖然我們仍然需要努力使功能的設置更容易，LTO已經啟用了從Firefox中Rust刪除重複的邏輯的功能，因為現在代碼可以簡單地調用等效的C++實現並依賴這些調用進行內聯。跨語言LTO需要不斷測試來降低有C++代碼緊密集成的Rust程式編寫的心理障礙，從版本1.34開始，Rust編譯器中提供了跨語言LTO，並與Clang 8一起使用。Read morehttp://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust和C / C ++之間的跨語言LTO"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在 2.1.17 與 3.0.3 可以用 config-check 來確認是否可以升級Read morehttps://tikv.org/blog/monthly-august-19/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"tikv這個月更新了四個小版本，並計畫4.0的製作"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"有人做了一個類似 rust 的腳本，可以轉換成 shell scriptRead morehttps://github.com/rust-shell-script/rust-shell-script"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-shell-script"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"快速產生各種licenseRead morehttps://www.reddit.com/r/rust/comments/d6od3i/licensor_write_licenses_to_stdout/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"licensor ： license產生器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Read morehttps://github.com/rust-lang/rust/pull/63931"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"衛生宏即將穩定"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"物理渲染器更新了kd tree 加速LanczosSinc 過濾器ProjectionLight 投射光Mitchell-Netravali 過濾器Read morehttps://www.rs-pbrt.org/blog/v0-7-1-release-notes/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-20 19:29"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rs-pbrt v0.7.1"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这个版本增加了几个新的组合器、work-stealing 算法执行器，以及使用 IntoStream 和 FromStream 的 collect 流的能力。此外，async-attributes 1.0 已经发布，它增加了对 async fn main, #[test] async fn 和 #[bench] async fn 的支持。https://docs.rs/async-attributes/1.0.0/async_attributes/详情查看https://github.com/async-rs/async-std/releases/tag/v0.99.6Reddit 讨论:https://www.reddit.com/r/rust/comments/d6eb4g/asyncstd_v0996_released/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.reddit.com/r/rust/comments/d6eb4g/asyncstd_v0996_released/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-19 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-std v0.99.6 版本更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@_lrlna@twitter 在 RustConf 2019 上做了个演讲，通过使用 rust 编译 webassembly，并提升性能。https://twitter.com/_lrlna内容简要如下：你应该了解到在浏览器中可运行 WebAssembly，但是这看起来像 IRL 吗？为了寻求在浏览器中运行 WASM 所带来的性能优势，Compass(用于 MongoDB 的 GUI)迈出了一大步，在 Rust 中重写了应用程序的一部分——一个负责文档分析的模式解析器。事实证明：将应用程序的某些部分使用 Rust 重写会使它更快。在这次演讲中，将介绍如何将部分代码从 JavaScript 转换为 Rust，通过绑定 Electron，将 WASM 添加到现有的 React 应用程序中，并将其部署到生产环境中。因为 Compass 仍然通过 Nodejs 与 MongoDB 通信。此外还介绍了如何使用 Rust 在不丢失数据完整性的情况下提高性能。演讲过程中还包含了我们遇到了什么难题以及如何克服的。演讲视频地址：https://www.youtube.com/watch?v=lLzFJenzBng&feature=youtu.be"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-19 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用 rust 去编译 WebAssembly"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在Rust的标准版本中，ARM64 iOS目标中的位代码通常与 Xcode 不兼容，因为它们使用不同版本的LLVM。这是一个众所周知的问题，目前还没有明确的长期解决方案。这个存储库包含用于构建和安装自定义 Rust nightly 的脚本，其中 Rust 编译器版本的 LLVM 与 Xcode 匹配。使用此工具链构建的软件可以包含在支持位码的应用程序中，这些应用程序将安装在真正的 iOS 设备上。了解更多请看：https://github.com/getditto/rust-bitcode"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-19 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Xcode 的 rust 工具链 - rust-bitcode"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"演讲介绍了编写运行微控制器的 Rust 技巧，并调查已经现有生态系统中可用的优秀嵌入式Rust项目。如果您的物联网项目在 ARM 或 MSP430 上，那么它已经在 Rust 编译器中获得了本地支持，AVR和RISC-V也有可用的编译器分支。但是架构支持只是第一个挑战:如果您习惯于为运行操作系统的主机编写Rust，那么在嵌入式世界中必须自己完成所有工作的范式转换可能会很不协调。更多请原文视频地址：https://morioh.com/p/73aac331a451\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-19 23:57"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 在物联网（IoT）的应用"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"string-and-andstr-in-rust:https://github.com/jeenalee/zines/blob/master/string-and-andstr-in-rust.pdf"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/jeenalee/zines/blob/master/string-and-andstr-in-rust.pdf"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-18 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过漫画介绍 String 和 &Str 的区别"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"是一个用命令行进行交互的游戏，通过寻找足够的食物、水和资源让自己存活的更久。live-rust:https://nuria.itch.io/live-rust"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://nuria.itch.io/live-rust"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-18 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Live - 一个用 Rust 开发的基于文本的小游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"zhanglianghui"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"以前如果用户在 nightly 版本安装了最近的 nightly 版本无法使用的组件，那么 rustup update 根本不会更新用户的 nightly 组件。有了这个补丁，rustup 将逐步尝试更老的 nightly 应用程序，直到找到一个支持用户为当前 nightly 应用程序安装的所有组件的 nightly 应用程序。Read morehttps://github.com/rust-lang/rustup.rs/pull/1997\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-18 22:00"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"更新到最新可行的 nightly 版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"LacneQin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rants是一个使用 async / await 语法和新的异步生态系统的异步NATS客户端库。https://github.com/davidMcneil/rants配置直接处理消息的NATS客户端协议基础设施（与低级解析细节相反）十分的简单。此库的作者曾经用nom编写过底层解析器并将其集成到一个自定义的 tokio::codec::Decoder中。新的编解码器提供了一个用于处理来自NATS服务器的所有传入消息的高级流。https://nats-io.github.io/docs/nats_protocol/nats-protocol.html更多信息前往GitHub。https://github.com/davidMcneil/rantsHi Rustaceans，LDN Meetup将于9月24日在伦敦举行。参与详情请点击：https://www.meetup.com/Rust-London-User-Group/events/264890481/attendees/Babylon Health为现场提供的比萨和啤酒，期待在那里见到你们。wasm-bindgen是一个Rust库和CLI工具，它促进了wasm模块和JavaScript之间的高级交互。wasm-bindgen 工具和库都是Rust和WebAssembly生态系统的一部分。https://rustwasm.github.io/wasm-bindgen工具有点半填充性质，用于主机绑定等功能，以及用于增强JS和wasm编译代码（目前主要来自Rust）之间高级交互的部分功能。更具体地说，这个项目能让JS / wasm与字符串、JS对象、类等事物之间进行通信，而不是纯粹的传递整数和浮点数。https://github.com/WebAssembly/host-bindings点击这里了解更多。https://rustwasm.github.io/docs/wasm-bindgen/经过一系列实验，这已经是一个很好的模板，下面我们就开始用它来补全自定义错误类型的上下文。首先，我们使用单个方法定义特征，err_with：并实例化一个Result，用Err有效负载的元组和附加值替换有效负载：然后，我们可以使用From实现我们的自定义错误类型，不同的元组类型映射到不同的错误变体。这是一个自定义错误类型，其中包含一个Io变量，io::Error以及发生错误的路径：From impl 将(io::Error, impl AsRef<Path>)转化为 Error::Io:我们可以用来.err_with(path)?为我们的错误补全上下文，并将它们转换为我们的自定义错误类型作为结果：playground上的代码链接。https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=580f4f24aa17cb89ab1bd4e42ac17cc7在GitHub上了解更多。https://github.com/casey/err-with\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.meetup.com/Rust-London-User-Group/events/264890481/attendees/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-17 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"几个星期前，我获得了GitHub CI / CD平台的测试版访问权限。 我的Rust项目之前主要使用的Travis CI，最近开始迁移到Azure Pipelines，但现在可以考虑转向Github Actions了。与Azure one相比，它配置的语法更友好一些，有Linux、macOS和Windows环境可用(几乎兼容主流平台)，与其它GitHub组件的集成度也高一些。但对于我来说最重要的是可以创建在CI工作流中执行的动作自定义任务。跟平常Rust CI操作类似为Rust项目创建一个良好的CI工作流，需要做以下事情我从自己项目的Azure Pipeline配置中复制了所有相同的脚本，在我的项目之间以某种方式复用它们，但是现在我很高兴这些配置能够运用到GitHub Actions上下面都是一些配置和解释了，我就不在这里翻译了，感兴趣的可以直接阅读原文Read More：https://svartalf.info/posts/2019-09-16-github-actions-for-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://svartalf.info/posts/2019-09-16-github-actions-for-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-16 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的GitHub Actions分享"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个建立在image和imageproc之上的命令行图像处理工具。看几个用例：最简单的用法是加载一个图像，然后保存它的相同副本。可以为输出图像指定不同的格式例如，下面的命令将图像转换为灰度还有更多的操作，感兴趣的大家可以去仓库瞧瞧Repo：https://github.com/theotherphil/imagecli"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/theotherphil/imagecli"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-16 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ImageCli - 一个纯Rust图像处理命令行工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这篇文章主要介绍了作者在绘制散热模拟图像时，如何不选择C++从而选择使用了Rust的历程，并在文中放出了相应的代码和成果，感兴趣的小伙伴可以仔细阅读一下这篇文章Read More：https://tejqunair.com/posts/rust-heat/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://tejqunair.com/posts/rust-heat/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-16 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"通过模拟散热来学习Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Templar既是一个Rust库，也是一个CLI工具，用于处理模板。其用法和风格都受到了Jinja2和Ansible的启发，尽管它并不是这两种方法的克隆。该项目的目标是提供快速和灵活的动态模板，特别是用于配置和本地工具。例如，一个简单的模板可能是这样的除了简单的替换之外，还可以使用更复杂的表达式。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-16 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"templar - 动态模板框架"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"这是一个用Rust编写的Bitwarden server API实现，与上游的Bitwarden客户机兼容，非常适合在运行官方资源密集型服务可能并不理想的情况下进行自托管部署。Repo：https://github.com/dani-garcia/bitwarden_rs\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/dani-garcia/bitwarden_rs"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-16 21:53"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"bitwarden_rs - 非官方的Bitwarden服务器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #doc本书试图提炼Rust社区对Rust宏的知识集，目前还在完善中，欢迎添加PR和issue。Read Morehttps://danielkeep.github.io/tlborm/book/README.html"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-15 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust 宏之书"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #docRust Forge用作对Rust编程语言成员有用的补充文档的存储库。如果发现任何错误，拼写错误或想要添加到Rust Forge，可以在Rust Forge GitHub上提交问题或PR。Read Morehttps://forge.rust-lang.org/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-15 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust Forge — Rust官方补充文档存储库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#wasm #rustHTTPS Everywhere 是一个浏览器插件，可以将网站非HTTP请求强制为HTTPS请求，对互联网安全做了很多贡献。早起版本有内存占用过大，自带规则不完善，强制第三方资源使用HTTPS，影响资源加载等问题。现在它使用了WebAssembly，性能更好了。随着来自带规则的不断完善，变得更好用了。Read Morehttps://www.eff.org/https-everywhere"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-15 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"HTTPS Everywhere 使用WebAssembly提升性能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"makeco"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#rust #wasmMarchingCubes(MC)算法是面绘制算法中的经典算法，它是W.Lorensen等人于1987年提出来的一种体素级重建方法。MC算法也被称为“等值面提取”(IsosurfaceExtraction)算法。Will Usher 使用wasm实现了MC算法，使用WebGL绘制，比使用纯Javascript实现速度快了了10-20倍，可以点击下面的链接看看。https://twitter.com/_wusherRepohttps://github.com/Twinklebear/webgl-marching-cubesRead Morehttps://www.willusher.io/webgl-marching-cubes/#Bonsai\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-15 22:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用WebAssembly实现经典的Marching cubes算法"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"LacneQin"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Meetup以对pcwalton :p的特写开场，并包含了两个内容：\nJane Lusby讨论了他对rust的一些建议\nAdam Perry与大家交流了rust的UI和Moxie框架\nMeetup视频已上传至YouTube。https://www.youtube.com/watch?v=QKbdBwjra5o&t=39m42sZstandard算法是一个无损压缩数据的格式，该格式独立于CPU类型、操作系统、文件系统和字符集，适用于文件压缩、通道和流压缩。http://facebook.github.io/zstd/即使对于任意长的顺序呈现的输入数据流，也可以仅使用有限量的先验中间存储来产生或减少数据，因此可以用于数据通信。该压缩格式使用Zstandard压缩方法并使用xxHash-64校验方法（可选）来检测数据损坏。http://www.xxhash.org/以Zstandard定义的数据格式不会允许随机访问压缩数据。兼容的解压器必须能够解压缩至少一个符合此处提供的规范的工作参数集。它也可能会忽略例如校验和之类的信息字段。只要它不支持压缩流中定义的参数，它就必须产生一个非模糊的错误代码和相关的错误消息，说明那个参数不受支持。目前此rust工程已经能够做到：更多信息可以前往GitHub上浏览。https://github.com/KillingSpark/zstd-rs这里有一个trait：以及一些实现该trait的类型：这些特征对象通常以两种方式在集合中结尾：想要一个可以对这个特征对象的泛型集合进行操作的函数，但将迭代器作为参数传递是否是一个正确的方法呢？如何编写一个可以使用I类型的Iterator的单个函数？有更好的方法吗？下列代码解决了上述问题，且未添加任何trait的实现。通常最好使用Get自动地为所有引用类型实现trail，这样就不需要对其所有函数普遍操作。Read More：Reddit原帖链接https://www.reddit.com/r/rust/comments/d3x435/operating_on_collections_of_either_boxed_trait/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-14 22:05"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":""},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在这篇文章中，将从开发人员的角度看到Rust和C / C ++之间的区别最初由Maourice Gonzalez在https://www.onmsft.com上发布C++是一种非常快速和高效的编程语言。 它的多功能性无任何限制，其成熟度确保支持和可靠性是首屈一指的。 用C ++开发的代码也非常便携，所有主流操作系统都支持它。 许多开发人员开始使用该语言进行Coding，这并非巧合。 面向对象意味着它在，类，继承，抽象，封装和多态等概念方面做得非常好,它的概念和语法都能在现代语言中找到，如C＃，Java和Rust。 它提供了一个很好的基础，可以提供更高速度，更易于使用和更现代的替代方案。现在它并不都是美好的， C++有一个非常陡峭的学习曲线，需要开发人员将最佳实践应用到程序中，否则最终会导致不安全或性能不佳的代码，标准库的体积很小，虽然大多数时候被认为是一个好处同时也增加了难度。 这意味着成功使用C++创建有用的复杂库和应用程序可能具有挑战性。 在内存管理方面几乎没有提供什么帮助，开发人员必须自己做。 由于缺乏经验会导致内存安全问题和其他棘手的情况，新手程序员最终可能会遇到调试噩梦。 最后一点引导许多公司探索快速，安全且同样强大的C++替代品，对今天的微软来说，那个东西就是rust修复了大多数漏洞且分配了CVE [常见漏洞和暴露]的漏洞是由开发人员无意导致内存安全问题，系C和C++中的代码所引起的 - Gavin Thomas，Microsoft安全响应中心Rust在2006年的某个时候由一位名叫Graydon Hoare的Mozilla员工开始作为个人项目。这个雄心勃勃的项目已经在发布前开发了近十年，终于在2015年5月推出了1.0版本。在眨眼之间之间在Stack Overflow开发者调查中，自2016年以来被选为四年来最受欢迎的语言，已经偷走了大批开发者的心。努力工作肯定得到了回报。 最终结果是非常有效的语言，其特征在于面向对象。 事实上，它被设计为在语法上类似于C++，这使得它很容易接近。 但与前面提到的不同，它还被设计为内存安全，同时还采用了一种新型的内存管理形式，而没有明确使用垃圾收集。丑陋的事实是软件开发是一个试错法（哈哈哈，玄学问题请重启）。Rust已经超越了帮助我们调试我们的代码。 编译器可生成非常直观且用户友好的错误消息，并可直接链接到相关文档以帮助进行故障排除。 这意味着如果问题不明显，大多数时候答案是点击一下。 我发现自己很少需要启动浏览器来寻找Rust编译器在解释和文档方面提供的解决方案之外的解决方案。Rust没有垃圾收集器，但大多数时候仍为您分配和释放内存。 它也被设计为内存安全，与C++不同，C++很容易让您在悬挂指针和数据竞争时遇到麻烦。 相比之下，Rust采用了可以帮助您预防和避免此类问题的概念。还有许多其他因素使我从C++转向Rust。 但说实话，它与我们刚刚探索过的所有伟大的东西毫无关系。 我从WebAssembly开始的旅程中来到了Rust。 从我开始寻找一种更有效的网络JavaScript替代方案开始变成了确定Rust的强大功能。 从它的无缝互操作......在Rust，WebAssembly和JavaScript API之间自动生成绑定代码。 利用像web-sys这样的库，为整个Web平台提供预打包的绑定。 - rust website它的性能有多快和可预测。 我们生活中的一切都在发展。 我们的智能手机，汽车，家用电器，自己的身体。 C ++虽然仍然非常强大，快速和多功能只能带我们到目前为止。 在探索替代方案方面没有任何害处，特别是那些与Rust相比具有特殊性和承诺的替代方案。Read More: https://morioh.com/p/95c294659991"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://morioh.com/p/95c294659991"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-13 12:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"C/C++ vs Rust：开发人员的观点（译）"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"async-std外观和感觉像是Rust标准库，一切如你所期待使用async/await的工作方式一样。该版本主要更新内容如下：\n增加了io::timeout的测试\n增加了fs::create_dir_all\n增加了io::prelude\n增加了stream::Stream::all\n增加了stream::Stream::filter_map\n增加了stream::Stream::find_map\n.....\nRepo：https://github.com/async-rs/async-std"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/async-rs/async-std"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-13 12:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"async-std v0.99.5 - Rust异步标准库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"本演讲将集中讨论pyo3和milksnake，这两个流行的库提供了非常不同的编写Rust扩展的方法; 它将涵盖对库的基本介绍，并比较它们的相对优势和劣势。Read More: https://morioh.com/p/14b736e8b8de"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://morioh.com/p/14b736e8b8de"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-13 12:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"使用Rust构建Python扩展"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"yuequan1997"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在2019-08-14的Rust Melbourne，David Cristofaro给了我们一个关于WebAssembly的介绍Read More: https://www.youtube.com/watch?v=WONGc1zUxtc\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.youtube.com/watch?v=WONGc1zUxtc"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-13 12:26"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust的WebAssembly简介，来自Rust Melbourne的演讲"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"摘要：我们是工程系统团队，该团队为构建Windows 10核心的Microsoft开发人员提供服务。我们希望我们的开发人员能够高效工作，使用合适的工具来构建高质量和安全的产品。 我们的开发人员必须有权控制遗产，而不是受其束缚。要求：所需资格：\n10年以上，开发系统级大型软件代码库的经验\n\n对C++有深刻理解\n\n出色的分析能力和与技术人员沟通的能力\n加分项：\n有设计和处理健壮的安全边界的经验，比如虚拟化平台\n\n具有安全系统编程语言的经验，例如Rust。\n\n其他\n详情看微软招聘：https://careers.microsoft.com/us/en/job/701993/Principle-Software-Engineer附 reddit 讨论：https://www.reddit.com/r/rust/comments/d2tbyx/microsoft_hiring_for_role_to_help_push_for_rust/附 twitter 上的讨论：https://twitter.com/ryan_levick/status/1171830191804551168"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-12 19:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"微软招聘首席软件工程师 - 推动 Windows 系统采用 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"@Pietro Albini：终于有时间从 @rustlang CDNs 获得一些统计数据:上个月，我们处理了超过 1.25 亿次请求，提供了近 200 TB 的编译器和 11 TB 的库数据！https://twitter.com/pietroalbini很高兴看到周末的访问流量下降，这表明企业的认可度提高了！Read morehttps://twitter.com/rustlang"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-12 19:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"rust-lang.org 访问数据：rust 正被更多的企业认可"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个与渲染器无关的 GUI 库，专注于简单性和类型安全。演示效果：该库有一下特性：\n简单，易于使用，渲染器无关的 API\nflexbox-based 布局\n类型安全，反应性编程模型\n内置的小部件\n自定义小部件支持\nRead more:https://github.com/hecrj/iced"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/hecrj/iced"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-12 19:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"GUI 库：iced"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Jancd"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"#golang#rust@damienstanton: 朋友们，在即将到来的 Go meetup 上，我要做一个非正统的演讲，主题是：以 golang 的角度理解 rust。https://twitter.com/damienstanton有哪些有趣的 golang 惯用习语/模式/抱怨 是你想在 rust 方面得到解释的？欢迎参与讨论:https://twitter.com/damienstanton/status/1171843816061624331\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-12 19:28"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"以 golang 的角度理解 rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"根据 StackOverflow 上的数据进行统计。结果如下：Read More: https://www.techrepublic.com/article/the-rising-programming-languages-that-javascript-developers-are-learning-in-2019/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://www.techrepublic.com/article/the-rising-programming-languages-that-javascript-developers-are-learning-in-2019/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"2019 年 Javascript 程序员最想学的语言有哪些？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"又是个新名词，查了一下，侵入式集合是这样一个东西：In the words of the intrusive-collections crate : The main difference between an intrusive collection and a normal one is that while normal collections allocate memory behind your back to keep track of a set of values, intrusive collections never allocate memory themselves and instead keep track of a set of objects.这个库提供的原语有下面这些：\nChannels in a variety of flavors:\n\nOneshot\nMulti-Producer Multi-Consumer (MPMC)\nState Broadcast\n\n\nSynchronization Primitives:\n\nManual Reset Event\nMutex\nSemaphore\n\n\nA timer\n\nOneshot\nMulti-Producer Multi-Consumer (MPMC)\nState Broadcast\n\nManual Reset Event\nMutex\nSemaphore\nRepo: https://github.com/Matthias247/futures-intrusive"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Matthias247/futures-intrusive"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"futures-intrusive - 为基于 async/await 和 Future 的异步生态提供了一些 intrusive 集合同步原语"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"作者还是个大学生，折腾了不少嵌入式方面的东西，最近用 rustc 为他自己做了一块智能手表。现在把他在 ESP32 上折腾 Rust 的经历和经验记录下来。Read More: https://mabez.dev/blog/posts/esp32-rust/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://mabez.dev/blog/posts/esp32-rust/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"ESP32 上的 Rust"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"看一下效果不得不指出，Rust 强大的 4 种宏，可以玩出远远超越之前 C/C++ 宏的效果，发挥想象吧。Repo: https://github.com/calebzulawski/multiversion"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/calebzulawski/multiversion"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"multiversion - 可以为同一个函数针对不同的平台或条件，指定不同的版本"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"发布 0.2 版了。Cloud Hypervisor is an open source Virtual Machine Monitor (VMM) that runs on top of KVM. The project focuses on exclusively running modern, cloud workloads, on top of a limited set of hardware architectures and platforms.Repo: https://github.com/intel/cloud-hypervisor另外还有一个姐妹项目：rust-hypervisor-firmwarehttps://github.com/intel/rust-hypervisor-firmware它是一个 KVM 的固件。目前，它们都还处于实验性的阶段。"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/intel/cloud-hypervisor"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Cloud Hypervisor - Intel 旗下的虚拟机监视器"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"vxdraw is a rendering library for drawing sprites, text, and streaming textures to a window. It is not an engine, just a library, and has no runtime.它的特点是为动画优化，能充分利用 GPU 的渲染。Repo: https://github.com/Omen-of-Aecio/vxdraw"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://github.com/Omen-of-Aecio/vxdraw"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"vxdraw - 基于 gfx-hal 的快速 2D 渲染库"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Veloren is a multiplayer voxel RPG written in Rust. It is inspired by games such as Cube World, Legend of Zelda: Breath of the Wild, Dwarf Fortress and Minecraft.哇，看到好多熟悉的名字。感觉自己心动了。Repo: https://veloren.net/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://veloren.net/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Veloren - 一个多从砖块 RPG 游戏"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"Mike Tang"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"一个字，美！酷！Website: https://jaredforsyth.com/veoluz/\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":"https://jaredforsyth.com/veoluz/"},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-11 23:39"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"VeoLuz - 光与影，万花筒艺术创作工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Rustup工作组很高兴地宣布发布Rustup 1.19.0。可以从通常的地方或通过运行rustup self update来获取更新它。https://rustup.rs/这个版本的rustup进行了以下改进：\n管道pipeline，启用全线程IO以进行安装，这有望实现更快的解包速度。\n缓解了一些病毒扫描程序的状况\n......\n详细信息可以在changelog中找到。https://github.com/rust-lang/rustup.rs/tree/master/CHANGELOG.md"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-10 10:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rustup 1.19.0 发布"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"在Eclipse Corrosion中支持Rust应用程序开发。详细信息https://marketplace.eclipse.org/content/corrosion-rust-edition-eclipse-ide"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-10 10:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Eclipse IDE支持Rust开发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"详细信息参见博客。https://os.phil-opp.com/status-update/2019-09-09/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-10 10:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"Rust编写操作系统，8月更新"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"通常，当你运行Futures时，你可以通过以下三种方式之一调度它们：\n运行一个future，并等待它完成。\n运行多个futures，并等待所有完成。\n运行多个futures，并等待第一个完成。\n第一种调度方式是“顺序”的，后两种调度方法是“并发”的，并且具有细微的差别。在这篇文章中，讨论了Rust中fallible和infallible异步并发的挑战，将其与两种不同语言的方法进行了比较，并通过一个模型涵盖了所有案例。博客原文https://blog.yoshuawuyts.com/futures-concurrency/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-10 10:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"博客文章：Futures并发"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"洋芋"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"Tectonic是用C语言实现的，一款现代化，完整，独立的TeX/LaTeX引擎，由XeTeX和TeXLive提供支持。CrLF0710正在用 c2rust 工具移植它。项目Githubhttps://c2rust.com/https://rust.cc/section?id=ce0fe0fb-1ac6-413a-b535-59e4a8e74b6c\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-10 10:55"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"用Rust移植Tectonic"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"angr 是樓主寫的一個程式，功能是記錄使用者花在每個程式的時間最近樓主覺得這個程式跑的太慢了想來加速一下發現這個程式會讓你在執行任何命令前先花個0.22秒做記錄其實這個程式並不是真的需要更快，樓主主要用這個程式在手機上記錄他手機執行各種程式的時間。一開始他決定使用 cargo-profiler他發現大部份時間用在記憶體配置，且很可能是在BTreeMap裡然後再用 Linux perf 跑看看，發現分析結果與 cargo-profiler 相同再用火焰圖跑看看發現augr只是因為需要加載的檔案變多而變慢！在這一點上，樓主決定花點時間調查問題來修復它。他添加了一些代碼來追踪加載時間，這時的樓主想了很多方法要來優化檔案加載數量過多的問題。在進行了一些更麻煩的調查後，樓主確定程式的大部分時間都在執行，而不是加載文件。最後他發現了主要原因在 clone ，樓主很大量的使用了clone在做了必要的改動，減少了大量的clone之後，效能得到了提升優化到了 0.02 秒！剖析性能很有趣！ 在這種情況下，只需進行兩個簡單的更改並獲得10倍的改進。本來樓主認為需要各種瘋狂的緩存系統才能讓augr更快。 但並不需要那樣的東西！Read morehttps://geemili.xyz/blog/profiling-augr/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-09 17:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"剖析 angr 的效能"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"可以更智慧的送交gitRead morehttps://github.com/brigand/glint"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-09 17:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"glint 用Rust編寫的commit 提示工具"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"樓主對unicode與emoji的字串長度做了深度討論首先比較不同語言得到的長度原因是 UTF-32 UTF-16 UTF-8 所造成的Read morehttps://hsivonen.fi/string-length/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-09 17:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"為什麼 \"🤦🏼‍♂️\".length == 7 會對"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"這個問題在reddit蠻多人討論的，所以也列一下大多數Rust開發人員都是先學習了其他語言Rust將很多語言的概念結合在一起，當你知道其他語言中存在的問題時，這些概念很有意義。但這是因為Rust不是我們第一個學的語言每個語言有自己擅長的特點，Rust的確不好學習大部份的初學者如果不要挫折感太重，還是建議從腳本語言開始 ex. javascript, python, luaRead morehttps://www.reddit.com/r/rust/comments/d1av40/is_it_crazy_to_learn_rust_as_a_first_programming/"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-09 17:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"將Rust作為第一個學習的編程語言是否太狂了？"},"type":"text"}],"type":"title"}},{"Author":{"rich_text":[{"text":{"content":"damody"},"type":"text"}],"type":"rich_text"},"Intro":{"rich_text":[{"text":{"content":"GCC 的開發者 Jacob Lifshay，覺得用Rust的程式取代 GCC自己的C是一個可行的方向過去有@redbrain的寫過的gccrs 18是rust 1.0，但已經太舊了如果有開發者願意幫忙，請聯絡 Stallman這是一個Rust影響GCC的好機會有實力又有興趣的大佬可以參考Read morehttps://users.rust-lang.org/t/call-for-help-implementing-an-independent-rust-frontend-for-gcc/32163\nTelgram Channel\n阿里云语雀订阅\nSteemit\nGitHub\n"},"type":"text"}],"type":"rich_text"},"Link":{"rich_text":[{"text":{"content":""},"type":"text"}],"type":"rich_text"},"Time":{"rich_text":[{"text":{"content":"2019-09-09 17:46"},"type":"text"}],"type":"rich_text"},"Title":{"title":[{"text":{"content":"有沒有人願意幫Rust實現一個GCC的前端實作？"},"type":"text"}],"type":"title"}},]
